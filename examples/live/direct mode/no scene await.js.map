{
  "version": 3,
  "sources": ["../../../../phaser-genesis/src/config/ConfigStore.ts", "../../../../phaser-genesis/src/dom/GetElement.ts", "../../../../phaser-genesis/src/math/pow2/IsSizePowerOfTwo.ts", "../../../../phaser-genesis/src/colormatrix/consts.ts", "../../../../phaser-genesis/node_modules/bitecs/src/Storage.js", "../../../../phaser-genesis/node_modules/bitecs/src/Util.js", "../../../../phaser-genesis/node_modules/bitecs/src/Serialize.js", "../../../../phaser-genesis/node_modules/bitecs/src/Entity.js", "../../../../phaser-genesis/node_modules/bitecs/src/Query.js", "../../../../phaser-genesis/node_modules/bitecs/src/Component.js", "../../../../phaser-genesis/node_modules/bitecs/src/World.js", "../../../../phaser-genesis/node_modules/bitecs/src/System.js", "../../../../phaser-genesis/node_modules/bitecs/src/index.js", "../../../../phaser-genesis/src/components/color/ColorComponent.ts", "../../../../phaser-genesis/src/GameObjectWorld.ts", "../../../../phaser-genesis/src/components/vertices/QuadVertexComponent.ts", "../../../../phaser-genesis/src/components/vertices/SetQuadPosition.ts", "../../../../phaser-genesis/src/components/bounds/BoundsComponent.ts", "../../../../phaser-genesis/src/components/transform/Extent2DComponent.ts", "../../../../phaser-genesis/src/components/transform/WorldMatrix2DComponent.ts", "../../../../phaser-genesis/src/components/vertices/UpdateVertexPositionSystem.ts", "../../../../phaser-genesis/src/components/vertices/SetQuadColor.ts", "../../../../phaser-genesis/src/components/color/PackQuadColorsSystem.ts", "../../../../phaser-genesis/src/components/dirty/DirtyComponent.ts", "../../../../phaser-genesis/src/components/dirty/SetDirtyChildCache.ts", "../../../../phaser-genesis/src/components/dirty/SetDirtyDisplayList.ts", "../../../../phaser-genesis/src/components/hierarchy/HierarchyComponent.ts", "../../../../phaser-genesis/src/gameobjects/GameObjectCache.ts", "../../../../phaser-genesis/src/components/permissions/PermissionsComponent.ts", "../../../../phaser-genesis/src/components/permissions/WillCacheChildren.ts", "../../../../phaser-genesis/src/components/transform/LocalMatrix2DComponent.ts", "../../../../phaser-genesis/src/components/transform/Transform2DComponent.ts", "../../../../phaser-genesis/src/gameobjects/DIRTY_CONST.ts", "../../../../phaser-genesis/src/components/transform/UpdateLocalTransform2DSystem.ts", "../../../../phaser-genesis/src/components/transform/CopyLocalToWorld.ts", "../../../../phaser-genesis/src/components/transform/CopyWorldToWorld.ts", "../../../../phaser-genesis/src/components/transform/MultiplyLocalWithWorld.ts", "../../../../phaser-genesis/src/components/permissions/WillTransformChildren.ts", "../../../../phaser-genesis/src/components/transform/UpdateWorldTransform2DSystem.ts", "../../../../phaser-genesis/src/renderer/webgl1/draw/GetQuadBuffer.ts", "../../../../phaser-genesis/src/renderer/webgl1/draw/BatchQuad.ts", "../../../../phaser-genesis/src/renderer/webgl1/draw/BatchTexturedQuad.ts", "../../../../phaser-genesis/src/renderer/webgl1/draw/GetTriBuffer.ts", "../../../../phaser-genesis/src/renderer/webgl1/draw/BatchTriangle.ts", "../../../../phaser-genesis/src/math/angle/AngleBetween.ts", "../../../../phaser-genesis/src/math/angle/AngleBetweenY.ts", "../../../../phaser-genesis/src/math/const.ts", "../../../../phaser-genesis/src/math/angle/CounterClockwise.ts", "../../../../phaser-genesis/src/math/angle/NormalizeAngle.ts", "../../../../phaser-genesis/src/math/angle/ReverseAngle.ts", "../../../../phaser-genesis/src/math/angle/RotateAngleTo.ts", "../../../../phaser-genesis/src/math/angle/ShortestAngleBetween.ts", "../../../../phaser-genesis/src/math/Wrap.ts", "../../../../phaser-genesis/src/math/angle/WrapAngle.ts", "../../../../phaser-genesis/src/math/angle/WrapAngleDegrees.ts", "../../../../phaser-genesis/src/math/angle/index.ts", "../../../../phaser-genesis/src/math/easing/back/In.ts", "../../../../phaser-genesis/src/math/easing/back/InOut.ts", "../../../../phaser-genesis/src/math/easing/back/Out.ts", "../../../../phaser-genesis/src/math/easing/bounce/In.ts", "../../../../phaser-genesis/src/math/easing/bounce/InOut.ts", "../../../../phaser-genesis/src/math/easing/bounce/Out.ts", "../../../../phaser-genesis/src/math/easing/circular/In.ts", "../../../../phaser-genesis/src/math/easing/circular/InOut.ts", "../../../../phaser-genesis/src/math/easing/circular/Out.ts", "../../../../phaser-genesis/src/math/easing/cubic/In.ts", "../../../../phaser-genesis/src/math/easing/cubic/InOut.ts", "../../../../phaser-genesis/src/math/easing/cubic/Out.ts", "../../../../phaser-genesis/src/math/easing/elastic/In.ts", "../../../../phaser-genesis/src/math/easing/elastic/InOut.ts", "../../../../phaser-genesis/src/math/easing/elastic/Out.ts", "../../../../phaser-genesis/src/math/easing/expo/In.ts", "../../../../phaser-genesis/src/math/easing/expo/InOut.ts", "../../../../phaser-genesis/src/math/easing/expo/Out.ts", "../../../../phaser-genesis/src/math/easing/quadratic/In.ts", "../../../../phaser-genesis/src/math/easing/quadratic/InOut.ts", "../../../../phaser-genesis/src/math/easing/quadratic/Out.ts", "../../../../phaser-genesis/src/math/easing/quartic/In.ts", "../../../../phaser-genesis/src/math/easing/quartic/InOut.ts", "../../../../phaser-genesis/src/math/easing/quartic/Out.ts", "../../../../phaser-genesis/src/math/easing/quintic/In.ts", "../../../../phaser-genesis/src/math/easing/quintic/InOut.ts", "../../../../phaser-genesis/src/math/easing/quintic/Out.ts", "../../../../phaser-genesis/src/math/easing/sine/In.ts", "../../../../phaser-genesis/src/math/easing/sine/InOut.ts", "../../../../phaser-genesis/src/math/easing/sine/Out.ts", "../../../../phaser-genesis/src/math/easing/Linear.ts", "../../../../phaser-genesis/src/math/easing/Stepped.ts", "../../../../phaser-genesis/src/math/easing/GetEase.ts", "../../../../phaser-genesis/src/math/fuzzy/FuzzyCeil.ts", "../../../../phaser-genesis/src/math/fuzzy/FuzzyEqual.ts", "../../../../phaser-genesis/src/math/fuzzy/FuzzyFloor.ts", "../../../../phaser-genesis/src/math/fuzzy/FuzzyGreaterThan.ts", "../../../../phaser-genesis/src/math/fuzzy/FuzzyLessThan.ts", "../../../../phaser-genesis/src/math/fuzzy/index.ts", "../../../../phaser-genesis/src/math/Factorial.ts", "../../../../phaser-genesis/src/math/Bernstein.ts", "../../../../phaser-genesis/src/math/interpolation/BezierInterpolation.ts", "../../../../phaser-genesis/src/math/interpolation/CatmullRomInterpolation.ts", "../../../../phaser-genesis/src/math/interpolation/CubicBezierInterpolation.ts", "../../../../phaser-genesis/src/math/Linear.ts", "../../../../phaser-genesis/src/math/interpolation/LinearInterpolation.ts", "../../../../phaser-genesis/src/math/interpolation/QuadraticBezierInterpolation.ts", "../../../../phaser-genesis/src/math/SmoothStep.ts", "../../../../phaser-genesis/src/math/interpolation/SmoothStepInterpolation.ts", "../../../../phaser-genesis/src/math/SmootherStep.ts", "../../../../phaser-genesis/src/math/interpolation/SmootherStepInterpolation.ts", "../../../../phaser-genesis/src/math/interpolation/index.ts", "../../../../phaser-genesis/src/utils/array/matrix/CheckMatrix.ts", "../../../../phaser-genesis/src/utils/array/matrix/MatrixToString.ts", "../../../../phaser-genesis/src/utils/array/matrix/ReverseColumns.ts", "../../../../phaser-genesis/src/utils/array/matrix/ReverseRows.ts", "../../../../phaser-genesis/src/utils/array/matrix/TransposeMatrix.ts", "../../../../phaser-genesis/src/utils/array/matrix/RotateMatrix.ts", "../../../../phaser-genesis/src/utils/array/matrix/Rotate180.ts", "../../../../phaser-genesis/src/utils/array/matrix/RotateLeft.ts", "../../../../phaser-genesis/src/utils/array/matrix/RotateRight.ts", "../../../../phaser-genesis/src/utils/array/NumberArray.ts", "../../../../phaser-genesis/src/math/RoundAwayFromZero.ts", "../../../../phaser-genesis/src/utils/array/NumberArrayStep.ts", "../../../../phaser-genesis/src/utils/base64/ArrayBufferToBase64.ts", "../../../../phaser-genesis/src/utils/base64/Base64ToArrayBuffer.ts", "../../../../phaser-genesis/src/utils/string/RemoveAt.ts", "../../../../phaser-genesis/src/utils/string/Reverse.ts", "../../../../phaser-genesis/src/utils/string/UppercaseFirst.ts", "../../../../phaser-genesis/src/utils/NOOP.ts", "../../../../phaser-genesis/src/math/mat4/Matrix4.ts", "../../../../phaser-genesis/src/math/vec3/Vec3.ts", "../../../../phaser-genesis/src/math/pow2/GetPowerOfTwo.ts", "../../../../phaser-genesis/src/math/pow2/IsValuePowerOfTwo.ts", "../../../../phaser-genesis/src/math/Clamp.ts", "../../../../phaser-genesis/src/math/vec3/Vec3Backward.ts", "../../../../phaser-genesis/src/math/vec3/Vec3Down.ts", "../../../../phaser-genesis/src/math/vec3/Vec3Forward.ts", "../../../../phaser-genesis/src/math/vec3/Vec3Left.ts", "../../../../phaser-genesis/src/math/vec3/Vec3Right.ts", "../../../../phaser-genesis/src/math/vec3/Vec3Up.ts", "../../../../phaser-genesis/src/math/vec3/Vec3Zero.ts", "../../../../phaser-genesis/src/math/vec3/const.ts", "../../../../phaser-genesis/src/math/vec3/Vec3Project.ts", "../../../../phaser-genesis/src/math/vec3/Vec3Unproject.ts", "../../../../phaser-genesis/src/math/snap/SnapCeil.ts", "../../../../phaser-genesis/src/math/snap/SnapFloor.ts", "../../../../phaser-genesis/src/math/snap/SnapTo.ts", "../../../../phaser-genesis/src/math/snap/index.ts", "../../../../phaser-genesis/src/math/Average.ts", "../../../../phaser-genesis/src/math/CeilTo.ts", "../../../../phaser-genesis/src/math/DegToRad.ts", "../../../../phaser-genesis/src/math/Difference.ts", "../../../../phaser-genesis/src/math/FloorTo.ts", "../../../../phaser-genesis/src/math/FromPercent.ts", "../../../../phaser-genesis/src/math/GetSpeed.ts", "../../../../phaser-genesis/src/math/MaxAdd.ts", "../../../../phaser-genesis/src/math/MinSub.ts", "../../../../phaser-genesis/src/math/Percent.ts", "../../../../phaser-genesis/src/math/RadToDeg.ts", "../../../../phaser-genesis/src/math/RoundTo.ts", "../../../../phaser-genesis/src/math/SinCosTableGenerator.ts", "../../../../phaser-genesis/src/math/Within.ts", "../../../../phaser-genesis/src/geom/circle/CircleContains.ts", "../../../../phaser-genesis/src/geom/circle/Circle.ts", "../../../../phaser-genesis/src/geom/circle/CircleContainsPoint.ts", "../../../../phaser-genesis/src/geom/circle/CircleContainsRect.ts", "../../../../phaser-genesis/src/geom/circle/CircleEquals.ts", "../../../../phaser-genesis/src/geom/circle/CloneCircle.ts", "../../../../phaser-genesis/src/geom/circle/CopyCircleFrom.ts", "../../../../phaser-genesis/src/geom/circle/GetCircleArea.ts", "../../../../phaser-genesis/src/geom/rectangle/RectangleContains.ts", "../../../../phaser-genesis/src/geom/rectangle/Rectangle.ts", "../../../../phaser-genesis/src/geom/circle/GetCircleBounds.ts", "../../../../phaser-genesis/src/geom/circle/GetCircleCircumference.ts", "../../../../phaser-genesis/src/geom/circle/GetCircleCircumferencePoint.ts", "../../../../phaser-genesis/src/geom/circle/GetCirclePoint.ts", "../../../../phaser-genesis/src/geom/circle/GetCirclePoints.ts", "../../../../phaser-genesis/src/geom/circle/GetCirclePointsBetween.ts", "../../../../phaser-genesis/src/geom/circle/GetCircleRandomPoint.ts", "../../../../phaser-genesis/src/geom/circle/TranslateCircle.ts", "../../../../phaser-genesis/src/geom/circle/TranslateCirclePoint.ts", "../../../../phaser-genesis/src/geom/circle/index.ts", "../../../../phaser-genesis/src/renderer/webgl1/draw/FillArc.ts", "../../../../phaser-genesis/src/gameobjects/GameObjectTree.ts", "../../../../phaser-genesis/src/components/hierarchy/GetParentID.ts", "../../../../phaser-genesis/src/components/hierarchy/GetParents.ts", "../../../../phaser-genesis/src/components/hierarchy/GetWorldID.ts", "../../../../phaser-genesis/src/components/dirty/SetDirtyParents.ts", "../../../../phaser-genesis/src/components/dirty/SetDirtyTransform.ts", "../../../../phaser-genesis/src/renderer/webgl1/shaders/DefaultQuadUniforms.ts", "../../../../phaser-genesis/src/textures/palettes/Arne16.ts", "../../../../phaser-genesis/src/textures/palettes/C64.ts", "../../../../phaser-genesis/src/textures/palettes/CGA.ts", "../../../../phaser-genesis/src/textures/palettes/JMP.ts", "../../../../phaser-genesis/src/textures/palettes/MSX.ts", "../../../../phaser-genesis/src/textures/palettes/PICO8.ts", "../../../../phaser-genesis/src/textures/palettes/index.ts", "../../../../phaser-genesis/src/textures/types/PixelTexture.ts", "../../../../phaser-genesis/src/geom/rectangle/RectangleEquals.ts", "../../../../phaser-genesis/src/world/WorldList.ts", "../../../../phaser-genesis/src/dom/ParseXML.ts", "../../../../phaser-genesis/src/scenes/RenderStatsComponent.ts"],
  "sourcesContent": ["export const ConfigStore = new Map();\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Attempts to get the target DOM element based on the given value, which can be either\r\n * a string, in which case it will be looked-up by ID, or an element node. If nothing\r\n * can be found it will return a reference to the document.body.\r\n *\r\n * @function Phaser.DOM.GetElement\r\n * @since 4.0.0\r\n *\r\n * @param {(string | HTMLElement)} [target] - The DOM element to look-up.\r\n * \r\n * @returns {HTMLElement} The HTML Element that was found.\r\n */\r\nexport function GetElement (target?: string | HTMLElement): HTMLElement\r\n{\r\n    let element: HTMLElement;\r\n\r\n    if (target)\r\n    {\r\n        if (typeof target === 'string')\r\n        {\r\n            //  Hopefully an element ID\r\n            element = document.getElementById(target);\r\n        }\r\n        else if (typeof target === 'object' && target.nodeType === 1)\r\n        {\r\n            //  Quick test for a HTMLElement\r\n            element = target;\r\n        }\r\n    }\r\n\r\n    if (!element)\r\n    {\r\n        element = document.body;\r\n    }\r\n\r\n    return element;\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Checks if the given `width` and `height` are a power of two.\r\n * Useful for checking texture dimensions.\r\n *\r\n * @function Phaser.Math.Pow2.IsSize\r\n * @since 3.0.0\r\n *\r\n * @param {number} width - The width.\r\n * @param {number} height - The height.\r\n *\r\n * @return {boolean} `true` if `width` and `height` are a power of two, otherwise `false`.\r\n */\r\nexport function IsSizePowerOfTwo (width: number, height: number): boolean\r\n{\r\n    if (width < 1 || height < 1)\r\n    {\r\n        return false;\r\n    }\r\n\r\n    return ((width & (width - 1)) === 0) && ((height & (height - 1)) === 0);\r\n}\r\n", "export const DEFAULT_COLOR_MATRIX = new Float32Array([ 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1 ]);\r\nexport const DEFAULT_COLOR_OFFSET = new Float32Array(4);\r\n", "export const TYPES_ENUM = {\r\n  i8: 'i8',\r\n  ui8: 'ui8',\r\n  ui8c: 'ui8c',\r\n  i16: 'i16',\r\n  ui16: 'ui16',\r\n  i32: 'i32',\r\n  ui32: 'ui32',\r\n  f32: 'f32',\r\n  f64: 'f64'\r\n}\r\n\r\nexport const TYPES_NAMES = {\r\n  i8: 'Int8',\r\n  ui8: 'Uint8',\r\n  ui8c: 'Uint8Clamped',\r\n  i16: 'Int16',\r\n  ui16: 'Uint16',\r\n  i32: 'Int32',\r\n  ui32: 'Uint32',\r\n  f32: 'Float32',\r\n  f64: 'Float64'\r\n}\r\n\r\nexport const TYPES = {\r\n  i8: Int8Array,\r\n  ui8: Uint8Array,\r\n  ui8c: Uint8ClampedArray,\r\n  i16: Int16Array,\r\n  ui16: Uint16Array,\r\n  i32: Int32Array,\r\n  ui32: Uint32Array,\r\n  f32: Float32Array,\r\n  f64: Float64Array\r\n}\r\n\r\nconst UNSIGNED_MAX = {\r\n  uint8: 2**8,\r\n  uint16: 2**16,\r\n  uint32: 2**32\r\n}\r\n\r\nconst roundToMultiple4 = x => Math.ceil(x / 4) * 4\r\n\r\nexport const $storeRef = Symbol('storeRef')\r\nexport const $storeSize = Symbol('storeSize')\r\nexport const $storeMaps = Symbol('storeMaps')\r\nexport const $storeFlattened = Symbol('storeFlattened')\r\nexport const $storeBase = Symbol('storeBase')\r\nexport const $storeType = Symbol('storeType')\r\n\r\nexport const $storeArrayCounts = Symbol('storeArrayCount')\r\nexport const $storeSubarrays = Symbol('storeSubarrays')\r\nexport const $storeCursor = Symbol('storeCursor')\r\nexport const $subarrayCursors = Symbol('subarrayCursors')\r\nexport const $subarray = Symbol('subarray')\r\nexport const $subarrayFrom = Symbol('subarrayFrom')\r\nexport const $subarrayTo = Symbol('subarrayTo')\r\nexport const $parentArray = Symbol('subStore')\r\nexport const $tagStore = Symbol('tagStore')\r\n\r\nexport const $queryShadow = Symbol('queryShadow')\r\nexport const $serializeShadow = Symbol('serializeShadow')\r\n\r\nexport const $indexType = Symbol('indexType')\r\nexport const $indexBytes = Symbol('indexBytes')\r\n\r\nconst stores = {}\r\n\r\nexport const resize = (ta, size) => {\r\n  const newBuffer = new ArrayBuffer(size * ta.BYTES_PER_ELEMENT)\r\n  const newTa = new ta.constructor(newBuffer)\r\n  newTa.set(ta, 0)\r\n  return newTa\r\n}\r\n\r\nexport const createShadow = (store, key) => {\r\n  if (!ArrayBuffer.isView(store)) {\r\n    const shadow = store[$parentArray].slice(0).fill(0)\r\n    for (const k in store[key]) {\r\n      const from = store[key][k][$subarrayFrom]\r\n      const to = store[key][k][$subarrayTo]\r\n      store[key][k] = shadow.subarray(from, to)\r\n    }\r\n  } else {\r\n    store[key] = store.slice(0).fill(0)\r\n  }\r\n}\r\n\r\nconst resizeSubarray = (metadata, store, size) => {\r\n  const cursors = metadata[$subarrayCursors]\r\n  const type = store[$storeType]\r\n  const length = store[0].length\r\n  const indexType =\r\n    length <= UNSIGNED_MAX.uint8\r\n      ? 'ui8'\r\n      : length <= UNSIGNED_MAX.uint16\r\n        ? 'ui16'\r\n        : 'ui32'\r\n        \r\n  const arrayCount = metadata[$storeArrayCounts][type]\r\n  const summedLength = Array(arrayCount).fill(0).reduce((a, p) => a + length, 0)\r\n  \r\n  // for threaded impl\r\n  // const summedBytesPerElement = Array(arrayCount).fill(0).reduce((a, p) => a + TYPES[type].BYTES_PER_ELEMENT, 0)\r\n  // const totalBytes = roundToMultiple4(summedBytesPerElement * summedLength * size)\r\n  // const buffer = new ArrayBuffer(totalBytes)\r\n\r\n  const array = new TYPES[type](summedLength * size)\r\n\r\n  array.set(metadata[$storeSubarrays][type])\r\n  \r\n  metadata[$storeSubarrays][type] = array\r\n  createShadow(metadata[$storeSubarrays][type], $queryShadow)\r\n  createShadow(metadata[$storeSubarrays][type], $serializeShadow)\r\n  \r\n  array[$indexType] = TYPES_NAMES[indexType]\r\n  array[$indexBytes] = TYPES[indexType].BYTES_PER_ELEMENT\r\n\r\n  const start = cursors[type]\r\n  let end = 0\r\n  for (let eid = 0; eid < size; eid++) {\r\n    const from = cursors[type] + (eid * length)\r\n    const to = from + length\r\n\r\n    store[eid] = metadata[$storeSubarrays][type].subarray(from, to)\r\n    \r\n    store[eid][$subarrayFrom] = from\r\n    store[eid][$subarrayTo] = to\r\n    store[eid][$queryShadow] = metadata[$storeSubarrays][type][$queryShadow].subarray(from, to)\r\n    store[eid][$serializeShadow] = metadata[$storeSubarrays][type][$serializeShadow].subarray(from, to)\r\n    store[eid][$subarray] = true\r\n    store[eid][$indexType] = array[$indexType]\r\n    store[eid][$indexBytes] = array[$indexBytes]\r\n    \r\n    end = to\r\n  }\r\n\r\n  cursors[type] = end\r\n\r\n  store[$parentArray] = metadata[$storeSubarrays][type].subarray(start, end)\r\n}\r\n\r\nconst resizeRecursive = (metadata, store, size) => {\r\n  Object.keys(store).forEach(key => {\r\n    const ta = store[key]\r\n    if (Array.isArray(ta)) {\r\n      resizeSubarray(metadata, ta, size)\r\n      store[$storeFlattened].push(ta)\r\n    } else if (ArrayBuffer.isView(ta)) {\r\n      store[key] = resize(ta, size)\r\n      store[$storeFlattened].push(store[key])\r\n      store[key][$queryShadow] = resize(ta[$queryShadow], size)\r\n      store[key][$serializeShadow] = resize(ta[$serializeShadow], size)\r\n    } else if (typeof ta === 'object') {\r\n      resizeRecursive(metadata, store[key], size)\r\n    }\r\n  })\r\n}\r\n\r\nexport const resizeStore = (store, size) => {\r\n  if (store[$tagStore]) return\r\n  store[$storeSize] = size\r\n  store[$storeFlattened].length = 0\r\n  Object.keys(store[$subarrayCursors]).forEach(k => {\r\n    store[$subarrayCursors][k] = 0\r\n  })\r\n  resizeRecursive(store, store, size)\r\n}\r\n\r\nexport const resetStore = store => {\r\n  if (store[$storeFlattened]) {\r\n    store[$storeFlattened].forEach(ta => {\r\n      ta.fill(0)\r\n    })\r\n    Object.keys(store[$storeSubarrays]).forEach(key => {\r\n      store[$storeSubarrays][key].fill(0)\r\n    })\r\n  }\r\n}\r\n\r\nexport const resetStoreFor = (store, eid) => {\r\n  if (store[$storeFlattened]) {\r\n    store[$storeFlattened].forEach(ta => {\r\n      if (ArrayBuffer.isView(ta)) ta[eid] = 0\r\n      else ta[eid].fill(0)\r\n    })\r\n  }\r\n}\r\n\r\nconst createTypeStore = (type, length) => {\r\n  const totalBytes = length * TYPES[type].BYTES_PER_ELEMENT\r\n  const buffer = new ArrayBuffer(totalBytes)\r\n  return new TYPES[type](buffer)\r\n}\r\n\r\nexport const parentArray = store => store[$parentArray]\r\n\r\nconst createArrayStore = (metadata, type, length) => {\r\n  const size = metadata[$storeSize]\r\n  const store = Array(size).fill(0)\r\n  store[$storeType] = type\r\n\r\n  const cursors = metadata[$subarrayCursors]\r\n  const indexType =\r\n    length < UNSIGNED_MAX.uint8\r\n      ? 'ui8'\r\n      : length < UNSIGNED_MAX.uint16\r\n        ? 'ui16'\r\n        : 'ui32'\r\n\r\n  if (!length) throw new Error('\u274C Must define a length for component array.')\r\n  if (!TYPES[type]) throw new Error(`\u274C Invalid component array property type ${type}.`)\r\n\r\n  // create buffer for type if it does not already exist\r\n  if (!metadata[$storeSubarrays][type]) {\r\n    const arrayCount = metadata[$storeArrayCounts][type]\r\n    const summedLength = Array(arrayCount).fill(0).reduce((a, p) => a + length, 0)\r\n    \r\n    // for threaded impl\r\n    // const summedBytesPerElement = Array(arrayCount).fill(0).reduce((a, p) => a + TYPES[type].BYTES_PER_ELEMENT, 0)\r\n    // const totalBytes = roundToMultiple4(summedBytesPerElement * summedLength * size)\r\n    // const buffer = new ArrayBuffer(totalBytes)\r\n\r\n    const array = new TYPES[type](summedLength * size)\r\n\r\n    metadata[$storeSubarrays][type] = array\r\n    createShadow(metadata[$storeSubarrays][type], $queryShadow)\r\n    createShadow(metadata[$storeSubarrays][type], $serializeShadow)\r\n    \r\n    array[$indexType] = TYPES_NAMES[indexType]\r\n    array[$indexBytes] = TYPES[indexType].BYTES_PER_ELEMENT\r\n  }\r\n\r\n  // pre-generate subarrays for each eid\r\n  const start = cursors[type]\r\n  let end = 0\r\n  for (let eid = 0; eid < size; eid++) {\r\n    const from = cursors[type] + (eid * length)\r\n    const to = from + length\r\n\r\n    store[eid] = metadata[$storeSubarrays][type].subarray(from, to)\r\n    \r\n    store[eid][$subarrayFrom] = from\r\n    store[eid][$subarrayTo] = to\r\n    store[eid][$queryShadow] = metadata[$storeSubarrays][type][$queryShadow].subarray(from, to)\r\n    store[eid][$serializeShadow] = metadata[$storeSubarrays][type][$serializeShadow].subarray(from, to)\r\n    store[eid][$subarray] = true\r\n    store[eid][$indexType] = TYPES_NAMES[indexType]\r\n    store[eid][$indexBytes] = TYPES[indexType].BYTES_PER_ELEMENT\r\n    \r\n    end = to\r\n  }\r\n\r\n  cursors[type] = end\r\n\r\n  store[$parentArray] = metadata[$storeSubarrays][type].subarray(start, end)\r\n\r\n  return store\r\n}\r\n\r\nconst isArrayType = x => Array.isArray(x) && typeof x[0] === 'string' && typeof x[1] === 'number'\r\n\r\nexport const createStore = (schema, size) => {\r\n  const $store = Symbol('store')\r\n\r\n  if (!schema || !Object.keys(schema).length) {\r\n    // tag component\r\n    stores[$store] = {\r\n      [$storeSize]: size,\r\n      [$tagStore]: true,\r\n      [$storeBase]: () => stores[$store]\r\n    }\r\n    return stores[$store]\r\n  }\r\n\r\n  schema = JSON.parse(JSON.stringify(schema))\r\n\r\n  const arrayCounts = {}\r\n  const collectArrayCounts = s => {\r\n    const keys = Object.keys(s)\r\n    for (const k of keys) {\r\n      if (isArrayType(s[k])) {\r\n        if (!arrayCounts[s[k][0]]) arrayCounts[s[k][0]] = 0\r\n        arrayCounts[s[k][0]]++\r\n      } else if (s[k] instanceof Object) {\r\n        collectArrayCounts(s[k])\r\n      }\r\n    }\r\n  }\r\n  collectArrayCounts(schema)\r\n\r\n  const metadata = {\r\n    [$storeSize]: size,\r\n    [$storeMaps]: {},\r\n    [$storeSubarrays]: {},\r\n    [$storeRef]: $store,\r\n    [$storeCursor]: 0,\r\n    [$subarrayCursors]: Object.keys(TYPES).reduce((a, type) => ({ ...a, [type]: 0 }), {}),\r\n    [$storeFlattened]: [],\r\n    [$storeArrayCounts]: arrayCounts\r\n  }\r\n\r\n  if (schema instanceof Object && Object.keys(schema).length) {\r\n\r\n    const recursiveTransform = (a, k) => {\r\n\r\n      if (typeof a[k] === 'string') {\r\n\r\n        a[k] = createTypeStore(a[k], size)\r\n        createShadow(a[k], $queryShadow)\r\n        createShadow(a[k], $serializeShadow)\r\n        a[k][$storeBase] = () => stores[$store]\r\n        metadata[$storeFlattened].push(a[k])\r\n\r\n      } else if (isArrayType(a[k])) {\r\n        \r\n        const [type, length] = a[k]\r\n        a[k] = createArrayStore(metadata, type, length)\r\n        a[k][$storeBase] = () => stores[$store]\r\n        metadata[$storeFlattened].push(a[k])\r\n        // Object.seal(a[k])\r\n\r\n      } else if (a[k] instanceof Object) {\r\n        \r\n        a[k] = Object.keys(a[k]).reduce(recursiveTransform, a[k])\r\n        // Object.seal(a[k])\r\n        \r\n      }\r\n\r\n      return a\r\n    }\r\n\r\n    stores[$store] = Object.assign(Object.keys(schema).reduce(recursiveTransform, schema), metadata)\r\n    stores[$store][$storeBase] = () => stores[$store]\r\n\r\n    // Object.seal(stores[$store])\r\n\r\n    return stores[$store]\r\n\r\n  }\r\n}\r\n\r\nexport const free = (store) => {\r\n  delete stores[store[$storeRef]]\r\n}", "export const Uint32SparseSet = (length) => {\r\n  const dense = new Uint32Array(length)\r\n  const sparse = new Uint32Array(length)\r\n\r\n  let cursor = 0\r\n  dense.count = () => cursor + 1\r\n\r\n  const has = val => dense[sparse[val]] === val\r\n\r\n  const add = val => {\r\n    if (has(val)) return\r\n    sparse[val] = cursor\r\n    dense[cursor] = val\r\n\r\n    cursor++\r\n  }\r\n\r\n  const remove = val => {\r\n    if (!has(val)) return\r\n    const index = sparse[val]\r\n    const swapped = dense[cursor]\r\n    if (swapped !== val) {\r\n      dense[index] = swapped\r\n      sparse[swapped] = index\r\n    }\r\n\r\n    cursor--\r\n  }\r\n\r\n  return {\r\n    add,\r\n    remove,\r\n    has,\r\n    sparse,\r\n    dense,\r\n  }\r\n}\r\n\r\nexport const SparseSet = () => {\r\n  const dense = []\r\n  const sparse = []\r\n\r\n  // dense.count = () => dense.length\r\n\r\n  const has = val => dense[sparse[val]] === val\r\n\r\n  const add = val => {\r\n    if (has(val)) return\r\n    sparse[val] = dense.push(val) - 1\r\n  }\r\n\r\n  const remove = val => {\r\n    if (!has(val)) return\r\n    const index = sparse[val]\r\n    const swapped = dense.pop()\r\n    if (swapped !== val) {\r\n      dense[index] = swapped\r\n      sparse[swapped] = index\r\n    }\r\n  }\r\n\r\n  return {\r\n    add,\r\n    remove,\r\n    has,\r\n    sparse,\r\n    dense,\r\n  }\r\n}", "import { $indexBytes, $indexType, $serializeShadow, $storeBase, $storeFlattened, $tagStore, createShadow } from \"./Storage.js\"\r\nimport { $componentMap, addComponent, hasComponent } from \"./Component.js\"\r\nimport { $entityArray, $entityEnabled, $entitySparseSet, addEntity, eidToWorld } from \"./Entity.js\"\r\nimport { $localEntities } from \"./World.js\"\r\n\r\nexport const DESERIALIZE_MODE = {\r\n  REPLACE: 0,\r\n  APPEND: 1,\r\n  MAP: 2\r\n}\r\n\r\nlet resized = false\r\n\r\nexport const setSerializationResized = v => { resized = v }\r\n\r\nconst canonicalize = (target) => {\r\n  let componentProps = []\r\n  let changedProps = new Map()\r\n  if (Array.isArray(target)) {\r\n    componentProps = target\r\n      .map(p => {\r\n        if (!p) throw new Error('\uD83D\uDC7E bitECS - undefined component passed into serializer.')\r\n        if (typeof p === 'function' && p.name === 'QueryChanged') {\r\n          p()[$storeFlattened].forEach(prop => {\r\n            const $ = Symbol()\r\n            createShadow(prop, $)\r\n            changedProps.set(prop, $)\r\n          })\r\n          return p()[$storeFlattened]\r\n        }\r\n        if (Object.getOwnPropertySymbols(p).includes($storeFlattened)) {\r\n          return p[$storeFlattened]\r\n        }\r\n        if (Object.getOwnPropertySymbols(p).includes($storeBase)) {\r\n          return p\r\n        }\r\n      })\r\n      .reduce((a,v) => a.concat(v), [])\r\n  }\r\n  return [componentProps, changedProps]\r\n}\r\n\r\nexport const defineSerializer = (target, maxBytes = 20000000) => {\r\n  const isWorld = Object.getOwnPropertySymbols(target).includes($componentMap)\r\n\r\n  let [componentProps, changedProps] = canonicalize(target)\r\n\r\n  // TODO: calculate max bytes based on target & recalc upon resize\r\n\r\n  const buffer = new ArrayBuffer(maxBytes)\r\n  const view = new DataView(buffer)\r\n\r\n  return (ents) => {\r\n\r\n    if (resized) {\r\n      [componentProps, changedProps] = canonicalize(target)\r\n      resized = false\r\n    }\r\n\r\n    if (isWorld) {\r\n      componentProps = []\r\n      target[$componentMap].forEach((c, component) => {\r\n        if (component[$storeFlattened])\r\n          componentProps.push(...component[$storeFlattened])\r\n        else componentProps.push(component)\r\n      })\r\n    }\r\n    \r\n    let world\r\n    if (Object.getOwnPropertySymbols(ents).includes($componentMap)) {\r\n      world = ents\r\n      ents = ents[$entityArray]\r\n    } else {\r\n      world = eidToWorld.get(ents[0])\r\n    }\r\n\r\n    if (!ents.length) return\r\n\r\n    let where = 0\r\n\r\n    // iterate over component props\r\n    for (let pid = 0; pid < componentProps.length; pid++) {\r\n      const prop = componentProps[pid]\r\n      const diff = changedProps.get(prop)\r\n      \r\n      // write pid\r\n      view.setUint8(where, pid)\r\n      where += 1\r\n\r\n      // save space for entity count\r\n      const countWhere = where\r\n      where += 4\r\n      \r\n      let count = 0\r\n      // write eid,val\r\n      for (let i = 0; i < ents.length; i++) {\r\n        const eid = ents[i]\r\n\r\n        // skip if entity doesn't have this component\r\n        if (!hasComponent(world, prop[$storeBase](), eid)) {\r\n          continue\r\n        }\r\n\r\n        // skip if diffing and no change\r\n        // TODO: optimize array diff\r\n        if (diff) {\r\n          if (ArrayBuffer.isView(prop[eid])) {\r\n            let dirty = false\r\n            for (let i = 0; i < prop[eid].length; i++) {\r\n              if(prop[eid][i] !== prop[eid][$serializeShadow][i]) {\r\n                dirty = true\r\n                break\r\n              }\r\n            }\r\n            if (dirty) continue\r\n          } else if (prop[eid] === prop[diff][eid]) continue\r\n        }\r\n\r\n        count++\r\n\r\n        // write eid\r\n        view.setUint32(where, eid)\r\n        where += 4\r\n\r\n        if (prop[$tagStore]) {\r\n          continue\r\n        }\r\n\r\n        // if property is an array\r\n        if (ArrayBuffer.isView(prop[eid])) {\r\n          const type = prop[eid].constructor.name.replace('Array', '')\r\n          const indexType = prop[eid][$indexType]\r\n          const indexBytes = prop[eid][$indexBytes]\r\n\r\n          // add space for count of dirty array elements\r\n          const countWhere2 = where\r\n          where += 1\r\n\r\n          let count2 = 0\r\n\r\n          // write index,value\r\n          for (let i = 0; i < prop[eid].length; i++) {\r\n            const value = prop[eid][i]\r\n\r\n            if (diff && prop[eid][i] === prop[eid][$serializeShadow][i]) {\r\n              continue\r\n            }\r\n\r\n            // write array index\r\n            view[`set${indexType}`](where, i)\r\n            where += indexBytes\r\n\r\n            // write value at that index\r\n            view[`set${type}`](where, value)\r\n            where += prop[eid].BYTES_PER_ELEMENT\r\n            count2++\r\n          }\r\n\r\n          // write total element count\r\n          view[`set${indexType}`](countWhere2, count2)\r\n\r\n        } else {\r\n          // regular property values\r\n          const type = prop.constructor.name.replace('Array', '')\r\n          // set value next [type] bytes\r\n          view[`set${type}`](where, prop[eid])\r\n          where += prop.BYTES_PER_ELEMENT\r\n\r\n          // sync shadow state\r\n          prop[$serializeShadow][eid] = prop[eid]\r\n        }\r\n      }\r\n\r\n      view.setUint32(countWhere, count)\r\n    }\r\n    return buffer.slice(0, where)\r\n  }\r\n}\r\n\r\nconst newEntities = new Map()\r\n\r\nexport const defineDeserializer = (target) => {\r\n  const isWorld = Object.getOwnPropertySymbols(target).includes($componentMap)\r\n  let [componentProps] = canonicalize(target)\r\n\r\n\r\n  return (world, packet, mode=0) => {\r\n\r\n    newEntities.clear()\r\n    \r\n    if (resized) {\r\n      [componentProps] = canonicalize(target)\r\n      resized = false\r\n    }\r\n\r\n    if (isWorld) {\r\n      componentProps = []\r\n      target[$componentMap].forEach((c, component) => {\r\n        if (component[$storeFlattened])\r\n          componentProps.push(...component[$storeFlattened])\r\n        else componentProps.push(component)\r\n      })\r\n    }\r\n\r\n    const localEntities = world[$localEntities]\r\n\r\n    const view = new DataView(packet)\r\n    let where = 0\r\n\r\n    while (where < packet.byteLength) {\r\n\r\n      // pid\r\n      const pid = view.getUint8(where)\r\n      where += 1\r\n\r\n      // entity count\r\n      const entityCount = view.getUint32(where)\r\n      where += 4\r\n\r\n      // component property\r\n      const prop = componentProps[pid]\r\n\r\n      // Get the entities and set their prop values\r\n      for (let i = 0; i < entityCount; i++) {\r\n        let eid = view.getUint32(where)\r\n        where += 4\r\n\r\n        let newEid = newEntities.get(eid)\r\n        if (newEid !== undefined) {\r\n          eid = newEid\r\n        }\r\n\r\n\r\n        if (mode === DESERIALIZE_MODE.MAP) {\r\n          if (localEntities.has(eid)) {\r\n            eid = localEntities.get(eid)\r\n          } else if (newEntities.has(eid)) {\r\n              eid = newEntities.get(eid)\r\n          } else {\r\n            const newEid = addEntity(world)\r\n            localEntities.set(eid, newEid)\r\n            newEntities.set(eid, newEid)\r\n            eid = newEid\r\n          }\r\n        }\r\n\r\n        if (mode === DESERIALIZE_MODE.APPEND ||  \r\n          mode === DESERIALIZE_MODE.REPLACE && !world[$entitySparseSet].has(eid)\r\n        ) {\r\n          const newEid = addEntity(world)\r\n          newEntities.set(eid, newEid)\r\n          eid = newEid\r\n        }\r\n\r\n        const component = prop[$storeBase]()\r\n        if (!hasComponent(world, component, eid)) {\r\n          addComponent(world, component, eid)\r\n        }\r\n\r\n        if (component[$tagStore]) {\r\n          continue\r\n        }\r\n        \r\n        if (ArrayBuffer.isView(prop[eid])) {\r\n          const array = prop[eid]\r\n          const count = view[`get${array[$indexType]}`](where)\r\n          where += array[$indexBytes]\r\n\r\n          // iterate over count\r\n          for (let i = 0; i < count; i++) {\r\n            const index = view[`get${array[$indexType]}`](where)\r\n            where += array[$indexBytes]\r\n\r\n            const value = view[`get${array.constructor.name.replace('Array', '')}`](where)\r\n            where += array.BYTES_PER_ELEMENT\r\n\r\n            prop[eid][index] = value\r\n          }\r\n        } else {\r\n          const value = view[`get${prop.constructor.name.replace('Array', '')}`](where)\r\n          where += prop.BYTES_PER_ELEMENT\r\n\r\n          prop[eid] = value\r\n        }\r\n      }\r\n    }\r\n  }\r\n}", "import { $componentMap, resizeComponents } from './Component.js'\r\nimport { $notQueries, $queries, $queryMap, queryAddEntity, queryCheckEntity, queryRemoveEntity } from './Query.js'\r\nimport { resize, resizeStore } from './Storage.js'\r\nimport { $size, $resizeThreshold, worlds, resizeWorlds } from './World.js'\r\nimport { setSerializationResized } from './Serialize.js'\r\n\r\nexport const $entityMasks = Symbol('entityMasks')\r\nexport const $entityEnabled = Symbol('entityEnabled')\r\nexport const $entitySparseSet = Symbol('entitySparseSet')\r\nexport const $entityArray = Symbol('entityArray')\r\nexport const $entityIndices = Symbol('entityIndices')\r\nexport const $removedEntities = Symbol('removedEntities')\r\n\r\nlet defaultSize = 100000\r\n\r\n// need a global EID cursor which all worlds and all components know about\r\n// so that world entities can posess entire rows spanning all component tables\r\nlet globalEntityCursor = 0\r\nlet globalSize = defaultSize\r\nconst threshold = globalSize - (globalSize / 5)\r\nlet resizeThreshold = () => threshold\r\n\r\nexport const getGlobalSize = () => globalSize\r\n\r\n// removed eids should also be global to prevent memory leaks\r\nconst removed = []\r\n\r\nexport const resetGlobals = () => {\r\n  globalSize = defaultSize\r\n  globalEntityCursor = 0\r\n  removed.length = 0\r\n}\r\n\r\nexport const getDefaultSize = () => defaultSize\r\nexport const setDefaultSize = x => { \r\n  defaultSize = x\r\n  resetGlobals()\r\n}\r\n\r\nexport const getEntityCursor = () => globalEntityCursor\r\nexport const getRemovedEntities = () => removed\r\n\r\nexport const eidToWorld = new Map()\r\n\r\nexport const addEntity = (world) => {\r\n  \r\n  const eid = removed.length > 0 ? removed.shift() : globalEntityCursor++\r\n  world[$entitySparseSet].add(eid)\r\n  eidToWorld.set(eid, world)\r\n\r\n  // if data stores are 80% full\r\n  if (globalEntityCursor >= resizeThreshold()) {\r\n    // grow by half the original size rounded up to a multiple of 4\r\n    const size = globalSize\r\n    const amount = Math.ceil((size/2) / 4) * 4\r\n    const newSize = size + amount\r\n    globalSize = newSize\r\n    resizeWorlds(newSize)\r\n    resizeComponents(newSize)\r\n    setSerializationResized(true)\r\n    console.info(`\uD83D\uDC7E bitECS - resizing all worlds from ${size} to ${size+amount}`)\r\n  }\r\n\r\n  world[$notQueries].forEach(q => {\r\n    const match = queryCheckEntity(world, q, eid)\r\n    if (match) queryAddEntity(q, eid)\r\n  })\r\n\r\n  return eid\r\n}\r\n\r\nexport const removeEntity = (world, eid) => {\r\n  // Check if entity is already removed\r\n  if (!world[$entitySparseSet].has(eid)) return\r\n\r\n  // Remove entity from all queries\r\n  // TODO: archetype graph\r\n  world[$queries].forEach(q => {\r\n    queryRemoveEntity(world, q, eid)\r\n  })\r\n\r\n  // Free the entity\r\n  removed.push(eid)\r\n\r\n  // pop swap\r\n  world[$entitySparseSet].remove(eid)\r\n\r\n  // Clear entity bitmasks\r\n  for (let i = 0; i < world[$entityMasks].length; i++) world[$entityMasks][i][eid] = 0\r\n}", "import { SparseSet, Uint32SparseSet } from './Util.js'\r\nimport { $queryShadow, $storeFlattened, $storeSize, $tagStore, createShadow, parentArray } from './Storage.js'\r\nimport { $componentMap, registerComponent } from './Component.js'\r\nimport { $entityMasks, $entityEnabled, $entityArray, getEntityCursor, getDefaultSize, $entitySparseSet, getGlobalSize } from './Entity.js'\r\nimport { $size } from './World.js'\r\n\r\nexport function Not(c) { return function QueryNot() { return c } }\r\nexport function Or(c) { return function QueryOr() { return c } }\r\nexport function Changed(c) { return function QueryChanged() { return c } }\r\n\r\nexport const $queries = Symbol('queries')\r\nexport const $notQueries = Symbol('notQueries')\r\nexport const $queryMap = Symbol('queryMap')\r\nexport const $dirtyQueries = Symbol('$dirtyQueries')\r\nexport const $queryComponents = Symbol('queryComponents')\r\nexport const $enterQuery = Symbol('enterQuery')\r\nexport const $exitQuery = Symbol('exitQuery')\r\n\r\nexport const enterQuery = query => world => {\r\n  if (!world[$queryMap].has(query)) registerQuery(world, query)\r\n  const q = world[$queryMap].get(query)\r\n  return q.entered.splice(0)\r\n}\r\n\r\nexport const exitQuery = query => world => {\r\n  if (!world[$queryMap].has(query)) registerQuery(world, query)\r\n  const q = world[$queryMap].get(query)\r\n  return q.exited.splice(0)\r\n}\r\n\r\nexport const registerQuery = (world, query) => {\r\n\r\n  const components = []\r\n  const notComponents = []\r\n  const changedComponents = []\r\n\r\n  query[$queryComponents].forEach(c => {\r\n    if (typeof c === 'function') {\r\n      const comp = c()\r\n      if (!world[$componentMap].has(comp)) registerComponent(world, comp)\r\n      if (c.name === 'QueryNot') {\r\n        notComponents.push(comp)\r\n      }\r\n      if (c.name === 'QueryChanged') {\r\n        changedComponents.push(comp)\r\n        components.push(comp)\r\n      }\r\n    } else {\r\n      if (!world[$componentMap].has(c)) registerComponent(world, c)\r\n      components.push(c)\r\n    }\r\n  })\r\n\r\n\r\n  const mapComponents = c => world[$componentMap].get(c)\r\n\r\n  const allComponents = components.concat(notComponents).map(mapComponents)\r\n\r\n  // const sparseSet = Uint32SparseSet(getGlobalSize())\r\n  const sparseSet = SparseSet()\r\n\r\n  const archetypes = []\r\n  const changed = []\r\n  const toRemove = []\r\n  const entered = []\r\n  const exited = []\r\n\r\n  const generations = allComponents\r\n    .map(c => c.generationId)\r\n    .reduce((a,v) => {\r\n      if (a.includes(v)) return a\r\n      a.push(v)\r\n      return a\r\n    }, [])\r\n\r\n  const reduceBitflags = (a,c) => {\r\n    if (!a[c.generationId]) a[c.generationId] = 0\r\n    a[c.generationId] |= c.bitflag\r\n    return a\r\n  }\r\n  const masks = components\r\n    .map(mapComponents)\r\n    .reduce(reduceBitflags, {})\r\n\r\n  const notMasks = notComponents\r\n    .map(mapComponents)\r\n    .reduce((a,c) => {\r\n      if (!a[c.generationId]) {\r\n        a[c.generationId] = 0\r\n      }\r\n      a[c.generationId] |= c.bitflag\r\n      return a\r\n    }, {})\r\n\r\n  // const orMasks = orComponents\r\n  //   .map(mapComponents)\r\n  //   .reduce(reduceBitmasks, {})\r\n\r\n  const hasMasks = allComponents\r\n    .reduce(reduceBitflags, {})\r\n\r\n  const flatProps = components\r\n    .filter(c => !c[$tagStore])\r\n    .map(c => Object.getOwnPropertySymbols(c).includes($storeFlattened) ? c[$storeFlattened] : [c])\r\n    .reduce((a,v) => a.concat(v), [])\r\n\r\n  const shadows = flatProps.map(prop => {\r\n      const $ = Symbol()\r\n      createShadow(prop, $)\r\n      return prop[$]\r\n  }, [])\r\n\r\n  const q = Object.assign(sparseSet, {\r\n    archetypes,\r\n    changed,\r\n    components,\r\n    notComponents,\r\n    changedComponents,\r\n    masks,\r\n    notMasks,\r\n    // orMasks,\r\n    hasMasks,\r\n    generations,\r\n    flatProps,\r\n    toRemove,\r\n    entered,\r\n    exited,\r\n    shadows,\r\n  })\r\n\r\n  \r\n  world[$queryMap].set(query, q)\r\n  world[$queries].add(q)\r\n  \r\n  components.map(mapComponents).forEach(c => {\r\n    c.queries.add(q)\r\n  })\r\n  notComponents.map(mapComponents).forEach(c => {\r\n    c.notQueries.add(q)\r\n  })\r\n\r\n  if (notComponents.length) world[$notQueries].add(q)\r\n\r\n  for (let eid = 0; eid < getEntityCursor(); eid++) {\r\n    if (!world[$entitySparseSet].has(eid)) continue\r\n    if (queryCheckEntity(world, q, eid)) {\r\n      queryAddEntity(q, eid)\r\n    }\r\n  }\r\n}\r\n\r\nconst diff = (q, clearDiff) => {\r\n  if (clearDiff) q.changed.length = 0\r\n  const { flatProps, shadows } = q\r\n  for (let i = 0; i < q.dense.length; i++) {\r\n    const eid = q.dense[i]\r\n    let dirty = false\r\n    for (let pid = 0; pid < flatProps.length; pid++) {\r\n      const prop = flatProps[pid]\r\n      const shadow = shadows[pid]\r\n      if (ArrayBuffer.isView(prop[eid])) {\r\n        for (let i = 0; i < prop[eid].length; i++) {\r\n          if (prop[eid][i] !== prop[eid][$queryShadow][i]) {\r\n            dirty = true\r\n            prop[eid][$queryShadow][i] = prop[eid][i]\r\n          }\r\n        }\r\n      } else {\r\n        if (prop[eid] !== shadow[eid]) {\r\n          dirty = true\r\n          shadow[eid] = prop[eid]\r\n        }\r\n      }\r\n    }\r\n    if (dirty) q.changed.push(eid)\r\n  }\r\n  return q.changed\r\n}\r\n\r\nexport const defineQuery = (components) => {\r\n  if (components === undefined || components[$componentMap] !== undefined) {\r\n    return world => world ? world[$entityArray] : components[$entityArray]\r\n  }\r\n\r\n  const query = function (world, clearDiff=true) {\r\n    if (!world[$queryMap].has(query)) registerQuery(world, query)\r\n\r\n    const q = world[$queryMap].get(query)\r\n\r\n    queryCommitRemovals(q)\r\n\r\n    if (q.changedComponents.length) return diff(q, clearDiff)\r\n\r\n    return q.dense\r\n  }\r\n  query[$queryComponents] = components\r\n  return query\r\n}\r\n\r\n// TODO: archetype graph\r\nexport const queryCheckEntity = (world, q, eid) => {\r\n  const { masks, notMasks, generations } = q\r\n  // let or = true\r\n  for (let i = 0; i < generations.length; i++) {\r\n    const generationId = generations[i]\r\n    const qMask = masks[generationId]\r\n    const qNotMask = notMasks[generationId]\r\n    // const qOrMask = orMasks[generationId]\r\n    const eMask = world[$entityMasks][generationId][eid]\r\n    \r\n    // if (qOrMask && (eMask & qOrMask) !== qOrMask) {\r\n    //   continue\r\n    // }\r\n    if (qNotMask && (eMask & qNotMask) !== 0) {\r\n      return false\r\n    }\r\n    if (qMask && (eMask & qMask) !== qMask) {\r\n      return false\r\n    }\r\n  }\r\n  return true\r\n}\r\n\r\nexport const queryCheckComponent = (q, c) => {\r\n  const { generationId, bitflag } = c\r\n  const { hasMasks } = q\r\n  const mask = hasMasks[generationId]\r\n  return (mask & bitflag) === bitflag\r\n}\r\n\r\nexport const queryAddEntity = (q, eid) => {\r\n  if (q.has(eid)) return\r\n  q.add(eid)\r\n  q.entered.push(eid)\r\n}\r\n\r\nconst queryCommitRemovals = (q) => {\r\n  while (q.toRemove.length) {\r\n    q.remove(q.toRemove.pop())\r\n  }\r\n}\r\n\r\nexport const commitRemovals = (world) => {\r\n  world[$dirtyQueries].forEach(queryCommitRemovals)\r\n  world[$dirtyQueries].clear()\r\n}\r\n\r\nexport const queryRemoveEntity = (world, q, eid) => {\r\n  if (!q.has(eid)) return\r\n  q.toRemove.push(eid)\r\n  world[$dirtyQueries].add(q)\r\n  q.exited.push(eid)\r\n}\r\n\r\nexport const resetChangedQuery = (world, query) => {\r\n  const q = world[$queryMap].get(query)\r\n  q.changed.length = 0\r\n}\r\n\r\nexport const removeQuery = (world, query) => {\r\n  const q = world[$queryMap].get(query)\r\n  world[$queries].delete(q)\r\n  world[$queryMap].delete(query)\r\n}", "import { $storeSize, createStore, resetStoreFor, resizeStore } from './Storage.js'\r\nimport { $queries, queryAddEntity, queryRemoveEntity, queryCheckEntity, queryCheckComponent } from './Query.js'\r\nimport { $bitflag, $size } from './World.js'\r\nimport { $entityMasks, getDefaultSize, eidToWorld } from './Entity.js'\r\n\r\nexport const $componentMap = Symbol('componentMap')\r\n\r\nexport const components = []\r\n\r\nexport const resizeComponents = (size) => {\r\n  components.forEach(component => resizeStore(component, size))\r\n}\r\n\r\nexport const defineComponent = (schema) => {\r\n  const component = createStore(schema, getDefaultSize())\r\n  if (schema && Object.keys(schema).length) components.push(component)\r\n  return component\r\n}\r\n\r\nexport const incrementBitflag = (world) => {\r\n  world[$bitflag] *= 2\r\n  if (world[$bitflag] >= 2**32) {\r\n    world[$bitflag] = 1\r\n    world[$entityMasks].push(new Uint32Array(world[$size]))\r\n  }\r\n}\r\n\r\nexport const registerComponent = (world, component) => {\r\n  if (!component) throw new Error(`\uD83D\uDC7E bitECS - cannot register component as it is null or undefined.`)\r\n\r\n  const queries = new Set()\r\n  const notQueries = new Set()\r\n\r\n  world[$queries].forEach(q => {\r\n    if (q.components.includes(component)) {\r\n      queries.add(q)\r\n    } else if (q.notComponents.includes(component)) {\r\n      notQueries.add(q)\r\n    }\r\n  })\r\n\r\n  world[$componentMap].set(component, { \r\n    generationId: world[$entityMasks].length - 1,\r\n    bitflag: world[$bitflag],\r\n    store: component,\r\n    queries,\r\n    notQueries,\r\n  })\r\n\r\n  if (component[$storeSize] < world[$size]) {\r\n    resizeStore(component, world[$size])\r\n  }\r\n\r\n  incrementBitflag(world)\r\n}\r\n\r\nexport const registerComponents = (world, components) => {\r\n  components.forEach(c => registerComponent(world, c))\r\n}\r\n\r\nexport const hasComponent = (world, component, eid) => {\r\n  const registeredComponent = world[$componentMap].get(component)\r\n  if (!registeredComponent) return\r\n  const { generationId, bitflag } = registeredComponent\r\n  const mask = world[$entityMasks][generationId][eid]\r\n  return (mask & bitflag) === bitflag\r\n}\r\n\r\nexport const addComponent = (world, component, eid, reset=false) => {\r\n  if (!Number.isInteger(eid)) {\r\n    component = world\r\n    world = eidToWorld.get(eid)\r\n    reset = eid || reset\r\n  }\r\n  if (!world[$componentMap].has(component)) registerComponent(world, component)\r\n  if (hasComponent(world, component, eid)) return\r\n\r\n  const c = world[$componentMap].get(component)\r\n  const { generationId, bitflag, queries, notQueries } = c\r\n  \r\n  notQueries.forEach(q => {\r\n    const match = queryCheckEntity(world, q, eid)\r\n    if (match) queryRemoveEntity(world, q, eid)\r\n  })\r\n  \r\n  // Add bitflag to entity bitmask\r\n  world[$entityMasks][generationId][eid] |= bitflag\r\n\r\n  // todo: archetype graph\r\n  queries.forEach(q => {\r\n    const match = queryCheckEntity(world, q, eid)\r\n    if (match) queryAddEntity(q, eid)\r\n  })\r\n  // Zero out each property value\r\n  if (reset) resetStoreFor(component, eid)\r\n}\r\n\r\nexport const removeComponent = (world, component, eid, reset=true) => {\r\n  if (!Number.isInteger(eid)) {\r\n    component = world\r\n    world = eidToWorld.get(eid)\r\n    reset = eid || reset\r\n  }\r\n  const c = world[$componentMap].get(component)\r\n  const { generationId, bitflag, queries, notQueries } = c\r\n\r\n  if (!(world[$entityMasks][generationId][eid] & bitflag)) return\r\n\r\n  // todo: archetype graph\r\n  queries.forEach(q => {\r\n    const match = queryCheckEntity(world, q, eid)\r\n    if (match) queryRemoveEntity(world, q, eid)\r\n  })\r\n\r\n  // Remove flag from entity bitmask\r\n  world[$entityMasks][generationId][eid] &= ~bitflag\r\n  \r\n  notQueries.forEach(q => {\r\n    const match = queryCheckEntity(world, q, eid)\r\n    if (match) queryAddEntity(q, eid)\r\n  })\r\n  \r\n  // Zero out each property value\r\n  if (reset) resetStoreFor(component, eid)\r\n}\r\n", "import { $componentMap } from './Component.js'\r\nimport { $queryMap, $queries, $dirtyQueries, $notQueries } from './Query.js'\r\nimport { $entityArray, $entityIndices, $entityEnabled, $entityMasks, $entitySparseSet, getGlobalSize, removeEntity } from './Entity.js'\r\nimport { resize } from './Storage.js'\r\nimport { SparseSet, Uint32SparseSet } from './Util.js'\r\n\r\nexport const $size = Symbol('size')\r\nexport const $resizeThreshold = Symbol('resizeThreshold')\r\nexport const $bitflag = Symbol('bitflag')\r\nexport const $archetypes = Symbol('archetypes')\r\nexport const $localEntities = Symbol('localEntities')\r\n\r\nexport const worlds = []\r\n\r\nexport const resizeWorlds = (size) => {\r\n  worlds.forEach(world => {\r\n    world[$size] = size\r\n\r\n    // resize(world[$entitySparseSet].sparse, size)\r\n    // resize(world[$entitySparseSet].dense, size)\r\n    \r\n    for (let i = 0; i < world[$entityMasks].length; i++) {\r\n      const masks = world[$entityMasks][i];\r\n      world[$entityMasks][i] = resize(masks, size)\r\n    }\r\n    \r\n    world[$resizeThreshold] = world[$size] - (world[$size] / 5)\r\n  })\r\n}\r\n\r\nexport const createWorld = () => {\r\n  const world = {}\r\n  resetWorld(world)\r\n  worlds.push(world)\r\n  return world\r\n}\r\n\r\nexport const resetWorld = (world) => {\r\n  const size = getGlobalSize()\r\n  world[$size] = size\r\n\r\n  if (world[$entityArray]) world[$entityArray].forEach(eid => removeEntity(world, eid))\r\n\r\n  world[$entityMasks] = [new Uint32Array(size)]\r\n  world[$archetypes] = []\r\n\r\n  world[$entitySparseSet] = SparseSet()\r\n  // world[$entitySparseSet] = Uint32SparseSet(size)\r\n  world[$entityArray] = world[$entitySparseSet].dense\r\n\r\n  world[$bitflag] = 1\r\n\r\n  world[$componentMap] = new Map()\r\n\r\n  world[$queryMap] = new Map()\r\n  world[$queries] = new Set()\r\n  world[$notQueries] = new Set()\r\n  world[$dirtyQueries] = new Set()\r\n\r\n  world[$localEntities] = new Map()\r\n\r\n  return world\r\n}\r\n\r\nexport const deleteWorld = (world) => {\r\n  Object.getOwnPropertySymbols(world).forEach($ => { delete world[$] })\r\n  Object.keys(world).forEach(key => { delete world[key] })\r\n  worlds.splice(worlds.indexOf(world), 1)\r\n}\r\n", "import { commitRemovals } from './Query.js'\r\n\r\nexport const defineSystem = (fn1, fn2) => {\r\n  const update = fn2 !== undefined ? fn2 : fn1\r\n  const create = fn2 !== undefined ? fn1 : undefined\r\n  const init = new Set()\r\n  const system = (world, ...args) => {\r\n    if (create && !init.has(world)) {\r\n      create(world, ...args)\r\n      init.add(world)\r\n    }\r\n    update(world, ...args)\r\n    commitRemovals(world)\r\n    return world\r\n  }\r\n\r\n  Object.defineProperty(system, 'name', {\r\n    value: (update.name || \"AnonymousSystem\") + \"_internal\",\r\n    configurable: true,\r\n  })\r\n\r\n  return system\r\n}", "import { createWorld, resetWorld, deleteWorld } from './World.js'\r\nimport { addEntity, removeEntity, setDefaultSize } from './Entity.js'\r\nimport { defineComponent, registerComponent, registerComponents, hasComponent, addComponent, removeComponent } from './Component.js'\r\nimport { defineSystem } from './System.js'\r\nimport { defineQuery, enterQuery, exitQuery, Changed, Not, commitRemovals, resetChangedQuery, removeQuery } from './Query.js'\r\nimport { defineSerializer, defineDeserializer, DESERIALIZE_MODE } from './Serialize.js'\r\nimport { TYPES_ENUM, parentArray } from './Storage.js'\r\n\r\nexport const pipe = (...fns) => (...args) => {\r\n  const input = Array.isArray(args[0]) ? args[0] : args\r\n  if (!input || input.length === 0) return\r\n  fns = Array.isArray(fns[0]) ? fns[0] : fns\r\n  let tmp = input\r\n  for (let i = 0; i < fns.length; i++) {\r\n    const fn = fns[i]\r\n    if (Array.isArray(tmp)) {\r\n      // tmp = tmp.reduce((a,v) => a.concat(fn(v)),[])\r\n      tmp = fn(...tmp)\r\n    } else {\r\n      tmp = fn(tmp)\r\n    }\r\n  }\r\n  return tmp\r\n}\r\n\r\nexport const Types = TYPES_ENUM\r\n\r\nexport {\r\n\r\n  setDefaultSize,\r\n  createWorld,\r\n  resetWorld,\r\n  deleteWorld,\r\n  addEntity,\r\n  removeEntity,\r\n\r\n  registerComponent,\r\n  registerComponents,\r\n  defineComponent,\r\n  addComponent,\r\n  removeComponent,\r\n  hasComponent,\r\n  \r\n  defineQuery,\r\n  Changed,\r\n  Not,\r\n  // Or,\r\n  enterQuery,\r\n  exitQuery,\r\n  commitRemovals,\r\n  resetChangedQuery,\r\n  removeQuery,\r\n\r\n  defineSystem,\r\n  \r\n  defineSerializer,\r\n  defineDeserializer,\r\n  DESERIALIZE_MODE,\r\n\r\n  parentArray,\r\n\r\n}\r\n", "import { Types, defineComponent } from 'bitecs';\r\n\r\nconst Color = defineComponent({\r\n    r: Types.ui8c,\r\n    g: Types.ui8c,\r\n    b: Types.ui8c,\r\n    a: Types.f32,\r\n    colorMatrix: [ Types.f32, 16 ],\r\n    colorOffset: [ Types.f32, 4 ]\r\n});\r\n\r\nexport const ColorComponent = Color;\r\n", "import { createWorld } from 'bitecs';\r\n\r\nconst world = createWorld();\r\n\r\nexport const GameObjectWorld = world;\r\n", "import { Types, defineComponent } from 'bitecs';\r\n\r\n/**\r\n * Buffer Structure:\r\n *\r\n * Triangle 1:\r\n *\r\n * Top Left Vert\r\n *\r\n * 0 - x position\r\n * 1 - y position\r\n * 2 - u0\r\n * 3 - v0\r\n * 4 - Texture Index\r\n * 5 - Red Component\r\n * 6 - Green Component\r\n * 7 - Blue Component\r\n * 8 - Alpha Component\r\n *\r\n * Bottom Left Vert\r\n *\r\n * 9 - x position\r\n * 10 - y position\r\n * 11 - u0\r\n * 12 - v1\r\n * 13 - Texture Index\r\n * 14 - Red Component\r\n * 15 - Green Component\r\n * 16 - Blue Component\r\n * 17 - Alpha Component\r\n *\r\n * Bottom Right Vert\r\n *\r\n * 18 - x position\r\n * 19 - y position\r\n * 20 - u1\r\n * 21 - v1\r\n * 22 - Texture Index\r\n * 23 - Red Component\r\n * 24 - Green Component\r\n * 25 - Blue Component\r\n * 26 - Alpha Component\r\n *\r\n * Triangle 2:\r\n *\r\n * Top Left Vert\r\n *\r\n * 27 - x position\r\n * 28 - y position\r\n * 29 - u0\r\n * 30 - v0\r\n * 31 - Texture Index\r\n * 32 - Red Component\r\n * 33 - Green Component\r\n * 34 - Blue Component\r\n * 35 - Alpha Component\r\n *\r\n * Bottom Right Vert\r\n *\r\n * 36 - x position\r\n * 37 - y position\r\n * 38 - u1\r\n * 39 - v1\r\n * 40 - Texture Index\r\n * 41 - Red Component\r\n * 42 - Green Component\r\n * 43 - Blue Component\r\n * 44 - Alpha Component\r\n *\r\n * Top Right Vert\r\n *\r\n * 45 - x position\r\n * 46 - y position\r\n * 47 - u1\r\n * 48 - v0\r\n * 49 - Texture Index\r\n * 50 - Red Component\r\n * 51 - Green Component\r\n * 52 - Blue Component\r\n * 53 - Alpha Component\r\n */\r\n\r\nconst QuadVertex = defineComponent({\r\n    values: [ Types.f32, 54 ]\r\n});\r\n\r\nexport const QuadVertexComponent = QuadVertex;\r\n", "import { QuadVertexComponent } from './QuadVertexComponent';\r\n\r\nexport function SetQuadPosition (id: number, x0: number, y0: number, x1: number, y1: number, x2: number, y2: number, x3: number, y3: number): void\r\n{\r\n    const data = QuadVertexComponent.values[id];\r\n\r\n    data[0] = x0;\r\n    data[1] = y0;\r\n\r\n    data[9] = x1;\r\n    data[10] = y1;\r\n\r\n    data[18] = x2;\r\n    data[19] = y2;\r\n\r\n    data[27] = x0;\r\n    data[28] = y0;\r\n\r\n    data[36] = x2;\r\n    data[37] = y2;\r\n\r\n    data[45] = x3;\r\n    data[46] = y3;\r\n}\r\n", "import { Types, defineComponent } from 'bitecs';\r\n\r\n//  Array structure:\r\n//  x, y, right, bottom\r\n\r\n//  local = bounds of Game Object in local space (calculated dynamically, on request)\r\n//  global = bounds of Game Object in global space (calcuated in UpdatedVertexPositionSystem)\r\n//  world = bounds of Game Object, factoring in all children, in global space (calculated in BaseWorld)\r\n\r\nconst Bounds = defineComponent({\r\n    local: [ Types.f32, 4 ],\r\n    global: [ Types.f32, 4 ],\r\n    world: [ Types.f32, 4 ]\r\n});\r\n\r\nexport const BoundsComponent = Bounds;\r\n", "import { Types, defineComponent } from 'bitecs';\r\n\r\nconst Extent2D = defineComponent({\r\n    x: Types.f32,\r\n    y: Types.f32,\r\n    width: Types.f32,\r\n    height: Types.f32,\r\n    right: Types.f32,\r\n    bottom: Types.f32\r\n});\r\n\r\nexport const Extent2DComponent = Extent2D;\r\n", "import { Types, defineComponent } from 'bitecs';\r\n\r\nconst WorldMatrix2D = defineComponent({\r\n    a: Types.f32,\r\n    b: Types.f32,\r\n    c: Types.f32,\r\n    d: Types.f32,\r\n    tx: Types.f32,\r\n    ty: Types.f32\r\n});\r\n\r\nexport const WorldMatrix2DComponent = WorldMatrix2D;\r\n", "import { IWorld, Query, defineSystem } from 'bitecs';\r\n\r\nimport { BoundsComponent } from '../bounds/BoundsComponent';\r\nimport { Extent2DComponent } from '../transform/Extent2DComponent';\r\nimport { SetQuadPosition } from './SetQuadPosition';\r\nimport { WorldMatrix2DComponent } from '../transform/WorldMatrix2DComponent';\r\n\r\nlet entities: number[];\r\n\r\nconst updateVertexPositionSystem = defineSystem(world =>\r\n{\r\n    for (let i = 0; i < entities.length; i++)\r\n    {\r\n        const id = entities[i];\r\n\r\n        const a = WorldMatrix2DComponent.a[id];\r\n        const b = WorldMatrix2DComponent.b[id];\r\n        const c = WorldMatrix2DComponent.c[id];\r\n        const d = WorldMatrix2DComponent.d[id];\r\n        const tx = WorldMatrix2DComponent.tx[id];\r\n        const ty = WorldMatrix2DComponent.ty[id];\r\n\r\n        const x = Extent2DComponent.x[id];\r\n        const y = Extent2DComponent.y[id];\r\n        const right = Extent2DComponent.right[id];\r\n        const bottom = Extent2DComponent.bottom[id];\r\n\r\n        const x0 = (x * a) + (y * c) + tx;\r\n        const y0 = (x * b) + (y * d) + ty;\r\n\r\n        const x1 = (x * a) + (bottom * c) + tx;\r\n        const y1 = (x * b) + (bottom * d) + ty;\r\n\r\n        const x2 = (right * a) + (bottom * c) + tx;\r\n        const y2 = (right * b) + (bottom * d) + ty;\r\n\r\n        const x3 = (right * a) + (y * c) + tx;\r\n        const y3 = (right * b) + (y * d) + ty;\r\n\r\n        SetQuadPosition(id, x0, y0, x1, y1, x2, y2, x3, y3);\r\n\r\n        //  x, y, right, bottom:\r\n        const bx = Math.min(x0, x1, x2, x3);\r\n        const by = Math.min(y0, y1, y2, y3);\r\n        const br = Math.max(x0, x1, x2, x3);\r\n        const bb = Math.max(y0, y1, y2, y3);\r\n\r\n        const bounds = BoundsComponent.global[id];\r\n\r\n        bounds[0] = bx;\r\n        bounds[1] = by;\r\n        bounds[2] = br;\r\n        bounds[3] = bb;\r\n    }\r\n\r\n    return world;\r\n});\r\n\r\nexport const UpdateVertexPositionSystem = (world: IWorld, query: Query): number[] =>\r\n{\r\n    entities = query(world);\r\n\r\n    const total = entities.length;\r\n\r\n    if (total > 0)\r\n    {\r\n        updateVertexPositionSystem(world);\r\n    }\r\n\r\n    return entities;\r\n};\r\n", "import { QuadVertexComponent } from './QuadVertexComponent';\r\n\r\nexport function SetQuadColor (id: number, red: number, green: number, blue: number, alpha: number): void\r\n{\r\n    const data = QuadVertexComponent.values[id];\r\n\r\n    data[5] = red;\r\n    data[6] = green;\r\n    data[7] = blue;\r\n    data[8] = alpha;\r\n\r\n    data[14] = red;\r\n    data[15] = green;\r\n    data[16] = blue;\r\n    data[17] = alpha;\r\n\r\n    data[23] = red;\r\n    data[24] = green;\r\n    data[25] = blue;\r\n    data[26] = alpha;\r\n\r\n    data[32] = red;\r\n    data[33] = green;\r\n    data[34] = blue;\r\n    data[35] = alpha;\r\n\r\n    data[41] = red;\r\n    data[42] = green;\r\n    data[43] = blue;\r\n    data[44] = alpha;\r\n\r\n    data[50] = red;\r\n    data[51] = green;\r\n    data[52] = blue;\r\n    data[53] = alpha;\r\n}\r\n", "import { Changed, defineQuery, defineSystem } from 'bitecs';\r\n\r\nimport { ColorComponent } from './ColorComponent';\r\nimport { QuadVertexComponent } from '../vertices';\r\nimport { SetQuadColor } from '../vertices/SetQuadColor';\r\n\r\nconst changedColorQuery = defineQuery([ Changed(ColorComponent), QuadVertexComponent ]);\r\n\r\nconst packQuadColorsSystem = defineSystem(world =>\r\n{\r\n    const entities = changedColorQuery(world);\r\n\r\n    for (let i = 0; i < entities.length; i++)\r\n    {\r\n        const id = entities[i];\r\n\r\n        const r = ColorComponent.r[id] / 255;\r\n        const g = ColorComponent.g[id] / 255;\r\n        const b = ColorComponent.b[id] / 255;\r\n        const a = ColorComponent.a[id];\r\n\r\n        SetQuadColor(id, r, g, b, a);\r\n    }\r\n\r\n    return world;\r\n});\r\n\r\nexport const PackQuadColorsSystem = packQuadColorsSystem;\r\n", "import { Types, defineComponent } from 'bitecs';\r\n\r\nconst Dirty = defineComponent({\r\n    child: Types.ui8,\r\n    childCache: Types.ui8,\r\n    displayList: Types.ui8,\r\n    transform: Types.ui8\r\n});\r\n\r\nexport const DirtyComponent = Dirty;\r\n", "import { DirtyComponent } from './DirtyComponent';\r\n\r\nexport function SetDirtyChildCache (id: number): void\r\n{\r\n    DirtyComponent.childCache[id] = 1;\r\n}\r\n", "import { DirtyComponent } from './DirtyComponent';\r\n\r\nexport function SetDirtyDisplayList (id: number): void\r\n{\r\n    DirtyComponent.displayList[id] = 1;\r\n}\r\n", "import { Types, defineComponent } from 'bitecs';\r\n\r\n//  worldID = The ID of the World entity the owner of this component belongs to\r\n//  parentID = The ID of the Parent entity. If it has no parent, will match the worldID\r\n//  numChildren = The number of direct descendants this entity has\r\n//  depth = Reserved to allow for per-child depth sorting outside of the display list index\r\n//  index = The position of this entity compared to its siblings, i.e. index 0 is at the back, index 1 above that, etc\r\n//  worldDepth = The distance of the entity from the world root (up to a maximum depth of 65535)\r\n\r\nconst Hierarchy = defineComponent({\r\n    worldID: Types.ui32,\r\n    parentID: Types.ui32,\r\n    numChildren: Types.ui32,\r\n    depth: Types.ui32,\r\n    index: Types.ui32,\r\n    worldDepth: Types.ui16\r\n});\r\n\r\nexport const HierarchyComponent = Hierarchy;\r\n", "import { IGameObject } from './IGameObject';\r\n\r\nexport const GameObjectCache: Map<number, IGameObject> = new Map();\r\n", "import { Types, defineComponent } from 'bitecs';\r\n\r\nconst Permissions = defineComponent({\r\n    visible: Types.ui8,\r\n    visibleChildren: Types.ui8,\r\n    willUpdate: Types.ui8,\r\n    willUpdateChildren: Types.ui8,\r\n    willRender: Types.ui8,\r\n    willRenderChildren: Types.ui8,\r\n    willCacheChildren: Types.ui8,\r\n    willTransformChildren: Types.ui8,\r\n    willColorChildren: Types.ui8\r\n});\r\n\r\nexport const PermissionsComponent = Permissions;\r\n", "import { PermissionsComponent } from './PermissionsComponent';\r\n\r\nexport function WillCacheChildren (id: number): boolean\r\n{\r\n    return Boolean(PermissionsComponent.willCacheChildren[id]);\r\n}\r\n", "import { Types, defineComponent } from 'bitecs';\r\n\r\nconst LocalMatrix2D = defineComponent({\r\n    a: Types.f32,\r\n    b: Types.f32,\r\n    c: Types.f32,\r\n    d: Types.f32,\r\n    tx: Types.f32,\r\n    ty: Types.f32,\r\n    dirty: Types.ui32\r\n});\r\n\r\nexport const LocalMatrix2DComponent = LocalMatrix2D;\r\n", "import { Types, defineComponent } from 'bitecs';\r\n\r\nconst Transform2D = defineComponent({\r\n    x: Types.f32,\r\n    y: Types.f32,\r\n    rotation: Types.f32,\r\n    scaleX: Types.f32,\r\n    scaleY: Types.f32,\r\n    skewX: Types.f32,\r\n    skewY: Types.f32,\r\n    originX: Types.f32,\r\n    originY: Types.f32\r\n});\r\n\r\nexport const Transform2DComponent = Transform2D;\r\n", "export const DIRTY_CONST = {\r\n\r\n    CLEAR: 0,\r\n    TRANSFORM: 1,\r\n    UPDATE: 2,\r\n    CHILD_CACHE: 4,\r\n    POST_RENDER: 8,\r\n    COLORS: 16,\r\n    BOUNDS: 32,\r\n    TEXTURE: 64,\r\n    FRAME: 128,\r\n    ALPHA: 256,\r\n    CHILD: 512,\r\n\r\n    //  Special combinations\r\n    DEFAULT: 1 + 2 + 16 + 32,\r\n\r\n    //  Reserved for future use:\r\n    //  1024\r\n    //  2048\r\n    //  4096\r\n    //  8192\r\n    //  16384\r\n    //  32768\r\n    //  65536\r\n    //  131072\r\n    //  262144\r\n    //  524288\r\n    //  1048576\r\n    //  2097152\r\n    //  4194304\r\n    //  8388608\r\n    //  16777216\r\n    //  33554432\r\n    //  67108864\r\n    //  134217728\r\n    //  268435456\r\n\r\n    //  Reserved for user use\r\n    USER1: 536870912,\r\n    USER2: 1073741824,\r\n    USER3: 2147483648,\r\n    USER4: 4294967296\r\n\r\n};\r\n", "import { IWorld, Query, defineSystem } from 'bitecs';\r\nimport { SetDirtyChild, SetDirtyParents, SetDirtyTransform } from '../dirty';\r\n\r\nimport { GetParentID } from '../hierarchy';\r\nimport { LocalMatrix2DComponent } from './LocalMatrix2DComponent';\r\nimport { Transform2DComponent } from './Transform2DComponent';\r\n\r\nlet entities: number[];\r\n\r\nconst updateLocalTransformSystem = defineSystem(world =>\r\n{\r\n    let prevParent: number = 0;\r\n\r\n    for (let i = 0; i < entities.length; i++)\r\n    {\r\n        const id = entities[i];\r\n\r\n        const x = Transform2DComponent.x[id];\r\n        const y = Transform2DComponent.y[id];\r\n        const rotation = Transform2DComponent.rotation[id];\r\n        const scaleX = Transform2DComponent.scaleX[id];\r\n        const scaleY = Transform2DComponent.scaleY[id];\r\n        const skewX = Transform2DComponent.skewX[id];\r\n        const skewY = Transform2DComponent.skewY[id];\r\n\r\n        LocalMatrix2DComponent.a[id] = Math.cos(rotation + skewY) * scaleX;\r\n        LocalMatrix2DComponent.b[id] = Math.sin(rotation + skewY) * scaleX;\r\n        LocalMatrix2DComponent.c[id] = -Math.sin(rotation - skewX) * scaleY;\r\n        LocalMatrix2DComponent.d[id] = Math.cos(rotation - skewX) * scaleY;\r\n        LocalMatrix2DComponent.tx[id] = x;\r\n        LocalMatrix2DComponent.ty[id] = y;\r\n\r\n        SetDirtyTransform(id);\r\n\r\n        if (GetParentID(id) !== prevParent)\r\n        {\r\n            SetDirtyParents(id);\r\n\r\n            prevParent = GetParentID(id);\r\n        }\r\n    }\r\n\r\n    return world;\r\n});\r\n\r\nexport const UpdateLocalTransform2DSystem = (world: IWorld, query: Query): number =>\r\n{\r\n    entities = query(world);\r\n\r\n    const total = entities.length;\r\n\r\n    if (total > 0)\r\n    {\r\n        SetDirtyChild(world.id);\r\n\r\n        updateLocalTransformSystem(world);\r\n    }\r\n\r\n    return total;\r\n};\r\n", "import { LocalMatrix2DComponent } from './LocalMatrix2DComponent';\r\nimport { WorldMatrix2DComponent } from './WorldMatrix2DComponent';\r\n\r\nexport function CopyLocalToWorld (source: number, target: number): void\r\n{\r\n    WorldMatrix2DComponent.a[target] = LocalMatrix2DComponent.a[source];\r\n    WorldMatrix2DComponent.b[target] = LocalMatrix2DComponent.b[source];\r\n    WorldMatrix2DComponent.c[target] = LocalMatrix2DComponent.c[source];\r\n    WorldMatrix2DComponent.d[target] = LocalMatrix2DComponent.d[source];\r\n    WorldMatrix2DComponent.tx[target] = LocalMatrix2DComponent.tx[source];\r\n    WorldMatrix2DComponent.ty[target] = LocalMatrix2DComponent.ty[source];\r\n}\r\n", "import { WorldMatrix2DComponent } from './WorldMatrix2DComponent';\r\n\r\nexport function CopyWorldToWorld (source: number, target: number): void\r\n{\r\n    WorldMatrix2DComponent.a[target] = WorldMatrix2DComponent.a[source];\r\n    WorldMatrix2DComponent.b[target] = WorldMatrix2DComponent.b[source];\r\n    WorldMatrix2DComponent.c[target] = WorldMatrix2DComponent.c[source];\r\n    WorldMatrix2DComponent.d[target] = WorldMatrix2DComponent.d[source];\r\n    WorldMatrix2DComponent.tx[target] = WorldMatrix2DComponent.tx[source];\r\n    WorldMatrix2DComponent.ty[target] = WorldMatrix2DComponent.ty[source];\r\n}\r\n", "import { LocalMatrix2DComponent } from './LocalMatrix2DComponent';\r\nimport { WorldMatrix2DComponent } from './WorldMatrix2DComponent';\r\n\r\nexport function MultiplyLocalWithWorld (parentID: number, id: number): void\r\n{\r\n    const pa = WorldMatrix2DComponent.a[parentID];\r\n    const pb = WorldMatrix2DComponent.b[parentID];\r\n    const pc = WorldMatrix2DComponent.c[parentID];\r\n    const pd = WorldMatrix2DComponent.d[parentID];\r\n    const ptx = WorldMatrix2DComponent.tx[parentID];\r\n    const pty = WorldMatrix2DComponent.ty[parentID];\r\n\r\n    const a = LocalMatrix2DComponent.a[id];\r\n    const b = LocalMatrix2DComponent.b[id];\r\n    const c = LocalMatrix2DComponent.c[id];\r\n    const d = LocalMatrix2DComponent.d[id];\r\n    const tx = LocalMatrix2DComponent.tx[id];\r\n    const ty = LocalMatrix2DComponent.ty[id];\r\n\r\n    WorldMatrix2DComponent.a[id] = a * pa + b * pc;\r\n    WorldMatrix2DComponent.b[id] = a * pb + b * pd;\r\n    WorldMatrix2DComponent.c[id] = c * pa + d * pc;\r\n    WorldMatrix2DComponent.d[id] = c * pb + d * pd;\r\n    WorldMatrix2DComponent.tx[id] = tx * pa + ty * pc + ptx;\r\n    WorldMatrix2DComponent.ty[id] = tx * pb + ty * pd + pty;\r\n}\r\n", "import { PermissionsComponent } from './PermissionsComponent';\r\n\r\nexport function WillTransformChildren (id: number): boolean\r\n{\r\n    return Boolean(PermissionsComponent.willTransformChildren[id]);\r\n}\r\n", "import { Changed, defineQuery, defineSystem } from 'bitecs';\r\n\r\nimport { CopyLocalToWorld } from './CopyLocalToWorld';\r\nimport { CopyWorldToWorld } from './CopyWorldToWorld';\r\nimport { GameObjectCache } from '../../gameobjects/GameObjectCache';\r\nimport { LocalMatrix2DComponent } from './LocalMatrix2DComponent';\r\nimport { MultiplyLocalWithWorld } from './MultiplyLocalWithWorld';\r\nimport { WillTransformChildren } from '../permissions/WillTransformChildren';\r\n\r\nconst changedWorldTransformQuery = defineQuery([ Changed(LocalMatrix2DComponent) ]);\r\n\r\nconst updateWorldTransformSystem = defineSystem(world =>\r\n{\r\n    const entities = changedWorldTransformQuery(world);\r\n\r\n    for (let i = 0; i < entities.length; i++)\r\n    {\r\n        const id = entities[i];\r\n        const gameObject = GameObjectCache.get(id);\r\n        const parent = gameObject.parent;\r\n\r\n        if (!parent)\r\n        {\r\n            CopyLocalToWorld(id, id);\r\n        }\r\n        else if (!WillTransformChildren(id))\r\n        {\r\n            CopyWorldToWorld(parent.id, id);\r\n        }\r\n        else\r\n        {\r\n            MultiplyLocalWithWorld(parent.id, id);\r\n        }\r\n    }\r\n\r\n    return world;\r\n});\r\n\r\nexport const UpdateWorldTransform2DSystem = updateWorldTransformSystem;\r\n", "/**\r\n * Buffer Structure:\r\n *\r\n * Triangle 1:\r\n *\r\n * Top Left Vert\r\n *\r\n * 0 - x position\r\n * 1 - y position\r\n * 2 - u0\r\n * 3 - v0\r\n * 4 - Texture Index\r\n * 5 - Red Component\r\n * 6 - Green Component\r\n * 7 - Blue Component\r\n * 8 - Alpha Component\r\n *\r\n * Bottom Left Vert\r\n *\r\n * 9 - x position\r\n * 10 - y position\r\n * 11 - u0\r\n * 12 - v1\r\n * 13 - Texture Index\r\n * 14 - Red Component\r\n * 15 - Green Component\r\n * 16 - Blue Component\r\n * 17 - Alpha Component\r\n *\r\n * Bottom Right Vert\r\n *\r\n * 18 - x position\r\n * 19 - y position\r\n * 20 - u1\r\n * 21 - v1\r\n * 22 - Texture Index\r\n * 23 - Red Component\r\n * 24 - Green Component\r\n * 25 - Blue Component\r\n * 26 - Alpha Component\r\n *\r\n * Triangle 2:\r\n *\r\n * Top Left Vert\r\n *\r\n * 27 - x position\r\n * 28 - y position\r\n * 29 - u0\r\n * 30 - v0\r\n * 31 - Texture Index\r\n * 32 - Red Component\r\n * 33 - Green Component\r\n * 34 - Blue Component\r\n * 35 - Alpha Component\r\n *\r\n * Bottom Right Vert\r\n *\r\n * 36 - x position\r\n * 37 - y position\r\n * 38 - u1\r\n * 39 - v1\r\n * 40 - Texture Index\r\n * 41 - Red Component\r\n * 42 - Green Component\r\n * 43 - Blue Component\r\n * 44 - Alpha Component\r\n *\r\n * Top Right Vert\r\n *\r\n * 45 - x position\r\n * 46 - y position\r\n * 47 - u1\r\n * 48 - v0\r\n * 49 - Texture Index\r\n * 50 - Red Component\r\n * 51 - Green Component\r\n * 52 - Blue Component\r\n * 53 - Alpha Component\r\n */\r\n\r\nexport function GetQuadBuffer (): Float32Array\r\n{\r\n    return new Float32Array([\r\n        //  tri 1\r\n        0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n        0, 0, 0, 1, 0, 0, 0, 0, 0,\r\n        0, 0, 1, 1, 0, 0, 0, 0, 0,\r\n        //  tri 2\r\n        0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n        0, 0, 1, 1, 0, 0, 0, 0, 0,\r\n        0, 0, 1, 0, 0, 0, 0, 0, 0\r\n    ]);\r\n}\r\n", "import { GetQuadBuffer } from './GetQuadBuffer';\r\n\r\nconst buffer = GetQuadBuffer();\r\n\r\nexport function BatchQuad (\r\n    F32: Float32Array,\r\n    offset: number,\r\n    textureIndex: number,\r\n    x1: number, y1: number,\r\n    x2: number, y2: number,\r\n    x3: number, y3: number,\r\n    x4: number, y4: number,\r\n    r: number, g: number, b: number, a: number): number\r\n{\r\n    buffer[0] = x1;\r\n    buffer[1] = y1;\r\n    buffer[4] = textureIndex;\r\n    buffer[5] = r;\r\n    buffer[6] = g;\r\n    buffer[7] = b;\r\n    buffer[8] = a;\r\n\r\n    buffer[9] = x2;\r\n    buffer[10] = y2;\r\n    buffer[13] = textureIndex;\r\n    buffer[14] = r;\r\n    buffer[15] = g;\r\n    buffer[16] = b;\r\n    buffer[17] = a;\r\n\r\n    buffer[18] = x3;\r\n    buffer[19] = y3;\r\n    buffer[22] = textureIndex;\r\n    buffer[23] = r;\r\n    buffer[24] = g;\r\n    buffer[25] = b;\r\n    buffer[26] = a;\r\n\r\n    buffer[27] = x1;\r\n    buffer[28] = y1;\r\n    buffer[31] = textureIndex;\r\n    buffer[32] = r;\r\n    buffer[33] = g;\r\n    buffer[34] = b;\r\n    buffer[35] = a;\r\n\r\n    buffer[36] = x3;\r\n    buffer[37] = y3;\r\n    buffer[40] = textureIndex;\r\n    buffer[41] = r;\r\n    buffer[42] = g;\r\n    buffer[43] = b;\r\n    buffer[44] = a;\r\n\r\n    buffer[45] = x4;\r\n    buffer[46] = y4;\r\n    buffer[49] = textureIndex;\r\n    buffer[50] = r;\r\n    buffer[51] = g;\r\n    buffer[52] = b;\r\n    buffer[53] = a;\r\n\r\n    F32.set(buffer, offset);\r\n\r\n    return offset + 54;\r\n}\r\n", "import { GetQuadBuffer } from './GetQuadBuffer';\r\n\r\nconst buffer = GetQuadBuffer();\r\n\r\nexport function BatchTexturedQuad (\r\n    F32: Float32Array,\r\n    offset: number,\r\n    textureIndex: number,\r\n    x1: number, y1: number,\r\n    x2: number, y2: number,\r\n    x3: number, y3: number,\r\n    x4: number, y4: number,\r\n    u0: number, v0: number, u1: number, v1: number,\r\n    r: number, g: number, b: number, a: number): number\r\n{\r\n    //  top left\r\n    buffer[0] = x1;\r\n    buffer[1] = y1;\r\n    buffer[2] = u0;\r\n    buffer[3] = v0;\r\n    buffer[4] = textureIndex;\r\n    buffer[5] = r;\r\n    buffer[6] = g;\r\n    buffer[7] = b;\r\n    buffer[8] = a;\r\n\r\n    //  bottom left\r\n    buffer[9] = x2;\r\n    buffer[10] = y2;\r\n    buffer[11] = u0;\r\n    buffer[12] = v1;\r\n    buffer[13] = textureIndex;\r\n    buffer[14] = r;\r\n    buffer[15] = g;\r\n    buffer[16] = b;\r\n    buffer[17] = a;\r\n\r\n    //  bottom right\r\n    buffer[18] = x3;\r\n    buffer[19] = y3;\r\n    buffer[20] = u1;\r\n    buffer[21] = v1;\r\n    buffer[22] = textureIndex;\r\n    buffer[23] = r;\r\n    buffer[24] = g;\r\n    buffer[25] = b;\r\n    buffer[26] = a;\r\n\r\n    //  top left\r\n    buffer[27] = x1;\r\n    buffer[28] = y1;\r\n    buffer[29] = u0;\r\n    buffer[30] = v0;\r\n    buffer[31] = textureIndex;\r\n    buffer[32] = r;\r\n    buffer[33] = g;\r\n    buffer[34] = b;\r\n    buffer[35] = a;\r\n\r\n    //  bottom right\r\n    buffer[36] = x3;\r\n    buffer[37] = y3;\r\n    buffer[38] = u1;\r\n    buffer[39] = v1;\r\n    buffer[40] = textureIndex;\r\n    buffer[41] = r;\r\n    buffer[42] = g;\r\n    buffer[43] = b;\r\n    buffer[44] = a;\r\n\r\n    //  top right\r\n    buffer[45] = x4;\r\n    buffer[46] = y4;\r\n    buffer[47] = u1;\r\n    buffer[48] = v0;\r\n    buffer[49] = textureIndex;\r\n    buffer[50] = r;\r\n    buffer[51] = g;\r\n    buffer[52] = b;\r\n    buffer[53] = a;\r\n\r\n    F32.set(buffer, offset);\r\n\r\n    return offset + 54;\r\n}\r\n", "export function GetTriBuffer (): Float32Array\r\n{\r\n    //  Buffer Format:\r\n\r\n    //  top left vert = x, y, u, v, texture index, r, g, b, a\r\n    //  bottom left vert = x, y, u, v, texture index, r, g, b, a\r\n    //  bottom right vert = x, y, u, v, texture index, r, g, b, a\r\n\r\n    return new Float32Array([\r\n        0, 0, 0, 1, 0, 0, 0, 0, 0,\r\n        0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n        0, 0, 1, 0, 0, 0, 0, 0, 0\r\n    ]);\r\n}\r\n", "import { GetTriBuffer } from './GetTriBuffer';\r\n\r\nconst buffer = GetTriBuffer();\r\n\r\nexport function BatchTriangle (\r\n    F32: Float32Array,\r\n    offset: number,\r\n    textureIndex: number,\r\n    x1: number, y1: number,\r\n    x2: number, y2: number,\r\n    x3: number, y3: number,\r\n    r: number, g: number, b: number, a: number): number\r\n{\r\n    buffer[0] = x1;\r\n    buffer[1] = y1;\r\n    buffer[4] = textureIndex;\r\n    buffer[5] = r;\r\n    buffer[6] = g;\r\n    buffer[7] = b;\r\n    buffer[8] = a;\r\n\r\n    buffer[9] = x2;\r\n    buffer[10] = y2;\r\n    buffer[13] = textureIndex;\r\n    buffer[14] = r;\r\n    buffer[15] = g;\r\n    buffer[16] = b;\r\n    buffer[17] = a;\r\n\r\n    buffer[18] = x3;\r\n    buffer[19] = y3;\r\n    buffer[22] = textureIndex;\r\n    buffer[23] = r;\r\n    buffer[24] = g;\r\n    buffer[25] = b;\r\n    buffer[26] = a;\r\n\r\n    F32.set(buffer, offset);\r\n\r\n    return offset + 27;\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Find the angle of a segment from (x1, y1) -> (x2, y2).\r\n *\r\n * @function Phaser.Math.Angle.Between\r\n * @since 3.0.0\r\n *\r\n * @param {number} x1 - The x coordinate of the first point.\r\n * @param {number} y1 - The y coordinate of the first point.\r\n * @param {number} x2 - The x coordinate of the second point.\r\n * @param {number} y2 - The y coordinate of the second point.\r\n *\r\n * @return {number} The angle in radians.\r\n */\r\nexport function AngleBetween (x1: number, y1: number, x2: number, y2: number): number\r\n{\r\n    return Math.atan2(y2 - y1, x2 - x1);\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Find the angle of a segment from (x1, y1) -> (x2, y2).\r\n *\r\n * The difference between this method and {@link Phaser.Math.Angle.Between} is that this assumes the y coordinate\r\n * travels down the screen.\r\n *\r\n * @function Phaser.Math.Angle.BetweenY\r\n * @since 3.0.0\r\n *\r\n * @param {number} x1 - The x coordinate of the first point.\r\n * @param {number} y1 - The y coordinate of the first point.\r\n * @param {number} x2 - The x coordinate of the second point.\r\n * @param {number} y2 - The y coordinate of the second point.\r\n *\r\n * @return {number} The angle in radians.\r\n */\r\nexport function AngleBetweenY (x1: number, y1: number, x2: number, y2: number): number\r\n{\r\n    return Math.atan2(x2 - x1, y2 - y1);\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nexport const MATH_CONST = {\r\n\r\n    /**\r\n     * The value of PI * 2.\r\n     *\r\n     * @name Phaser.Math.PI2\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    PI2: Math.PI * 2,\r\n\r\n    /**\r\n     * The value of PI * 2.\r\n     *\r\n     * @name Phaser.Math.HALF_PI\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    HALF_PI: Math.PI * 0.5,\r\n\r\n    /**\r\n     * An epsilon value (1.0e-6)\r\n     *\r\n     * @name Phaser.Math.EPSILON\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    EPSILON: 1.0e-6,\r\n\r\n    /**\r\n     * For converting degrees to radians (PI / 180)\r\n     *\r\n     * @name Phaser.Math.DEG_TO_RAD\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    DEG_TO_RAD: Math.PI / 180,\r\n\r\n    /**\r\n     * For converting radians to degrees (180 / PI)\r\n     *\r\n     * @name Phaser.Math.RAD_TO_DEG\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    RAD_TO_DEG: 180 / Math.PI,\r\n\r\n    /**\r\n     * The minimum safe integer this browser supports.\r\n     * We use a const for backward compatibility with Internet Explorer.\r\n     *\r\n     * @name Phaser.Math.MIN_SAFE_INTEGER\r\n     * @type {number}\r\n     * @since 3.21.0\r\n     */\r\n    MIN_SAFE_INTEGER: Number.MIN_SAFE_INTEGER || -9007199254740991,\r\n\r\n    /**\r\n     * The maximum safe integer this browser supports.\r\n     * We use a const for backward compatibility with Internet Explorer.\r\n     *\r\n     * @name Phaser.Math.MAX_SAFE_INTEGER\r\n     * @type {number}\r\n     * @since 3.21.0\r\n     */\r\n    MAX_SAFE_INTEGER: Number.MAX_SAFE_INTEGER || 9007199254740991\r\n\r\n};\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nimport { MATH_CONST as CONST } from '../const';\r\n\r\n/**\r\n * Takes an angle in Phasers default clockwise format and converts it so that\r\n * 0 is North, 90 is West, 180 is South and 270 is East,\r\n * therefore running counter-clockwise instead of clockwise.\r\n * \r\n * You can pass in the angle from a Game Object using:\r\n * \r\n * ```javascript\r\n * var converted = CounterClockwise(gameobject.rotation);\r\n * ```\r\n * \r\n * All values for this function are in radians.\r\n *\r\n * @function Phaser.Math.Angle.CounterClockwise\r\n * @since 3.16.0\r\n *\r\n * @param {number} angle - The angle to convert, in radians.\r\n *\r\n * @return {number} The converted angle, in radians.\r\n */\r\nexport function CounterClockwise (angle: number): number\r\n{\r\n    if (angle > Math.PI)\r\n    {\r\n        angle -= CONST.PI2;\r\n    }\r\n\r\n    return Math.abs((((angle + CONST.HALF_PI) % CONST.PI2) - CONST.PI2) % CONST.PI2);\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nimport { MATH_CONST } from '../const';\r\n\r\n/**\r\n * Normalize an angle to the [0, 2pi] range.\r\n *\r\n * @function Phaser.Math.Angle.Normalize\r\n * @since 3.0.0\r\n *\r\n * @param {number} angle - The angle to normalize, in radians.\r\n *\r\n * @return {number} The normalized angle, in radians.\r\n */\r\nexport function NormalizeAngle (angle: number): number\r\n{\r\n    angle = angle % MATH_CONST.PI2;\r\n\r\n    if (angle >= 0)\r\n    {\r\n        return angle;\r\n    }\r\n    else\r\n    {\r\n        return angle + MATH_CONST.PI2;\r\n    }\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nimport { NormalizeAngle } from './NormalizeAngle';\r\n\r\n/**\r\n * Reverse the given angle.\r\n *\r\n * @function Phaser.Math.Angle.Reverse\r\n * @since 3.0.0\r\n *\r\n * @param {number} angle - The angle to reverse, in radians.\r\n *\r\n * @return {number} The reversed angle, in radians.\r\n */\r\nexport function ReverseAngle (angle: number): number\r\n{\r\n    return NormalizeAngle(angle + Math.PI);\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nimport { MATH_CONST } from '../const';\r\n\r\n/**\r\n * Rotates `currentAngle` towards `targetAngle`, taking the shortest rotation distance. The `lerp` argument is the amount to rotate by in this call.\r\n *\r\n * @function Phaser.Math.Angle.RotateTo\r\n * @since 3.0.0\r\n *\r\n * @param {number} currentAngle - The current angle, in radians.\r\n * @param {number} targetAngle - The target angle to rotate to, in radians.\r\n * @param {number} [lerp=0.05] - The lerp value to add to the current angle.\r\n *\r\n * @return {number} The adjusted angle.\r\n */\r\nexport function RotateAngleTo (currentAngle: number, targetAngle: number, lerp: number = 0.05): number\r\n{\r\n    if (currentAngle === targetAngle)\r\n    {\r\n        return currentAngle;\r\n    }\r\n\r\n    if (Math.abs(targetAngle - currentAngle) <= lerp || Math.abs(targetAngle - currentAngle) >= (MATH_CONST.PI2 - lerp))\r\n    {\r\n        currentAngle = targetAngle;\r\n    }\r\n    else\r\n    {\r\n        if (Math.abs(targetAngle - currentAngle) > Math.PI)\r\n        {\r\n            if (targetAngle < currentAngle)\r\n            {\r\n                targetAngle += MATH_CONST.PI2;\r\n            }\r\n            else\r\n            {\r\n                targetAngle -= MATH_CONST.PI2;\r\n            }\r\n        }\r\n\r\n        if (targetAngle > currentAngle)\r\n        {\r\n            currentAngle += lerp;\r\n        }\r\n        else if (targetAngle < currentAngle)\r\n        {\r\n            currentAngle -= lerp;\r\n        }\r\n    }\r\n\r\n    return currentAngle;\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Gets the shortest angle between `angle1` and `angle2`.\r\n *\r\n * Both angles must be in the range -180 to 180, which is the same clamped\r\n * range that `sprite.angle` uses, so you can pass in two sprite angles to\r\n * this method and get the shortest angle back between the two of them.\r\n *\r\n * The angle returned will be in the same range. If the returned angle is\r\n * greater than 0 then it's a counter-clockwise rotation, if < 0 then it's\r\n * a clockwise rotation.\r\n *\r\n * TODO: Wrap the angles in this function?\r\n *\r\n * @function Phaser.Math.Angle.ShortestBetween\r\n * @since 3.0.0\r\n *\r\n * @param {number} angle1 - The first angle in the range -180 to 180.\r\n * @param {number} angle2 - The second angle in the range -180 to 180.\r\n *\r\n * @return {number} The shortest angle, in degrees. If greater than zero it's a counter-clockwise rotation.\r\n */\r\nexport function ShortestAngleBetween (angle1: number, angle2: number): number\r\n{\r\n    const difference = angle2 - angle1;\r\n\r\n    if (difference === 0)\r\n    {\r\n        return 0;\r\n    }\r\n\r\n    const times = Math.floor((difference - (-180)) / 360);\r\n\r\n    return difference - (times * 360);\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Wrap the given `value` between `min` and `max.\r\n *\r\n * @function Phaser.Math.Wrap\r\n * @since 3.0.0\r\n *\r\n * @param {number} value - The value to wrap.\r\n * @param {number} min - The minimum value.\r\n * @param {number} max - The maximum value.\r\n *\r\n * @return {number} The wrapped value.\r\n */\r\nexport function Wrap (value: number, min: number, max: number): number\r\n{\r\n    const range = max - min;\r\n\r\n    return (min + ((((value - min) % range) + range) % range));\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nimport { Wrap } from '../Wrap';\r\n\r\n/**\r\n * Wrap an angle.\r\n *\r\n * Wraps the angle to a value in the range of -PI to PI.\r\n *\r\n * @function Phaser.Math.Angle.Wrap\r\n * @since 3.0.0\r\n *\r\n * @param {number} angle - The angle to wrap, in radians.\r\n *\r\n * @return {number} The wrapped angle, in radians.\r\n */\r\nexport function WrapAngle (angle: number): number\r\n{\r\n    return Wrap(angle, -Math.PI, Math.PI);\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nimport { Wrap } from '../Wrap';\r\n\r\n/**\r\n * Wrap an angle in degrees.\r\n *\r\n * Wraps the angle to a value in the range of -180 to 180.\r\n *\r\n * @function Phaser.Math.Angle.WrapDegrees\r\n * @since 3.0.0\r\n *\r\n * @param {number} angle - The angle to wrap, in degrees.\r\n *\r\n * @return {number} The wrapped angle, in degrees.\r\n */\r\nexport function WrapAngleDegrees (angle: number): number\r\n{\r\n    return Wrap(angle, -180, 180);\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nimport { AngleBetween } from './AngleBetween';\r\nimport { AngleBetweenY } from './AngleBetweenY';\r\nimport { CounterClockwise } from './CounterClockwise';\r\nimport { NormalizeAngle } from './NormalizeAngle';\r\nimport { ReverseAngle } from './ReverseAngle';\r\nimport { RotateAngleTo } from './RotateAngleTo';\r\nimport { ShortestAngleBetween } from './ShortestAngleBetween';\r\nimport { WrapAngle } from './WrapAngle';\r\nimport { WrapAngleDegrees } from './WrapAngleDegrees';\r\n\r\n/**\r\n * @namespace Phaser.Math.Angle\r\n */\r\n\r\nexport {\r\n    AngleBetween,\r\n    AngleBetweenY,\r\n    CounterClockwise,\r\n    NormalizeAngle,\r\n    ReverseAngle,\r\n    RotateAngleTo,\r\n    ShortestAngleBetween,\r\n    WrapAngle,\r\n    WrapAngleDegrees\r\n};\r\n", "export function In (v: number, overshoot: number = 1.70158): number\r\n{\r\n    return v * v * ((overshoot + 1) * v - overshoot);\r\n}\r\n", "export function InOut (v: number, overshoot: number = 1.70158): number\r\n{\r\n    const s = overshoot * 1.525;\r\n\r\n    if ((v *= 2) < 1)\r\n    {\r\n        return 0.5 * (v * v * ((s + 1) * v - s));\r\n    }\r\n    else\r\n    {\r\n        return 0.5 * ((v -= 2) * v * ((s + 1) * v + s) + 2);\r\n    }\r\n}\r\n", "export function Out (v: number, overshoot: number = 1.70158): number\r\n{\r\n    return --v * v * ((overshoot + 1) * v + overshoot) + 1;\r\n}\r\n", "export function In (v: number): number\r\n{\r\n    v = 1 - v;\r\n\r\n    if (v < 1 / 2.75)\r\n    {\r\n        return 1 - (7.5625 * v * v);\r\n    }\r\n    else if (v < 2 / 2.75)\r\n    {\r\n        return 1 - (7.5625 * (v -= 1.5 / 2.75) * v + 0.75);\r\n    }\r\n    else if (v < 2.5 / 2.75)\r\n    {\r\n        return 1 - (7.5625 * (v -= 2.25 / 2.75) * v + 0.9375);\r\n    }\r\n    else\r\n    {\r\n        return 1 - (7.5625 * (v -= 2.625 / 2.75) * v + 0.984375);\r\n    }\r\n}\r\n", "export function InOut (v: number): number\r\n{\r\n    let reverse = false;\r\n\r\n    if (v < 0.5)\r\n    {\r\n        v = 1 - (v * 2);\r\n        reverse = true;\r\n    }\r\n    else\r\n    {\r\n        v = (v * 2) - 1;\r\n    }\r\n\r\n    if (v < 1 / 2.75)\r\n    {\r\n        v = 7.5625 * v * v;\r\n    }\r\n    else if (v < 2 / 2.75)\r\n    {\r\n        v = 7.5625 * (v -= 1.5 / 2.75) * v + 0.75;\r\n    }\r\n    else if (v < 2.5 / 2.75)\r\n    {\r\n        v = 7.5625 * (v -= 2.25 / 2.75) * v + 0.9375;\r\n    }\r\n    else\r\n    {\r\n        v = 7.5625 * (v -= 2.625 / 2.75) * v + 0.984375;\r\n    }\r\n\r\n    if (reverse)\r\n    {\r\n        return (1 - v) * 0.5;\r\n    }\r\n    else\r\n    {\r\n        return v * 0.5 + 0.5;\r\n    }\r\n}\r\n", "export function Out (v: number): number\r\n{\r\n    if (v < 1 / 2.75)\r\n    {\r\n        return 7.5625 * v * v;\r\n    }\r\n    else if (v < 2 / 2.75)\r\n    {\r\n        return 7.5625 * (v -= 1.5 / 2.75) * v + 0.75;\r\n    }\r\n    else if (v < 2.5 / 2.75)\r\n    {\r\n        return 7.5625 * (v -= 2.25 / 2.75) * v + 0.9375;\r\n    }\r\n    else\r\n    {\r\n        return 7.5625 * (v -= 2.625 / 2.75) * v + 0.984375;\r\n    }\r\n}\r\n", "export function In (v: number): number\r\n{\r\n    return 1 - Math.sqrt(1 - v * v);\r\n}\r\n", "export function InOut (v: number): number\r\n{\r\n    if ((v *= 2) < 1)\r\n    {\r\n        return -0.5 * (Math.sqrt(1 - v * v) - 1);\r\n    }\r\n    else\r\n    {\r\n        return 0.5 * (Math.sqrt(1 - (v -= 2) * v) + 1);\r\n    }\r\n}\r\n", "export function Out (v: number): number\r\n{\r\n    return Math.sqrt(1 - (--v * v));\r\n}\r\n", "export function In (v: number): number\r\n{\r\n    return v * v * v;\r\n}\r\n", "export function InOut (v: number): number\r\n{\r\n    if ((v *= 2) < 1)\r\n    {\r\n        return 0.5 * v * v * v;\r\n    }\r\n    else\r\n    {\r\n        return 0.5 * ((v -= 2) * v * v + 2);\r\n    }\r\n}\r\n", "export function Out (v: number): number\r\n{\r\n    return --v * v * v + 1;\r\n}\r\n", "export function In (v: number, amplitude: number = 0.1, period: number = 0.1): number\r\n{\r\n    if (v === 0)\r\n    {\r\n        return 0;\r\n    }\r\n    else if (v === 1)\r\n    {\r\n        return 1;\r\n    }\r\n    else\r\n    {\r\n        let s = period / 4;\r\n\r\n        if (amplitude < 1)\r\n        {\r\n            amplitude = 1;\r\n        }\r\n        else\r\n        {\r\n            s = period * Math.asin(1 / amplitude) / (2 * Math.PI);\r\n        }\r\n\r\n        return -(amplitude * Math.pow(2, 10 * (v -= 1)) * Math.sin((v - s) * (2 * Math.PI) / period));\r\n    }\r\n}\r\n", "export function InOut (v: number, amplitude: number = 0.1, period: number = 0.1): number\r\n{\r\n    if (v === 0)\r\n    {\r\n        return 0;\r\n    }\r\n    else if (v === 1)\r\n    {\r\n        return 1;\r\n    }\r\n    else\r\n    {\r\n        let s = period / 4;\r\n\r\n        if (amplitude < 1)\r\n        {\r\n            amplitude = 1;\r\n        }\r\n        else\r\n        {\r\n            s = period * Math.asin(1 / amplitude) / (2 * Math.PI);\r\n        }\r\n\r\n        if ((v *= 2) < 1)\r\n        {\r\n            return -0.5 * (amplitude * Math.pow(2, 10 * (v -= 1)) * Math.sin((v - s) * (2 * Math.PI) / period));\r\n        }\r\n        else\r\n        {\r\n            return amplitude * Math.pow(2, -10 * (v -= 1)) * Math.sin((v - s) * (2 * Math.PI) / period) * 0.5 + 1;\r\n        }\r\n    }\r\n}\r\n", "export function Out (v: number, amplitude: number = 0.1, period: number = 0.1): number\r\n{\r\n    if (v === 0)\r\n    {\r\n        return 0;\r\n    }\r\n    else if (v === 1)\r\n    {\r\n        return 1;\r\n    }\r\n    else\r\n    {\r\n        let s = period / 4;\r\n\r\n        if (amplitude < 1)\r\n        {\r\n            amplitude = 1;\r\n        }\r\n        else\r\n        {\r\n            s = period * Math.asin(1 / amplitude) / (2 * Math.PI);\r\n        }\r\n\r\n        return (amplitude * Math.pow(2, -10 * v) * Math.sin((v - s) * (2 * Math.PI) / period) + 1);\r\n    }\r\n}\r\n", "export function In (v: number): number\r\n{\r\n    return Math.pow(2, 10 * (v - 1)) - 0.001;\r\n}\r\n", "export function InOut (v: number): number\r\n{\r\n    if (v == 0)\r\n    {\r\n        return 0;\r\n    }\r\n\r\n    if (v == 1)\r\n    {\r\n        return 1;\r\n    }\r\n\r\n    if ((v *= 2) < 1)\r\n    {\r\n        return 0.5 * Math.pow(2, 10 * (v - 1));\r\n    }\r\n    else\r\n    {\r\n        return 0.5 * (2 - Math.pow(2, -10 * (v - 1)));\r\n    }\r\n}\r\n", "export function Out (v: number): number\r\n{\r\n    return 1 - Math.pow(2, -10 * v);\r\n}\r\n", "export function In (v: number): number\r\n{\r\n    return v * v;\r\n}\r\n", "export function InOut (v: number): number\r\n{\r\n    if ((v *= 2) < 1)\r\n    {\r\n        return 0.5 * v * v;\r\n    }\r\n    else\r\n    {\r\n        return -0.5 * (--v * (v - 2) - 1);\r\n    }\r\n}\r\n", "export function Out (v: number): number\r\n{\r\n    return v * (2 - v);\r\n}\r\n", "export function In (v: number): number\r\n{\r\n    return v * v * v * v;\r\n}\r\n", "export function InOut (v: number): number\r\n{\r\n    if ((v *= 2) < 1)\r\n    {\r\n        return 0.5 * v * v * v * v;\r\n    }\r\n    else\r\n    {\r\n        return -0.5 * ((v -= 2) * v * v * v - 2);\r\n    }\r\n}\r\n", "export function Out (v: number): number\r\n{\r\n    return -(--v * v * v * v - 1);\r\n}\r\n", "export function In (v: number): number\r\n{\r\n    return v * v * v * v * v;\r\n}\r\n", "export function InOut (v: number): number\r\n{\r\n    if ((v *= 2) < 1)\r\n    {\r\n        return 0.5 * v * v * v * v * v;\r\n    }\r\n    else\r\n    {\r\n        return 0.5 * ((v -= 2) * v * v * v * v + 2);\r\n    }\r\n}\r\n", "export function Out (v: number): number\r\n{\r\n    return (v = v - 1) * v * v * v * v + 1;\r\n}\r\n", "export function In (v: number): number\r\n{\r\n    if (v === 0)\r\n    {\r\n        return 0;\r\n    }\r\n    else if (v === 1)\r\n    {\r\n        return 1;\r\n    }\r\n    else\r\n    {\r\n        return 1 - Math.cos(v * Math.PI / 2);\r\n    }\r\n}\r\n", "export function InOut (v: number): number\r\n{\r\n    if (v === 0)\r\n    {\r\n        return 0;\r\n    }\r\n    else if (v === 1)\r\n    {\r\n        return 1;\r\n    }\r\n    else\r\n    {\r\n        return 0.5 * (1 - Math.cos(Math.PI * v));\r\n    }\r\n}\r\n", "export function Out (v: number): number\r\n{\r\n    if (v === 0)\r\n    {\r\n        return 0;\r\n    }\r\n    else if (v === 1)\r\n    {\r\n        return 1;\r\n    }\r\n    else\r\n    {\r\n        return Math.sin(v * Math.PI / 2);\r\n    }\r\n}\r\n", "export function Linear (v: number): number\r\n{\r\n    return v;\r\n}\r\n", "export function Stepped (v: number, steps: number = 1): number\r\n{\r\n    if (v <= 0)\r\n    {\r\n        return 0;\r\n    }\r\n    else if (v >= 1)\r\n    {\r\n        return 1;\r\n    }\r\n    else\r\n    {\r\n        return (((steps * v) | 0) + 1) * (1 / steps);\r\n    }\r\n}\r\n", "import * as Back from './back';\r\nimport * as Bounce from './bounce';\r\nimport * as Circular from './circular';\r\nimport * as Cubic from './cubic';\r\nimport * as Elastic from './elastic';\r\nimport * as Expo from './expo';\r\nimport * as Quadratic from './quadratic';\r\nimport * as Quartic from './quartic';\r\nimport * as Quintic from './quintic';\r\nimport * as Sine from './sine';\r\n\r\nimport { Linear } from './Linear';\r\nimport { Stepped } from './Stepped';\r\n\r\nconst EaseMap: Map<string, Function> = new Map([\r\n    [ 'power0', Linear ],\r\n    [ 'power1', Quadratic.Out ],\r\n    [ 'power2', Cubic.Out ],\r\n    [ 'power3', Quartic.Out ],\r\n    [ 'power4', Quintic.Out ],\r\n    [ 'linear', Linear ],\r\n    [ 'quad', Quadratic.Out ],\r\n    [ 'cubic', Cubic.Out ],\r\n    [ 'quart', Quartic.Out ],\r\n    [ 'quint', Quintic.Out ],\r\n    [ 'sine', Sine.Out ],\r\n    [ 'expo', Expo.Out ],\r\n    [ 'circ', Circular.Out ],\r\n    [ 'elastic', Elastic.Out ],\r\n    [ 'back', Back.Out ],\r\n    [ 'bounce', Bounce.Out ],\r\n    [ 'stepped', Stepped ],\r\n    [ 'quad.in', Quadratic.In ],\r\n    [ 'cubic.in', Cubic.In ],\r\n    [ 'quart.in', Quartic.In ],\r\n    [ 'quint.in', Quintic.In ],\r\n    [ 'sine.in', Sine.In ],\r\n    [ 'expo.in', Expo.In ],\r\n    [ 'circ.in', Circular.In ],\r\n    [ 'elastic.in', Elastic.In ],\r\n    [ 'back.in', Back.In ],\r\n    [ 'bounce.in', Bounce.In ],\r\n    [ 'quad.out', Quadratic.Out ],\r\n    [ 'cubic.out', Cubic.Out ],\r\n    [ 'quart.out', Quartic.Out ],\r\n    [ 'quint.out', Quintic.Out ],\r\n    [ 'sine.out', Sine.Out ],\r\n    [ 'expo.out', Expo.Out ],\r\n    [ 'circ.out', Circular.Out ],\r\n    [ 'elastic.out', Elastic.Out ],\r\n    [ 'back.out', Back.Out ],\r\n    [ 'bounce.out', Bounce.Out ],\r\n    [ 'quad.inout', Quadratic.InOut ],\r\n    [ 'cubic.inout', Cubic.InOut ],\r\n    [ 'quart.inout', Quartic.InOut ],\r\n    [ 'quint.inout', Quintic.InOut ],\r\n    [ 'sine.inout', Sine.InOut ],\r\n    [ 'expo.inout', Expo.InOut ],\r\n    [ 'circ.inout', Circular.InOut ],\r\n    [ 'elastic.inout', Elastic.InOut ],\r\n    [ 'back.inout', Back.InOut ],\r\n    [ 'bounce.inout', Bounce.InOut ]\r\n]);\r\n\r\n//  Allows GetEase('Back'), GetEase('Expo.InOut'), GetEase('Export.easeOut') or lower-case\r\n\r\nexport function GetEase (name: string): Function\r\n{\r\n    name = name.toLowerCase();\r\n    name = name.replace('ease', '');\r\n\r\n    if (EaseMap.has(name))\r\n    {\r\n        return EaseMap.get(name);\r\n    }\r\n    else\r\n    {\r\n        return Linear;\r\n    }\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Calculate the fuzzy ceiling of the given value.\r\n *\r\n * @function Phaser.Math.Fuzzy.Ceil\r\n * @since 3.0.0\r\n *\r\n * @param {number} value - The value.\r\n * @param {number} [epsilon=0.0001] - The epsilon.\r\n *\r\n * @return {number} The fuzzy ceiling of the value.\r\n */\r\nexport function FuzzyCeil (value: number, epsilon: number = 0.0001): number\r\n{\r\n    return Math.ceil(value - epsilon);\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Check whether the given values are fuzzily equal.\r\n *\r\n * Two numbers are fuzzily equal if their difference is less than `epsilon`.\r\n *\r\n * @function Phaser.Math.Fuzzy.Equal\r\n * @since 3.0.0\r\n *\r\n * @param {number} a - The first value.\r\n * @param {number} b - The second value.\r\n * @param {number} [epsilon=0.0001] - The epsilon.\r\n *\r\n * @return {boolean} `true` if the values are fuzzily equal, otherwise `false`.\r\n */\r\nexport function FuzzyEqual (a: number, b: number, epsilon: number = 0.0001): boolean\r\n{\r\n    return Math.abs(a - b) < epsilon;\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Calculate the fuzzy floor of the given value.\r\n *\r\n * @function Phaser.Math.Fuzzy.Floor\r\n * @since 3.0.0\r\n *\r\n * @param {number} value - The value.\r\n * @param {number} [epsilon=0.0001] - The epsilon.\r\n *\r\n * @return {number} The floor of the value.\r\n */\r\nexport function FuzzyFloor (value: number, epsilon: number = 0.0001): number\r\n{\r\n    return Math.floor(value + epsilon);\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Check whether `a` is fuzzily greater than `b`.\r\n *\r\n * `a` is fuzzily greater than `b` if it is more than `b - epsilon`.\r\n *\r\n * @function Phaser.Math.Fuzzy.GreaterThan\r\n * @since 3.0.0\r\n *\r\n * @param {number} a - The first value.\r\n * @param {number} b - The second value.\r\n * @param {number} [epsilon=0.0001] - The epsilon.\r\n *\r\n * @return {boolean} `true` if `a` is fuzzily greater than than `b`, otherwise `false`.\r\n */\r\nexport function FuzzyGreaterThan (a: number, b: number, epsilon: number = 0.0001): boolean\r\n{\r\n    return a > b - epsilon;\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Check whether `a` is fuzzily less than `b`.\r\n *\r\n * `a` is fuzzily less than `b` if it is less than `b + epsilon`.\r\n *\r\n * @function Phaser.Math.Fuzzy.LessThan\r\n * @since 3.0.0\r\n *\r\n * @param {number} a - The first value.\r\n * @param {number} b - The second value.\r\n * @param {number} [epsilon=0.0001] - The epsilon.\r\n *\r\n * @return {boolean} `true` if `a` is fuzzily less than `b`, otherwise `false`.\r\n */\r\nexport function FuzzyLessThan (a: number, b: number, epsilon: number = 0.0001): boolean\r\n{\r\n    return a < b + epsilon;\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nimport { FuzzyCeil } from './FuzzyCeil';\r\nimport { FuzzyEqual } from './FuzzyEqual';\r\nimport { FuzzyFloor } from './FuzzyFloor';\r\nimport { FuzzyGreaterThan } from './FuzzyGreaterThan';\r\nimport { FuzzyLessThan } from './FuzzyLessThan';\r\n\r\n// TODO - The Epsilon values can move to a Config setter\r\n\r\nexport {\r\n    FuzzyCeil,\r\n    FuzzyEqual,\r\n    FuzzyFloor,\r\n    FuzzyGreaterThan,\r\n    FuzzyLessThan\r\n};\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Calculates the factorial of a given number for integer values greater than 0.\r\n *\r\n * @function Phaser.Math.Factorial\r\n * @since 3.0.0\r\n *\r\n * @param {number} value - A positive integer to calculate the factorial of.\r\n *\r\n * @return {number} The factorial of the given number.\r\n */\r\nexport function Factorial (value: number): number\r\n{\r\n    if (value === 0)\r\n    {\r\n        return 1;\r\n    }\r\n\r\n    let res = value;\r\n\r\n    while (--value)\r\n    {\r\n        res *= value;\r\n    }\r\n\r\n    return res;\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nimport { Factorial } from './Factorial';\r\n\r\n/**\r\n * Calculates the Bernstein basis from the three factorial coefficients.\r\n *\r\n * @function Phaser.Math.Bernstein\r\n * @since 3.0.0\r\n *\r\n * @param {number} n - The first value.\r\n * @param {number} i - The second value.\r\n *\r\n * @return {number} The Bernstein basis of Factorial(n) / Factorial(i) / Factorial(n - i)\r\n */\r\nexport function Bernstein (n: number, i: number): number\r\n{\r\n    return Factorial(n) / Factorial(i) / Factorial(n - i);\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nimport { Bernstein } from '../Bernstein';\r\n\r\n/**\r\n * A bezier interpolation method.\r\n *\r\n * @function Phaser.Math.Interpolation.Bezier\r\n * @since 3.0.0\r\n *\r\n * @param {number[]} v - The input array of values to interpolate between.\r\n * @param {number} k - The percentage of interpolation, between 0 and 1.\r\n *\r\n * @return {number} The interpolated value.\r\n */\r\nexport function BezierInterpolation (v: number[], k: number): number\r\n{\r\n    let b = 0;\r\n    const n = v.length - 1;\r\n\r\n    for (let i = 0; i <= n; i++)\r\n    {\r\n        b += Math.pow(1 - k, n - i) * Math.pow(k, i) * v[i] * Bernstein(n, i);\r\n    }\r\n\r\n    return b;\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nimport { CatmullRom } from '../CatmullRom';\r\n\r\n/**\r\n * A Catmull-Rom interpolation method.\r\n *\r\n * @function Phaser.Math.Interpolation.CatmullRom\r\n * @since 3.0.0\r\n *\r\n * @param {number[]} v - The input array of values to interpolate between.\r\n * @param {number} k - The percentage of interpolation, between 0 and 1.\r\n *\r\n * @return {number} The interpolated value.\r\n */\r\nexport function CatmullRomInterpolation (v: number[], k: number): number\r\n{\r\n    const m = v.length - 1;\r\n    let f = m * k;\r\n    let i = Math.floor(f);\r\n\r\n    if (v[0] === v[m])\r\n    {\r\n        if (k < 0)\r\n        {\r\n            i = Math.floor(f = m * (1 + k));\r\n        }\r\n\r\n        return CatmullRom(f - i, v[(i - 1 + m) % m], v[i], v[(i + 1) % m], v[(i + 2) % m]);\r\n    }\r\n    else\r\n    {\r\n        if (k < 0)\r\n        {\r\n            return v[0] - (CatmullRom(-f, v[0], v[0], v[1], v[1]) - v[0]);\r\n        }\r\n\r\n        if (k > 1)\r\n        {\r\n            return v[m] - (CatmullRom(f - m, v[m], v[m], v[m - 1], v[m - 1]) - v[m]);\r\n        }\r\n\r\n        return CatmullRom(f - i, v[i ? i - 1 : 0], v[i], v[m < i + 1 ? m : i + 1], v[m < i + 2 ? m : i + 2]);\r\n    }\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * @ignore\r\n */\r\nfunction P0 (t: number, p: number): number\r\n{\r\n    const k = 1 - t;\r\n\r\n    return k * k * k * p;\r\n}\r\n\r\n/**\r\n * @ignore\r\n */\r\nfunction P1 (t: number, p: number): number\r\n{\r\n    const k = 1 - t;\r\n\r\n    return 3 * k * k * t * p;\r\n}\r\n\r\n/**\r\n * @ignore\r\n */\r\nfunction P2 (t: number, p: number): number\r\n{\r\n    return 3 * (1 - t) * t * t * p;\r\n}\r\n\r\n/**\r\n * @ignore\r\n */\r\nfunction P3 (t: number, p: number): number\r\n{\r\n    return t * t * t * p;\r\n}\r\n\r\n/**\r\n * A cubic bezier interpolation method.\r\n *\r\n * https://medium.com/@adrian_cooney/bezier-interpolation-13b68563313a\r\n *\r\n * @function Phaser.Math.Interpolation.CubicBezier\r\n * @since 3.0.0\r\n *\r\n * @param {number} t - The percentage of interpolation, between 0 and 1.\r\n * @param {number} p0 - The start point.\r\n * @param {number} p1 - The first control point.\r\n * @param {number} p2 - The second control point.\r\n * @param {number} p3 - The end point.\r\n *\r\n * @return {number} The interpolated value.\r\n */\r\nexport function CubicBezierInterpolation (t: number, p0: number, p1: number, p2: number, p3: number): number\r\n{\r\n    return P0(t, p0) + P1(t, p1) + P2(t, p2) + P3(t, p3);\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Calculates a linear (interpolation) value over t.\r\n *\r\n * @function Phaser.Math.Linear\r\n * @since 3.0.0\r\n *\r\n * @param {number} p0 - The first point.\r\n * @param {number} p1 - The second point.\r\n * @param {number} t - The percentage between p0 and p1 to return, represented as a number between 0 and 1.\r\n *\r\n * @return {number} The step t% of the way between p0 and p1.\r\n */\r\nexport function Linear (p0: number, p1: number, t: number): number\r\n{\r\n    return (p1 - p0) * t + p0;\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nimport { Linear } from '../Linear';\r\n\r\n/**\r\n * A linear interpolation method.\r\n *\r\n * @function Phaser.Math.Interpolation.Linear\r\n * @since 3.0.0\r\n * @see {@link https://en.wikipedia.org/wiki/Linear_interpolation}\r\n *\r\n * @param {number[]} v - The input array of values to interpolate between.\r\n * @param {!number} k - The percentage of interpolation, between 0 and 1.\r\n *\r\n * @return {!number} The interpolated value.\r\n */\r\nexport function LinearInterpolation (v: number[], k: number): number\r\n{\r\n    const m = v.length - 1;\r\n    const f = m * k;\r\n    const i = Math.floor(f);\r\n\r\n    if (k < 0)\r\n    {\r\n        return Linear(v[0], v[1], f);\r\n    }\r\n    else if (k > 1)\r\n    {\r\n        return Linear(v[m], v[m - 1], m - f);\r\n    }\r\n    else\r\n    {\r\n        return Linear(v[i], v[(i + 1 > m) ? m : i + 1], f - i);\r\n    }\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * @ignore\r\n */\r\nfunction P0 (t: number, p: number): number\r\n{\r\n    const k = 1 - t;\r\n\r\n    return k * k * p;\r\n}\r\n\r\n/**\r\n * @ignore\r\n */\r\nfunction P1 (t: number, p: number): number\r\n{\r\n    return 2 * (1 - t) * t * p;\r\n}\r\n\r\n/**\r\n * @ignore\r\n */\r\nfunction P2 (t: number, p: number): number\r\n{\r\n    return t * t * p;\r\n}\r\n\r\n// https://github.com/mrdoob/three.js/blob/master/src/extras/core/Interpolations.js\r\n\r\n/**\r\n * A quadratic bezier interpolation method.\r\n *\r\n * @function Phaser.Math.Interpolation.QuadraticBezier\r\n * @since 3.2.0\r\n *\r\n * @param {number} t - The percentage of interpolation, between 0 and 1.\r\n * @param {number} p0 - The start point.\r\n * @param {number} p1 - The control point.\r\n * @param {number} p2 - The end point.\r\n *\r\n * @return {number} The interpolated value.\r\n */\r\nexport function QuadraticBezierInterpolation (t: number, p0: number, p1: number, p2: number): number\r\n{\r\n    return P0(t, p0) + P1(t, p1) + P2(t, p2);\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Calculate a smooth interpolation percentage of `x` between `min` and `max`.\r\n *\r\n * The function receives the number `x` as an argument and returns 0 if `x` is less than or equal to the left edge,\r\n * 1 if `x` is greater than or equal to the right edge, and smoothly interpolates, using a Hermite polynomial,\r\n * between 0 and 1 otherwise.\r\n *\r\n * @function Phaser.Math.SmoothStep\r\n * @since 3.0.0\r\n * @see {@link https://en.wikipedia.org/wiki/Smoothstep}\r\n *\r\n * @param {number} x - The input value.\r\n * @param {number} min - The minimum value, also known as the 'left edge', assumed smaller than the 'right edge'.\r\n * @param {number} max - The maximum value, also known as the 'right edge', assumed greater than the 'left edge'.\r\n *\r\n * @return {number} The percentage of interpolation, between 0 and 1.\r\n */\r\nexport function SmoothStep (x: number, min: number, max: number): number\r\n{\r\n    if (x <= min)\r\n    {\r\n        return 0;\r\n    }\r\n\r\n    if (x >= max)\r\n    {\r\n        return 1;\r\n    }\r\n\r\n    x = (x - min) / (max - min);\r\n\r\n    return x * x * (3 - 2 * x);\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nimport { SmoothStep } from '../SmoothStep';\r\n\r\n/**\r\n * A Smooth Step interpolation method.\r\n *\r\n * @function Phaser.Math.Interpolation.SmoothStep\r\n * @since 3.9.0\r\n * @see {@link https://en.wikipedia.org/wiki/Smoothstep}\r\n *\r\n * @param {number} t - The percentage of interpolation, between 0 and 1.\r\n * @param {number} min - The minimum value, also known as the 'left edge', assumed smaller than the 'right edge'.\r\n * @param {number} max - The maximum value, also known as the 'right edge', assumed greater than the 'left edge'.\r\n *\r\n * @return {number} The interpolated value.\r\n */\r\nexport function SmoothStepInterpolation (t: number, min: number, max: number): number\r\n{\r\n    return min + (max - min) * SmoothStep(t, 0, 1);\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Calculate a smoother interpolation percentage of `x` between `min` and `max`.\r\n *\r\n * The function receives the number `x` as an argument and returns 0 if `x` is less than or equal to the left edge,\r\n * 1 if `x` is greater than or equal to the right edge, and smoothly interpolates, using a Hermite polynomial,\r\n * between 0 and 1 otherwise.\r\n *\r\n * Produces an even smoother interpolation than {@link Phaser.Math.SmoothStep}.\r\n *\r\n * @function Phaser.Math.SmootherStep\r\n * @since 3.0.0\r\n * @see {@link https://en.wikipedia.org/wiki/Smoothstep#Variations}\r\n *\r\n * @param {number} x - The input value.\r\n * @param {number} min - The minimum value, also known as the 'left edge', assumed smaller than the 'right edge'.\r\n * @param {number} max - The maximum value, also known as the 'right edge', assumed greater than the 'left edge'.\r\n *\r\n * @return {number} The percentage of interpolation, between 0 and 1.\r\n */\r\nexport function SmootherStep (x: number, min: number, max: number): number\r\n{\r\n    x = Math.max(0, Math.min(1, (x - min) / (max - min)));\r\n\r\n    return x * x * x * (x * (x * 6 - 15) + 10);\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nimport { SmootherStep } from '../SmootherStep';\r\n\r\n/**\r\n * A Smoother Step interpolation method.\r\n *\r\n * @function Phaser.Math.Interpolation.SmootherStep\r\n * @since 3.9.0\r\n * @see {@link https://en.wikipedia.org/wiki/Smoothstep#Variations}\r\n *\r\n * @param {number} t - The percentage of interpolation, between 0 and 1.\r\n * @param {number} min - The minimum value, also known as the 'left edge', assumed smaller than the 'right edge'.\r\n * @param {number} max - The maximum value, also known as the 'right edge', assumed greater than the 'left edge'.\r\n *\r\n * @return {number} The interpolated value.\r\n */\r\nexport function SmootherStepInterpolation (t: number, min: number, max: number): number\r\n{\r\n    return min + (max - min) * SmootherStep(t, 0, 1);\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nimport { BezierInterpolation } from './BezierInterpolation';\r\nimport { CatmullRomInterpolation } from './CatmullRomInterpolation';\r\nimport { CubicBezierInterpolation } from './CubicBezierInterpolation';\r\nimport { LinearInterpolation } from './LinearInterpolation';\r\nimport { QuadraticBezierInterpolation } from './QuadraticBezierInterpolation';\r\nimport { SmoothStepInterpolation } from './SmoothStepInterpolation';\r\nimport { SmootherStepInterpolation } from './SmootherStepInterpolation';\r\n\r\nexport {\r\n    BezierInterpolation,\r\n    CatmullRomInterpolation,\r\n    CubicBezierInterpolation,\r\n    LinearInterpolation,\r\n    QuadraticBezierInterpolation,\r\n    SmoothStepInterpolation,\r\n    SmootherStepInterpolation\r\n};\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Checks if an array can be used as a matrix.\r\n *\r\n * A matrix is a two-dimensional array (array of arrays), where all sub-arrays (rows) have the same length. There must be at least two rows:\r\n *\r\n * ```\r\n *    [\r\n *        [ 1, 1, 1, 1, 1, 1 ],\r\n *        [ 2, 0, 0, 0, 0, 4 ],\r\n *        [ 2, 0, 1, 2, 0, 4 ],\r\n *        [ 2, 0, 3, 4, 0, 4 ],\r\n *        [ 2, 0, 0, 0, 0, 4 ],\r\n *        [ 3, 3, 3, 3, 3, 3 ]\r\n *    ]\r\n * ```\r\n */\r\nexport function CheckMatrix (matrix: unknown[][]): boolean\r\n{\r\n    if (!Array.isArray(matrix) || matrix.length < 2 || !Array.isArray(matrix[0]))\r\n    {\r\n        return false;\r\n    }\r\n\r\n    //  How long is the first row?\r\n    const size = matrix[0].length;\r\n\r\n    //  Validate the rest of the rows are the same length\r\n    for (let i = 1; i < matrix.length; i++)\r\n    {\r\n        if (matrix[i].length !== size)\r\n        {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    return true;\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nimport { CheckMatrix } from './CheckMatrix';\r\n\r\n/**\r\n * Generates a string (which you can pass to console.log) from the given Array Matrix.\r\n */\r\nexport function MatrixToString (matrix: unknown[][]): string\r\n{\r\n    let str = '';\r\n\r\n    if (!CheckMatrix(matrix))\r\n    {\r\n        return str;\r\n    }\r\n\r\n    for (let r = 0; r < matrix.length; r++)\r\n    {\r\n        for (let c = 0; c < matrix[r].length; c++)\r\n        {\r\n            const cell = matrix[r][c].toString();\r\n\r\n            if (cell !== 'undefined')\r\n            {\r\n                str = str.padEnd(2, cell);\r\n            }\r\n            else\r\n            {\r\n                str += '?';\r\n            }\r\n\r\n            if (c < matrix[r].length - 1)\r\n            {\r\n                str += ' |';\r\n            }\r\n        }\r\n\r\n        if (r < matrix.length - 1)\r\n        {\r\n            str += '\\n';\r\n\r\n            for (let i = 0; i < matrix[r].length; i++)\r\n            {\r\n                str += '---';\r\n\r\n                if (i < matrix[r].length - 1)\r\n                {\r\n                    str += '+';\r\n                }\r\n            }\r\n\r\n            str += '\\n';\r\n        }\r\n\r\n    }\r\n\r\n    return str;\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Reverses the columns in the given Array Matrix.\r\n */\r\nexport function ReverseColumns (matrix: unknown[][]): unknown[][]\r\n{\r\n    return matrix.reverse();\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Reverses the rows in the given Array Matrix.\r\n */\r\nexport function ReverseRows (matrix: unknown[][]): unknown[][]\r\n{\r\n    for (let i = 0; i < matrix.length; i++)\r\n    {\r\n        matrix[i].reverse();\r\n    }\r\n\r\n    return matrix;\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Transposes the elements of the given matrix (array of arrays).\r\n *\r\n * The transpose of a matrix is a new matrix whose rows are the columns of the original.\r\n */\r\nexport function TransposeMatrix (matrix: unknown[][]): unknown[][]\r\n{\r\n    const sourceRowCount = matrix.length;\r\n    const sourceColCount = matrix[0].length;\r\n\r\n    const result = new Array(sourceColCount);\r\n\r\n    for (let i = 0; i < sourceColCount; i++)\r\n    {\r\n        result[i] = new Array(sourceRowCount);\r\n\r\n        for (let j = sourceRowCount - 1; j > -1; j--)\r\n        {\r\n            result[i][j] = matrix[j][i];\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nimport { CheckMatrix } from './CheckMatrix';\r\nimport { TransposeMatrix } from './TransposeMatrix';\r\n\r\n/**\r\n * Rotates the array matrix based on the given rotation value.\r\n *\r\n * The value can be given in degrees: 90, -90, 270, -270 or 180,\r\n * or a string command: `rotateLeft`, `rotateRight` or `rotate180`.\r\n *\r\n * Based on the routine from {@link http://jsfiddle.net/MrPolywhirl/NH42z/}.\r\n */\r\nexport function RotateMatrix (matrix: unknown[][], direction: number | string = 90): unknown[][]\r\n{\r\n    if (!CheckMatrix(matrix))\r\n    {\r\n        return matrix;\r\n    }\r\n\r\n    if (typeof direction !== 'string')\r\n    {\r\n        direction = ((direction % 360) + 360) % 360;\r\n    }\r\n\r\n    if (direction === 90 || direction === -270 || direction === 'rotateLeft')\r\n    {\r\n        matrix = TransposeMatrix(matrix);\r\n        matrix.reverse();\r\n    }\r\n    else if (direction === -90 || direction === 270 || direction === 'rotateRight')\r\n    {\r\n        matrix.reverse();\r\n        matrix = TransposeMatrix(matrix);\r\n    }\r\n    else if (Math.abs(direction as number) === 180 || direction === 'rotate180')\r\n    {\r\n        for (let i = 0; i < matrix.length; i++)\r\n        {\r\n            matrix[i].reverse();\r\n        }\r\n\r\n        matrix.reverse();\r\n    }\r\n\r\n    return matrix;\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nimport { RotateMatrix } from './RotateMatrix';\r\n\r\n/**\r\n * Rotates the array matrix 180 degrees.\r\n *\r\n * @function Phaser.Utils.Array.Matrix.Rotate180\r\n * @since 3.0.0\r\n *\r\n * @generic T\r\n * @genericUse {T[][]} - [matrix,$return]\r\n *\r\n * @param {T[][]} [matrix] - The array to rotate.\r\n *\r\n * @return {T[][]} The rotated matrix array. The source matrix should be discard for the returned matrix.\r\n */\r\nexport function Rotate180 (matrix: unknown[][]): unknown[][]\r\n{\r\n    return RotateMatrix(matrix, 180);\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nimport { RotateMatrix } from './RotateMatrix';\r\n\r\n/**\r\n * Rotates the array matrix to the left (or 90 degrees)\r\n *\r\n * @function Phaser.Utils.Array.Matrix.RotateLeft\r\n * @since 3.0.0\r\n *\r\n * @generic T\r\n * @genericUse {T[][]} - [matrix,$return]\r\n *\r\n * @param {T[][]} [matrix] - The array to rotate.\r\n *\r\n * @return {T[][]} The rotated matrix array. The source matrix should be discard for the returned matrix.\r\n */\r\nexport function RotateLeft (matrix: unknown[][]): unknown[][]\r\n{\r\n    return RotateMatrix(matrix, 90);\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nimport { RotateMatrix } from './RotateMatrix';\r\n\r\n/**\r\n * Rotates the array matrix to the left (or -90 degrees)\r\n *\r\n * @function Phaser.Utils.Array.Matrix.RotateRight\r\n * @since 3.0.0\r\n *\r\n * @generic T\r\n * @genericUse {T[][]} - [matrix,$return]\r\n *\r\n * @param {T[][]} [matrix] - The array to rotate.\r\n *\r\n * @return {T[][]} The rotated matrix array. The source matrix should be discard for the returned matrix.\r\n */\r\nexport function RotateRight (matrix: unknown[][]): unknown[][]\r\n{\r\n    return RotateMatrix(matrix, -90);\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Create an array representing the range of numbers (usually integers), between, and inclusive of,\r\n * the given `start` and `end` arguments. For example:\r\n *\r\n * `var array = numberArray(2, 4); // array = [2, 3, 4]`\r\n * `var array = numberArray(0, 9); // array = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]`\r\n *\r\n * This is equivalent to `numberArrayStep(start, end, 1)`.\r\n *\r\n * You can optionally provide a prefix and / or suffix string. If given the array will contain\r\n * strings, not integers. For example:\r\n *\r\n * `var array = numberArray(1, 4, 'Level '); // array = [\"Level 1\", \"Level 2\", \"Level 3\", \"Level 4\"]`\r\n * `var array = numberArray(5, 7, 'HD-', '.png'); // array = [\"HD-5.png\", \"HD-6.png\", \"HD-7.png\"]`\r\n *\r\n * @param {number} start - The minimum value the array starts with.\r\n * @param {number} end - The maximum value the array contains.\r\n * @param {string} [prefix] - Optional prefix to place before the number. If provided the array will contain strings, not integers.\r\n * @param {string} [suffix] - Optional suffix to place after the number. If provided the array will contain strings, not integers.\r\n *\r\n * @return {(number[]|string[])} The array of number values, or strings if a prefix or suffix was provided.\r\n */\r\nexport function NumberArray (start: number, end: number, prefix?: string, suffix?: string): (string | number)[]\r\n{\r\n    const result: (string | number)[] = [];\r\n\r\n    for (let i = start; i <= end; i++)\r\n    {\r\n        if (prefix || suffix)\r\n        {\r\n            let key = (prefix) ? prefix + i.toString() : i.toString();\r\n\r\n            if (suffix)\r\n            {\r\n                key = key.concat(suffix);\r\n            }\r\n\r\n            result.push(key);\r\n        }\r\n        else\r\n        {\r\n            result.push(i);\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Round a given number so it is further away from zero. That is, positive numbers are rounded up, and negative numbers are rounded down.\r\n *\r\n * @function Phaser.Math.RoundAwayFromZero\r\n * @since 3.0.0\r\n *\r\n * @param {number} value - The number to round.\r\n *\r\n * @return {number} The rounded number, rounded away from zero.\r\n */\r\nexport function RoundAwayFromZero (value: number): number\r\n{\r\n    // \"Opposite\" of truncate.\r\n    return (value > 0) ? Math.ceil(value) : Math.floor(value);\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nimport { RoundAwayFromZero } from '../../math/RoundAwayFromZero';\r\n\r\n/**\r\n * Create an array of numbers (positive and/or negative) progressing from `start`\r\n * up to but not including `end` by advancing by `step`.\r\n *\r\n * If `start` is less than `end` a zero-length range is created unless a negative `step` is specified.\r\n *\r\n * Certain values for `start` and `end` (eg. NaN/undefined/null) are currently coerced to 0;\r\n * for forward compatibility make sure to pass in actual numbers.\r\n *\r\n * @example\r\n * NumberArrayStep(4);\r\n * // => [0, 1, 2, 3]\r\n *\r\n * NumberArrayStep(1, 5);\r\n * // => [1, 2, 3, 4]\r\n *\r\n * NumberArrayStep(0, 20, 5);\r\n * // => [0, 5, 10, 15]\r\n *\r\n * NumberArrayStep(0, -4, -1);\r\n * // => [0, -1, -2, -3]\r\n *\r\n * NumberArrayStep(1, 4, 0);\r\n * // => [1, 1, 1]\r\n *\r\n * NumberArrayStep(0);\r\n * // => []\r\n *\r\n * @param {number} [start=0] - The start of the range.\r\n * @param {number} [end=null] - The end of the range.\r\n * @param {number} [step=1] - The value to increment or decrement by.\r\n *\r\n * @return {number[]} The array of number values.\r\n */\r\nexport function NumberArrayStep (start: number, end: number, step: number): number[]\r\n{\r\n    const result: number[] = [];\r\n\r\n    const total = Math.max(RoundAwayFromZero((end - start) / (step || 1)), 0);\r\n\r\n    for (let i = 0; i < total; i++)\r\n    {\r\n        result.push(start);\r\n\r\n        start += step;\r\n    }\r\n\r\n    return result;\r\n}\r\n", "/**\r\n * @author       Niklas von Hertzen (https://github.com/niklasvh/base64-arraybuffer)\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nconst chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\r\n\r\n/**\r\n * Converts an ArrayBuffer into a base64 string.\r\n *\r\n * The resulting string can optionally be a data uri if the `mediaType` argument is provided.\r\n *\r\n * See https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs for more details.\r\n *\r\n * @function Phaser.Utils.Base64.ArrayBufferToBase64\r\n * @since 3.18.0\r\n *\r\n * @param {ArrayBuffer} arrayBuffer - The Array Buffer to encode.\r\n * @param {string} [mediaType] - An optional media type, i.e. `audio/ogg` or `image/jpeg`. If included the resulting string will be a data URI.\r\n *\r\n * @return {string} The base64 encoded Array Buffer.\r\n */\r\nexport function ArrayBufferToBase64 (arrayBuffer: ArrayBuffer, mediaType: string): string\r\n{\r\n    const bytes = new Uint8Array(arrayBuffer);\r\n    const len = bytes.length;\r\n\r\n    let base64 = (mediaType) ? 'data:' + mediaType + ';base64,' : '';\r\n\r\n    for (let i = 0; i < len; i += 3)\r\n    {\r\n        base64 += chars[bytes[i] >> 2];\r\n        base64 += chars[((bytes[i] & 3) << 4) | (bytes[i + 1] >> 4)];\r\n        base64 += chars[((bytes[i + 1] & 15) << 2) | (bytes[i + 2] >> 6)];\r\n        base64 += chars[bytes[i + 2] & 63];\r\n    }\r\n\r\n    if ((len % 3) === 2)\r\n    {\r\n        base64 = base64.substring(0, base64.length - 1) + '=';\r\n    }\r\n    else if (len % 3 === 1)\r\n    {\r\n        base64 = base64.substring(0, base64.length - 2) + '==';\r\n    }\r\n\r\n    return base64;\r\n}\r\n", "/**\r\n * @author       Niklas von Hertzen (https://github.com/niklasvh/base64-arraybuffer)\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nconst chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\r\n\r\n//  Use a lookup table to find the index.\r\nconst lookup = new Uint8Array(256);\r\n\r\nfor (let i = 0; i < chars.length; i++)\r\n{\r\n    lookup[chars.charCodeAt(i)] = i;\r\n}\r\n\r\n/**\r\n * Converts a base64 string, either with or without a data uri, into an Array Buffer.\r\n *\r\n * @function Phaser.Utils.Base64.Base64ToArrayBuffer\r\n * @since 3.18.0\r\n *\r\n * @param {string} base64 - The base64 string to be decoded. Can optionally contain a data URI header, which will be stripped out prior to decoding.\r\n *\r\n * @return {ArrayBuffer} An ArrayBuffer decoded from the base64 data.\r\n */\r\nexport function Base64ToArrayBuffer (base64: string): ArrayBuffer\r\n{\r\n    //  Is it a data uri? if so, strip the header away\r\n    base64 = base64.substr(base64.indexOf(',') + 1);\r\n\r\n    const len = base64.length;\r\n    let bufferLength = len * 0.75;\r\n    let p = 0;\r\n    let encoded1;\r\n    let encoded2;\r\n    let encoded3;\r\n    let encoded4;\r\n\r\n    if (base64[len - 1] === '=')\r\n    {\r\n        bufferLength--;\r\n\r\n        if (base64[len - 2] === '=')\r\n        {\r\n            bufferLength--;\r\n        }\r\n    }\r\n\r\n    const arrayBuffer = new ArrayBuffer(bufferLength);\r\n    const bytes = new Uint8Array(arrayBuffer);\r\n\r\n    for (let i = 0; i < len; i += 4)\r\n    {\r\n        encoded1 = lookup[base64.charCodeAt(i)];\r\n        encoded2 = lookup[base64.charCodeAt(i + 1)];\r\n        encoded3 = lookup[base64.charCodeAt(i + 2)];\r\n        encoded4 = lookup[base64.charCodeAt(i + 3)];\r\n\r\n        bytes[p++] = (encoded1 << 2) | (encoded2 >> 4);\r\n        bytes[p++] = ((encoded2 & 15) << 4) | (encoded3 >> 2);\r\n        bytes[p++] = ((encoded3 & 3) << 6) | (encoded4 & 63);\r\n    }\r\n\r\n    return arrayBuffer;\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Takes a string and removes the character at the given index.\r\n *\r\n * @function Phaser.Utils.String.RemoveAt\r\n * @since 3.50.0\r\n *\r\n * @param {string} string - The string to be worked on.\r\n * @param {number} index - The index of the character to be removed.\r\n *\r\n * @return {string} The modified string.\r\n */\r\nexport function RemoveAt (string: string, index: number): string\r\n{\r\n    if (index === 0)\r\n    {\r\n        return string.slice(1);\r\n    }\r\n    else\r\n    {\r\n        return string.slice(0, index - 1) + string.slice(index);\r\n    }\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Takes the given string and reverses it, returning the reversed string.\r\n * For example if given the string `Atari 520ST` it would return `TS025 iratA`.\r\n *\r\n * @function Phaser.Utils.String.Reverse\r\n * @since 3.0.0\r\n *\r\n * @param {string} string - The string to be reversed.\r\n *\r\n * @return {string} The reversed string.\r\n */\r\nexport function Reverse (string: string): string\r\n{\r\n    return string.split('').reverse().join('');\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Capitalizes the first letter of a string if there is one.\r\n * @example\r\n * UppercaseFirst('abc');\r\n * // returns 'Abc'\r\n * @example\r\n * UppercaseFirst('the happy family');\r\n * // returns 'The happy family'\r\n * @example\r\n * UppercaseFirst('');\r\n * // returns ''\r\n *\r\n * @function Phaser.Utils.String.UppercaseFirst\r\n * @since 3.0.0\r\n *\r\n * @param {string} str - The string to capitalize.\r\n *\r\n * @return {string} A new string, same as the first, but with the first letter capitalized.\r\n */\r\nexport function UppercaseFirst (str: string): string\r\n{\r\n    return str && str[0].toUpperCase() + str.slice(1);\r\n}\r\n", "export function NOOP (): void\r\n{\r\n    //  No-op\r\n}\r\n", "import { NOOP } from '../../utils';\r\n\r\n//  4x4 Matrix in column-major format\r\n\r\n/**\r\n * data[0] = m00\r\n * data[1] = m01\r\n * data[2] = m02\r\n * data[3] = m03\r\n * data[4] = m10\r\n * data[5] = m11\r\n * data[6] = m12\r\n * data[7] = m13\r\n * data[8] = m20\r\n * data[9] = m21\r\n * data[10] = m22\r\n * data[11] = m23\r\n * data[12] = m30\r\n * data[13] = m31\r\n * data[14] = m32\r\n * data[15] = m33\r\n */\r\n\r\nexport class Matrix4\r\n{\r\n    data: Float32Array;\r\n\r\n    onChange: (mat4: Matrix4) => void;\r\n\r\n    constructor (src?: Matrix4 | Float32List)\r\n    {\r\n        const data = new Float32Array(16);\r\n\r\n        this.data = data;\r\n        this.onChange = NOOP;\r\n\r\n        if (src)\r\n        {\r\n            if (Array.isArray(src))\r\n            {\r\n                this.fromArray(src);\r\n            }\r\n            else\r\n            {\r\n                this.fromArray((src as Matrix4).data);\r\n            }\r\n        }\r\n        else\r\n        {\r\n            data[0] = 1;\r\n            data[5] = 1;\r\n            data[10] = 1;\r\n            data[15] = 1;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param m00 - 1st value of 1st row\r\n     * @param m01 - 2nd value of 1st row\r\n     * @param m02 - 3rd value of 1st row\r\n     * @param m03 - 4th value of 1st row\r\n     * @param m10 - 1st value of 2nd row\r\n     * @param m11 - 2nd value of 2nd row\r\n     * @param m12 - 3rd value of 2nd row\r\n     * @param m13 - 4th value of 2nd row\r\n     * @param m20 - 1st value of 3rd row\r\n     * @param m21 - 2nd value of 3rd row\r\n     * @param m22 - 3rd value of 3rd row\r\n     * @param m23 - 4th value of 3rd row\r\n     * @param m30 - 1st value of 4th row\r\n     * @param m31 - 2nd value of 4th row\r\n     * @param m32 - 3rd value of 4th row\r\n     * @param m33 - 4th value of 4th row\r\n     */\r\n    set (m00: number, m01: number, m02: number, m03: number, m10: number, m11: number, m12: number, m13: number, m20: number, m21: number, m22: number, m23: number, m30: number, m31: number, m32: number, m33: number): this\r\n    {\r\n        const data = this.data;\r\n\r\n        data[ 0 ] = m00;\r\n        data[ 1 ] = m01;\r\n        data[ 2 ] = m02;\r\n        data[ 3 ] = m03;\r\n\r\n        data[ 4 ] = m10;\r\n        data[ 5 ] = m11;\r\n        data[ 6 ] = m12;\r\n        data[ 7 ] = m13;\r\n\r\n        data[ 8 ] = m20;\r\n        data[ 9 ] = m21;\r\n        data[ 10 ] = m22;\r\n        data[ 11 ] = m23;\r\n\r\n        data[ 12 ] = m30;\r\n        data[ 13 ] = m31;\r\n        data[ 14 ] = m32;\r\n        data[ 15 ] = m33;\r\n\r\n        this.onChange(this);\r\n\r\n        return this;\r\n    }\r\n\r\n    toArray (dst: Float32List = [], index: number = 0): Float32List\r\n    {\r\n        const data = this.data;\r\n\r\n        for (let i = 0; i < 16; i++)\r\n        {\r\n            dst[ index + i ] = data[i];\r\n        }\r\n\r\n        return dst;\r\n    }\r\n\r\n    fromArray (src: Float32List, index: number = 0): this\r\n    {\r\n        const data = this.data;\r\n\r\n        for (let i = 0; i < 16; i++)\r\n        {\r\n            data[i] = src[ index + i ];\r\n        }\r\n\r\n        this.onChange(this);\r\n\r\n        return this;\r\n    }\r\n\r\n    toString (): string\r\n    {\r\n        return '[ mat4=' + this.data.join(', ') + ' ]';\r\n    }\r\n\r\n    destroy (): void\r\n    {\r\n        this.onChange = NOOP;\r\n        this.data = null;\r\n    }\r\n}\r\n", "export class Vec3\r\n{\r\n    x: number;\r\n    y: number;\r\n    z: number;\r\n\r\n    constructor (x: number = 0, y: number = 0, z: number = 0)\r\n    {\r\n        this.set(x, y, z);\r\n    }\r\n\r\n    set (x: number = 0, y: number = 0, z: number = 0): this\r\n    {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.z = z;\r\n\r\n        return this;\r\n    }\r\n\r\n    toArray (dst: Float32List = [], index: number = 0): Float32List\r\n    {\r\n        const { x, y, z } = this;\r\n\r\n        dst[ index ] = x;\r\n        dst[ index + 1 ] = y;\r\n        dst[ index + 2 ] = z;\r\n\r\n        return dst;\r\n    }\r\n\r\n    fromArray (src: Float32List, index: number = 0): this\r\n    {\r\n        return this.set(\r\n            src[ index ],\r\n            src[ index + 1 ],\r\n            src[ index + 2 ]\r\n        );\r\n    }\r\n\r\n    toString (): string\r\n    {\r\n        const { x, y, z } = this;\r\n\r\n        return `{ x=${x}, y=${y}, z=${z} }`;\r\n    }\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Returns the nearest power of 2 to the given `value`.\r\n *\r\n * @function Phaser.Math.Pow2.GetNext\r\n * @since 3.0.0\r\n *\r\n * @param {number} value - The value.\r\n *\r\n * @return {number} The nearest power of 2 to `value`.\r\n */\r\nexport function GetPowerOfTwo (value: number): number\r\n{\r\n    const index = Math.log(value) / 0.6931471805599453;\r\n\r\n    return (1 << Math.ceil(index));\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Tests the value and returns `true` if it is a power of two.\r\n *\r\n * @function Phaser.Math.Pow2.IsValue\r\n * @since 3.0.0\r\n *\r\n * @param {number} value - The value to check if it's a power of two.\r\n *\r\n * @return {boolean} Returns `true` if `value` is a power of two, otherwise `false`.\r\n */\r\nexport function IsValuePowerOfTwo (value: number): boolean\r\n{\r\n    return (value > 0 && (value & (value - 1)) === 0);\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Force a value within the boundaries by clamping it to the range `min`, `max`.\r\n *\r\n * @function Phaser.Math.Clamp\r\n * @since 3.0.0\r\n *\r\n * @param {number} value - The value to be clamped.\r\n * @param {number} min - The minimum bounds.\r\n * @param {number} max - The maximum bounds.\r\n *\r\n * @return {number} The clamped value.\r\n */\r\nexport function Clamp (value: number, min: number, max: number): number\r\n{\r\n    return Math.max(min, Math.min(max, value));\r\n}\r\n", "import { Vec3 } from './Vec3';\r\n\r\nexport function Vec3Backward (): Vec3\r\n{\r\n    return new Vec3(0, 0, -1);\r\n}\r\n", "import { Vec3 } from './Vec3';\r\n\r\nexport function Vec3Down (): Vec3\r\n{\r\n    return new Vec3(0, -1, 0);\r\n}\r\n", "import { Vec3 } from './Vec3';\r\n\r\nexport function Vec3Forward (): Vec3\r\n{\r\n    return new Vec3(0, 0, 1);\r\n}\r\n", "import { Vec3 } from './Vec3';\r\n\r\nexport function Vec3Left (): Vec3\r\n{\r\n    return new Vec3(-1, 0, 0);\r\n}\r\n", "import { Vec3 } from './Vec3';\r\n\r\nexport function Vec3Right (): Vec3\r\n{\r\n    return new Vec3(1, 0, 0);\r\n}\r\n", "import { Vec3 } from './Vec3';\r\n\r\nexport function Vec3Up (): Vec3\r\n{\r\n    return new Vec3(0, 1, 0);\r\n}\r\n", "import { Vec3 } from './Vec3';\r\n\r\nexport function Vec3Zero (): Vec3\r\n{\r\n    return new Vec3(0, 0, 0);\r\n}\r\n", "import { Vec3Backward } from './Vec3Backward';\r\nimport { Vec3Down } from './Vec3Down';\r\nimport { Vec3Forward } from './Vec3Forward';\r\nimport { Vec3Left } from './Vec3Left';\r\nimport { Vec3Right } from './Vec3Right';\r\nimport { Vec3Up } from './Vec3Up';\r\nimport { Vec3Zero } from './Vec3Zero';\r\n\r\nexport const UP = Vec3Up();\r\nexport const DOWN = Vec3Down();\r\nexport const LEFT = Vec3Left();\r\nexport const RIGHT = Vec3Right();\r\nexport const FORWARD = Vec3Forward();\r\nexport const BACKWARD = Vec3Backward();\r\nexport const ZERO = Vec3Zero();\r\n", "import { IRectangle } from '../../geom/rectangle/IRectangle';\r\nimport { Mat4Multiply } from '../mat4/Mat4Multiply';\r\nimport { Matrix4 } from '../mat4/Matrix4';\r\nimport { Vec3 } from './Vec3';\r\nimport { Vec3TransformMat4 } from './Vec3TransformMat4';\r\n\r\nconst tempMatrix1 = new Matrix4();\r\nconst tempMatrix2 = new Matrix4();\r\n\r\nexport function Vec3Project (v: Vec3, world: Matrix4, transform: Matrix4, viewport: IRectangle, out: Vec3 = new Vec3()): Vec3\r\n{\r\n    const { x, y, width, height } = viewport;\r\n\r\n    tempMatrix1.set(\r\n        width / 2, 0, 0, 0,\r\n        0, -height / 2, 0, 0,\r\n        0, 0, 0.5, 0,\r\n        x + width / 2, height / 2 + y, 0.5, 1\r\n    );\r\n\r\n    Mat4Multiply(world, transform, tempMatrix2);\r\n    Mat4Multiply(tempMatrix2, tempMatrix1, tempMatrix2);\r\n\r\n    return Vec3TransformMat4(v, tempMatrix2, out);\r\n}\r\n", "import { Mat4Invert } from '../mat4/Mat4Invert';\r\nimport { Mat4Multiply } from '../mat4/Mat4Multiply';\r\nimport { Matrix4 } from '../mat4/Matrix4';\r\nimport { Vec3 } from './Vec3';\r\nimport { Vec3Scale } from './Vec3Scale';\r\nimport { Vec3TransformMat4 } from './Vec3TransformMat4';\r\n\r\nconst matrix = new Matrix4();\r\nconst screenSource = new Vec3();\r\n\r\nexport function Vec3Unproject (v: Vec3, viewportWidth: number, viewportHeight: number, world: Matrix4, view: Matrix4, projection: Matrix4, out: Vec3 = new Vec3()): Vec3\r\n{\r\n    Mat4Multiply(world, view, matrix);\r\n    Mat4Multiply(matrix, projection, matrix);\r\n    Mat4Invert(matrix, matrix);\r\n\r\n    const { x, y, z } = v;\r\n\r\n    screenSource.set(\r\n        x / viewportWidth * 2 - 1,\r\n        -(y / viewportHeight * 2 - 1),\r\n        2 * z - 1\r\n    );\r\n\r\n    Vec3TransformMat4(screenSource, matrix, out);\r\n\r\n    const data = matrix.data;\r\n\r\n    const num = screenSource.x * data[3] + screenSource.y * data[7] + screenSource.z * data[11] + data[15];\r\n\r\n    //  if within epsilon?\r\n    return Vec3Scale(out, 1 / num, out);\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Snap a value to nearest grid slice, using ceil.\r\n *\r\n * Example: if you have an interval gap of `5` and a position of `12`... you will snap to `15`.\r\n * As will `14` snap to `15`... but `16` will snap to `20`.\r\n *\r\n * @function Phaser.Math.Snap.Ceil\r\n * @since 3.0.0\r\n *\r\n * @param {number} value - The value to snap.\r\n * @param {number} gap - The interval gap of the grid.\r\n * @param {number} [start=0] - Optional starting offset for gap.\r\n * @param {boolean} [divide=false] - If `true` it will divide the snapped value by the gap before returning.\r\n *\r\n * @return {number} The snapped value.\r\n */\r\nexport function SnapCeil (value: number, gap: number, start: number = 0, divide: boolean = false): number\r\n{\r\n    if (gap === 0)\r\n    {\r\n        return value;\r\n    }\r\n\r\n    value -= start;\r\n    value = gap * Math.ceil(value / gap);\r\n\r\n    return (divide) ? (start + value) / gap : start + value;\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Snap a value to nearest grid slice, using floor.\r\n *\r\n * Example: if you have an interval gap of `5` and a position of `12`... you will snap to `10`.\r\n * As will `14` snap to `10`... but `16` will snap to `15`.\r\n *\r\n * @function Phaser.Math.Snap.Floor\r\n * @since 3.0.0\r\n *\r\n * @param {number} value - The value to snap.\r\n * @param {number} gap - The interval gap of the grid.\r\n * @param {number} [start=0] - Optional starting offset for gap.\r\n * @param {boolean} [divide=false] - If `true` it will divide the snapped value by the gap before returning.\r\n *\r\n * @return {number} The snapped value.\r\n */\r\nexport function SnapFloor (value: number, gap: number, start: number = 0, divide: boolean = false): number\r\n{\r\n    if (gap === 0)\r\n    {\r\n        return value;\r\n    }\r\n\r\n    value -= start;\r\n    value = gap * Math.floor(value / gap);\r\n\r\n    return (divide) ? (start + value) / gap : start + value;\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Snap a value to nearest grid slice, using rounding.\r\n *\r\n * Example: if you have an interval gap of `5` and a position of `12`... you will snap to `10` whereas `14` will snap to `15`.\r\n *\r\n * @function Phaser.Math.Snap.To\r\n * @since 3.0.0\r\n *\r\n * @param {number} value - The value to snap.\r\n * @param {number} gap - The interval gap of the grid.\r\n * @param {number} [start=0] - Optional starting offset for gap.\r\n * @param {boolean} [divide=false] - If `true` it will divide the snapped value by the gap before returning.\r\n *\r\n * @return {number} The snapped value.\r\n */\r\nexport function SnapTo (value: number, gap: number, start: number = 0, divide: boolean = false): number\r\n{\r\n    if (gap === 0)\r\n    {\r\n        return value;\r\n    }\r\n\r\n    value -= start;\r\n    value = gap * Math.round(value / gap);\r\n\r\n    return (divide) ? (start + value) / gap : start + value;\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nimport { SnapCeil } from './SnapCeil';\r\nimport { SnapFloor } from './SnapFloor';\r\nimport { SnapTo } from './SnapTo';\r\n\r\nexport {\r\n    SnapCeil,\r\n    SnapFloor,\r\n    SnapTo\r\n};\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Calculate the mean average of the given values.\r\n *\r\n * @function Phaser.Math.Average\r\n * @since 3.0.0\r\n *\r\n * @param {number[]} values - The values to average.\r\n *\r\n * @return {number} The average value.\r\n */\r\nexport function Average (values: number[]): number\r\n{\r\n    let sum = 0;\r\n\r\n    for (let i = 0; i < values.length; i++)\r\n    {\r\n        sum += (+values[i]);\r\n    }\r\n\r\n    return sum / values.length;\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Ceils to some place comparative to a `base`, default is 10 for decimal place.\r\n *\r\n * The `place` is represented by the power applied to `base` to get that place.\r\n *\r\n * @function Phaser.Math.CeilTo\r\n * @since 3.0.0\r\n *\r\n * @param {number} value - The value to round.\r\n * @param {number} [place=0] - The place to round to.\r\n * @param {number} [base=10] - The base to round in. Default is 10 for decimal.\r\n *\r\n * @return {number} The rounded value.\r\n */\r\nexport function CeilTo (value: number, place: number = 0, base: number = 10): number\r\n{\r\n    const p = Math.pow(base, -place);\r\n\r\n    return Math.ceil(value * p) / p;\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nimport { MATH_CONST } from './const';\r\n\r\n/**\r\n * Convert the given angle from degrees, to the equivalent angle in radians.\r\n *\r\n * @function Phaser.Math.DegToRad\r\n * @since 3.0.0\r\n *\r\n * @param {number} degrees - The angle (in degrees) to convert to radians.\r\n *\r\n * @return {number} The given angle converted to radians.\r\n */\r\nexport function DegToRad (degrees: number): number\r\n{\r\n    return degrees * MATH_CONST.DEG_TO_RAD;\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Calculates the positive difference of two given numbers.\r\n *\r\n * @function Phaser.Math.Difference\r\n * @since 3.0.0\r\n *\r\n * @param {number} a - The first number in the calculation.\r\n * @param {number} b - The second number in the calculation.\r\n *\r\n * @return {number} The positive difference of the two given numbers.\r\n */\r\nexport function Difference (a: number, b: number): number\r\n{\r\n    return Math.abs(a - b);\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Floors to some place comparative to a `base`, default is 10 for decimal place.\r\n *\r\n * The `place` is represented by the power applied to `base` to get that place.\r\n *\r\n * @function Phaser.Math.FloorTo\r\n * @since 3.0.0\r\n *\r\n * @param {number} value - The value to round.\r\n * @param {number} [place=0] - The place to round to.\r\n * @param {number} [base=10] - The base to round in. Default is 10 for decimal.\r\n *\r\n * @return {number} The rounded value.\r\n */\r\nexport function FloorTo (value: number, place: number = 0, base: number = 10): number\r\n{\r\n    const p = Math.pow(base, -place);\r\n\r\n    return Math.floor(value * p) / p;\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nimport { Clamp } from './Clamp';\r\n\r\n/**\r\n * Return a value based on the range between `min` and `max` and the percentage given.\r\n *\r\n * @function Phaser.Math.FromPercent\r\n * @since 3.0.0\r\n *\r\n * @param {number} percent - A value between 0 and 1 representing the percentage.\r\n * @param {number} min - The minimum value.\r\n * @param {number} [max] - The maximum value.\r\n *\r\n * @return {number} The value that is `percent` percent between `min` and `max`.\r\n */\r\nexport function FromPercent (percent: number, min: number, max?: number): number\r\n{\r\n    percent = Clamp(percent, 0, 1);\r\n\r\n    return (max - min) * percent;\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Calculate a per-ms speed from a distance and time (given in seconds).\r\n *\r\n * @function Phaser.Math.GetSpeed\r\n * @since 3.0.0\r\n *\r\n * @param {number} distance - The distance.\r\n * @param {number} time - The time, in seconds.\r\n *\r\n * @return {number} The speed, in distance per ms.\r\n */\r\nexport function GetSpeed (distance: number, time: number): number\r\n{\r\n    return (distance / time) / 1000;\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Add an `amount` to a `value`, limiting the maximum result to `max`.\r\n *\r\n * @function Phaser.Math.MaxAdd\r\n * @since 3.0.0\r\n *\r\n * @param {number} value - The value to add to.\r\n * @param {number} amount - The amount to add.\r\n * @param {number} max - The maximum value to return.\r\n *\r\n * @return {number} The resulting value.\r\n */\r\nexport function MaxAdd (value: number, amount: number, max: number): number\r\n{\r\n    return Math.min(value + amount, max);\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Subtract an `amount` from `value`, limiting the minimum result to `min`.\r\n *\r\n * @function Phaser.Math.MinSub\r\n * @since 3.0.0\r\n *\r\n * @param {number} value - The value to subtract from.\r\n * @param {number} amount - The amount to subtract.\r\n * @param {number} min - The minimum value to return.\r\n *\r\n * @return {number} The resulting value.\r\n */\r\nexport function MinSub (value: number, amount: number, min: number): number\r\n{\r\n    return Math.max(value - amount, min);\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Work out what percentage `value` is of the range between `min` and `max`.\r\n * If `max` isn't given then it will return the percentage of `value` to `min`.\r\n *\r\n * You can optionally specify an `upperMax` value, which is a mid-way point in the range that represents 100%, after which the % starts to go down to zero again.\r\n *\r\n * @function Phaser.Math.Percent\r\n * @since 3.0.0\r\n *\r\n * @param {number} value - The value to determine the percentage of.\r\n * @param {number} min - The minimum value.\r\n * @param {number} [max] - The maximum value.\r\n * @param {number} [upperMax] - The mid-way point in the range that represents 100%.\r\n *\r\n * @return {number} A value between 0 and 1 representing the percentage.\r\n */\r\nexport function Percent (value: number, min: number, max?: number, upperMax?: number): number\r\n{\r\n    if (max === undefined) { max = min + 1; }\r\n\r\n    let percentage = (value - min) / (max - min);\r\n\r\n    if (percentage > 1)\r\n    {\r\n        if (upperMax !== undefined)\r\n        {\r\n            percentage = ((upperMax - value)) / (upperMax - max);\r\n\r\n            if (percentage < 0)\r\n            {\r\n                percentage = 0;\r\n            }\r\n        }\r\n        else\r\n        {\r\n            percentage = 1;\r\n        }\r\n    }\r\n    else if (percentage < 0)\r\n    {\r\n        percentage = 0;\r\n    }\r\n\r\n    return percentage;\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nimport { MATH_CONST } from './const';\r\n\r\n/**\r\n * Convert the given angle in radians, to the equivalent angle in degrees.\r\n *\r\n * @function Phaser.Math.RadToDeg\r\n * @since 3.0.0\r\n *\r\n * @param {number} radians - The angle in radians to convert ot degrees.\r\n *\r\n * @return {number} The given angle converted to degrees.\r\n */\r\nexport function RadToDeg (radians: number): number\r\n{\r\n    return radians * MATH_CONST.RAD_TO_DEG;\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Round a value to the given precision.\r\n * \r\n * For example:\r\n * \r\n * ```javascript\r\n * RoundTo(123.456, 0) = 123\r\n * RoundTo(123.456, 1) = 120\r\n * RoundTo(123.456, 2) = 100\r\n * ```\r\n * \r\n * To round the decimal, i.e. to round to precision, pass in a negative `place`:\r\n * \r\n * ```javascript\r\n * RoundTo(123.456789, 0) = 123\r\n * RoundTo(123.456789, -1) = 123.5\r\n * RoundTo(123.456789, -2) = 123.46\r\n * RoundTo(123.456789, -3) = 123.457\r\n * ```\r\n *\r\n * @function Phaser.Math.RoundTo\r\n * @since 3.0.0\r\n *\r\n * @param {number} value - The value to round.\r\n * @param {number} [place=0] - The place to round to. Positive to round the units, negative to round the decimal.\r\n * @param {number} [base=10] - The base to round in. Default is 10 for decimal.\r\n *\r\n * @return {number} The rounded value.\r\n */\r\nexport function RoundTo (value: number, place: number = 0, base: number = 10): number\r\n{\r\n    const p = Math.pow(base, -place);\r\n\r\n    return Math.round(value * p) / p;\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * @typedef {object} Phaser.Types.Math.SinCosTable\r\n * @since 3.0.0\r\n *\r\n * @property {number[]} sin - The sine values.\r\n * @property {number[]} cos - The cosine values.\r\n * @property {number} length - The length.\r\n */\r\n\r\ntype SinCosTable = { sin: number[]; cos: number[]; length: number };\r\n\r\n/**\r\n * Generate a series of sine and cosine values.\r\n *\r\n * @function Phaser.Math.SinCosTableGenerator\r\n * @since 3.0.0\r\n *\r\n * @param {number} length - The number of values to generate.\r\n * @param {number} [sinAmp=1] - The sine value amplitude.\r\n * @param {number} [cosAmp=1] - The cosine value amplitude.\r\n * @param {number} [frequency=1] - The frequency of the values.\r\n *\r\n * @return {SinCosTable} The generated values.\r\n */\r\nexport function SinCosTableGenerator (length: number, sinAmp: number = 1, cosAmp: number = 1, frequency: number = 1): SinCosTable\r\n{\r\n    frequency *= Math.PI / length;\r\n\r\n    const cos = [];\r\n    const sin = [];\r\n\r\n    for (let c = 0; c < length; c++)\r\n    {\r\n        cosAmp -= sinAmp * frequency;\r\n        sinAmp += cosAmp * frequency;\r\n\r\n        cos[c] = cosAmp;\r\n        sin[c] = sinAmp;\r\n    }\r\n\r\n    return {\r\n        sin,\r\n        cos,\r\n        length\r\n    };\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Checks if the two values are within the given `tolerance` of each other.\r\n *\r\n * @function Phaser.Math.Within\r\n * @since 3.0.0\r\n *\r\n * @param {number} a - The first value to use in the calculation.\r\n * @param {number} b - The second value to use in the calculation.\r\n * @param {number} tolerance - The tolerance. Anything equal to or less than this value is considered as being within range.\r\n *\r\n * @return {boolean} Returns `true` if `a` is less than or equal to the tolerance of `b`.\r\n */\r\nexport function Within (a: number, b: number, tolerance: number): boolean\r\n{\r\n    return (Math.abs(a - b) <= tolerance);\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nimport { ICircle } from './ICircle';\r\n\r\n/**\r\n * Check to see if the Circle contains the given x / y coordinates.\r\n\r\n */\r\nexport function CircleContains (circle: ICircle, x: number, y: number): boolean\r\n{\r\n    //  Check if x/y are within the bounds first\r\n    if (circle.radius > 0 && x >= circle.left && x <= circle.right && y >= circle.top && y <= circle.bottom)\r\n    {\r\n        const dx = (circle.x - x) * (circle.x - x);\r\n        const dy = (circle.y - y) * (circle.y - y);\r\n\r\n        return (dx + dy) <= (circle.radius * circle.radius);\r\n    }\r\n    else\r\n    {\r\n        return false;\r\n    }\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nimport { CircleContains } from './CircleContains';\r\n\r\n/**\r\n * @classdesc\r\n * A Circle object.\r\n *\r\n * This is a geometry object, containing numerical values and related methods to inspect and modify them.\r\n * It is not a Game Object, in that you cannot add it to the display list, and it has no texture.\r\n * To render a Circle you should look at the capabilities of the Graphics class.\r\n *\r\n * @class Circle\r\n * @memberof Phaser.Geom\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {number} [x=0] - The x position of the center of the circle.\r\n * @param {number} [y=0] - The y position of the center of the circle.\r\n * @param {number} [radius=0] - The radius of the circle.\r\n */\r\nexport class Circle\r\n{\r\n    x: number;\r\n    y: number;\r\n\r\n    private _radius: number;\r\n    private _diameter: number;\r\n\r\n    constructor (x: number = 0, y: number = 0, radius: number = 0)\r\n    {\r\n        this.set(x, y, radius);\r\n    }\r\n\r\n    set (x: number = 0, y: number = 0, radius: number = 0): this\r\n    {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.radius = radius;\r\n\r\n        return this;\r\n    }\r\n\r\n    contains (x: number, y: number): boolean\r\n    {\r\n        return CircleContains(this, x, y);\r\n    }\r\n\r\n    get radius (): number\r\n    {\r\n        return this._radius;\r\n    }\r\n\r\n    set radius (value: number)\r\n    {\r\n        this._radius = value;\r\n        this._diameter = value * 2;\r\n    }\r\n\r\n    get diameter (): number\r\n    {\r\n        return this._diameter;\r\n    }\r\n\r\n    set diameter (value: number)\r\n    {\r\n        this._diameter = value;\r\n        this._radius = value * 0.5;\r\n    }\r\n\r\n    get left (): number\r\n    {\r\n        return this.x - this._radius;\r\n    }\r\n\r\n    set left (value: number)\r\n    {\r\n        this.x = value + this._radius;\r\n    }\r\n\r\n    get right (): number\r\n    {\r\n        return this.x + this._radius;\r\n    }\r\n\r\n    set right (value: number)\r\n    {\r\n        this.x = value - this._radius;\r\n    }\r\n\r\n    get top (): number\r\n    {\r\n        return this.y - this._radius;\r\n    }\r\n\r\n    set top (value: number)\r\n    {\r\n        this.y = value + this._radius;\r\n    }\r\n\r\n    get bottom (): number\r\n    {\r\n        return this.y + this._radius;\r\n    }\r\n\r\n    set bottom (value: number)\r\n    {\r\n        this.y = value - this._radius;\r\n    }\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nimport { CircleContains } from './CircleContains';\r\nimport { ICircle } from './ICircle';\r\nimport { Vec2 } from '../../math/vec2/Vec2';\r\n\r\n/**\r\n * Check to see if the Circle contains the given Point object.\r\n */\r\nexport function CircleContainsPoint (circle: ICircle, point: Vec2): boolean\r\n{\r\n    return CircleContains(circle, point.x, point.y);\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nimport { CircleContains } from './CircleContains';\r\nimport { ICircle } from './ICircle';\r\nimport { IRectangle } from '../rectangle/IRectangle';\r\n\r\n/**\r\n * Check to see if the Circle contains all four points of the given Rectangle object.\r\n */\r\nexport function CircleContainsRect (circle: ICircle, rect: IRectangle): boolean\r\n{\r\n    return (\r\n        CircleContains(circle, rect.x, rect.y) &&\r\n        CircleContains(circle, rect.right, rect.y) &&\r\n        CircleContains(circle, rect.x, rect.bottom) &&\r\n        CircleContains(circle, rect.right, rect.bottom)\r\n    );\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nimport { ICircle } from './ICircle';\r\n\r\n/**\r\n * Compares the `x`, `y` and `radius` properties of the two given Circles.\r\n * Returns `true` if they all match, otherwise returns `false`.\r\n */\r\nexport function CircleEquals (circle: ICircle, toCompare: ICircle): boolean\r\n{\r\n    return (\r\n        circle.x === toCompare.x &&\r\n        circle.y === toCompare.y &&\r\n        circle.radius === toCompare.radius\r\n    );\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nimport { Circle } from './Circle';\r\nimport { ICircle } from './ICircle';\r\n\r\n/**\r\n * Creates a new Circle instance based on the values contained in the given source.\r\n */\r\nexport function CloneCircle (source: ICircle): Circle\r\n{\r\n    return new Circle(source.x, source.y, source.radius);\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nimport { ICircle } from './ICircle';\r\n\r\n/**\r\n * Copies the `x`, `y` and `radius` properties from the `source` Circle\r\n * into the given `dest` Circle, then returns the `dest` Circle.\r\n */\r\nexport function CopyCircleFrom (source: ICircle, dest: ICircle): ICircle\r\n{\r\n    return dest.set(source.x, source.y, source.radius);\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nimport { ICircle } from './ICircle';\r\n\r\n/**\r\n * Calculates the area of the circle.\r\n */\r\nexport function GetCircleArea (circle: ICircle): number\r\n{\r\n    return (circle.radius > 0) ? Math.PI * circle.radius * circle.radius : 0;\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nimport { IRectangle } from './IRectangle';\r\n\r\n/**\r\n * Checks if a given point is inside a Rectangle's bounds.\r\n */\r\nexport function RectangleContains (rect: IRectangle, x: number, y: number): boolean\r\n{\r\n    if (rect.width <= 0 || rect.height <= 0)\r\n    {\r\n        return false;\r\n    }\r\n\r\n    return (rect.x <= x && rect.x + rect.width >= x && rect.y <= y && rect.y + rect.height >= y);\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nimport { RectangleContains } from './RectangleContains';\r\n\r\nexport class Rectangle\r\n{\r\n    x: number;\r\n    y: number;\r\n    width: number;\r\n    height: number;\r\n\r\n    constructor (x: number = 0, y: number = 0, width: number = 0, height: number = 0)\r\n    {\r\n        this.set(x, y, width, height);\r\n    }\r\n\r\n    set (x: number = 0, y: number = 0, width: number = 0, height: number = 0): this\r\n    {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = width;\r\n        this.height = height;\r\n\r\n        return this;\r\n    }\r\n\r\n    contains (x: number, y: number): boolean\r\n    {\r\n        return RectangleContains(this, x, y);\r\n    }\r\n\r\n    set right (value: number)\r\n    {\r\n        if (value <= this.x)\r\n        {\r\n            this.width = 0;\r\n        }\r\n        else\r\n        {\r\n            this.width = value - this.x;\r\n        }\r\n    }\r\n\r\n    get right (): number\r\n    {\r\n        return this.x + this.width;\r\n    }\r\n\r\n    set bottom (value: number)\r\n    {\r\n        if (value <= this.y)\r\n        {\r\n            this.height = 0;\r\n        }\r\n        else\r\n        {\r\n            this.height = value - this.y;\r\n        }\r\n    }\r\n\r\n    get bottom (): number\r\n    {\r\n        return this.y + this.height;\r\n    }\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nimport { ICircle } from './ICircle';\r\nimport { Rectangle } from '../rectangle/Rectangle';\r\n\r\n/**\r\n * Returns the bounds of the Circle object.\r\n */\r\nexport function GetCircleBounds (circle: ICircle, out: Rectangle = new Rectangle()): Rectangle\r\n{\r\n    return out.set(\r\n        circle.left,\r\n        circle.top,\r\n        circle.diameter,\r\n        circle.diameter\r\n    );\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nimport { ICircle } from './ICircle';\r\n\r\nexport function GetCircleCircumference (circle: ICircle): number\r\n{\r\n    return 2 * (Math.PI * circle.radius);\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nimport { ICircle } from './ICircle';\r\nimport { Vec2 } from '../../math/vec2/Vec2';\r\n\r\nexport function GetCircleCircumferencePoint (circle: ICircle, angle: number, out: Vec2 = new Vec2()): Vec2\r\n{\r\n    return out.set(\r\n        circle.x + (circle.radius * Math.cos(angle)),\r\n        circle.y + (circle.radius * Math.sin(angle))\r\n    );\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nimport { FromPercent } from '../../math/FromPercent';\r\nimport { GetCircleCircumferencePoint } from './GetCircleCircumferencePoint';\r\nimport { ICircle } from './ICircle';\r\nimport { MATH_CONST } from '../../math/const';\r\nimport { Vec2 } from '../../math/vec2/Vec2';\r\n\r\n/**\r\n * Returns a Point object containing the coordinates of a point on the circumference of the Circle\r\n * based on the given angle normalized to the range 0 to 1. I.e. a value of 0.5 will give the point\r\n * at 180 degrees around the circle.\r\n */\r\nexport function GetCirclePoint (circle: ICircle, position: number, out: Vec2 = new Vec2()): Vec2\r\n{\r\n    const angle = FromPercent(position, 0, MATH_CONST.PI2);\r\n\r\n    return GetCircleCircumferencePoint(circle, angle, out);\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nimport { FromPercent } from '../../math/FromPercent';\r\nimport { GetCircleCircumference } from './GetCircleCircumference';\r\nimport { GetCircleCircumferencePoint } from './GetCircleCircumferencePoint';\r\nimport { ICircle } from './ICircle';\r\nimport { MATH_CONST } from '../../math/const';\r\nimport { Vec2 } from '../../math/vec2/Vec2';\r\n\r\n/**\r\n * Returns an array of Point objects containing the coordinates of the points around the circumference of the Circle,\r\n * based on the given quantity or stepRate values.\r\n */\r\nexport function GetCirclePoints (circle: ICircle, step: number, quantity: number = 0, out: Vec2[] = []): Vec2[]\r\n{\r\n    //  If quantity is a falsey value (false, null, 0, undefined, etc) then we calculate it based on the stepRate instead.\r\n    if (!quantity)\r\n    {\r\n        quantity = GetCircleCircumference(circle) / step;\r\n    }\r\n\r\n    for (let i = 0; i < quantity; i++)\r\n    {\r\n        const angle = FromPercent(i / quantity, 0, MATH_CONST.PI2);\r\n\r\n        out.push(GetCircleCircumferencePoint(circle, angle));\r\n    }\r\n\r\n    return out;\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nimport { FromPercent } from '../../math/FromPercent';\r\nimport { GetCircleCircumference } from './GetCircleCircumference';\r\nimport { GetCircleCircumferencePoint } from './GetCircleCircumferencePoint';\r\nimport { ICircle } from './ICircle';\r\nimport { MATH_CONST } from '../../math/const';\r\nimport { Vec2 } from '../../math/vec2/Vec2';\r\n\r\n/**\r\n * Returns an array of Point objects containing the coordinates of the points around the circumference of the Circle,\r\n * based on the given quantity or stepRate values.\r\n *\r\n * Points returned are only those within startAngle to endAngle, inclusive.\r\n *\r\n * Angles are given in radians.\r\n */\r\nexport function GetCirclePointsBetween (circle: ICircle, startAngle: number, endAngle: number, step: number, anticlockwise: boolean = false, includeCenter: boolean = false, quantity: number = 0, out: Vec2[] = []): Vec2[]\r\n{\r\n    //  If quantity is a falsey value (false, null, 0, undefined, etc) then we calculate it based on the stepRate instead.\r\n    if (!quantity)\r\n    {\r\n        quantity = GetCircleCircumference(circle) / step;\r\n    }\r\n\r\n    for (let i = 0; i < quantity; i++)\r\n    {\r\n        const angle = FromPercent(i / quantity, 0, MATH_CONST.PI2);\r\n\r\n        if (angle >= startAngle && angle <= endAngle)\r\n        {\r\n            out.push(GetCircleCircumferencePoint(circle, angle));\r\n        }\r\n    }\r\n\r\n    if (anticlockwise)\r\n    {\r\n        out = out.reverse();\r\n    }\r\n\r\n    if (includeCenter)\r\n    {\r\n        out.push(new Vec2(circle.x, circle.y));\r\n    }\r\n\r\n    return out;\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nimport { ICircle } from './ICircle';\r\nimport { Vec2 } from '../../math/vec2/Vec2';\r\n\r\n/**\r\n * Returns a uniformly distributed random point from anywhere within the given Circle.\r\n */\r\nexport function GetCircleRandomPoint (circle: ICircle, out: Vec2 = new Vec2()): Vec2\r\n{\r\n    const t = 2 * Math.PI * Math.random();\r\n    const u = Math.random() + Math.random();\r\n    const r = (u > 1) ? 2 - u : u;\r\n    const x = r * Math.cos(t);\r\n    const y = r * Math.sin(t);\r\n\r\n    return out.set(\r\n        circle.x + (x * circle.radius),\r\n        circle.y + (y * circle.radius)\r\n    );\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nimport { ICircle } from './ICircle';\r\n\r\n/**\r\n * Translates the Circle by the values given.\r\n */\r\nexport function TranslateCircle (circle: ICircle, x: number, y: number): ICircle\r\n{\r\n    circle.x += x;\r\n    circle.y += y;\r\n\r\n    return circle;\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nimport { ICircle } from './ICircle';\r\nimport { Vec2 } from '../../math/vec2/Vec2';\r\n\r\n/**\r\n * Offsets the Circle by the values given in the `x` and `y` properties of the Point object.\r\n */\r\nexport function TranslateCirclePoint (circle: ICircle, point: Vec2): ICircle\r\n{\r\n    circle.x += point.x;\r\n    circle.y += point.y;\r\n\r\n    return circle;\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nimport { Circle } from './Circle';\r\nimport { CircleContains } from './CircleContains';\r\nimport { CircleContainsPoint } from './CircleContainsPoint';\r\nimport { CircleContainsRect } from './CircleContainsRect';\r\nimport { CircleEquals } from './CircleEquals';\r\nimport { CloneCircle } from './CloneCircle';\r\nimport { CopyCircleFrom } from './CopyCircleFrom';\r\nimport { GetCircleArea } from './GetCircleArea';\r\nimport { GetCircleBounds } from './GetCircleBounds';\r\nimport { GetCircleCircumference } from './GetCircleCircumference';\r\nimport { GetCircleCircumferencePoint } from './GetCircleCircumferencePoint';\r\nimport { GetCirclePoint } from './GetCirclePoint';\r\nimport { GetCirclePoints } from './GetCirclePoints';\r\nimport { GetCirclePointsBetween } from './GetCirclePointsBetween';\r\nimport { GetCircleRandomPoint } from './GetCircleRandomPoint';\r\nimport { TranslateCircle } from './TranslateCircle';\r\nimport { TranslateCirclePoint } from './TranslateCirclePoint';\r\n\r\nexport {\r\n    Circle,\r\n    CircleContains,\r\n    CircleContainsPoint,\r\n    CircleContainsRect,\r\n    CircleEquals,\r\n    GetCircleRandomPoint,\r\n    CloneCircle,\r\n    CopyCircleFrom,\r\n    GetCircleArea,\r\n    GetCircleBounds,\r\n    GetCircleCircumference,\r\n    GetCircleCircumferencePoint,\r\n    GetCirclePoint,\r\n    GetCirclePoints,\r\n    GetCirclePointsBetween,\r\n    TranslateCircle,\r\n    TranslateCirclePoint\r\n};\r\n", "import { Circle, GetCirclePointsBetween } from '../../../geom/circle';\r\n\r\nimport { BatchTriangle } from './BatchTriangle';\r\nimport { GetVertexBufferEntry } from '../renderpass/GetVertexBufferEntry';\r\nimport { IRenderPass } from '../renderpass/IRenderPass';\r\nimport { Triangulate } from '../../../geom/PolyPartition';\r\n\r\nconst circle = new Circle();\r\n\r\nexport function FillArc (renderPass: IRenderPass, x: number, y: number, radius: number, startAngle: number, endAngle: number, steps: number, anticlockwise: boolean, includeCenter: boolean, red: number, green: number, blue: number, alpha: number): void\r\n{\r\n    circle.set(x, y, radius);\r\n\r\n    const points = GetCirclePointsBetween(circle, startAngle, endAngle, steps, anticlockwise, includeCenter);\r\n\r\n    const tris = Triangulate(points);\r\n\r\n    if (!tris.length)\r\n    {\r\n        return;\r\n    }\r\n\r\n    const { F32, offset } = GetVertexBufferEntry(renderPass, tris.length);\r\n\r\n    const textureIndex = renderPass.textures.setWhite();\r\n\r\n    let idx = offset;\r\n\r\n    tris.forEach(tri =>\r\n    {\r\n        idx = BatchTriangle(\r\n            F32, idx, textureIndex,\r\n            tri[0].x, tri[0].y,\r\n            tri[1].x, tri[1].y,\r\n            tri[2].x, tri[2].y,\r\n            red, green, blue, alpha\r\n        );\r\n    });\r\n}\r\n", "export const GameObjectTree: Map<number, number[]> = new Map();\r\n", "import { HierarchyComponent } from './HierarchyComponent';\r\n\r\nexport function GetParentID (id: number): number\r\n{\r\n    return HierarchyComponent.parentID[id];\r\n}\r\n", "import { GetParentID } from './GetParentID';\r\n\r\nexport function GetParents (id: number): number[]\r\n{\r\n    const results = [];\r\n\r\n    let currentParent = GetParentID(id);\r\n\r\n    while (currentParent)\r\n    {\r\n        results.push(currentParent);\r\n\r\n        currentParent = GetParentID(currentParent);\r\n    }\r\n\r\n    return results;\r\n}\r\n", "import { HierarchyComponent } from './HierarchyComponent';\r\n\r\nexport function GetWorldID (id: number): number\r\n{\r\n    return HierarchyComponent.worldID[id];\r\n}\r\n", "import { GetParents, GetWorldID } from '../hierarchy';\r\n\r\nimport { SetDirtyChildCache } from './SetDirtyChildCache';\r\nimport { SetDirtyDisplayList } from './SetDirtyDisplayList';\r\nimport { WillCacheChildren } from '../permissions';\r\n\r\nexport function SetDirtyParents (childID: number): void\r\n{\r\n    const parents = GetParents(childID);\r\n\r\n    parents.forEach(id =>\r\n    {\r\n        if (WillCacheChildren(id))\r\n        {\r\n            SetDirtyChildCache(id);\r\n        }\r\n    });\r\n\r\n    SetDirtyDisplayList(GetWorldID(childID));\r\n}\r\n", "import { DirtyComponent } from './DirtyComponent';\r\n\r\nexport function SetDirtyTransform (id: number): void\r\n{\r\n    DirtyComponent.transform[id] = 1;\r\n}\r\n", "export const DefaultQuadUniforms: Record<string, Number | Float32List> =\r\n{\r\n    uProjectionMatrix: new Float32Array(16),\r\n    uCameraMatrix: new Float32Array(16),\r\n    uTexture: 0,\r\n    uColorMatrix: new Float32Array([\r\n        1, 0, 0, 0,\r\n        0, 1, 0, 0,\r\n        0, 0, 1, 0,\r\n        0, 0, 0, 1\r\n    ]),\r\n    uColorOffset: new Float32Array(4)\r\n};\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * A 16 color palette by [Arne](http://androidarts.com/palette/16pal.htm)\r\n */\r\nexport const Arne16 = [\r\n    '#000',\r\n    '#9D9D9D',\r\n    '#FFF',\r\n    '#BE2633',\r\n    '#E06F8B',\r\n    '#493C2B',\r\n    '#A46422',\r\n    '#EB8931',\r\n    '#F7E26B',\r\n    '#2F484E',\r\n    '#44891A',\r\n    '#A3CE27',\r\n    '#1B2632',\r\n    '#005784',\r\n    '#31A2F2',\r\n    '#B2DCEF'\r\n];\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * A 16 color palette inspired by the Commodore 64.\r\n */\r\nexport const C64 = [\r\n    '#000',\r\n    '#fff',\r\n    '#8b4131',\r\n    '#7bbdc5',\r\n    '#8b41ac',\r\n    '#6aac41',\r\n    '#3931a4',\r\n    '#d5de73',\r\n    '#945a20',\r\n    '#5a4100',\r\n    '#bd736a',\r\n    '#525252',\r\n    '#838383',\r\n    '#acee8b',\r\n    '#7b73de',\r\n    '#acacac'\r\n];\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * A 16 color CGA inspired palette by [Arne](http://androidarts.com/palette/16pal.htm)\r\n */\r\nexport const CGA = [\r\n    '#000',\r\n    '#2234d1',\r\n    '#0c7e45',\r\n    '#44aacc',\r\n    '#8a3622',\r\n    '#5c2e78',\r\n    '#aa5c3d',\r\n    '#b5b5b5',\r\n    '#5e606e',\r\n    '#4c81fb',\r\n    '#6cd947',\r\n    '#7be2f9',\r\n    '#eb8a60',\r\n    '#e23d69',\r\n    '#ffd93f',\r\n    '#fff'\r\n];\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * A 16 color JMP palette by [Arne](http://androidarts.com/palette/16pal.htm)\r\n */\r\nexport const JMP = [\r\n    '#000',\r\n    '#191028',\r\n    '#46af45',\r\n    '#a1d685',\r\n    '#453e78',\r\n    '#7664fe',\r\n    '#833129',\r\n    '#9ec2e8',\r\n    '#dc534b',\r\n    '#e18d79',\r\n    '#d6b97b',\r\n    '#e9d8a1',\r\n    '#216c4b',\r\n    '#d365c8',\r\n    '#afaab9',\r\n    '#f5f4eb'\r\n];\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * A 16 color palette inspired by Japanese computers like the MSX.\r\n */\r\nexport const MSX = [\r\n    '#000',\r\n    '#191028',\r\n    '#46af45',\r\n    '#a1d685',\r\n    '#453e78',\r\n    '#7664fe',\r\n    '#833129',\r\n    '#9ec2e8',\r\n    '#dc534b',\r\n    '#e18d79',\r\n    '#d6b97b',\r\n    '#e9d8a1',\r\n    '#216c4b',\r\n    '#d365c8',\r\n    '#afaab9',\r\n    '#fff'\r\n];\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * A 16 color palette as used in Pico8. */\r\nexport const PICO8 = [\r\n    '#000',\r\n    '#1D2B53',\r\n    '#7E2553',\r\n    '#008751',\r\n    '#AB5236',\r\n    '#5F574F',\r\n    '#C2C3C7',\r\n    '#FFF1E8',\r\n    '#FF004D',\r\n    '#FFA300',\r\n    '#FFEC27',\r\n    '#00E436',\r\n    '#29ADFF',\r\n    '#83769C',\r\n    '#FF77A8',\r\n    '#FFCCAA'\r\n];\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nimport { Arne16 } from './Arne16';\r\nimport { C64 } from './C64';\r\nimport { CGA } from './CGA';\r\nimport { JMP } from './JMP';\r\nimport { MSX } from './MSX';\r\nimport { PICO8 } from './PICO8';\r\n\r\nexport {\r\n    Arne16,\r\n    C64,\r\n    CGA,\r\n    JMP,\r\n    MSX,\r\n    PICO8\r\n};\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nimport { Arne16 } from '../palettes/Arne16';\r\nimport { CreateCanvas } from '../CreateCanvas';\r\nimport { Texture } from '../Texture';\r\n\r\n/**\r\n * @callback Phaser.Types.Create.GenerateTextureCallback\r\n * @since 3.0.0\r\n *\r\n * @param {HTMLCanvasElement} canvas - The HTML Canvas element to operate on.\r\n * @param {CanvasRenderingContext2D} context - The context of the HTML Canvas element.\r\n */\r\n\r\n/**\r\n * @typedef {object} Phaser.Types.Create.GenerateTextureConfig\r\n * @since 3.0.0\r\n *\r\n * @property {array} [data=[]] - An array of data, where each row is a string of single values 0-9A-F, or the period character.\r\n * @property {HTMLCanvasElement} [canvas=null] - The HTML Canvas to draw the texture to.\r\n * @property {Phaser.Types.Create.Palette} [palette=Arne16] - The indexed palette that the data cell values map to.\r\n * @property {number} [pixelWidth=1] - The width of each 'pixel' in the generated texture.\r\n * @property {number} [pixelHeight=1] - The height of each 'pixel' in the generated texture.\r\n * @property {boolean} [resizeCanvas=true] - Should the canvas be resized before the texture is drawn?\r\n * @property {boolean} [clearCanvas=true] - Should the canvas be cleared before the texture is drawn?\r\n * @property {Phaser.Types.Create.GenerateTextureCallback} [preRender] - A callback to send the canvas to prior to the texture being drawn.\r\n * @property {Phaser.Types.Create.GenerateTextureCallback} [postRender] - A callback to send the canvas to after the texture has been drawn.\r\n */\r\n\r\nexport type PixelTextureConfig = {\r\n    data: string[];\r\n    canvas?: HTMLCanvasElement;\r\n    palette?: string[];\r\n    pixelWidth?: number;\r\n    pixelHeight?: number;\r\n    resizeCanvas?: boolean;\r\n    clearCanvas?: boolean;\r\n    preRender?: (canvas: HTMLCanvasElement, context: CanvasRenderingContext2D) => void;\r\n    postRender?: (canvas: HTMLCanvasElement, context: CanvasRenderingContext2D) => void;\r\n};\r\n\r\n/**\r\n * Generates a texture based on the given Create configuration object.\r\n *\r\n * The texture is drawn using a fixed-size indexed palette of 16 colors, where the hex value in the\r\n * data cells map to a single color. For example, if the texture config looked like this:\r\n *\r\n * ```javascript\r\n * var star = [\r\n *   '.....828.....',\r\n *   '....72227....',\r\n *   '....82228....',\r\n *   '...7222227...',\r\n *   '2222222222222',\r\n *   '8222222222228',\r\n *   '.72222222227.',\r\n *   '..787777787..',\r\n *   '..877777778..',\r\n *   '.78778887787.',\r\n *   '.27887.78872.',\r\n *   '.787.....787.'\r\n * ];\r\n *\r\n * this.textures.generate('star', { data: star, pixelWidth: 4 });\r\n * ```\r\n *\r\n * Then it would generate a texture that is 52 x 48 pixels in size, because each cell of the data array\r\n * represents 1 pixel multiplied by the `pixelWidth` value. The cell values, such as `8`, maps to color\r\n * number 8 in the palette. If a cell contains a period character `.` then it is transparent.\r\n *\r\n * The default palette is Arne16, but you can specify your own using the `palette` property.\r\n *\r\n * @function Phaser.Create.GenerateTexture\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Types.Create.GenerateTextureConfig} config - The Generate Texture Configuration object.\r\n *\r\n * @return {Texture} An HTMLCanvasElement which contains the generated texture drawn to it.\r\n */\r\nexport function PixelTexture (config: PixelTextureConfig): Texture\r\n{\r\n    const {\r\n        data = [],\r\n        palette = Arne16,\r\n        pixelWidth = 1,\r\n        pixelHeight = pixelWidth,\r\n        preRender = null,\r\n        postRender = null\r\n    } = config;\r\n\r\n    let {\r\n        canvas = null,\r\n        resizeCanvas = true,\r\n        clearCanvas = true\r\n    } = config;\r\n\r\n    const width = Math.floor(Math.abs(data[0].length * pixelWidth));\r\n    const height = Math.floor(Math.abs(data.length * pixelHeight));\r\n\r\n    if (!canvas)\r\n    {\r\n        canvas = CreateCanvas(width, height).canvas;\r\n        resizeCanvas = false;\r\n        clearCanvas = false;\r\n    }\r\n\r\n    if (resizeCanvas)\r\n    {\r\n        canvas.width = width;\r\n        canvas.height = height;\r\n    }\r\n\r\n    const ctx = canvas.getContext('2d');\r\n\r\n    if (clearCanvas)\r\n    {\r\n        ctx.clearRect(0, 0, width, height);\r\n    }\r\n\r\n    //  preRender Callback?\r\n    if (preRender)\r\n    {\r\n        preRender(canvas, ctx);\r\n    }\r\n\r\n    //  Draw it\r\n    for (let y = 0; y < data.length; y++)\r\n    {\r\n        const row = data[y];\r\n\r\n        for (let x = 0; x < row.length; x++)\r\n        {\r\n            const d: string = row[x];\r\n\r\n            if (d !== '.' && d !== ' ')\r\n            {\r\n                ctx.fillStyle = palette[parseInt('0x' + d.toUpperCase())];\r\n                ctx.fillRect(x * pixelWidth, y * pixelHeight, pixelWidth, pixelHeight);\r\n            }\r\n        }\r\n    }\r\n\r\n    //  postRender Callback?\r\n    if (postRender)\r\n    {\r\n        postRender(canvas, ctx);\r\n    }\r\n\r\n    return new Texture(canvas);\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nimport { IRectangle } from './IRectangle';\r\n\r\n/**\r\n * Compares the `x`, `y`, `width` and `height` properties of two rectangles.\r\n */\r\nexport function RectangleEquals (rect: IRectangle, toCompare: IRectangle): boolean\r\n{\r\n    return (\r\n        rect.x === toCompare.x &&\r\n        rect.y === toCompare.y &&\r\n        rect.width === toCompare.width &&\r\n        rect.height === toCompare.height\r\n    );\r\n}\r\n", "import { IBaseWorld } from './IBaseWorld';\r\nimport { IScene } from '../scenes/IScene';\r\n\r\nexport const WorldList: Map<IScene, IBaseWorld[]> = new Map();\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Takes the given data string and parses it as XML using the native DOMParser interface.\r\n * The parsed XML object is returned, or `null` if there was an error while parsing the data.\r\n *\r\n * @function Phaser.DOM.ParseXML\r\n * @since 3.0.0\r\n *\r\n * @param {string} data - The XML source stored in a string.\r\n *\r\n * @return {?XMLDocument} The parsed XML data, or `null` if the data could not be parsed.\r\n */\r\nexport function ParseXML (data: string): XMLDocument | null\r\n{\r\n    let xml: XMLDocument;\r\n\r\n    try\r\n    {\r\n        const parser = new DOMParser();\r\n\r\n        xml = parser.parseFromString(data, 'text/xml');\r\n\r\n        if (!xml || !xml.documentElement || xml.getElementsByTagName('parsererror').length)\r\n        {\r\n            return null;\r\n        }\r\n        else\r\n        {\r\n            return xml;\r\n        }\r\n    }\r\n    catch (error)\r\n    {\r\n        return null;\r\n    }\r\n}\r\n", "import { Types, defineComponent } from 'bitecs';\r\n\r\nconst RenderStats = defineComponent({\r\n\r\n    //  The current Game Frame number\r\n    gameFrame: Types.ui32,\r\n\r\n    //  Total number of Scenes rendered\r\n    numScenes: Types.ui8,\r\n\r\n    //  Total number of Worlds rendered\r\n    numWorlds: Types.ui8,\r\n\r\n    //  Total number of Game Objects (across all worlds)\r\n    numGameObjects: Types.ui32,\r\n\r\n    //  Total number of Game Objects to be rendered (across all worlds)\r\n    numGameObjectsRendered: Types.ui32,\r\n\r\n    //  Total number of Game Objects with dirty local transforms\r\n    numDirtyLocalTransforms: Types.ui32,\r\n\r\n    //  Total number of Game Objects with dirty world transforms\r\n    numDirtyWorldTransforms: Types.ui32,\r\n\r\n    //  Total number of Game Objects with dirty vertices\r\n    numDirtyVertices: Types.ui32,\r\n\r\n    //  Total number of Worlds that had to recalculate their display lists\r\n    numDirtyWorldLists: Types.ui8,\r\n\r\n    //  How many Cameras were made dirty this frame across all Scenes?\r\n    numDirtyCameras: Types.ui32\r\n\r\n});\r\n\r\nexport const RenderStatsComponent = RenderStats;\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAO,MAAM,cAAc,IAAI;ACA/B,ACAA;;ACAO,MAAM,uBAAuB,IAAI,aAAa,CAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG;AAC7F,MAAM,uBAAuB,IAAI,aAAa;;;ACD9C,MAAM,aAAa;IACxB,IAAI;IACJ,KAAK;IACL,MAAM;IACN,KAAK;IACL,MAAM;IACN,KAAK;IACL,MAAM;IACN,KAAK;IACL,KAAK;;AAGA,MAAM,cAAc;IACzB,IAAI;IACJ,KAAK;IACL,MAAM;IACN,KAAK;IACL,MAAM;IACN,KAAK;IACL,MAAM;IACN,KAAK;IACL,KAAK;;AAGA,MAAM,QAAQ;IACnB,IAAI;IACJ,KAAK;IACL,MAAM;IACN,KAAK;IACL,MAAM;IACN,KAAK;IACL,MAAM;IACN,KAAK;IACL,KAAK;;AAGP,MAAM,eAAe;IACnB,OAAO,SAAG;IACV,QAAQ,SAAG;IACX,QAAQ,SAAG;;AAKN,MAAM,YAAY,OAAO;AACzB,MAAM,aAAa,OAAO;AAC1B,MAAM,aAAa,OAAO;AAC1B,MAAM,kBAAkB,OAAO;AAC/B,MAAM,aAAa,OAAO;AAC1B,MAAM,aAAa,OAAO;AAE1B,MAAM,oBAAoB,OAAO;AACjC,MAAM,kBAAkB,OAAO;AAC/B,MAAM,eAAe,OAAO;AAC5B,MAAM,mBAAmB,OAAO;AAChC,MAAM,YAAY,OAAO;AACzB,MAAM,gBAAgB,OAAO;AAC7B,MAAM,cAAc,OAAO;AAC3B,MAAM,eAAe,OAAO;AAC5B,MAAM,YAAY,OAAO;AAEzB,MAAM,eAAe,OAAO;AAC5B,MAAM,mBAAmB,OAAO;AAEhC,MAAM,aAAa,OAAO;AAC1B,MAAM,cAAc,OAAO;AAElC,MAAM,SAAS;AAER,MAAM,SAAS,CAAC,IAAI,SAAS;AAClC,UAAM,YAAY,IAAI,YAAY,OAAO,GAAG;AAC5C,UAAM,QAAQ,IAAI,GAAG,YAAY;AACjC,UAAM,IAAI,IAAI;AACd,WAAO;;AAGF,MAAM,eAAe,CAAC,OAAO,QAAQ;AAC1C,QAAI,CAAC,YAAY,OAAO,QAAQ;AAC9B,YAAM,SAAS,MAAM,cAAc,MAAM,GAAG,KAAK;AACjD,iBAAW,KAAK,MAAM,MAAM;AAC1B,cAAM,OAAO,MAAM,KAAK,GAAG;AAC3B,cAAM,KAAK,MAAM,KAAK,GAAG;AACzB,cAAM,KAAK,KAAK,OAAO,SAAS,MAAM;;WAEnC;AACL,YAAM,OAAO,MAAM,MAAM,GAAG,KAAK;;;AAIrC,MAAM,iBAAiB,CAAC,UAAU,OAAO,SAAS;AAChD,UAAM,UAAU,SAAS;AACzB,UAAM,OAAO,MAAM;AACnB,UAAM,SAAS,MAAM,GAAG;AACxB,UAAM,YACJ,UAAU,aAAa,QACnB,QACA,UAAU,aAAa,SACrB,SACA;AAER,UAAM,aAAa,SAAS,mBAAmB;AAC/C,UAAM,eAAe,MAAM,YAAY,KAAK,GAAG,OAAO,CAAC,GAAG,MAAM,IAAI,QAAQ;AAO5E,UAAM,QAAQ,IAAI,MAAM,MAAM,eAAe;AAE7C,UAAM,IAAI,SAAS,iBAAiB;AAEpC,aAAS,iBAAiB,QAAQ;AAClC,iBAAa,SAAS,iBAAiB,OAAO;AAC9C,iBAAa,SAAS,iBAAiB,OAAO;AAE9C,UAAM,cAAc,YAAY;AAChC,UAAM,eAAe,MAAM,WAAW;AAEtC,UAAM,QAAQ,QAAQ;AACtB,QAAI,MAAM;AACV,aAAS,MAAM,GAAG,MAAM,MAAM,OAAO;AACnC,YAAM,OAAO,QAAQ,QAAS,MAAM;AACpC,YAAM,KAAK,OAAO;AAElB,YAAM,OAAO,SAAS,iBAAiB,MAAM,SAAS,MAAM;AAE5D,YAAM,KAAK,iBAAiB;AAC5B,YAAM,KAAK,eAAe;AAC1B,YAAM,KAAK,gBAAgB,SAAS,iBAAiB,MAAM,cAAc,SAAS,MAAM;AACxF,YAAM,KAAK,oBAAoB,SAAS,iBAAiB,MAAM,kBAAkB,SAAS,MAAM;AAChG,YAAM,KAAK,aAAa;AACxB,YAAM,KAAK,cAAc,MAAM;AAC/B,YAAM,KAAK,eAAe,MAAM;AAEhC,YAAM;;AAGR,YAAQ,QAAQ;AAEhB,UAAM,gBAAgB,SAAS,iBAAiB,MAAM,SAAS,OAAO;;AAGxE,MAAM,kBAAkB,CAAC,UAAU,OAAO,SAAS;AACjD,WAAO,KAAK,OAAO,QAAQ,SAAO;AAChC,YAAM,KAAK,MAAM;AACjB,UAAI,MAAM,QAAQ,KAAK;AACrB,uBAAe,UAAU,IAAI;AAC7B,cAAM,iBAAiB,KAAK;iBACnB,YAAY,OAAO,KAAK;AACjC,cAAM,OAAO,OAAO,IAAI;AACxB,cAAM,iBAAiB,KAAK,MAAM;AAClC,cAAM,KAAK,gBAAgB,OAAO,GAAG,eAAe;AACpD,cAAM,KAAK,oBAAoB,OAAO,GAAG,mBAAmB;iBACnD,OAAO,OAAO,UAAU;AACjC,wBAAgB,UAAU,MAAM,MAAM;;;;AAKrC,MAAM,cAAc,CAAC,OAAO,SAAS;AAC1C,QAAI,MAAM;AAAY;AACtB,UAAM,cAAc;AACpB,UAAM,iBAAiB,SAAS;AAChC,WAAO,KAAK,MAAM,mBAAmB,QAAQ,OAAK;AAChD,YAAM,kBAAkB,KAAK;;AAE/B,oBAAgB,OAAO,OAAO;;AAuBhC,MAAM,kBAAkB,CAAC,MAAM,WAAW;AACxC,UAAM,aAAa,SAAS,MAAM,MAAM;AACxC,UAAM,UAAS,IAAI,YAAY;AAC/B,WAAO,IAAI,MAAM,MAAM;;AAKzB,MAAM,mBAAmB,CAAC,UAAU,MAAM,WAAW;AACnD,UAAM,OAAO,SAAS;AACtB,UAAM,QAAQ,MAAM,MAAM,KAAK;AAC/B,UAAM,cAAc;AAEpB,UAAM,UAAU,SAAS;AACzB,UAAM,YACJ,SAAS,aAAa,QAClB,QACA,SAAS,aAAa,SACpB,SACA;AAER,QAAI,CAAC;AAAQ,YAAM,IAAI,MAAM;AAC7B,QAAI,CAAC,MAAM;AAAO,YAAM,IAAI,MAAO,gDAA0C;AAG7E,QAAI,CAAC,SAAS,iBAAiB,OAAO;AACpC,YAAM,aAAa,SAAS,mBAAmB;AAC/C,YAAM,eAAe,MAAM,YAAY,KAAK,GAAG,OAAO,CAAC,GAAG,MAAM,IAAI,QAAQ;AAO5E,YAAM,QAAQ,IAAI,MAAM,MAAM,eAAe;AAE7C,eAAS,iBAAiB,QAAQ;AAClC,mBAAa,SAAS,iBAAiB,OAAO;AAC9C,mBAAa,SAAS,iBAAiB,OAAO;AAE9C,YAAM,cAAc,YAAY;AAChC,YAAM,eAAe,MAAM,WAAW;;AAIxC,UAAM,QAAQ,QAAQ;AACtB,QAAI,MAAM;AACV,aAAS,MAAM,GAAG,MAAM,MAAM,OAAO;AACnC,YAAM,OAAO,QAAQ,QAAS,MAAM;AACpC,YAAM,KAAK,OAAO;AAElB,YAAM,OAAO,SAAS,iBAAiB,MAAM,SAAS,MAAM;AAE5D,YAAM,KAAK,iBAAiB;AAC5B,YAAM,KAAK,eAAe;AAC1B,YAAM,KAAK,gBAAgB,SAAS,iBAAiB,MAAM,cAAc,SAAS,MAAM;AACxF,YAAM,KAAK,oBAAoB,SAAS,iBAAiB,MAAM,kBAAkB,SAAS,MAAM;AAChG,YAAM,KAAK,aAAa;AACxB,YAAM,KAAK,cAAc,YAAY;AACrC,YAAM,KAAK,eAAe,MAAM,WAAW;AAE3C,YAAM;;AAGR,YAAQ,QAAQ;AAEhB,UAAM,gBAAgB,SAAS,iBAAiB,MAAM,SAAS,OAAO;AAEtE,WAAO;;AAGT,MAAM,cAAc,OAAK,MAAM,QAAQ,MAAM,OAAO,EAAE,OAAO,YAAY,OAAO,EAAE,OAAO;AAElF,MAAM,cAAc,CAAC,QAAQ,SAAS;AAC3C,UAAM,SAAS,OAAO;AAEtB,QAAI,CAAC,UAAU,CAAC,OAAO,KAAK,QAAQ,QAAQ;AAE1C,aAAO,UAAU;SACd,aAAa;SACb,YAAY;SACZ,aAAa,MAAM,OAAO;;AAE7B,aAAO,OAAO;;AAGhB,aAAS,KAAK,MAAM,KAAK,UAAU;AAEnC,UAAM,cAAc;AACpB,UAAM,qBAAqB,OAAK;AAC9B,YAAM,OAAO,OAAO,KAAK;AACzB,iBAAW,KAAK,MAAM;AACpB,YAAI,YAAY,EAAE,KAAK;AACrB,cAAI,CAAC,YAAY,EAAE,GAAG;AAAK,wBAAY,EAAE,GAAG,MAAM;AAClD,sBAAY,EAAE,GAAG;mBACR,EAAE,cAAc,QAAQ;AACjC,6BAAmB,EAAE;;;;AAI3B,uBAAmB;AAEnB,UAAM,WAAW;OACd,aAAa;OACb,aAAa;OACb,kBAAkB;OAClB,YAAY;OACZ,eAAe;OACf,mBAAmB,OAAO,KAAK,OAAO,OAAO,CAAC,GAAG,SAAU,iCAAK,IAAL;SAAS,OAAO;UAAM;OACjF,kBAAkB;OAClB,oBAAoB;;AAGvB,QAAI,kBAAkB,UAAU,OAAO,KAAK,QAAQ,QAAQ;AAE1D,YAAM,qBAAqB,CAAC,GAAG,MAAM;AAEnC,YAAI,OAAO,EAAE,OAAO,UAAU;AAE5B,YAAE,KAAK,gBAAgB,EAAE,IAAI;AAC7B,uBAAa,EAAE,IAAI;AACnB,uBAAa,EAAE,IAAI;AACnB,YAAE,GAAG,cAAc,MAAM,OAAO;AAChC,mBAAS,iBAAiB,KAAK,EAAE;mBAExB,YAAY,EAAE,KAAK;AAE5B,gBAAM,CAAC,MAAM,UAAU,EAAE;AACzB,YAAE,KAAK,iBAAiB,UAAU,MAAM;AACxC,YAAE,GAAG,cAAc,MAAM,OAAO;AAChC,mBAAS,iBAAiB,KAAK,EAAE;mBAGxB,EAAE,cAAc,QAAQ;AAEjC,YAAE,KAAK,OAAO,KAAK,EAAE,IAAI,OAAO,oBAAoB,EAAE;;AAKxD,eAAO;;AAGT,aAAO,UAAU,OAAO,OAAO,OAAO,KAAK,QAAQ,OAAO,oBAAoB,SAAS;AACvF,aAAO,QAAQ,cAAc,MAAM,OAAO;AAI1C,aAAO,OAAO;;;AC5SX,MAAM,YAAY,MAAM;AAC7B,UAAM,QAAQ;AACd,UAAM,SAAS;AAIf,UAAM,MAAM,SAAO,MAAM,OAAO,UAAU;AAE1C,UAAM,MAAM,SAAO;AACjB,UAAI,IAAI;AAAM;AACd,aAAO,OAAO,MAAM,KAAK,OAAO;;AAGlC,UAAM,SAAS,SAAO;AACpB,UAAI,CAAC,IAAI;AAAM;AACf,YAAM,QAAQ,OAAO;AACrB,YAAM,UAAU,MAAM;AACtB,UAAI,YAAY,KAAK;AACnB,cAAM,SAAS;AACf,eAAO,WAAW;;;AAItB,WAAO;MACL;MACA;MACA;MACA;MACA;;;ACiHJ,MAAM,cAAc,IAAI;AC7KjB,MAAM,eAAe,OAAO;AAE5B,MAAM,mBAAmB,OAAO;AAChC,MAAM,eAAe,OAAO;AAInC,MAAI,cAAc;AAIlB,MAAI,qBAAqB;AACzB,MAAI,aAAa;AACjB,MAAM,YAAY,aAAc,aAAa;AAGtC,MAAM,gBAAgB,MAAM;AAGnC,MAAM,UAAU;AAQT,MAAM,iBAAiB,MAAM;AAM7B,MAAM,kBAAkB,MAAM;AAG9B,MAAM,aAAa,IAAI;MA6BjB,eAAe,CAAC,QAAO,QAAQ;AAE1C,QAAI,CAAC,OAAM,kBAAkB,IAAI;AAAM;AAIvC,WAAM,UAAU,QAAQ,OAAK;AAC3B,wBAAkB,QAAO,GAAG;;AAI9B,YAAQ,KAAK;AAGb,WAAM,kBAAkB,OAAO;AAG/B,aAAS,IAAI,GAAG,IAAI,OAAM,cAAc,QAAQ;AAAK,aAAM,cAAc,GAAG,OAAO;;AChF9E,mBAAiB,GAAG;AAAE,WAAO,wBAAwB;AAAE,aAAO;;;AAE9D,MAAM,WAAW,OAAO;AACxB,MAAM,cAAc,OAAO;AAC3B,MAAM,YAAY,OAAO;AACzB,MAAM,gBAAgB,OAAO;AAC7B,MAAM,mBAAmB,OAAO;AAgBhC,MAAM,gBAAgB,CAAC,QAAO,UAAU;AAE7C,UAAM,cAAa;AACnB,UAAM,gBAAgB;AACtB,UAAM,oBAAoB;AAE1B,UAAM,kBAAkB,QAAQ,OAAK;AACnC,UAAI,OAAO,MAAM,YAAY;AAC3B,cAAM,OAAO;AACb,YAAI,CAAC,OAAM,eAAe,IAAI;AAAO,4BAAkB,QAAO;AAC9D,YAAI,EAAE,SAAS,YAAY;AACzB,wBAAc,KAAK;;AAErB,YAAI,EAAE,SAAS,gBAAgB;AAC7B,4BAAkB,KAAK;AACvB,sBAAW,KAAK;;aAEb;AACL,YAAI,CAAC,OAAM,eAAe,IAAI;AAAI,4BAAkB,QAAO;AAC3D,oBAAW,KAAK;;;AAKpB,UAAM,gBAAgB,OAAK,OAAM,eAAe,IAAI;AAEpD,UAAM,gBAAgB,YAAW,OAAO,eAAe,IAAI;AAG3D,UAAM,YAAY;AAElB,UAAM,aAAa;AACnB,UAAM,UAAU;AAChB,UAAM,WAAW;AACjB,UAAM,UAAU;AAChB,UAAM,SAAS;AAEf,UAAM,cAAc,cACjB,IAAI,OAAK,EAAE,cACX,OAAO,CAAC,GAAE,MAAM;AACf,UAAI,EAAE,SAAS;AAAI,eAAO;AAC1B,QAAE,KAAK;AACP,aAAO;OACN;AAEL,UAAM,iBAAiB,CAAC,GAAE,MAAM;AAC9B,UAAI,CAAC,EAAE,EAAE;AAAe,UAAE,EAAE,gBAAgB;AAC5C,QAAE,EAAE,iBAAiB,EAAE;AACvB,aAAO;;AAET,UAAM,QAAQ,YACX,IAAI,eACJ,OAAO,gBAAgB;AAE1B,UAAM,WAAW,cACd,IAAI,eACJ,OAAO,CAAC,GAAE,MAAM;AACf,UAAI,CAAC,EAAE,EAAE,eAAe;AACtB,UAAE,EAAE,gBAAgB;;AAEtB,QAAE,EAAE,iBAAiB,EAAE;AACvB,aAAO;OACN;AAML,UAAM,WAAW,cACd,OAAO,gBAAgB;AAE1B,UAAM,YAAY,YACf,OAAO,OAAK,CAAC,EAAE,YACf,IAAI,OAAK,OAAO,sBAAsB,GAAG,SAAS,mBAAmB,EAAE,mBAAmB,CAAC,IAC3F,OAAO,CAAC,GAAE,MAAM,EAAE,OAAO,IAAI;AAEhC,UAAM,UAAU,UAAU,IAAI,UAAQ;AAClC,YAAM,IAAI;AACV,mBAAa,MAAM;AACnB,aAAO,KAAK;OACb;AAEH,UAAM,IAAI,OAAO,OAAO,WAAW;MACjC;MACA;MACA;MACA;MACA;MACA;MACA;MAEA;MACA;MACA;MACA;MACA;MACA;MACA;;AAIF,WAAM,WAAW,IAAI,OAAO;AAC5B,WAAM,UAAU,IAAI;AAEpB,gBAAW,IAAI,eAAe,QAAQ,OAAK;AACzC,QAAE,QAAQ,IAAI;;AAEhB,kBAAc,IAAI,eAAe,QAAQ,OAAK;AAC5C,QAAE,WAAW,IAAI;;AAGnB,QAAI,cAAc;AAAQ,aAAM,aAAa,IAAI;AAEjD,aAAS,MAAM,GAAG,MAAM,mBAAmB,OAAO;AAChD,UAAI,CAAC,OAAM,kBAAkB,IAAI;AAAM;AACvC,UAAI,iBAAiB,QAAO,GAAG,MAAM;AACnC,uBAAe,GAAG;;;;AAKxB,MAAM,OAAO,CAAC,GAAG,cAAc;AAC7B,QAAI;AAAW,QAAE,QAAQ,SAAS;AAClC,UAAM;MAAE;MAAW;QAAY;AAC/B,aAAS,IAAI,GAAG,IAAI,EAAE,MAAM,QAAQ,KAAK;AACvC,YAAM,MAAM,EAAE,MAAM;AACpB,UAAI,QAAQ;AACZ,eAAS,MAAM,GAAG,MAAM,UAAU,QAAQ,OAAO;AAC/C,cAAM,OAAO,UAAU;AACvB,cAAM,SAAS,QAAQ;AACvB,YAAI,YAAY,OAAO,KAAK,OAAO;AACjC,mBAAS,KAAI,GAAG,KAAI,KAAK,KAAK,QAAQ,MAAK;AACzC,gBAAI,KAAK,KAAK,QAAO,KAAK,KAAK,cAAc,KAAI;AAC/C,sBAAQ;AACR,mBAAK,KAAK,cAAc,MAAK,KAAK,KAAK;;;eAGtC;AACL,cAAI,KAAK,SAAS,OAAO,MAAM;AAC7B,oBAAQ;AACR,mBAAO,OAAO,KAAK;;;;AAIzB,UAAI;AAAO,UAAE,QAAQ,KAAK;;AAE5B,WAAO,EAAE;;MAGE,cAAe,iBAAe;AACzC,QAAI,gBAAe,UAAa,YAAW,mBAAmB,QAAW;AACvE,aAAO,YAAS,SAAQ,OAAM,gBAAgB,YAAW;;AAG3D,UAAM,QAAQ,SAAU,QAAO,YAAU,MAAM;AAC7C,UAAI,CAAC,OAAM,WAAW,IAAI;AAAQ,sBAAc,QAAO;AAEvD,YAAM,IAAI,OAAM,WAAW,IAAI;AAE/B,0BAAoB;AAEpB,UAAI,EAAE,kBAAkB;AAAQ,eAAO,KAAK,GAAG;AAE/C,aAAO,EAAE;;AAEX,UAAM,oBAAoB;AAC1B,WAAO;;AAIF,MAAM,mBAAmB,CAAC,QAAO,GAAG,QAAQ;AACjD,UAAM;MAAE;MAAO;MAAU;QAAgB;AAEzC,aAAS,IAAI,GAAG,IAAI,YAAY,QAAQ,KAAK;AAC3C,YAAM,eAAe,YAAY;AACjC,YAAM,QAAQ,MAAM;AACpB,YAAM,WAAW,SAAS;AAE1B,YAAM,QAAQ,OAAM,cAAc,cAAc;AAKhD,UAAI,YAAa,SAAQ,cAAc,GAAG;AACxC,eAAO;;AAET,UAAI,SAAU,SAAQ,WAAW,OAAO;AACtC,eAAO;;;AAGX,WAAO;;AAUF,MAAM,iBAAiB,CAAC,GAAG,QAAQ;AACxC,QAAI,EAAE,IAAI;AAAM;AAChB,MAAE,IAAI;AACN,MAAE,QAAQ,KAAK;;AAGjB,MAAM,sBAAuB,OAAM;AACjC,WAAO,EAAE,SAAS,QAAQ;AACxB,QAAE,OAAO,EAAE,SAAS;;;MAIX,iBAAkB,YAAU;AACvC,WAAM,eAAe,QAAQ;AAC7B,WAAM,eAAe;;AAGhB,MAAM,oBAAoB,CAAC,QAAO,GAAG,QAAQ;AAClD,QAAI,CAAC,EAAE,IAAI;AAAM;AACjB,MAAE,SAAS,KAAK;AAChB,WAAM,eAAe,IAAI;AACzB,MAAE,OAAO,KAAK;;ACtPT,MAAM,gBAAgB,OAAO;AAE7B,MAAM,aAAa;MAMb,kBAAmB,YAAW;AACzC,UAAM,YAAY,YAAY,QAAQ;AACtC,QAAI,UAAU,OAAO,KAAK,QAAQ;AAAQ,iBAAW,KAAK;AAC1D,WAAO;;AAGF,MAAM,mBAAoB,YAAU;AACzC,WAAM,aAAa;AACnB,QAAI,OAAM,aAAa,SAAG,KAAI;AAC5B,aAAM,YAAY;AAClB,aAAM,cAAc,KAAK,IAAI,YAAY,OAAM;;;MAItC,oBAAoB,CAAC,QAAO,cAAc;AACrD,QAAI,CAAC;AAAW,YAAM,IAAI,MAAO;AAEjC,UAAM,UAAU,IAAI;AACpB,UAAM,aAAa,IAAI;AAEvB,WAAM,UAAU,QAAQ,OAAK;AAC3B,UAAI,EAAE,WAAW,SAAS,YAAY;AACpC,gBAAQ,IAAI;iBACH,EAAE,cAAc,SAAS,YAAY;AAC9C,mBAAW,IAAI;;;AAInB,WAAM,eAAe,IAAI,WAAW;MAClC,cAAc,OAAM,cAAc,SAAS;MAC3C,SAAS,OAAM;MACf,OAAO;MACP;MACA;;AAGF,QAAI,UAAU,cAAc,OAAM,QAAQ;AACxC,kBAAY,WAAW,OAAM;;AAG/B,qBAAiB;;AC/CZ,MAAM,QAAQ,OAAO;AACrB,MAAM,mBAAmB,OAAO;AAChC,MAAM,WAAW,OAAO;AACxB,MAAM,cAAc,OAAO;AAC3B,MAAM,iBAAiB,OAAO;AAE9B,MAAM,SAAS;MAkBT,cAAc,MAAM;AAC/B,UAAM,SAAQ;AACd,eAAW;AACX,WAAO,KAAK;AACZ,WAAO;;MAGI,aAAc,YAAU;AACnC,UAAM,OAAO;AACb,WAAM,SAAS;AAEf,QAAI,OAAM;AAAe,aAAM,cAAc,QAAQ,SAAO,aAAa,QAAO;AAEhF,WAAM,gBAAgB,CAAC,IAAI,YAAY;AACvC,WAAM,eAAe;AAErB,WAAM,oBAAoB;AAE1B,WAAM,gBAAgB,OAAM,kBAAkB;AAE9C,WAAM,YAAY;AAElB,WAAM,iBAAiB,IAAI;AAE3B,WAAM,aAAa,IAAI;AACvB,WAAM,YAAY,IAAI;AACtB,WAAM,eAAe,IAAI;AACzB,WAAM,iBAAiB,IAAI;AAE3B,WAAM,kBAAkB,IAAI;AAE5B,WAAO;;MC3DI,eAAe,CAAC,KAAK,QAAQ;AACxC,UAAM,SAAS,QAAQ,SAAY,MAAM;AACzC,UAAM,SAAS,QAAQ,SAAY,MAAM;AACzC,UAAM,OAAO,IAAI;AACjB,UAAM,SAAS,CAAC,WAAU,SAAS;AACjC,UAAI,UAAU,CAAC,KAAK,IAAI,SAAQ;AAC9B,eAAO,QAAO,GAAG;AACjB,aAAK,IAAI;;AAEX,aAAO,QAAO,GAAG;AACjB,qBAAe;AACf,aAAO;;AAGT,WAAO,eAAe,QAAQ,QAAQ;MACpC,OAAQ,QAAO,QAAQ,qBAAqB;MAC5C,cAAc;;AAGhB,WAAO;;MCII,QAAQ;;;ACvBrB,MAAM,QAAQ,gBAAgB;AAAA,IAC1B,GAAG,MAAM;AAAA,IACT,GAAG,MAAM;AAAA,IACT,GAAG,MAAM;AAAA,IACT,GAAG,MAAM;AAAA,IACT,aAAa,CAAE,MAAM,KAAK;AAAA,IAC1B,aAAa,CAAE,MAAM,KAAK;AAAA;AAGvB,MAAM,iBAAiB;;;ACT9B,MAAM,QAAQ;;;ACgFd,MAAM,aAAa,gBAAgB;AAAA,IAC/B,QAAQ,CAAE,MAAM,KAAK;AAAA;AAGlB,MAAM,sBAAsB;;;ACpF5B,2BAA0B,IAAY,IAAY,IAAY,IAAY,IAAY,IAAY,IAAY,IAAY,IACjI;AACI,UAAM,OAAO,oBAAoB,OAAO;AAExC,SAAK,KAAK;AACV,SAAK,KAAK;AAEV,SAAK,KAAK;AACV,SAAK,MAAM;AAEX,SAAK,MAAM;AACX,SAAK,MAAM;AAEX,SAAK,MAAM;AACX,SAAK,MAAM;AAEX,SAAK,MAAM;AACX,SAAK,MAAM;AAEX,SAAK,MAAM;AACX,SAAK,MAAM;AAAA;;;ACbf,MAAM,SAAS,gBAAgB;AAAA,IAC3B,OAAO,CAAE,MAAM,KAAK;AAAA,IACpB,QAAQ,CAAE,MAAM,KAAK;AAAA,IACrB,OAAO,CAAE,MAAM,KAAK;AAAA;AAGjB,MAAM,kBAAkB;;;ACb/B,MAAM,WAAW,gBAAgB;AAAA,IAC7B,GAAG,MAAM;AAAA,IACT,GAAG,MAAM;AAAA,IACT,OAAO,MAAM;AAAA,IACb,QAAQ,MAAM;AAAA,IACd,OAAO,MAAM;AAAA,IACb,QAAQ,MAAM;AAAA;AAGX,MAAM,oBAAoB;;;ACTjC,MAAM,gBAAgB,gBAAgB;AAAA,IAClC,GAAG,MAAM;AAAA,IACT,GAAG,MAAM;AAAA,IACT,GAAG,MAAM;AAAA,IACT,GAAG,MAAM;AAAA,IACT,IAAI,MAAM;AAAA,IACV,IAAI,MAAM;AAAA;AAGP,MAAM,yBAAyB;;;ACJtC,MAAI;AAEJ,MAAM,6BAA6B,aAAa,YAChD;AACI,aAAS,IAAI,GAAG,IAAI,SAAS,QAAQ,KACrC;AACI,YAAM,KAAK,SAAS;AAEpB,YAAM,IAAI,uBAAuB,EAAE;AACnC,YAAM,IAAI,uBAAuB,EAAE;AACnC,YAAM,IAAI,uBAAuB,EAAE;AACnC,YAAM,IAAI,uBAAuB,EAAE;AACnC,YAAM,KAAK,uBAAuB,GAAG;AACrC,YAAM,KAAK,uBAAuB,GAAG;AAErC,YAAM,IAAI,kBAAkB,EAAE;AAC9B,YAAM,IAAI,kBAAkB,EAAE;AAC9B,YAAM,QAAQ,kBAAkB,MAAM;AACtC,YAAM,SAAS,kBAAkB,OAAO;AAExC,YAAM,KAAM,IAAI,IAAM,IAAI,IAAK;AAC/B,YAAM,KAAM,IAAI,IAAM,IAAI,IAAK;AAE/B,YAAM,KAAM,IAAI,IAAM,SAAS,IAAK;AACpC,YAAM,KAAM,IAAI,IAAM,SAAS,IAAK;AAEpC,YAAM,KAAM,QAAQ,IAAM,SAAS,IAAK;AACxC,YAAM,KAAM,QAAQ,IAAM,SAAS,IAAK;AAExC,YAAM,KAAM,QAAQ,IAAM,IAAI,IAAK;AACnC,YAAM,KAAM,QAAQ,IAAM,IAAI,IAAK;AAEnC,sBAAgB,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI;AAGhD,YAAM,KAAK,KAAK,IAAI,IAAI,IAAI,IAAI;AAChC,YAAM,KAAK,KAAK,IAAI,IAAI,IAAI,IAAI;AAChC,YAAM,KAAK,KAAK,IAAI,IAAI,IAAI,IAAI;AAChC,YAAM,KAAK,KAAK,IAAI,IAAI,IAAI,IAAI;AAEhC,YAAM,SAAS,gBAAgB,OAAO;AAEtC,aAAO,KAAK;AACZ,aAAO,KAAK;AACZ,aAAO,KAAK;AACZ,aAAO,KAAK;AAAA;AAGhB,WAAO;AAAA;;;ACrDJ,wBAAuB,IAAY,KAAa,OAAe,MAAc,OACpF;AACI,UAAM,OAAO,oBAAoB,OAAO;AAExC,SAAK,KAAK;AACV,SAAK,KAAK;AACV,SAAK,KAAK;AACV,SAAK,KAAK;AAEV,SAAK,MAAM;AACX,SAAK,MAAM;AACX,SAAK,MAAM;AACX,SAAK,MAAM;AAEX,SAAK,MAAM;AACX,SAAK,MAAM;AACX,SAAK,MAAM;AACX,SAAK,MAAM;AAEX,SAAK,MAAM;AACX,SAAK,MAAM;AACX,SAAK,MAAM;AACX,SAAK,MAAM;AAEX,SAAK,MAAM;AACX,SAAK,MAAM;AACX,SAAK,MAAM;AACX,SAAK,MAAM;AAEX,SAAK,MAAM;AACX,SAAK,MAAM;AACX,SAAK,MAAM;AACX,SAAK,MAAM;AAAA;;;AC5Bf,MAAM,oBAAoB,YAAY,CAAE,QAAQ,iBAAiB;AAEjE,MAAM,uBAAuB,aAAa,YAC1C;AACI,UAAM,YAAW,kBAAkB;AAEnC,aAAS,IAAI,GAAG,IAAI,UAAS,QAAQ,KACrC;AACI,YAAM,KAAK,UAAS;AAEpB,YAAM,IAAI,eAAe,EAAE,MAAM;AACjC,YAAM,IAAI,eAAe,EAAE,MAAM;AACjC,YAAM,IAAI,eAAe,EAAE,MAAM;AACjC,YAAM,IAAI,eAAe,EAAE;AAE3B,mBAAa,IAAI,GAAG,GAAG,GAAG;AAAA;AAG9B,WAAO;AAAA;;;ACtBX,MAAM,QAAQ,gBAAgB;AAAA,IAC1B,OAAO,MAAM;AAAA,IACb,YAAY,MAAM;AAAA,IAClB,aAAa,MAAM;AAAA,IACnB,WAAW,MAAM;AAAA;AAGd,MAAM,iBAAiB;;;ACPvB,8BAA6B,IACpC;AACI,mBAAe,WAAW,MAAM;AAAA;;;ACF7B,+BAA8B,IACrC;AACI,mBAAe,YAAY,MAAM;AAAA;;;ACKrC,MAAM,YAAY,gBAAgB;AAAA,IAC9B,SAAS,MAAM;AAAA,IACf,UAAU,MAAM;AAAA,IAChB,aAAa,MAAM;AAAA,IACnB,OAAO,MAAM;AAAA,IACb,OAAO,MAAM;AAAA,IACb,YAAY,MAAM;AAAA;AAGf,MAAM,qBAAqB;;;AChB3B,MAAM,kBAA4C,IAAI;;;ACA7D,MAAM,cAAc,gBAAgB;AAAA,IAChC,SAAS,MAAM;AAAA,IACf,iBAAiB,MAAM;AAAA,IACvB,YAAY,MAAM;AAAA,IAClB,oBAAoB,MAAM;AAAA,IAC1B,YAAY,MAAM;AAAA,IAClB,oBAAoB,MAAM;AAAA,IAC1B,mBAAmB,MAAM;AAAA,IACzB,uBAAuB,MAAM;AAAA,IAC7B,mBAAmB,MAAM;AAAA;AAGtB,MAAM,uBAAuB;;;ACZ7B,6BAA4B,IACnC;AACI,WAAO,QAAQ,qBAAqB,kBAAkB;AAAA;;;ACF1D,MAAM,gBAAgB,gBAAgB;AAAA,IAClC,GAAG,MAAM;AAAA,IACT,GAAG,MAAM;AAAA,IACT,GAAG,MAAM;AAAA,IACT,GAAG,MAAM;AAAA,IACT,IAAI,MAAM;AAAA,IACV,IAAI,MAAM;AAAA,IACV,OAAO,MAAM;AAAA;AAGV,MAAM,yBAAyB;;;ACVtC,MAAM,cAAc,gBAAgB;AAAA,IAChC,GAAG,MAAM;AAAA,IACT,GAAG,MAAM;AAAA,IACT,UAAU,MAAM;AAAA,IAChB,QAAQ,MAAM;AAAA,IACd,QAAQ,MAAM;AAAA,IACd,OAAO,MAAM;AAAA,IACb,OAAO,MAAM;AAAA,IACb,SAAS,MAAM;AAAA,IACf,SAAS,MAAM;AAAA;AAGZ,MAAM,uBAAuB;;;ACd7B,MAAM,cAAc;AAAA,IAEvB,OAAO;AAAA,IACP,WAAW;AAAA,IACX,QAAQ;AAAA,IACR,aAAa;AAAA,IACb,aAAa;AAAA,IACb,QAAQ;AAAA,IACR,QAAQ;AAAA,IACR,SAAS;AAAA,IACT,OAAO;AAAA,IACP,OAAO;AAAA,IACP,OAAO;AAAA,IAGP,SAAS,IAAI,IAAI,KAAK;AAAA,IAwBtB,OAAO;AAAA,IACP,OAAO;AAAA,IACP,OAAO;AAAA,IACP,OAAO;AAAA;;;ACnCX,MAAI;AAEJ,MAAM,6BAA6B,aAAa,YAChD;AACI,QAAI,aAAqB;AAEzB,aAAS,IAAI,GAAG,IAAI,UAAS,QAAQ,KACrC;AACI,YAAM,KAAK,UAAS;AAEpB,YAAM,IAAI,qBAAqB,EAAE;AACjC,YAAM,IAAI,qBAAqB,EAAE;AACjC,YAAM,WAAW,qBAAqB,SAAS;AAC/C,YAAM,SAAS,qBAAqB,OAAO;AAC3C,YAAM,SAAS,qBAAqB,OAAO;AAC3C,YAAM,QAAQ,qBAAqB,MAAM;AACzC,YAAM,QAAQ,qBAAqB,MAAM;AAEzC,6BAAuB,EAAE,MAAM,KAAK,IAAI,WAAW,SAAS;AAC5D,6BAAuB,EAAE,MAAM,KAAK,IAAI,WAAW,SAAS;AAC5D,6BAAuB,EAAE,MAAM,CAAC,KAAK,IAAI,WAAW,SAAS;AAC7D,6BAAuB,EAAE,MAAM,KAAK,IAAI,WAAW,SAAS;AAC5D,6BAAuB,GAAG,MAAM;AAChC,6BAAuB,GAAG,MAAM;AAEhC,wBAAkB;AAElB,UAAI,YAAY,QAAQ,YACxB;AACI,wBAAgB;AAEhB,qBAAa,YAAY;AAAA;AAAA;AAIjC,WAAO;AAAA;;;ACvCJ,4BAA2B,QAAgB,QAClD;AACI,2BAAuB,EAAE,UAAU,uBAAuB,EAAE;AAC5D,2BAAuB,EAAE,UAAU,uBAAuB,EAAE;AAC5D,2BAAuB,EAAE,UAAU,uBAAuB,EAAE;AAC5D,2BAAuB,EAAE,UAAU,uBAAuB,EAAE;AAC5D,2BAAuB,GAAG,UAAU,uBAAuB,GAAG;AAC9D,2BAAuB,GAAG,UAAU,uBAAuB,GAAG;AAAA;;;ACR3D,4BAA2B,QAAgB,QAClD;AACI,2BAAuB,EAAE,UAAU,uBAAuB,EAAE;AAC5D,2BAAuB,EAAE,UAAU,uBAAuB,EAAE;AAC5D,2BAAuB,EAAE,UAAU,uBAAuB,EAAE;AAC5D,2BAAuB,EAAE,UAAU,uBAAuB,EAAE;AAC5D,2BAAuB,GAAG,UAAU,uBAAuB,GAAG;AAC9D,2BAAuB,GAAG,UAAU,uBAAuB,GAAG;AAAA;;;ACN3D,kCAAiC,UAAkB,IAC1D;AACI,UAAM,KAAK,uBAAuB,EAAE;AACpC,UAAM,KAAK,uBAAuB,EAAE;AACpC,UAAM,KAAK,uBAAuB,EAAE;AACpC,UAAM,KAAK,uBAAuB,EAAE;AACpC,UAAM,MAAM,uBAAuB,GAAG;AACtC,UAAM,MAAM,uBAAuB,GAAG;AAEtC,UAAM,IAAI,uBAAuB,EAAE;AACnC,UAAM,IAAI,uBAAuB,EAAE;AACnC,UAAM,IAAI,uBAAuB,EAAE;AACnC,UAAM,IAAI,uBAAuB,EAAE;AACnC,UAAM,KAAK,uBAAuB,GAAG;AACrC,UAAM,KAAK,uBAAuB,GAAG;AAErC,2BAAuB,EAAE,MAAM,IAAI,KAAK,IAAI;AAC5C,2BAAuB,EAAE,MAAM,IAAI,KAAK,IAAI;AAC5C,2BAAuB,EAAE,MAAM,IAAI,KAAK,IAAI;AAC5C,2BAAuB,EAAE,MAAM,IAAI,KAAK,IAAI;AAC5C,2BAAuB,GAAG,MAAM,KAAK,KAAK,KAAK,KAAK;AACpD,2BAAuB,GAAG,MAAM,KAAK,KAAK,KAAK,KAAK;AAAA;;;ACtBjD,iCAAgC,IACvC;AACI,WAAO,QAAQ,qBAAqB,sBAAsB;AAAA;;;ACK9D,MAAM,6BAA6B,YAAY,CAAE,QAAQ;AAEzD,MAAM,6BAA6B,aAAa,YAChD;AACI,UAAM,YAAW,2BAA2B;AAE5C,aAAS,IAAI,GAAG,IAAI,UAAS,QAAQ,KACrC;AACI,YAAM,KAAK,UAAS;AACpB,YAAM,aAAa,gBAAgB,IAAI;AACvC,YAAM,SAAS,WAAW;AAE1B,UAAI,CAAC,QACL;AACI,yBAAiB,IAAI;AAAA,iBAEhB,CAAC,sBAAsB,KAChC;AACI,yBAAiB,OAAO,IAAI;AAAA,aAGhC;AACI,+BAAuB,OAAO,IAAI;AAAA;AAAA;AAI1C,WAAO;AAAA;;;AC6CJ,2BACP;AACI,WAAO,IAAI,aAAa;AAAA,MAEpB;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MACxB;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MACxB;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAExB;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MACxB;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MACxB;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA;AAAA;;;ACxFhC,MAAM,SAAS;;;ACAf,MAAM,UAAS;;;ACFR,0BACP;AAOI,WAAO,IAAI,aAAa;AAAA,MACpB;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MACxB;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MACxB;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA;AAAA;;;ACThC,MAAM,UAAS;ACFf,ACAA;;ACAA,AAMO,MAAM,aAAa;AAAA,IAStB,KAAK,KAAK,KAAK;AAAA,IASf,SAAS,KAAK,KAAK;AAAA,IASnB,SAAS;AAAA,IAST,YAAY,KAAK,KAAK;AAAA,IAStB,YAAY,MAAM,KAAK;AAAA,IAUvB,kBAAkB,OAAO,oBAAoB;AAAA,IAU7C,kBAAkB,OAAO,oBAAoB;AAAA;ACvEjD,ACAA,ACAA,ACAA,ACAA,ACAA,ACAA,ACAA,ACAA;;ACAO,cAAa,GAAW,YAAoB,SACnD;AACI,WAAO,IAAI,IAAM,cAAY,KAAK,IAAI;AAAA;;;ACFnC,iBAAgB,GAAW,YAAoB,SACtD;AACI,UAAM,IAAI,YAAY;AAEtB,QAAK,MAAK,KAAK,GACf;AACI,aAAO,MAAO,KAAI,IAAM,MAAI,KAAK,IAAI;AAAA,WAGzC;AACI,aAAO,MAAQ,OAAK,KAAK,IAAM,MAAI,KAAK,IAAI,KAAK;AAAA;AAAA;;;ACVlD,eAAc,GAAW,YAAoB,SACpD;AACI,WAAO,EAAE,IAAI,IAAM,cAAY,KAAK,IAAI,aAAa;AAAA;;;ACFlD,eAAa,GACpB;AACI,QAAI,IAAI;AAER,QAAI,IAAI,IAAI,MACZ;AACI,aAAO,IAAK,SAAS,IAAI;AAAA,eAEpB,IAAI,IAAI,MACjB;AACI,aAAO,IAAK,UAAU,MAAK,MAAM,QAAQ,IAAI;AAAA,eAExC,IAAI,MAAM,MACnB;AACI,aAAO,IAAK,UAAU,MAAK,OAAO,QAAQ,IAAI;AAAA,WAGlD;AACI,aAAO,IAAK,UAAU,MAAK,QAAQ,QAAQ,IAAI;AAAA;AAAA;;;AClBhD,kBAAgB,GACvB;AACI,QAAI,UAAU;AAEd,QAAI,IAAI,KACR;AACI,UAAI,IAAK,IAAI;AACb,gBAAU;AAAA,WAGd;AACI,UAAK,IAAI,IAAK;AAAA;AAGlB,QAAI,IAAI,IAAI,MACZ;AACI,UAAI,SAAS,IAAI;AAAA,eAEZ,IAAI,IAAI,MACjB;AACI,UAAI,SAAU,MAAK,MAAM,QAAQ,IAAI;AAAA,eAEhC,IAAI,MAAM,MACnB;AACI,UAAI,SAAU,MAAK,OAAO,QAAQ,IAAI;AAAA,WAG1C;AACI,UAAI,SAAU,MAAK,QAAQ,QAAQ,IAAI;AAAA;AAG3C,QAAI,SACJ;AACI,aAAQ,KAAI,KAAK;AAAA,WAGrB;AACI,aAAO,IAAI,MAAM;AAAA;AAAA;;;ACrClB,gBAAc,GACrB;AACI,QAAI,IAAI,IAAI,MACZ;AACI,aAAO,SAAS,IAAI;AAAA,eAEf,IAAI,IAAI,MACjB;AACI,aAAO,SAAU,MAAK,MAAM,QAAQ,IAAI;AAAA,eAEnC,IAAI,MAAM,MACnB;AACI,aAAO,SAAU,MAAK,OAAO,QAAQ,IAAI;AAAA,WAG7C;AACI,aAAO,SAAU,MAAK,QAAQ,QAAQ,IAAI;AAAA;AAAA;;;AChB3C,eAAa,GACpB;AACI,WAAO,IAAI,KAAK,KAAK,IAAI,IAAI;AAAA;;;ACF1B,kBAAgB,GACvB;AACI,QAAK,MAAK,KAAK,GACf;AACI,aAAO,OAAQ,MAAK,KAAK,IAAI,IAAI,KAAK;AAAA,WAG1C;AACI,aAAO,MAAO,MAAK,KAAK,IAAK,MAAK,KAAK,KAAK;AAAA;AAAA;;;ACR7C,gBAAc,GACrB;AACI,WAAO,KAAK,KAAK,IAAK,EAAE,IAAI;AAAA;;;ACFzB,eAAa,GACpB;AACI,WAAO,IAAI,IAAI;AAAA;;;ACFZ,kBAAgB,GACvB;AACI,QAAK,MAAK,KAAK,GACf;AACI,aAAO,MAAM,IAAI,IAAI;AAAA,WAGzB;AACI,aAAO,MAAQ,OAAK,KAAK,IAAI,IAAI;AAAA;AAAA;;;ACRlC,gBAAc,GACrB;AACI,WAAO,EAAE,IAAI,IAAI,IAAI;AAAA;;;ACFlB,eAAa,GAAW,YAAoB,KAAK,SAAiB,KACzE;AACI,QAAI,MAAM,GACV;AACI,aAAO;AAAA,eAEF,MAAM,GACf;AACI,aAAO;AAAA,WAGX;AACI,UAAI,IAAI,SAAS;AAEjB,UAAI,YAAY,GAChB;AACI,oBAAY;AAAA,aAGhB;AACI,YAAI,SAAS,KAAK,KAAK,IAAI,aAAc,KAAI,KAAK;AAAA;AAGtD,aAAO,CAAE,aAAY,KAAK,IAAI,GAAG,KAAM,MAAK,MAAM,KAAK,IAAK,KAAI,KAAM,KAAI,KAAK,MAAM;AAAA;AAAA;;;ACvBtF,kBAAgB,GAAW,YAAoB,KAAK,SAAiB,KAC5E;AACI,QAAI,MAAM,GACV;AACI,aAAO;AAAA,eAEF,MAAM,GACf;AACI,aAAO;AAAA,WAGX;AACI,UAAI,IAAI,SAAS;AAEjB,UAAI,YAAY,GAChB;AACI,oBAAY;AAAA,aAGhB;AACI,YAAI,SAAS,KAAK,KAAK,IAAI,aAAc,KAAI,KAAK;AAAA;AAGtD,UAAK,MAAK,KAAK,GACf;AACI,eAAO,OAAQ,aAAY,KAAK,IAAI,GAAG,KAAM,MAAK,MAAM,KAAK,IAAK,KAAI,KAAM,KAAI,KAAK,MAAM;AAAA,aAG/F;AACI,eAAO,YAAY,KAAK,IAAI,GAAG,MAAO,MAAK,MAAM,KAAK,IAAK,KAAI,KAAM,KAAI,KAAK,MAAM,UAAU,MAAM;AAAA;AAAA;AAAA;;;AC7BzG,gBAAc,GAAW,YAAoB,KAAK,SAAiB,KAC1E;AACI,QAAI,MAAM,GACV;AACI,aAAO;AAAA,eAEF,MAAM,GACf;AACI,aAAO;AAAA,WAGX;AACI,UAAI,IAAI,SAAS;AAEjB,UAAI,YAAY,GAChB;AACI,oBAAY;AAAA,aAGhB;AACI,YAAI,SAAS,KAAK,KAAK,IAAI,aAAc,KAAI,KAAK;AAAA;AAGtD,aAAQ,YAAY,KAAK,IAAI,GAAG,MAAM,KAAK,KAAK,IAAK,KAAI,KAAM,KAAI,KAAK,MAAM,UAAU;AAAA;AAAA;;;ACvBzF,eAAa,GACpB;AACI,WAAO,KAAK,IAAI,GAAG,KAAM,KAAI,MAAM;AAAA;;;ACFhC,kBAAgB,GACvB;AACI,QAAI,KAAK,GACT;AACI,aAAO;AAAA;AAGX,QAAI,KAAK,GACT;AACI,aAAO;AAAA;AAGX,QAAK,MAAK,KAAK,GACf;AACI,aAAO,MAAM,KAAK,IAAI,GAAG,KAAM,KAAI;AAAA,WAGvC;AACI,aAAO,MAAO,KAAI,KAAK,IAAI,GAAG,MAAO,KAAI;AAAA;AAAA;;;AClB1C,gBAAc,GACrB;AACI,WAAO,IAAI,KAAK,IAAI,GAAG,MAAM;AAAA;;;ACF1B,eAAa,GACpB;AACI,WAAO,IAAI;AAAA;;;ACFR,kBAAgB,GACvB;AACI,QAAK,MAAK,KAAK,GACf;AACI,aAAO,MAAM,IAAI;AAAA,WAGrB;AACI,aAAO,OAAQ,GAAE,IAAK,KAAI,KAAK;AAAA;AAAA;;;ACRhC,gBAAc,GACrB;AACI,WAAO,IAAK,KAAI;AAAA;;;ACFb,eAAa,GACpB;AACI,WAAO,IAAI,IAAI,IAAI;AAAA;;;ACFhB,kBAAgB,GACvB;AACI,QAAK,MAAK,KAAK,GACf;AACI,aAAO,MAAM,IAAI,IAAI,IAAI;AAAA,WAG7B;AACI,aAAO,OAAS,OAAK,KAAK,IAAI,IAAI,IAAI;AAAA;AAAA;;;ACRvC,gBAAc,GACrB;AACI,WAAO,CAAE,GAAE,IAAI,IAAI,IAAI,IAAI;AAAA;;;ACFxB,eAAa,GACpB;AACI,WAAO,IAAI,IAAI,IAAI,IAAI;AAAA;;;ACFpB,kBAAgB,GACvB;AACI,QAAK,MAAK,KAAK,GACf;AACI,aAAO,MAAM,IAAI,IAAI,IAAI,IAAI;AAAA,WAGjC;AACI,aAAO,MAAQ,OAAK,KAAK,IAAI,IAAI,IAAI,IAAI;AAAA;AAAA;;;ACR1C,gBAAc,GACrB;AACI,WAAQ,KAAI,IAAI,KAAK,IAAI,IAAI,IAAI,IAAI;AAAA;;;ACFlC,gBAAa,GACpB;AACI,QAAI,MAAM,GACV;AACI,aAAO;AAAA,eAEF,MAAM,GACf;AACI,aAAO;AAAA,WAGX;AACI,aAAO,IAAI,KAAK,IAAI,IAAI,KAAK,KAAK;AAAA;AAAA;;;ACZnC,mBAAgB,GACvB;AACI,QAAI,MAAM,GACV;AACI,aAAO;AAAA,eAEF,MAAM,GACf;AACI,aAAO;AAAA,WAGX;AACI,aAAO,MAAO,KAAI,KAAK,IAAI,KAAK,KAAK;AAAA;AAAA;;;ACZtC,iBAAc,GACrB;AACI,QAAI,MAAM,GACV;AACI,aAAO;AAAA,eAEF,MAAM,GACf;AACI,aAAO;AAAA,WAGX;AACI,aAAO,KAAK,IAAI,IAAI,KAAK,KAAK;AAAA;AAAA;;;ACZ/B,kBAAiB,GACxB;AACI,WAAO;AAAA;;;ACFJ,mBAAkB,GAAW,QAAgB,GACpD;AACI,QAAI,KAAK,GACT;AACI,aAAO;AAAA,eAEF,KAAK,GACd;AACI,aAAO;AAAA,WAGX;AACI,aAAU,UAAQ,IAAK,KAAK,KAAM,KAAI;AAAA;AAAA;;;ACE9C,MAAM,UAAiC,IAAI,IAAI;AAAA,IAC3C,CAAE,UAAU;AAAA,IACZ,CAAE,UAAoB;AAAA,IACtB,CAAE,UAAgB;AAAA,IAClB,CAAE,UAAkB;AAAA,IACpB,CAAE,UAAkB;AAAA,IACpB,CAAE,UAAU;AAAA,IACZ,CAAE,QAAkB;AAAA,IACpB,CAAE,SAAe;AAAA,IACjB,CAAE,SAAiB;AAAA,IACnB,CAAE,SAAiB;AAAA,IACnB,CAAE,QAAa;AAAA,IACf,CAAE,QAAa;AAAA,IACf,CAAE,QAAiB;AAAA,IACnB,CAAE,WAAmB;AAAA,IACrB,CAAE,QAAa;AAAA,IACf,CAAE,UAAiB;AAAA,IACnB,CAAE,WAAW;AAAA,IACb,CAAE,WAAqB;AAAA,IACvB,CAAE,YAAkB;AAAA,IACpB,CAAE,YAAoB;AAAA,IACtB,CAAE,YAAoB;AAAA,IACtB,CAAE,WAAgB;AAAA,IAClB,CAAE,WAAgB;AAAA,IAClB,CAAE,WAAoB;AAAA,IACtB,CAAE,cAAsB;AAAA,IACxB,CAAE,WAAgB;AAAA,IAClB,CAAE,aAAoB;AAAA,IACtB,CAAE,YAAsB;AAAA,IACxB,CAAE,aAAmB;AAAA,IACrB,CAAE,aAAqB;AAAA,IACvB,CAAE,aAAqB;AAAA,IACvB,CAAE,YAAiB;AAAA,IACnB,CAAE,YAAiB;AAAA,IACnB,CAAE,YAAqB;AAAA,IACvB,CAAE,eAAuB;AAAA,IACzB,CAAE,YAAiB;AAAA,IACnB,CAAE,cAAqB;AAAA,IACvB,CAAE,cAAwB;AAAA,IAC1B,CAAE,eAAqB;AAAA,IACvB,CAAE,eAAuB;AAAA,IACzB,CAAE,eAAuB;AAAA,IACzB,CAAE,cAAmB;AAAA,IACrB,CAAE,cAAmB;AAAA,IACrB,CAAE,cAAuB;AAAA,IACzB,CAAE,iBAAyB;AAAA,IAC3B,CAAE,cAAmB;AAAA,IACrB,CAAE,gBAAuB;AAAA;AC7D7B,ACAA,ACAA,ACAA,ACAA,ACAA,ACAA,ACAA,ACAA,ACAA,ACAA,ACAA,ACAA,ACAA,ACAA,ACAA,ACAA,ACAA,ACAA,ACAA,ACAA,ACAA,ACAA,ACAA,ACAA,ACAA,ACAA,ACAA,ACAA,ACAA,ACAA,ACAA;;ACAA,AAOA,MAAM,QAAQ;AAGd,MAAM,SAAS,IAAI,WAAW;AAE9B,WAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAClC;AACI,WAAO,MAAM,WAAW,MAAM;AAAA;ACdlC,ACAA,ACAA;;ACAO,kBACP;AAAA;;;ACsBO,sBACP;AAAA,IAKI,YAAa,KACb;AALA;AAEA;AAII,YAAM,OAAO,IAAI,aAAa;AAE9B,WAAK,OAAO;AACZ,WAAK,WAAW;AAEhB,UAAI,KACJ;AACI,YAAI,MAAM,QAAQ,MAClB;AACI,eAAK,UAAU;AAAA,eAGnB;AACI,eAAK,UAAW,IAAgB;AAAA;AAAA,aAIxC;AACI,aAAK,KAAK;AACV,aAAK,KAAK;AACV,aAAK,MAAM;AACX,aAAK,MAAM;AAAA;AAAA;AAAA,IAsBnB,IAAK,KAAa,KAAa,KAAa,KAAa,KAAa,KAAa,KAAa,KAAa,KAAa,KAAa,KAAa,KAAa,KAAa,KAAa,KAAa,KACxM;AACI,YAAM,OAAO,KAAK;AAElB,WAAM,KAAM;AACZ,WAAM,KAAM;AACZ,WAAM,KAAM;AACZ,WAAM,KAAM;AAEZ,WAAM,KAAM;AACZ,WAAM,KAAM;AACZ,WAAM,KAAM;AACZ,WAAM,KAAM;AAEZ,WAAM,KAAM;AACZ,WAAM,KAAM;AACZ,WAAM,MAAO;AACb,WAAM,MAAO;AAEb,WAAM,MAAO;AACb,WAAM,MAAO;AACb,WAAM,MAAO;AACb,WAAM,MAAO;AAEb,WAAK,SAAS;AAEd,aAAO;AAAA;AAAA,IAGX,QAAS,MAAmB,IAAI,QAAgB,GAChD;AACI,YAAM,OAAO,KAAK;AAElB,eAAS,IAAI,GAAG,IAAI,IAAI,KACxB;AACI,YAAK,QAAQ,KAAM,KAAK;AAAA;AAG5B,aAAO;AAAA;AAAA,IAGX,UAAW,KAAkB,QAAgB,GAC7C;AACI,YAAM,OAAO,KAAK;AAElB,eAAS,IAAI,GAAG,IAAI,IAAI,KACxB;AACI,aAAK,KAAK,IAAK,QAAQ;AAAA;AAG3B,WAAK,SAAS;AAEd,aAAO;AAAA;AAAA,IAGX,WACA;AACI,aAAO,YAAY,KAAK,KAAK,KAAK,QAAQ;AAAA;AAAA,IAG9C,UACA;AACI,WAAK,WAAW;AAChB,WAAK,OAAO;AAAA;AAAA;;;ACzIb,mBACP;AAAA,IAKI,YAAa,IAAY,GAAG,IAAY,GAAG,IAAY,GACvD;AALA;AACA;AACA;AAII,WAAK,IAAI,GAAG,GAAG;AAAA;AAAA,IAGnB,IAAK,IAAY,GAAG,IAAY,GAAG,IAAY,GAC/C;AACI,WAAK,IAAI;AACT,WAAK,IAAI;AACT,WAAK,IAAI;AAET,aAAO;AAAA;AAAA,IAGX,QAAS,MAAmB,IAAI,QAAgB,GAChD;AACI,YAAM,EAAE,GAAG,GAAG,MAAM;AAEpB,UAAK,SAAU;AACf,UAAK,QAAQ,KAAM;AACnB,UAAK,QAAQ,KAAM;AAEnB,aAAO;AAAA;AAAA,IAGX,UAAW,KAAkB,QAAgB,GAC7C;AACI,aAAO,KAAK,IACR,IAAK,QACL,IAAK,QAAQ,IACb,IAAK,QAAQ;AAAA;AAAA,IAIrB,WACA;AACI,YAAM,EAAE,GAAG,GAAG,MAAM;AAEpB,aAAO,OAAO,QAAQ,QAAQ;AAAA;AAAA;AC5CtC,ACAA,ACAA;;ACEO,0BACP;AACI,WAAO,IAAI,KAAK,GAAG,GAAG;AAAA;;;ACFnB,sBACP;AACI,WAAO,IAAI,KAAK,GAAG,IAAI;AAAA;;;ACFpB,yBACP;AACI,WAAO,IAAI,KAAK,GAAG,GAAG;AAAA;;;ACFnB,sBACP;AACI,WAAO,IAAI,KAAK,IAAI,GAAG;AAAA;;;ACFpB,uBACP;AACI,WAAO,IAAI,KAAK,GAAG,GAAG;AAAA;;;ACFnB,oBACP;AACI,WAAO,IAAI,KAAK,GAAG,GAAG;AAAA;;;ACFnB,sBACP;AACI,WAAO,IAAI,KAAK,GAAG,GAAG;AAAA;;;ACInB,MAAM,KAAK;AACX,MAAM,OAAO;AACb,MAAM,OAAO;AACb,MAAM,QAAQ;AACd,MAAM,UAAU;AAChB,MAAM,WAAW;AACjB,MAAM,OAAO;;;ACRpB,MAAM,cAAc,IAAI;AACxB,MAAM,cAAc,IAAI;;;ACAxB,MAAM,SAAS,IAAI;AACnB,MAAM,eAAe,IAAI;ACRzB,ACAA,ACAA,ACAA,ACAA,ACAA,ACAA,ACAA,ACAA,ACAA,ACAA,ACAA,ACAA,ACAA,ACAA,ACAA,ACAA,ACAA;;ACAA,AAYO,0BAAyB,SAAiB,GAAW,GAC5D;AAEI,QAAI,QAAO,SAAS,KAAK,KAAK,QAAO,QAAQ,KAAK,QAAO,SAAS,KAAK,QAAO,OAAO,KAAK,QAAO,QACjG;AACI,YAAM,KAAM,SAAO,IAAI,KAAM,SAAO,IAAI;AACxC,YAAM,KAAM,SAAO,IAAI,KAAM,SAAO,IAAI;AAExC,aAAQ,KAAK,MAAQ,QAAO,SAAS,QAAO;AAAA,WAGhD;AACI,aAAO;AAAA;AAAA;;;ACxBf,AAyBO,qBACP;AAAA,IAOI,YAAa,IAAY,GAAG,IAAY,GAAG,SAAiB,GAC5D;AAPA;AACA;AAEQ;AACA;AAIJ,WAAK,IAAI,GAAG,GAAG;AAAA;AAAA,IAGnB,IAAK,IAAY,GAAG,IAAY,GAAG,SAAiB,GACpD;AACI,WAAK,IAAI;AACT,WAAK,IAAI;AACT,WAAK,SAAS;AAEd,aAAO;AAAA;AAAA,IAGX,SAAU,GAAW,GACrB;AACI,aAAO,eAAe,MAAM,GAAG;AAAA;AAAA,QAG/B,SACJ;AACI,aAAO,KAAK;AAAA;AAAA,QAGZ,OAAQ,OACZ;AACI,WAAK,UAAU;AACf,WAAK,YAAY,QAAQ;AAAA;AAAA,QAGzB,WACJ;AACI,aAAO,KAAK;AAAA;AAAA,QAGZ,SAAU,OACd;AACI,WAAK,YAAY;AACjB,WAAK,UAAU,QAAQ;AAAA;AAAA,QAGvB,OACJ;AACI,aAAO,KAAK,IAAI,KAAK;AAAA;AAAA,QAGrB,KAAM,OACV;AACI,WAAK,IAAI,QAAQ,KAAK;AAAA;AAAA,QAGtB,QACJ;AACI,aAAO,KAAK,IAAI,KAAK;AAAA;AAAA,QAGrB,MAAO,OACX;AACI,WAAK,IAAI,QAAQ,KAAK;AAAA;AAAA,QAGtB,MACJ;AACI,aAAO,KAAK,IAAI,KAAK;AAAA;AAAA,QAGrB,IAAK,OACT;AACI,WAAK,IAAI,QAAQ,KAAK;AAAA;AAAA,QAGtB,SACJ;AACI,aAAO,KAAK,IAAI,KAAK;AAAA;AAAA,QAGrB,OAAQ,OACZ;AACI,WAAK,IAAI,QAAQ,KAAK;AAAA;AAAA;AC/G9B,ACAA,ACAA,ACAA,ACAA,ACAA,ACAA,ACAA,ACAA,ACAA,ACAA,ACAA,ACAA,ACAA,ACAA,ACAA,ACAA,ACAA;;ACOA,MAAM,SAAS,IAAI;;;ACPZ,MAAM,iBAAwC,IAAI;;;ACElD,uBAAsB,IAC7B;AACI,WAAO,mBAAmB,SAAS;AAAA;;;ACFhC,sBAAqB,IAC5B;AACI,UAAM,UAAU;AAEhB,QAAI,gBAAgB,YAAY;AAEhC,WAAO,eACP;AACI,cAAQ,KAAK;AAEb,sBAAgB,YAAY;AAAA;AAGhC,WAAO;AAAA;;;ACbJ,sBAAqB,IAC5B;AACI,WAAO,mBAAmB,QAAQ;AAAA;;;ACE/B,2BAA0B,SACjC;AACI,UAAM,UAAU,WAAW;AAE3B,YAAQ,QAAQ,QAChB;AACI,UAAI,kBAAkB,KACtB;AACI,2BAAmB;AAAA;AAAA;AAI3B,wBAAoB,WAAW;AAAA;;;AChB5B,6BAA4B,IACnC;AACI,mBAAe,UAAU,MAAM;AAAA;;;ACJ5B,MAAM,sBACb;AAAA,IACI,mBAAmB,IAAI,aAAa;AAAA,IACpC,eAAe,IAAI,aAAa;AAAA,IAChC,UAAU;AAAA,IACV,cAAc,IAAI,aAAa;AAAA,MAC3B;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MACT;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MACT;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MACT;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA;AAAA,IAEb,cAAc,IAAI,aAAa;AAAA;ACXnC,ACAA,ACAA,ACAA,ACAA,ACAA,ACAA,ACAA,ACAA;;ACGO,MAAM,YAAuC,IAAI;ACHxD;;ACEA,MAAM,cAAc,gBAAgB;AAAA,IAGhC,WAAW,MAAM;AAAA,IAGjB,WAAW,MAAM;AAAA,IAGjB,WAAW,MAAM;AAAA,IAGjB,gBAAgB,MAAM;AAAA,IAGtB,wBAAwB,MAAM;AAAA,IAG9B,yBAAyB,MAAM;AAAA,IAG/B,yBAAyB,MAAM;AAAA,IAG/B,kBAAkB,MAAM;AAAA,IAGxB,oBAAoB,MAAM;AAAA,IAG1B,iBAAiB,MAAM;AAAA;",
  "names": []
}
