{
  "version": 3,
  "sources": ["../../../../phaser-genesis/src/config/const.ts", "../../../../phaser-genesis/src/config/ConfigStore.ts", "../../../../phaser-genesis/src/config/backgroundcolor/SetBackgroundColor.ts", "../../../../phaser-genesis/src/config/backgroundcolor/BackgroundColor.ts", "../../../../phaser-genesis/src/config/banner/SetBanner.ts", "../../../../phaser-genesis/src/config/batchsize/SetBatchSize.ts", "../../../../phaser-genesis/src/config/size/GetHeight.ts", "../../../../phaser-genesis/src/config/size/GetResolution.ts", "../../../../phaser-genesis/src/config/size/GetWidth.ts", "../../../../phaser-genesis/src/config/size/SetSize.ts", "../../../../phaser-genesis/src/renderer/BindingQueue.ts", "../../../../phaser-genesis/src/config/backgroundcolor/GetBackgroundColor.ts", "../../../../phaser-genesis/src/config/renderer/SetRenderer.ts", "../../../../phaser-genesis/src/config/defaultorigin/SetDefaultOrigin.ts", "../../../../phaser-genesis/src/config/globalvar/SetGlobalVar.ts", "../../../../phaser-genesis/src/config/globalvar/GlobalVar.ts", "../../../../phaser-genesis/src/config/maxtextures/SetMaxTextures.ts", "../../../../phaser-genesis/src/dom/GetElement.ts", "../../../../phaser-genesis/src/config/parent/SetParent.ts", "../../../../phaser-genesis/src/config/parent/Parent.ts", "../../../../phaser-genesis/src/config/scenes/SetScenes.ts", "../../../../phaser-genesis/src/config/scenes/Scenes.ts", "../../../../phaser-genesis/src/geom/rectangle/RectangleContains.ts", "../../../../phaser-genesis/src/geom/rectangle/Rectangle.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/AddViewport.ts", "../../../../phaser-genesis/src/renderer/webgl1/GL.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/BindViewport.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/SetViewport.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/BindFramebuffer.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/PopViewport.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/PopFramebuffer.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/AddFramebuffer.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/SetFramebuffer.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/Draw.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/Flush.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/End.ts", "../../../../phaser-genesis/src/renderer/webgl1/colors/GetRGBArray.ts", "../../../../phaser-genesis/src/config/webglcontext/GetWebGLContext.ts", "../../../../phaser-genesis/src/renderer/webgl1/textures/CreateGLTexture.ts", "../../../../phaser-genesis/src/renderer/webgl1/fbo/DeleteFramebuffer.ts", "../../../../phaser-genesis/src/renderer/webgl1/textures/DeleteGLTexture.ts", "../../../../phaser-genesis/src/math/pow2/IsSizePowerOfTwo.ts", "../../../../phaser-genesis/src/renderer/webgl1/textures/SetGLTextureFilterMode.ts", "../../../../phaser-genesis/src/renderer/webgl1/textures/UpdateGLTexture.ts", "../../../../phaser-genesis/src/renderer/webgl1/textures/GLTextureBinding.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/ProcessBindingQueue.ts", "../../../../phaser-genesis/src/config/maxtextures/GetMaxTextures.ts", "../../../../phaser-genesis/src/renderer/webgl1/shaders/CheckShaderMaxIfStatements.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/CreateTempTextures.ts", "../../../../phaser-genesis/src/config/batchsize/GetBatchSize.ts", "../../../../phaser-genesis/src/renderer/webgl1/buffers/DeleteGLBuffer.ts", "../../../../phaser-genesis/src/renderer/webgl1/buffers/VertexBuffer.ts", "../../../../phaser-genesis/src/renderer/webgl1/buffers/IndexedVertexBuffer.ts", "../../../../phaser-genesis/src/utils/array/matrix/CheckMatrix.ts", "../../../../phaser-genesis/src/utils/array/matrix/MatrixToString.ts", "../../../../phaser-genesis/src/utils/array/matrix/ReverseColumns.ts", "../../../../phaser-genesis/src/utils/array/matrix/ReverseRows.ts", "../../../../phaser-genesis/src/utils/array/matrix/TransposeMatrix.ts", "../../../../phaser-genesis/src/utils/array/matrix/RotateMatrix.ts", "../../../../phaser-genesis/src/utils/array/matrix/Rotate180.ts", "../../../../phaser-genesis/src/utils/array/matrix/RotateLeft.ts", "../../../../phaser-genesis/src/utils/array/matrix/RotateRight.ts", "../../../../phaser-genesis/src/utils/array/NumberArray.ts", "../../../../phaser-genesis/src/math/RoundAwayFromZero.ts", "../../../../phaser-genesis/src/utils/array/NumberArrayStep.ts", "../../../../phaser-genesis/src/utils/base64/ArrayBufferToBase64.ts", "../../../../phaser-genesis/src/utils/base64/Base64ToArrayBuffer.ts", "../../../../phaser-genesis/src/utils/string/RemoveAt.ts", "../../../../phaser-genesis/src/utils/string/Reverse.ts", "../../../../phaser-genesis/src/utils/string/UppercaseFirst.ts", "../../../../phaser-genesis/src/utils/NOOP.ts", "../../../../phaser-genesis/src/math/mat4/Matrix4.ts", "../../../../phaser-genesis/src/math/mat4/Mat4Ortho.ts", "../../../../phaser-genesis/src/renderer/webgl1/shaders/CreateAttributes.ts", "../../../../phaser-genesis/src/renderer/webgl1/shaders/DeleteShaders.ts", "../../../../phaser-genesis/src/renderer/webgl1/shaders/CreateProgram.ts", "../../../../phaser-genesis/src/renderer/webgl1/shaders/CreateShader.ts", "../../../../phaser-genesis/src/renderer/webgl1/shaders/CreateUniformSetter.ts", "../../../../phaser-genesis/src/renderer/webgl1/shaders/CreateUniforms.ts", "../../../../phaser-genesis/src/renderer/webgl1/GL_CONST.ts", "../../../../phaser-genesis/src/renderer/webgl1/shaders/DefaultQuadAttributes.ts", "../../../../phaser-genesis/src/renderer/webgl1/shaders/DefaultQuadUniforms.ts", "../../../../phaser-genesis/src/renderer/webgl1/fbo/CreateDepthBuffer.ts", "../../../../phaser-genesis/src/renderer/webgl1/fbo/CreateFramebuffer.ts", "../../../../phaser-genesis/src/renderer/webgl1/glsl/SINGLE_QUAD_FRAG.ts", "../../../../phaser-genesis/src/renderer/webgl1/glsl/SINGLE_QUAD_VERT.ts", "../../../../phaser-genesis/node_modules/bitecs/src/Storage.js", "../../../../phaser-genesis/node_modules/bitecs/src/Util.js", "../../../../phaser-genesis/node_modules/bitecs/src/Serialize.js", "../../../../phaser-genesis/node_modules/bitecs/src/Entity.js", "../../../../phaser-genesis/node_modules/bitecs/src/Query.js", "../../../../phaser-genesis/node_modules/bitecs/src/Component.js", "../../../../phaser-genesis/node_modules/bitecs/src/World.js", "../../../../phaser-genesis/node_modules/bitecs/src/System.js", "../../../../phaser-genesis/node_modules/bitecs/src/index.js", "../../../../phaser-genesis/src/components/vertices/QuadVertexComponent.ts", "../../../../phaser-genesis/src/components/transform/Extent2DComponent.ts", "../../../../phaser-genesis/src/components/dirty/DirtyComponent.ts", "../../../../phaser-genesis/src/GameObjectWorld.ts", "../../../../phaser-genesis/src/components/dirty/AddDirtyComponent.ts", "../../../../phaser-genesis/src/components/dirty/ClearDirtyDisplayList.ts", "../../../../phaser-genesis/src/components/dirty/HasDirtyDisplayList.ts", "../../../../phaser-genesis/src/components/dirty/SetDirtyDisplayList.ts", "../../../../phaser-genesis/src/GameInstance.ts", "../../../../phaser-genesis/src/components/dirty/SetDirtyTransform.ts", "../../../../phaser-genesis/src/components/hierarchy/HierarchyComponent.ts", "../../../../phaser-genesis/src/components/dirty/SetDirtyWorldDisplayList.ts", "../../../../phaser-genesis/src/components/transform/SetExtent.ts", "../../../../phaser-genesis/src/components/vertices/VertexComponent.ts", "../../../../phaser-genesis/src/components/vertices/SetUV.ts", "../../../../phaser-genesis/src/textures/Frame.ts", "../../../../phaser-genesis/src/textures/Texture.ts", "../../../../phaser-genesis/src/renderer/webgl1/shaders/Shader.ts", "../../../../phaser-genesis/src/renderer/webgl1/shaders/QuadShader.ts", "../../../../phaser-genesis/src/renderer/webgl1/glsl/MULTI_QUAD_FRAG.ts", "../../../../phaser-genesis/src/renderer/webgl1/shaders/MultiTextureQuadShader.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/SetDefaultBlendMode.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/SetDefaultFramebuffer.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/SetDefaultShader.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/SetDefaultVertexBuffer.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/SetDefaultViewport.ts", "../../../../phaser-genesis/src/math/mat4/Mat4Identity.ts", "../../../../phaser-genesis/src/math/mat2d/Matrix2D.ts", "../../../../phaser-genesis/src/math/angle/AngleBetween.ts", "../../../../phaser-genesis/src/math/angle/AngleBetweenY.ts", "../../../../phaser-genesis/src/math/const.ts", "../../../../phaser-genesis/src/math/angle/CounterClockwise.ts", "../../../../phaser-genesis/src/math/angle/NormalizeAngle.ts", "../../../../phaser-genesis/src/math/angle/ReverseAngle.ts", "../../../../phaser-genesis/src/math/angle/RotateAngleTo.ts", "../../../../phaser-genesis/src/math/angle/ShortestAngleBetween.ts", "../../../../phaser-genesis/src/math/Wrap.ts", "../../../../phaser-genesis/src/math/angle/WrapAngle.ts", "../../../../phaser-genesis/src/math/angle/WrapAngleDegrees.ts", "../../../../phaser-genesis/src/math/angle/index.ts", "../../../../phaser-genesis/src/camera/StaticCamera.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/RenderPass.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/BindShader.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/Begin.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/BindBlendMode.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/BindVertexBuffer.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/GetVertexBufferEntry.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/SetTexture.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/Start.ts", "../../../../phaser-genesis/src/renderer/webgl1/WebGLRendererInstance.ts", "../../../../phaser-genesis/src/world/WorldList.ts", "../../../../phaser-genesis/src/renderer/webgl1/WebGLRenderer.ts", "../../../../phaser-genesis/src/config/webgl/WebGL.ts", "../../../../phaser-genesis/src/config/webglcontext/SetWebGLContext.ts", "../../../../phaser-genesis/src/config/worldsize/SetWorldSize.ts", "../../../../phaser-genesis/src/renderer/webgl1/colors/PackColor.ts", "../../../../phaser-genesis/src/renderer/webgl1/draw/DrawFrame.ts", "../../../../phaser-genesis/src/dom/AddToDOM.ts", "../../../../phaser-genesis/src/dom/DOMContentLoaded.ts", "../../../../phaser-genesis/src/dom/ParseXML.ts", "../../../../phaser-genesis/src/events/Emit.ts", "../../../../phaser-genesis/src/events/EventEmitter.ts", "../../../../phaser-genesis/src/events/EventInstance.ts", "../../../../phaser-genesis/src/events/On.ts", "../../../../phaser-genesis/src/events/Once.ts", "../../../../phaser-genesis/src/config/banner/GetBanner.ts", "../../../../phaser-genesis/src/config/globalvar/GetGlobalVar.ts", "../../../../phaser-genesis/src/config/parent/GetParent.ts", "../../../../phaser-genesis/src/scenes/RenderStatsComponent.ts", "../../../../phaser-genesis/src/scenes/AddRenderStatsComponent.ts", "../../../../phaser-genesis/src/scenes/GameObjectRenderList.ts", "../../../../phaser-genesis/src/scenes/GetConfigValue.ts", "../../../../phaser-genesis/src/scenes/SceneManagerInstance.ts", "../../../../phaser-genesis/src/scenes/GetRenderStatsAsObject.ts", "../../../../phaser-genesis/src/scenes/Install.ts", "../../../../phaser-genesis/src/scenes/ResetRenderStats.ts", "../../../../phaser-genesis/src/scenes/Scene.ts", "../../../../phaser-genesis/src/config/scenes/GetScenes.ts", "../../../../phaser-genesis/src/components/transform/LocalMatrix2DComponent.ts", "../../../../phaser-genesis/src/components/transform/Transform2DComponent.ts", "../../../../phaser-genesis/src/components/transform/WorldMatrix2DComponent.ts", "../../../../phaser-genesis/src/components/transform/InvalidateLocalMatrix2DComponent.ts", "../../../../phaser-genesis/src/gameobjects/DIRTY_CONST.ts", "../../../../phaser-genesis/src/components/transform/UpdateLocalTransform2DSystem.ts", "../../../../phaser-genesis/src/components/transform/CopyLocalToWorld.ts", "../../../../phaser-genesis/src/components/transform/CopyWorldToWorld.ts", "../../../../phaser-genesis/src/components/hierarchy/AddHierarchyComponent.ts", "../../../../phaser-genesis/src/gameobjects/GameObjectCache.ts", "../../../../phaser-genesis/src/components/hierarchy/ClearWorldAndParentID.ts", "../../../../phaser-genesis/src/components/bounds/BoundsComponent.ts", "../../../../phaser-genesis/src/components/color/ColorComponent.ts", "../../../../phaser-genesis/src/components/vertices/VertexWorld.ts", "../../../../phaser-genesis/src/components/vertices/UpdateVertexPositionSystem.ts", "../../../../phaser-genesis/src/components/color/PackQuadColorsSystem.ts", "../../../../phaser-genesis/src/components/permissions/PermissionsComponent.ts", "../../../../phaser-genesis/src/components/permissions/AddPermissionsComponent.ts", "../../../../phaser-genesis/src/components/permissions/WillRender.ts", "../../../../phaser-genesis/src/components/permissions/WillRenderChildren.ts", "../../../../phaser-genesis/src/components/permissions/WillUpdate.ts", "../../../../phaser-genesis/src/components/permissions/WillUpdateChildren.ts", "../../../../phaser-genesis/src/display/RemoveChildrenBetween.ts", "../../../../phaser-genesis/src/display/DestroyChildren.ts", "../../../../phaser-genesis/src/gameobjects/events/DestroyEvent.ts", "../../../../phaser-genesis/src/gameobjects/GameObjectTree.ts", "../../../../phaser-genesis/src/components/hierarchy/GetParentID.ts", "../../../../phaser-genesis/src/display/IsValidParent.ts", "../../../../phaser-genesis/src/display/GetChildIndex.ts", "../../../../phaser-genesis/src/display/RemoveChildAt.ts", "../../../../phaser-genesis/src/display/RemoveChild.ts", "../../../../phaser-genesis/src/display/SetWorld.ts", "../../../../phaser-genesis/src/display/AddChildAt.ts", "../../../../phaser-genesis/src/display/SetParent.ts", "../../../../phaser-genesis/src/display/ReparentChildren.ts", "../../../../phaser-genesis/src/gameobjects/GameObject.ts", "../../../../phaser-genesis/src/textures/TextureManagerInstance.ts", "../../../../phaser-genesis/src/textures/GetTexture.ts", "../../../../phaser-genesis/src/math/Clamp.ts", "../../../../phaser-genesis/src/textures/CreateCanvas.ts", "../../../../phaser-genesis/src/components/hierarchy/GetChildrenFromParentID.ts", "../../../../phaser-genesis/src/components/hierarchy/GetNumChildren.ts", "../../../../phaser-genesis/src/components/hierarchy/GetParentGameObject.ts", "../../../../phaser-genesis/src/components/hierarchy/GetWorldID.ts", "../../../../phaser-genesis/src/components/hierarchy/GetWorldFromParentID.ts", "../../../../phaser-genesis/src/components/hierarchy/UpdateNumChildren.ts", "../../../../phaser-genesis/src/components/hierarchy/SetParentID.ts", "../../../../phaser-genesis/src/components/hierarchy/SetWorldID.ts", "../../../../phaser-genesis/src/components/transform/MultiplyLocalWithWorld.ts", "../../../../phaser-genesis/src/world/RenderDataComponent.ts", "../../../../phaser-genesis/src/world/ResetWorldRenderData.ts", "../../../../phaser-genesis/src/components/permissions/WillTransformChildren.ts", "../../../../phaser-genesis/src/components/transform/UpdateWorldTransform.ts", "../../../../phaser-genesis/src/components/transform/UpdateWorldTransform2DSystem.ts", "../../../../phaser-genesis/src/scenes/SceneManager.ts", "../../../../phaser-genesis/src/config/renderer/GetRenderer.ts", "../../../../phaser-genesis/src/config/SetConfigDefaults.ts", "../../../../phaser-genesis/src/textures/TextureManager.ts", "../../../../phaser-genesis/src/Game.ts", "../../../../phaser-genesis/src/loader/File.ts", "../../../../phaser-genesis/src/loader/GetURL.ts", "../../../../phaser-genesis/src/loader/ImageLoader.ts", "../../../../phaser-genesis/src/textures/parsers/SpriteSheetParser.ts", "../../../../phaser-genesis/src/loader/files/SpriteSheetFile.ts", "../../../../phaser-genesis/src/world/events/WorldAfterUpdateEvent.ts", "../../../../phaser-genesis/src/world/events/WorldBeforeUpdateEvent.ts", "../../../../phaser-genesis/src/world/events/WorldPostRenderEvent.ts", "../../../../phaser-genesis/src/world/events/WorldRenderEvent.ts", "../../../../phaser-genesis/src/world/events/WorldShutdownEvent.ts", "../../../../phaser-genesis/src/world/events/WorldUpdateEvent.ts", "../../../../phaser-genesis/src/world/AddRenderDataComponent.ts", "../../../../phaser-genesis/src/world/CheckDirtyTransforms.ts", "../../../../phaser-genesis/src/config/worldsize/GetWorldSize.ts", "../../../../phaser-genesis/src/math/mat2d/Mat2dEquals.ts", "../../../../phaser-genesis/src/world/RebuildWorldList.ts", "../../../../phaser-genesis/src/world/RebuildWorldTransforms.ts", "../../../../phaser-genesis/src/display/RemoveChildren.ts", "../../../../phaser-genesis/src/scenes/events/SceneDestroyEvent.ts", "../../../../phaser-genesis/src/world/BaseWorld.ts", "../../../../phaser-genesis/src/world/StaticWorld.ts", "../../src/direct mode/draw scaled frame.ts"],
  "sourcesContent": ["export const CONFIG_DEFAULTS = {\r\n    AUTO: 'Auto',\r\n    BACKGROUND_COLOR: 'BackgroundColor',\r\n    BANNER: 'Banner',\r\n    BATCH_SIZE: 'BatchSize',\r\n    CANVAS_CONTEXT: 'CanvasContext',\r\n    CANVAS: 'Canvas',\r\n    DEFAULT_ORIGIN: 'DefaultOrigin',\r\n    GLOBAL_VAR: 'GlobalVar',\r\n    MAX_TEXTURES: 'MaxTextures',\r\n    PARENT: 'Parent',\r\n    RENDERER: 'Renderer',\r\n    SCENES: 'Scenes',\r\n    SIZE: 'Size',\r\n    WEBGL_CONTEXT: 'WebGLContext',\r\n    WEBGL: 'WebGL',\r\n    WORLD_SIZE: 'WorldSize'\r\n};\r\n", "export const ConfigStore = new Map();\r\n", "import { CONFIG_DEFAULTS } from '../const';\r\nimport { ConfigStore } from '../ConfigStore';\r\n\r\nexport function SetBackgroundColor (color: number): void\r\n{\r\n    ConfigStore.set(CONFIG_DEFAULTS.BACKGROUND_COLOR, color);\r\n}\r\n", "import { SetBackgroundColor } from './SetBackgroundColor';\r\n\r\nexport function BackgroundColor (color: number): () => void\r\n{\r\n    return (): void =>\r\n    {\r\n        SetBackgroundColor(color);\r\n    };\r\n}\r\n", "import { CONFIG_DEFAULTS } from '../const';\r\nimport { ConfigStore } from '../ConfigStore';\r\n\r\nexport function SetBanner (title: string = '', version: string = '', url: string = '', color: string = '#fff', background: string = 'linear-gradient(#3e0081 40%, #00bcc3)'): void\r\n{\r\n    ConfigStore.set(CONFIG_DEFAULTS.BANNER, { title, version, url, color, background });\r\n}\r\n", "import { CONFIG_DEFAULTS } from '../const';\r\nimport { ConfigStore } from '../ConfigStore';\r\n\r\nexport function SetBatchSize (size: number): void\r\n{\r\n    ConfigStore.set(CONFIG_DEFAULTS.BATCH_SIZE, size);\r\n}\r\n", "import { CONFIG_DEFAULTS } from '../const';\r\nimport { ConfigStore } from '../ConfigStore';\r\n\r\nexport function GetHeight (): number\r\n{\r\n    return ConfigStore.get(CONFIG_DEFAULTS.SIZE).height;\r\n}\r\n", "import { CONFIG_DEFAULTS } from '../const';\r\nimport { ConfigStore } from '../ConfigStore';\r\n\r\nexport function GetResolution (): number\r\n{\r\n    return ConfigStore.get(CONFIG_DEFAULTS.SIZE).resolution;\r\n}\r\n", "import { CONFIG_DEFAULTS } from '../const';\r\nimport { ConfigStore } from '../ConfigStore';\r\n\r\nexport function GetWidth (): number\r\n{\r\n    return ConfigStore.get(CONFIG_DEFAULTS.SIZE).width;\r\n}\r\n", "import { CONFIG_DEFAULTS } from '../const';\r\nimport { ConfigStore } from '../ConfigStore';\r\n\r\nexport function SetSize (width: number = 800, height: number = 600, resolution: number = 1): void\r\n{\r\n    if (resolution === 0)\r\n    {\r\n        resolution = window.devicePixelRatio;\r\n    }\r\n\r\n    ConfigStore.set(CONFIG_DEFAULTS.SIZE, { width, height, resolution });\r\n}\r\n", "import { IGLTextureBindingConfig } from './webgl1/textures/IGLTextureBindingConfig';\r\nimport { ITexture } from '../textures/ITexture';\r\n\r\nexport type BindingQueueEntry = {\r\n    texture: ITexture,\r\n    glConfig: IGLTextureBindingConfig\r\n};\r\n\r\nconst queue: BindingQueueEntry[] = [];\r\n\r\nexport const BindingQueue =\r\n{\r\n    add: (texture: ITexture, glConfig?: IGLTextureBindingConfig): void =>\r\n    {\r\n        queue.push({ texture, glConfig });\r\n    },\r\n\r\n    get: (): BindingQueueEntry[] =>\r\n    {\r\n        return queue;\r\n    },\r\n\r\n    clear: (): void =>\r\n    {\r\n        queue.length = 0;\r\n    }\r\n};\r\n", "import { CONFIG_DEFAULTS } from '../const';\r\nimport { ConfigStore } from '../ConfigStore';\r\n\r\nexport function GetBackgroundColor (): number\r\n{\r\n    return ConfigStore.get(CONFIG_DEFAULTS.BACKGROUND_COLOR);\r\n}\r\n", "import { CONFIG_DEFAULTS } from '../const';\r\nimport { ConfigStore } from '../ConfigStore';\r\nimport { IRendererConstructor } from '../../renderer/IRendererConstructor';\r\n\r\nexport function SetRenderer (renderer: IRendererConstructor): void\r\n{\r\n    ConfigStore.set(CONFIG_DEFAULTS.RENDERER, renderer);\r\n}\r\n", "import { CONFIG_DEFAULTS } from '../const';\r\nimport { ConfigStore } from '../ConfigStore';\r\n\r\nexport function SetDefaultOrigin (x: number = 0.5, y: number = x): void\r\n{\r\n    ConfigStore.set(CONFIG_DEFAULTS.DEFAULT_ORIGIN, { x, y });\r\n}\r\n", "import { CONFIG_DEFAULTS } from '../const';\r\nimport { ConfigStore } from '../ConfigStore';\r\n\r\nexport function SetGlobalVar (name: string): void\r\n{\r\n    ConfigStore.set(CONFIG_DEFAULTS.GLOBAL_VAR, name);\r\n}\r\n", "import { SetGlobalVar } from './SetGlobalVar';\r\n\r\nexport function GlobalVar (name: string): () => void\r\n{\r\n    return (): void =>\r\n    {\r\n        SetGlobalVar(name);\r\n    };\r\n}\r\n", "import { CONFIG_DEFAULTS } from '../const';\r\nimport { ConfigStore } from '../ConfigStore';\r\n\r\nexport function SetMaxTextures (max: number): void\r\n{\r\n    ConfigStore.set(CONFIG_DEFAULTS.MAX_TEXTURES, max);\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Attempts to get the target DOM element based on the given value, which can be either\r\n * a string, in which case it will be looked-up by ID, or an element node. If nothing\r\n * can be found it will return a reference to the document.body.\r\n *\r\n * @function Phaser.DOM.GetElement\r\n * @since 4.0.0\r\n *\r\n * @param {(string | HTMLElement)} [target] - The DOM element to look-up.\r\n * \r\n * @returns {HTMLElement} The HTML Element that was found.\r\n */\r\nexport function GetElement (target?: string | HTMLElement): HTMLElement\r\n{\r\n    let element: HTMLElement;\r\n\r\n    if (target)\r\n    {\r\n        if (typeof target === 'string')\r\n        {\r\n            //  Hopefully an element ID\r\n            element = document.getElementById(target);\r\n        }\r\n        else if (typeof target === 'object' && target.nodeType === 1)\r\n        {\r\n            //  Quick test for a HTMLElement\r\n            element = target;\r\n        }\r\n    }\r\n\r\n    if (!element)\r\n    {\r\n        element = document.body;\r\n    }\r\n\r\n    return element;\r\n}\r\n", "import { CONFIG_DEFAULTS } from '../const';\r\nimport { ConfigStore } from '../ConfigStore';\r\nimport { GetElement } from '../../dom/GetElement';\r\n\r\nexport function SetParent (parentElement?: string | HTMLElement): void\r\n{\r\n    //  If this function was called and `null` *wasn't* given as the parent\r\n    //  then we try to figure it out, or fallback to the document body\r\n    if (parentElement)\r\n    {\r\n        ConfigStore.set(CONFIG_DEFAULTS.PARENT, GetElement(parentElement));\r\n    }\r\n}\r\n", "import { SetParent } from './SetParent';\r\n\r\nexport function Parent (parentElement?: string | HTMLElement): () => void\r\n{\r\n    return (): void =>\r\n    {\r\n        SetParent(parentElement);\r\n    };\r\n}\r\n", "import { CONFIG_DEFAULTS } from '../const';\r\nimport { ConfigStore } from '../ConfigStore';\r\nimport { ISceneConstructor } from '../../scenes/ISceneConstructor';\r\n\r\nexport function SetScenes (scenes?: ISceneConstructor | Array<ISceneConstructor>): void\r\n{\r\n    ConfigStore.set(CONFIG_DEFAULTS.SCENES, [].concat(scenes));\r\n}\r\n", "import { ISceneConstructor } from '../../scenes/ISceneConstructor';\r\nimport { SetScenes } from './SetScenes';\r\n\r\nexport function Scenes (scenes?: ISceneConstructor | Array<ISceneConstructor>): () => void\r\n{\r\n    return (): void =>\r\n    {\r\n        SetScenes(scenes);\r\n    };\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nimport { IRectangle } from './IRectangle';\r\n\r\n/**\r\n * Checks if a given point is inside a Rectangle's bounds.\r\n */\r\nexport function RectangleContains (rect: IRectangle, x: number, y: number): boolean\r\n{\r\n    if (rect.width <= 0 || rect.height <= 0)\r\n    {\r\n        return false;\r\n    }\r\n\r\n    return (rect.x <= x && rect.x + rect.width >= x && rect.y <= y && rect.y + rect.height >= y);\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nimport { RectangleContains } from './RectangleContains';\r\n\r\nexport class Rectangle\r\n{\r\n    x: number;\r\n    y: number;\r\n    width: number;\r\n    height: number;\r\n\r\n    constructor (x: number = 0, y: number = 0, width: number = 0, height: number = 0)\r\n    {\r\n        this.set(x, y, width, height);\r\n    }\r\n\r\n    set (x: number = 0, y: number = 0, width: number = 0, height: number = 0): this\r\n    {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = width;\r\n        this.height = height;\r\n\r\n        return this;\r\n    }\r\n\r\n    contains (x: number, y: number): boolean\r\n    {\r\n        return RectangleContains(this, x, y);\r\n    }\r\n\r\n    set right (value: number)\r\n    {\r\n        if (value <= this.x)\r\n        {\r\n            this.width = 0;\r\n        }\r\n        else\r\n        {\r\n            this.width = value - this.x;\r\n        }\r\n    }\r\n\r\n    get right (): number\r\n    {\r\n        return this.x + this.width;\r\n    }\r\n\r\n    set bottom (value: number)\r\n    {\r\n        if (value <= this.y)\r\n        {\r\n            this.height = 0;\r\n        }\r\n        else\r\n        {\r\n            this.height = value - this.y;\r\n        }\r\n    }\r\n\r\n    get bottom (): number\r\n    {\r\n        return this.y + this.height;\r\n    }\r\n}\r\n", "import { IRenderPass } from './IRenderPass';\r\nimport { Rectangle } from '../../../geom/rectangle/Rectangle';\r\n\r\nexport function AddViewport (renderPass: IRenderPass, x: number = 0, y: number = 0, width: number = 0, height: number = 0): Rectangle\r\n{\r\n    const viewport = new Rectangle(x, y, width, height);\r\n\r\n    renderPass.viewportStack.push(viewport);\r\n\r\n    return viewport;\r\n}\r\n", "export let gl: WebGLRenderingContext;\r\n\r\nexport const GL =\r\n{\r\n    get: (): WebGLRenderingContext =>\r\n    {\r\n        return gl;\r\n    },\r\n\r\n    set: (context: WebGLRenderingContext | undefined): void =>\r\n    {\r\n        gl = context;\r\n    }\r\n};\r\n", "import { IRenderPass } from './IRenderPass';\r\nimport { Rectangle } from '../../../geom/rectangle';\r\nimport { gl } from '../GL';\r\n\r\nexport function BindViewport (renderPass: IRenderPass, viewport?: Rectangle): void\r\n{\r\n    if (!viewport)\r\n    {\r\n        viewport = renderPass.currentViewport;\r\n\r\n        if (!viewport)\r\n        {\r\n            return;\r\n        }\r\n    }\r\n\r\n    const glv = gl.getParameter(gl.VIEWPORT);\r\n\r\n    if (glv[0] !== viewport.x || glv[1] !== viewport.y || glv[2] !== viewport.width || glv[3] !== viewport.height)\r\n    {\r\n        gl.viewport(viewport.x, viewport.y, viewport.width, viewport.height);\r\n    }\r\n}\r\n", "import { AddViewport } from './AddViewport';\r\nimport { BindViewport } from './BindViewport';\r\nimport { IRenderPass } from './IRenderPass';\r\n\r\nexport function SetViewport (renderPass: IRenderPass, x: number = 0, y: number = 0, width: number = 0, height: number = 0): void\r\n{\r\n    const entry = AddViewport(renderPass, x, y, width, height);\r\n\r\n    BindViewport(renderPass, entry);\r\n\r\n    renderPass.currentViewport = entry;\r\n}\r\n", "import { FramebufferStackEntry } from './RenderPass';\r\nimport { IRenderPass } from './IRenderPass';\r\nimport { SetViewport } from './SetViewport';\r\nimport { gl } from '../GL';\r\n\r\nexport function BindFramebuffer (renderPass: IRenderPass, clear: boolean = true, entry?: FramebufferStackEntry): void\r\n{\r\n    if (!entry)\r\n    {\r\n        entry = renderPass.currentFramebuffer;\r\n    }\r\n\r\n    const { framebuffer, viewport } = entry;\r\n\r\n    if (renderPass.currentFramebuffer.framebuffer !== framebuffer)\r\n    {\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\r\n    }\r\n\r\n    if (clear)\r\n    {\r\n        gl.clearColor(0, 0, 0, 0);\r\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n    }\r\n\r\n    if (viewport)\r\n    {\r\n        SetViewport(renderPass, viewport.x, viewport.y, viewport.width, viewport.height);\r\n    }\r\n}\r\n", "import { BindViewport } from './BindViewport';\r\nimport { IRenderPass } from './IRenderPass';\r\n\r\nexport function PopViewport (renderPass: IRenderPass): void\r\n{\r\n    const stack = renderPass.viewportStack;\r\n\r\n    //  > 1 because index 0 contains the default, which we don't want to remove\r\n    if (stack.length > 1)\r\n    {\r\n        stack.pop();\r\n    }\r\n\r\n    renderPass.currentViewport = stack[ stack.length - 1 ];\r\n\r\n    BindViewport(renderPass);\r\n}\r\n", "import { BindFramebuffer } from './BindFramebuffer';\r\nimport { IRenderPass } from './IRenderPass';\r\nimport { PopViewport } from './PopViewport';\r\n\r\nexport function PopFramebuffer (renderPass: IRenderPass): void\r\n{\r\n    const stack = renderPass.framebufferStack;\r\n\r\n    //  > 1 because index 0 contains the default, which we don't want to remove\r\n    if (stack.length > 1)\r\n    {\r\n        if (renderPass.currentFramebuffer.viewport)\r\n        {\r\n            PopViewport(renderPass);\r\n        }\r\n\r\n        stack.pop();\r\n    }\r\n\r\n    renderPass.currentFramebuffer = stack[ stack.length - 1 ];\r\n\r\n    BindFramebuffer(renderPass, false);\r\n}\r\n", "import { FramebufferStackEntry } from './RenderPass';\r\nimport { IRenderPass } from './IRenderPass';\r\nimport { Rectangle } from '../../../geom/rectangle/Rectangle';\r\n\r\nexport function AddFramebuffer (renderPass: IRenderPass, framebuffer: WebGLFramebuffer, viewport?: Rectangle): FramebufferStackEntry\r\n{\r\n    const entry = { framebuffer, viewport };\r\n\r\n    renderPass.framebufferStack.push(entry);\r\n\r\n    return entry;\r\n}\r\n", "import { AddFramebuffer } from './AddFramebuffer';\r\nimport { BindFramebuffer } from './BindFramebuffer';\r\nimport { IRenderPass } from './IRenderPass';\r\nimport { Rectangle } from '../../../geom/rectangle';\r\n\r\nexport function SetFramebuffer (renderPass: IRenderPass, framebuffer: WebGLFramebuffer, clear: boolean = true, viewport?: Rectangle): void\r\n{\r\n    const entry = AddFramebuffer(renderPass, framebuffer, viewport);\r\n\r\n    BindFramebuffer(renderPass, clear, entry);\r\n\r\n    renderPass.currentFramebuffer = entry;\r\n}\r\n", "import { IRenderPass } from './IRenderPass';\r\nimport { PopFramebuffer } from './PopFramebuffer';\r\nimport { SetFramebuffer } from './SetFramebuffer';\r\nimport { gl } from '../GL';\r\n\r\nexport function Draw (renderPass: IRenderPass): void\r\n{\r\n    const count = renderPass.count;\r\n\r\n    if (count === 0)\r\n    {\r\n        return;\r\n    }\r\n\r\n    const currentBuffer = renderPass.currentVertexBuffer;\r\n    const currentShader = renderPass.currentShader;\r\n\r\n    const renderToFramebuffer = currentShader.shader.renderToFramebuffer;\r\n\r\n    if (renderToFramebuffer)\r\n    {\r\n        SetFramebuffer(renderPass, currentShader.shader.framebuffer, true);\r\n    }\r\n\r\n    if (count === currentBuffer.batchSize)\r\n    {\r\n        const type = (currentBuffer.isDynamic) ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW;\r\n\r\n        gl.bufferData(gl.ARRAY_BUFFER, currentBuffer.data, type);\r\n    }\r\n    else\r\n    {\r\n        const subsize = (currentBuffer.indexed) ? count * currentBuffer.entryElementSize : count * currentBuffer.vertexElementSize;\r\n\r\n        const view = currentBuffer.vertexViewF32.subarray(0, subsize);\r\n\r\n        gl.bufferSubData(gl.ARRAY_BUFFER, 0, view);\r\n    }\r\n\r\n    if (currentBuffer.indexed)\r\n    {\r\n        gl.drawElements(gl.TRIANGLES, count * currentBuffer.entryIndexSize, gl.UNSIGNED_SHORT, 0);\r\n    }\r\n    else\r\n    {\r\n        gl.drawArrays(gl.TRIANGLES, 0, count);\r\n    }\r\n\r\n    if (renderToFramebuffer)\r\n    {\r\n        PopFramebuffer(renderPass);\r\n    }\r\n}\r\n", "import { Draw } from './Draw';\r\nimport { IRenderPass } from './IRenderPass';\r\n\r\nexport function Flush (renderPass: IRenderPass, forceCount?: number): boolean\r\n{\r\n    if (forceCount)\r\n    {\r\n        renderPass.count = forceCount;\r\n    }\r\n\r\n    const count = renderPass.count;\r\n\r\n    if (count === 0)\r\n    {\r\n        return false;\r\n    }\r\n\r\n    Draw(renderPass);\r\n\r\n    renderPass.prevCount = count;\r\n\r\n    renderPass.count = 0;\r\n\r\n    renderPass.flushTotal++;\r\n\r\n    return true;\r\n}\r\n", "import { Flush } from './Flush';\r\nimport { IRenderPass } from './IRenderPass';\r\n\r\nexport function End (renderPass: IRenderPass): void\r\n{\r\n    Flush(renderPass);\r\n}\r\n", "export function GetRGBArray (color: number, output: number[] = []): number[]\r\n{\r\n    const r: number = color >> 16 & 0xFF;\r\n    const g: number = color >> 8 & 0xFF;\r\n    const b: number = color & 0xFF;\r\n    const a: number = (color > 16777215) ? color >>> 24 : 255;\r\n\r\n    output[0] = r / 255;\r\n    output[1] = g / 255;\r\n    output[2] = b / 255;\r\n    output[3] = a / 255;\r\n\r\n    return output;\r\n}\r\n", "import { CONFIG_DEFAULTS } from '../const';\r\nimport { ConfigStore } from '../ConfigStore';\r\n\r\nexport function GetWebGLContext (): WebGLContextAttributes\r\n{\r\n    return ConfigStore.get(CONFIG_DEFAULTS.WEBGL_CONTEXT);\r\n}\r\n", "import { IGLTextureBinding } from './IGLTextureBinding';\r\nimport { gl } from '../GL';\r\n\r\nexport function CreateGLTexture <T extends IGLTextureBinding> (binding: T): WebGLTexture\r\n{\r\n    const { parent, flipY, unpackPremultiplyAlpha, minFilter, magFilter, wrapS, wrapT, generateMipmap, isPOT } = binding;\r\n\r\n    const source = parent.image;\r\n\r\n    let width = parent.width;\r\n    let height = parent.height;\r\n\r\n    const glTexture: WebGLTexture = gl.createTexture();\r\n\r\n    gl.activeTexture(gl.TEXTURE0);\r\n    gl.bindTexture(gl.TEXTURE_2D, glTexture);\r\n\r\n    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, flipY);\r\n    gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, unpackPremultiplyAlpha);\r\n\r\n    if (source)\r\n    {\r\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, source);\r\n\r\n        width = source.width;\r\n        height = source.height;\r\n    }\r\n    else\r\n    {\r\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\r\n    }\r\n\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, minFilter);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, magFilter);\r\n\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, wrapS);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, wrapT);\r\n\r\n    if (generateMipmap && isPOT)\r\n    {\r\n        gl.generateMipmap(gl.TEXTURE_2D);\r\n    }\r\n\r\n    binding.texture = glTexture;\r\n\r\n    return glTexture;\r\n}\r\n", "import { gl } from '../GL';\r\n\r\nexport function DeleteFramebuffer (framebuffer: WebGLFramebuffer): void\r\n{\r\n    if (gl && gl.isFramebuffer(framebuffer))\r\n    {\r\n        gl.deleteFramebuffer(framebuffer);\r\n    }\r\n}\r\n", "import { gl } from '../GL';\r\n\r\nexport function DeleteGLTexture (texture: WebGLTexture): void\r\n{\r\n    if (gl.isTexture(texture))\r\n    {\r\n        gl.deleteTexture(texture);\r\n    }\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Checks if the given `width` and `height` are a power of two.\r\n * Useful for checking texture dimensions.\r\n *\r\n * @function Phaser.Math.Pow2.IsSize\r\n * @since 3.0.0\r\n *\r\n * @param {number} width - The width.\r\n * @param {number} height - The height.\r\n *\r\n * @return {boolean} `true` if `width` and `height` are a power of two, otherwise `false`.\r\n */\r\nexport function IsSizePowerOfTwo (width: number, height: number): boolean\r\n{\r\n    if (width < 1 || height < 1)\r\n    {\r\n        return false;\r\n    }\r\n\r\n    return ((width & (width - 1)) === 0) && ((height & (height - 1)) === 0);\r\n}\r\n", "import { gl } from '../GL';\r\n\r\nexport function SetGLTextureFilterMode (texture: WebGLTexture, linear: boolean = true): void\r\n{\r\n    gl.activeTexture(gl.TEXTURE0);\r\n    gl.bindTexture(gl.TEXTURE_2D, texture);\r\n\r\n    const mode = (linear) ? gl.LINEAR : gl.NEAREST;\r\n\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, mode);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, mode);\r\n}\r\n", "import { IGLTextureBinding } from './IGLTextureBinding';\r\nimport { gl } from '../GL';\r\n\r\nexport function UpdateGLTexture <T extends IGLTextureBinding> (binding: T): WebGLTexture\r\n{\r\n    const source = binding.parent.image;\r\n    const width = source.width;\r\n    const height = source.height;\r\n\r\n    if (width > 0 && height > 0)\r\n    {\r\n        gl.activeTexture(gl.TEXTURE0);\r\n        gl.bindTexture(gl.TEXTURE_2D, binding.texture);\r\n\r\n        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, binding.flipY);\r\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, source);\r\n    }\r\n\r\n    return binding.texture;\r\n}\r\n", "import { CreateGLTexture } from './CreateGLTexture';\r\nimport { DeleteFramebuffer } from '../fbo/DeleteFramebuffer';\r\nimport { DeleteGLTexture } from './DeleteGLTexture';\r\nimport { IGLTextureBinding } from './IGLTextureBinding';\r\nimport { IGLTextureBindingConfig } from './IGLTextureBindingConfig';\r\nimport { ITexture } from '../../../textures/ITexture';\r\nimport { IsSizePowerOfTwo } from '../../../math/pow2/IsSizePowerOfTwo';\r\nimport { SetGLTextureFilterMode } from './SetGLTextureFilterMode';\r\nimport { UpdateGLTexture } from './UpdateGLTexture';\r\nimport { gl } from '../GL';\r\n\r\nexport class GLTextureBinding implements IGLTextureBinding\r\n{\r\n    parent: ITexture;\r\n\r\n    texture: WebGLTexture;\r\n    framebuffer: WebGLFramebuffer;\r\n    depthbuffer: WebGLRenderbuffer;\r\n\r\n    index: number = 0;\r\n    indexCounter: number = -1;\r\n\r\n    dirtyIndex: boolean = true;\r\n    unpackPremultiplyAlpha: boolean = true;\r\n\r\n    minFilter: GLenum;\r\n    magFilter: GLenum;\r\n    wrapS: GLenum;\r\n    wrapT: GLenum;\r\n\r\n    flipY: boolean = false;\r\n    isPOT: boolean = false;\r\n    generateMipmap: boolean = false;\r\n\r\n    constructor (parent: ITexture, config: IGLTextureBindingConfig = {})\r\n    {\r\n        this.parent = parent;\r\n\r\n        this.isPOT = IsSizePowerOfTwo(parent.width, parent.height);\r\n\r\n        const {\r\n            texture = null,\r\n            framebuffer = null,\r\n            depthbuffer = null,\r\n            unpackPremultiplyAlpha = true,\r\n            minFilter = (this.isPOT) ? gl.LINEAR_MIPMAP_LINEAR : gl.LINEAR,\r\n            magFilter = gl.LINEAR,\r\n            wrapS = gl.CLAMP_TO_EDGE,\r\n            wrapT = gl.CLAMP_TO_EDGE,\r\n            generateMipmap = this.isPOT,\r\n            flipY = false\r\n        } = config;\r\n\r\n        this.minFilter = minFilter;\r\n        this.magFilter = magFilter;\r\n        this.wrapS = wrapS;\r\n        this.wrapT = wrapT;\r\n        this.generateMipmap = generateMipmap;\r\n        this.flipY = flipY;\r\n        this.unpackPremultiplyAlpha = unpackPremultiplyAlpha;\r\n\r\n        if (framebuffer)\r\n        {\r\n            this.framebuffer = framebuffer;\r\n        }\r\n\r\n        if (depthbuffer)\r\n        {\r\n            this.depthbuffer = depthbuffer;\r\n        }\r\n\r\n        if (texture)\r\n        {\r\n            this.texture = texture;\r\n        }\r\n        else\r\n        {\r\n            CreateGLTexture(this);\r\n        }\r\n    }\r\n\r\n    //  Needed?\r\n    setFilter (linear: boolean): void\r\n    {\r\n        if (this.texture)\r\n        {\r\n            SetGLTextureFilterMode(this.texture, linear);\r\n        }\r\n    }\r\n\r\n    create (): WebGLTexture\r\n    {\r\n        const texture = this.texture;\r\n\r\n        if (texture)\r\n        {\r\n            DeleteGLTexture(texture);\r\n        }\r\n\r\n        return CreateGLTexture(this);\r\n    }\r\n\r\n    update (): WebGLTexture\r\n    {\r\n        const texture = this.texture;\r\n\r\n        if (!texture)\r\n        {\r\n            return CreateGLTexture(this);\r\n        }\r\n        else\r\n        {\r\n            return UpdateGLTexture(this);\r\n        }\r\n    }\r\n\r\n    setIndex (index: number): void\r\n    {\r\n        this.dirtyIndex = (index !== this.index);\r\n        this.index = index;\r\n    }\r\n\r\n    destroy (): void\r\n    {\r\n        DeleteGLTexture(this.texture);\r\n        DeleteFramebuffer(this.framebuffer);\r\n\r\n        this.parent = null;\r\n        this.texture = null;\r\n        this.framebuffer = null;\r\n    }\r\n}\r\n", "import { BindingQueue } from '../../BindingQueue';\r\nimport { GLTextureBinding } from '../textures/GLTextureBinding';\r\n\r\nexport function ProcessBindingQueue (): void\r\n{\r\n    const queue = BindingQueue.get();\r\n\r\n    queue.forEach(entry =>\r\n    {\r\n        const { texture, glConfig } = entry;\r\n\r\n        if (!texture.binding)\r\n        {\r\n            texture.binding = new GLTextureBinding(texture, glConfig);\r\n        }\r\n    });\r\n\r\n    BindingQueue.clear();\r\n}\r\n", "import { CONFIG_DEFAULTS } from '../const';\r\nimport { ConfigStore } from '../ConfigStore';\r\n\r\nexport function GetMaxTextures (): number\r\n{\r\n    return ConfigStore.get(CONFIG_DEFAULTS.MAX_TEXTURES);\r\n}\r\n", "import { gl } from '../GL';\r\n\r\n//  From Pixi v5\r\n\r\nconst fragTemplate = [\r\n    'precision mediump float;',\r\n    'void main(void){',\r\n    'float test = 0.1;',\r\n    '%forloop%',\r\n    'gl_FragColor = vec4(0.0);',\r\n    '}'\r\n].join('\\n');\r\n\r\nfunction GenerateSrc (maxIfs: number): string\r\n{\r\n    let src = '';\r\n\r\n    for (let i = 0; i < maxIfs; ++i)\r\n    {\r\n        if (i > 0)\r\n        {\r\n            src += '\\nelse ';\r\n        }\r\n\r\n        if (i < maxIfs - 1)\r\n        {\r\n            src += `if(test == ${i}.0){}`;\r\n        }\r\n    }\r\n\r\n    return src;\r\n}\r\n\r\nexport function CheckShaderMaxIfStatements (maxIfs: number): number\r\n{\r\n    const shader = gl.createShader(gl.FRAGMENT_SHADER);\r\n\r\n    // eslint-disable-next-line no-constant-condition\r\n    while (true)\r\n    {\r\n        const fragmentSrc = fragTemplate.replace(/%forloop%/gi, GenerateSrc(maxIfs));\r\n\r\n        gl.shaderSource(shader, fragmentSrc);\r\n        gl.compileShader(shader);\r\n\r\n        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS))\r\n        {\r\n            maxIfs = (maxIfs / 2) | 0;\r\n        }\r\n        else\r\n        {\r\n            // valid!\r\n            break;\r\n        }\r\n    }\r\n\r\n    return maxIfs;\r\n}\r\n", "import { GetMaxTextures, SetMaxTextures } from '../../../config/maxtextures/';\r\n\r\nimport { CheckShaderMaxIfStatements } from '../shaders/CheckShaderMaxIfStatements';\r\nimport { IRenderPass } from './IRenderPass';\r\nimport { gl } from '../GL';\r\n\r\n//  As per the WebGL spec, the browser should always support at least 8 texture units\r\n\r\nexport function CreateTempTextures (renderPass: IRenderPass): void\r\n{\r\n    let maxGPUTextures: number = CheckShaderMaxIfStatements(gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS));\r\n\r\n    const maxConfigTextures = GetMaxTextures();\r\n\r\n    if (maxConfigTextures === 0 || (maxConfigTextures > 0 && maxConfigTextures > maxGPUTextures))\r\n    {\r\n        //  Insert gpu limit into config value\r\n        SetMaxTextures(maxGPUTextures);\r\n    }\r\n    else if (maxConfigTextures > 0 && maxConfigTextures < maxGPUTextures)\r\n    {\r\n        //  Limit to config setting, or 8, whichever is higher\r\n        maxGPUTextures = Math.max(8, maxConfigTextures);\r\n    }\r\n\r\n    const tempTextures = renderPass.tempTextures;\r\n\r\n    if (tempTextures.length)\r\n    {\r\n        tempTextures.forEach(texture =>\r\n        {\r\n            gl.deleteTexture(texture);\r\n        });\r\n    }\r\n\r\n    const index = [];\r\n\r\n    //  Create temp textures to stop WebGL errors on mac os\r\n    for (let texturesIndex: number = 0; texturesIndex < maxGPUTextures; texturesIndex++)\r\n    {\r\n        const tempTexture = gl.createTexture();\r\n\r\n        gl.activeTexture(gl.TEXTURE0 + texturesIndex);\r\n\r\n        gl.bindTexture(gl.TEXTURE_2D, tempTexture);\r\n\r\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, new Uint8Array([ 0, 0, 255, 255 ]));\r\n\r\n        tempTextures[texturesIndex] = tempTexture;\r\n\r\n        index.push(texturesIndex);\r\n    }\r\n\r\n    renderPass.maxTextures = maxGPUTextures;\r\n\r\n    renderPass.textureIndex = index;\r\n\r\n    //  ID Zero is reserved for FBO Textures\r\n    renderPass.currentActiveTexture = 1;\r\n}\r\n", "import { CONFIG_DEFAULTS } from '../const';\r\nimport { ConfigStore } from '../ConfigStore';\r\n\r\nexport function GetBatchSize (): number\r\n{\r\n    return ConfigStore.get(CONFIG_DEFAULTS.BATCH_SIZE);\r\n}\r\n", "import { gl } from '../GL';\r\n\r\nexport function DeleteGLBuffer (buffer: WebGLBuffer): void\r\n{\r\n    if (gl.isBuffer(buffer))\r\n    {\r\n        gl.deleteBuffer(buffer);\r\n    }\r\n}\r\n", "import { DeleteGLBuffer } from './DeleteGLBuffer';\r\nimport { IVertexBuffer } from './IVertexBuffer';\r\nimport { IVertexBufferConfig } from './IVertexBufferConfig';\r\nimport { gl } from '../GL';\r\n\r\nexport class VertexBuffer implements IVertexBuffer\r\n{\r\n    /**\r\n     * Maximum number of entries per batch before a flush takes place.\r\n     * For a Mesh, this is the number of triangles / faces in the vertex buffer.\r\n     * Typically each face consists of 3 verticies.\r\n     *\r\n     * @type {number}\r\n     */\r\n    batchSize: number;\r\n\r\n    /**\r\n     * The size, in bytes, per entry in the array buffer.\r\n     *\r\n     * @type {number}\r\n     */\r\n    dataSize: number;\r\n\r\n    /**\r\n     * The amount of elements / floats a single vertex consists of.\r\n     *\r\n     * The default is 6:\r\n     *\r\n     * position (x,y - 2 floats)\r\n     * texture coord (x,y - 2 floats)\r\n     * texture index (uint)\r\n     * packed color (uint)\r\n     *\r\n     * @type {number}\r\n     */\r\n    vertexElementSize: number;\r\n\r\n    /**\r\n     * The size, in bytes, of a single vertex in the array buffer.\r\n     *\r\n     * This is `vertexElementSize * dataSize`.\r\n     *\r\n     * @type {number}\r\n     */\r\n    vertexByteSize: number;\r\n\r\n    /**\r\n     * The size, in bytes, of a single entry in the array buffer.\r\n     *\r\n     * This is `vertexByteSize * 4` for a quad.\r\n     *\r\n     * @type {number}\r\n     */\r\n    entryByteSize: number;\r\n\r\n    /**\r\n     * The size, in bytes, of the Array Buffer.\r\n     *\r\n     * This is `batchSize * entryByteSize`\r\n     *\r\n     * @type {number}\r\n     */\r\n    bufferByteSize: number;\r\n\r\n    /**\r\n     * The Array Buffer.\r\n     *\r\n     * @type {ArrayBuffer}\r\n     */\r\n    data: ArrayBuffer;\r\n\r\n    /**\r\n     * Float32 View of the Array Buffer.\r\n     *\r\n     * @type {Float32Array}\r\n     */\r\n    vertexViewF32: Float32Array;\r\n\r\n    /**\r\n     * Uint32 View of the Array Buffer.\r\n     *\r\n     * @type {Uint32Array}\r\n     */\r\n    vertexViewU32: Uint32Array;\r\n\r\n    /**\r\n     * The data array buffer.\r\n     *\r\n     * @type {WebGLBuffer}\r\n     */\r\n    vertexBuffer: WebGLBuffer;\r\n\r\n    indexed: boolean = false;\r\n\r\n    isDynamic: boolean = false;\r\n\r\n    /**\r\n     * The total number of entries added to the buffer so far, or reserved to be added.\r\n     *\r\n     * This is the total number of indices / verticies, not faces.\r\n     * Typically there are 3 verts per face, so this value is usually batchSize x 3 for a Mesh.\r\n     *\r\n     * @type {number}\r\n     */\r\n    count: number = 0;\r\n\r\n    /**\r\n     * The current buffer offset.\r\n     *\r\n     * @type {number}\r\n     */\r\n    offset: number = 0;\r\n\r\n    elementsPerEntry: number;\r\n\r\n    isBound: boolean = false;\r\n\r\n    constructor (config: IVertexBufferConfig = {})\r\n    {\r\n        const {\r\n            batchSize = 1,\r\n            dataSize = 4,\r\n            isDynamic = true,\r\n            elementsPerEntry = 4,\r\n            vertexElementSize = 6\r\n        } = config;\r\n\r\n        this.batchSize = batchSize;\r\n        this.dataSize = dataSize;\r\n        this.vertexElementSize = vertexElementSize;\r\n        this.isDynamic = isDynamic;\r\n        this.elementsPerEntry = elementsPerEntry;\r\n\r\n        //  Derive the remaining values\r\n        this.vertexByteSize = vertexElementSize * dataSize;\r\n        this.entryByteSize = this.vertexByteSize * elementsPerEntry;\r\n        this.bufferByteSize = batchSize * this.entryByteSize;\r\n\r\n        this.create();\r\n    }\r\n\r\n    resize (batchSize: number): void\r\n    {\r\n        this.batchSize = batchSize;\r\n        this.bufferByteSize = batchSize * this.entryByteSize;\r\n\r\n        if (this.vertexBuffer)\r\n        {\r\n            DeleteGLBuffer(this.vertexBuffer);\r\n        }\r\n\r\n        this.create();\r\n    }\r\n\r\n    create (): void\r\n    {\r\n        const data = new ArrayBuffer(this.bufferByteSize);\r\n\r\n        this.data = data;\r\n\r\n        this.vertexViewF32 = new Float32Array(data);\r\n        this.vertexViewU32 = new Uint32Array(data);\r\n\r\n        this.vertexBuffer = gl.createBuffer();\r\n\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);\r\n\r\n        const type = (this.isDynamic) ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW;\r\n\r\n        gl.bufferData(gl.ARRAY_BUFFER, data, type);\r\n\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, null);\r\n\r\n        this.isBound = false;\r\n    }\r\n\r\n    add (count: number): void\r\n    {\r\n        this.count += count;\r\n        this.offset += (this.vertexElementSize * count);\r\n    }\r\n\r\n    reset (): void\r\n    {\r\n        this.count = 0;\r\n        this.offset = 0;\r\n    }\r\n\r\n    canContain (count: number): boolean\r\n    {\r\n        return ((this.count + count) <= this.batchSize);\r\n    }\r\n\r\n    free (): number\r\n    {\r\n        return Math.max(0, 1 - (this.count / this.batchSize));\r\n    }\r\n\r\n    bind (): void\r\n    {\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);\r\n    }\r\n\r\n    destroy (): void\r\n    {\r\n        DeleteGLBuffer(this.vertexBuffer);\r\n\r\n        this.data = null;\r\n        this.vertexViewF32 = null;\r\n        this.vertexViewU32 = null;\r\n        this.vertexBuffer = null;\r\n    }\r\n}\r\n", "import { DeleteGLBuffer } from './DeleteGLBuffer';\r\nimport { IIndexedVertexBuffer } from './IIndexedVertexBuffer';\r\nimport { IVertexBufferConfig } from './IVertexBufferConfig';\r\nimport { VertexBuffer } from './VertexBuffer';\r\nimport { gl } from '../GL';\r\n\r\nexport class IndexedVertexBuffer extends VertexBuffer implements IIndexedVertexBuffer\r\n{\r\n    /**\r\n     * The size, in bytes, per entry in the element index array.\r\n     *\r\n     * @type {number}\r\n     */\r\n    indexSize: number;\r\n\r\n    /**\r\n     * The size, in quantity of elements, of a single entry in the element index array.\r\n     *\r\n     * This is `vertexElementSize * 4` for a quad.\r\n     *\r\n     * @type {number}\r\n     */\r\n    entryElementSize: number;\r\n\r\n    /**\r\n     * The total number of entries per entry in the element index array.\r\n     *\r\n     * For a quad, the IBO contains 6 entries per entry:\r\n     *\r\n     * 0, 1, 2\r\n     * 2, 3, 0\r\n     *\r\n     * @type {number}\r\n     */\r\n    entryIndexSize: number;\r\n\r\n    /**\r\n     * The Element Array Buffer.\r\n     *\r\n     * @type {Uint16Array}\r\n     */\r\n    index: Uint16Array;\r\n\r\n    /**\r\n     * The element array buffer.\r\n     *\r\n     * @type {WebGLBuffer}\r\n     */\r\n    indexBuffer: WebGLBuffer;\r\n\r\n    indexLayout: number[];\r\n\r\n    constructor (config: IVertexBufferConfig = {})\r\n    {\r\n        super(config);\r\n\r\n        const {\r\n            indexSize = 4,\r\n            entryIndexSize = 6,\r\n            indexLayout = null\r\n        } = config;\r\n\r\n        this.indexed = true;\r\n\r\n        this.indexSize = indexSize;\r\n        this.entryIndexSize = entryIndexSize;\r\n\r\n        //  Derive the remaining values\r\n        this.entryElementSize = this.vertexElementSize * this.elementsPerEntry;\r\n\r\n        const seededIndexBuffer = [];\r\n\r\n        if (indexLayout)\r\n        {\r\n            this.indexLayout = indexLayout;\r\n\r\n            //  Seed the index buffer\r\n            for (let i = 0; i < (this.batchSize * indexSize); i += indexSize)\r\n            {\r\n                for (let c = 0; c < indexLayout.length; c++)\r\n                {\r\n                    seededIndexBuffer.push(i + indexLayout[c]);\r\n                }\r\n            }\r\n        }\r\n\r\n        this.create();\r\n        this.createIndexBuffer(seededIndexBuffer);\r\n    }\r\n\r\n    createIndexBuffer (seededIndex: number[]): void\r\n    {\r\n        this.index = new Uint16Array(seededIndex);\r\n\r\n        this.indexBuffer = gl.createBuffer();\r\n\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);\r\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, this.index, gl.STATIC_DRAW);\r\n\r\n        //  Free memory\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\r\n        seededIndex = [];\r\n    }\r\n\r\n    bind (): void\r\n    {\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);\r\n    }\r\n\r\n    destroy (): void\r\n    {\r\n        super.destroy();\r\n\r\n        DeleteGLBuffer(this.indexBuffer);\r\n\r\n        this.index = null;\r\n        this.indexLayout = null;\r\n        this.indexBuffer = null;\r\n    }\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Checks if an array can be used as a matrix.\r\n *\r\n * A matrix is a two-dimensional array (array of arrays), where all sub-arrays (rows) have the same length. There must be at least two rows:\r\n *\r\n * ```\r\n *    [\r\n *        [ 1, 1, 1, 1, 1, 1 ],\r\n *        [ 2, 0, 0, 0, 0, 4 ],\r\n *        [ 2, 0, 1, 2, 0, 4 ],\r\n *        [ 2, 0, 3, 4, 0, 4 ],\r\n *        [ 2, 0, 0, 0, 0, 4 ],\r\n *        [ 3, 3, 3, 3, 3, 3 ]\r\n *    ]\r\n * ```\r\n */\r\nexport function CheckMatrix (matrix: unknown[][]): boolean\r\n{\r\n    if (!Array.isArray(matrix) || matrix.length < 2 || !Array.isArray(matrix[0]))\r\n    {\r\n        return false;\r\n    }\r\n\r\n    //  How long is the first row?\r\n    const size = matrix[0].length;\r\n\r\n    //  Validate the rest of the rows are the same length\r\n    for (let i = 1; i < matrix.length; i++)\r\n    {\r\n        if (matrix[i].length !== size)\r\n        {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    return true;\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nimport { CheckMatrix } from './CheckMatrix';\r\n\r\n/**\r\n * Generates a string (which you can pass to console.log) from the given Array Matrix.\r\n */\r\nexport function MatrixToString (matrix: unknown[][]): string\r\n{\r\n    let str = '';\r\n\r\n    if (!CheckMatrix(matrix))\r\n    {\r\n        return str;\r\n    }\r\n\r\n    for (let r = 0; r < matrix.length; r++)\r\n    {\r\n        for (let c = 0; c < matrix[r].length; c++)\r\n        {\r\n            const cell = matrix[r][c].toString();\r\n\r\n            if (cell !== 'undefined')\r\n            {\r\n                str = str.padEnd(2, cell);\r\n            }\r\n            else\r\n            {\r\n                str += '?';\r\n            }\r\n\r\n            if (c < matrix[r].length - 1)\r\n            {\r\n                str += ' |';\r\n            }\r\n        }\r\n\r\n        if (r < matrix.length - 1)\r\n        {\r\n            str += '\\n';\r\n\r\n            for (let i = 0; i < matrix[r].length; i++)\r\n            {\r\n                str += '---';\r\n\r\n                if (i < matrix[r].length - 1)\r\n                {\r\n                    str += '+';\r\n                }\r\n            }\r\n\r\n            str += '\\n';\r\n        }\r\n\r\n    }\r\n\r\n    return str;\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Reverses the columns in the given Array Matrix.\r\n */\r\nexport function ReverseColumns (matrix: unknown[][]): unknown[][]\r\n{\r\n    return matrix.reverse();\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Reverses the rows in the given Array Matrix.\r\n */\r\nexport function ReverseRows (matrix: unknown[][]): unknown[][]\r\n{\r\n    for (let i = 0; i < matrix.length; i++)\r\n    {\r\n        matrix[i].reverse();\r\n    }\r\n\r\n    return matrix;\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Transposes the elements of the given matrix (array of arrays).\r\n *\r\n * The transpose of a matrix is a new matrix whose rows are the columns of the original.\r\n */\r\nexport function TransposeMatrix (matrix: unknown[][]): unknown[][]\r\n{\r\n    const sourceRowCount = matrix.length;\r\n    const sourceColCount = matrix[0].length;\r\n\r\n    const result = new Array(sourceColCount);\r\n\r\n    for (let i = 0; i < sourceColCount; i++)\r\n    {\r\n        result[i] = new Array(sourceRowCount);\r\n\r\n        for (let j = sourceRowCount - 1; j > -1; j--)\r\n        {\r\n            result[i][j] = matrix[j][i];\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nimport { CheckMatrix } from './CheckMatrix';\r\nimport { TransposeMatrix } from './TransposeMatrix';\r\n\r\n/**\r\n * Rotates the array matrix based on the given rotation value.\r\n *\r\n * The value can be given in degrees: 90, -90, 270, -270 or 180,\r\n * or a string command: `rotateLeft`, `rotateRight` or `rotate180`.\r\n *\r\n * Based on the routine from {@link http://jsfiddle.net/MrPolywhirl/NH42z/}.\r\n */\r\nexport function RotateMatrix (matrix: unknown[][], direction: number | string = 90): unknown[][]\r\n{\r\n    if (!CheckMatrix(matrix))\r\n    {\r\n        return matrix;\r\n    }\r\n\r\n    if (typeof direction !== 'string')\r\n    {\r\n        direction = ((direction % 360) + 360) % 360;\r\n    }\r\n\r\n    if (direction === 90 || direction === -270 || direction === 'rotateLeft')\r\n    {\r\n        matrix = TransposeMatrix(matrix);\r\n        matrix.reverse();\r\n    }\r\n    else if (direction === -90 || direction === 270 || direction === 'rotateRight')\r\n    {\r\n        matrix.reverse();\r\n        matrix = TransposeMatrix(matrix);\r\n    }\r\n    else if (Math.abs(direction as number) === 180 || direction === 'rotate180')\r\n    {\r\n        for (let i = 0; i < matrix.length; i++)\r\n        {\r\n            matrix[i].reverse();\r\n        }\r\n\r\n        matrix.reverse();\r\n    }\r\n\r\n    return matrix;\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nimport { RotateMatrix } from './RotateMatrix';\r\n\r\n/**\r\n * Rotates the array matrix 180 degrees.\r\n *\r\n * @function Phaser.Utils.Array.Matrix.Rotate180\r\n * @since 3.0.0\r\n *\r\n * @generic T\r\n * @genericUse {T[][]} - [matrix,$return]\r\n *\r\n * @param {T[][]} [matrix] - The array to rotate.\r\n *\r\n * @return {T[][]} The rotated matrix array. The source matrix should be discard for the returned matrix.\r\n */\r\nexport function Rotate180 (matrix: unknown[][]): unknown[][]\r\n{\r\n    return RotateMatrix(matrix, 180);\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nimport { RotateMatrix } from './RotateMatrix';\r\n\r\n/**\r\n * Rotates the array matrix to the left (or 90 degrees)\r\n *\r\n * @function Phaser.Utils.Array.Matrix.RotateLeft\r\n * @since 3.0.0\r\n *\r\n * @generic T\r\n * @genericUse {T[][]} - [matrix,$return]\r\n *\r\n * @param {T[][]} [matrix] - The array to rotate.\r\n *\r\n * @return {T[][]} The rotated matrix array. The source matrix should be discard for the returned matrix.\r\n */\r\nexport function RotateLeft (matrix: unknown[][]): unknown[][]\r\n{\r\n    return RotateMatrix(matrix, 90);\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nimport { RotateMatrix } from './RotateMatrix';\r\n\r\n/**\r\n * Rotates the array matrix to the left (or -90 degrees)\r\n *\r\n * @function Phaser.Utils.Array.Matrix.RotateRight\r\n * @since 3.0.0\r\n *\r\n * @generic T\r\n * @genericUse {T[][]} - [matrix,$return]\r\n *\r\n * @param {T[][]} [matrix] - The array to rotate.\r\n *\r\n * @return {T[][]} The rotated matrix array. The source matrix should be discard for the returned matrix.\r\n */\r\nexport function RotateRight (matrix: unknown[][]): unknown[][]\r\n{\r\n    return RotateMatrix(matrix, -90);\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Create an array representing the range of numbers (usually integers), between, and inclusive of,\r\n * the given `start` and `end` arguments. For example:\r\n *\r\n * `var array = numberArray(2, 4); // array = [2, 3, 4]`\r\n * `var array = numberArray(0, 9); // array = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]`\r\n *\r\n * This is equivalent to `numberArrayStep(start, end, 1)`.\r\n *\r\n * You can optionally provide a prefix and / or suffix string. If given the array will contain\r\n * strings, not integers. For example:\r\n *\r\n * `var array = numberArray(1, 4, 'Level '); // array = [\"Level 1\", \"Level 2\", \"Level 3\", \"Level 4\"]`\r\n * `var array = numberArray(5, 7, 'HD-', '.png'); // array = [\"HD-5.png\", \"HD-6.png\", \"HD-7.png\"]`\r\n *\r\n * @param {number} start - The minimum value the array starts with.\r\n * @param {number} end - The maximum value the array contains.\r\n * @param {string} [prefix] - Optional prefix to place before the number. If provided the array will contain strings, not integers.\r\n * @param {string} [suffix] - Optional suffix to place after the number. If provided the array will contain strings, not integers.\r\n *\r\n * @return {(number[]|string[])} The array of number values, or strings if a prefix or suffix was provided.\r\n */\r\nexport function NumberArray (start: number, end: number, prefix?: string, suffix?: string): (string | number)[]\r\n{\r\n    const result: (string | number)[] = [];\r\n\r\n    for (let i = start; i <= end; i++)\r\n    {\r\n        if (prefix || suffix)\r\n        {\r\n            let key = (prefix) ? prefix + i.toString() : i.toString();\r\n\r\n            if (suffix)\r\n            {\r\n                key = key.concat(suffix);\r\n            }\r\n\r\n            result.push(key);\r\n        }\r\n        else\r\n        {\r\n            result.push(i);\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Round a given number so it is further away from zero. That is, positive numbers are rounded up, and negative numbers are rounded down.\r\n *\r\n * @function Phaser.Math.RoundAwayFromZero\r\n * @since 3.0.0\r\n *\r\n * @param {number} value - The number to round.\r\n *\r\n * @return {number} The rounded number, rounded away from zero.\r\n */\r\nexport function RoundAwayFromZero (value: number): number\r\n{\r\n    // \"Opposite\" of truncate.\r\n    return (value > 0) ? Math.ceil(value) : Math.floor(value);\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nimport { RoundAwayFromZero } from '../../math/RoundAwayFromZero';\r\n\r\n/**\r\n * Create an array of numbers (positive and/or negative) progressing from `start`\r\n * up to but not including `end` by advancing by `step`.\r\n *\r\n * If `start` is less than `end` a zero-length range is created unless a negative `step` is specified.\r\n *\r\n * Certain values for `start` and `end` (eg. NaN/undefined/null) are currently coerced to 0;\r\n * for forward compatibility make sure to pass in actual numbers.\r\n *\r\n * @example\r\n * NumberArrayStep(4);\r\n * // => [0, 1, 2, 3]\r\n *\r\n * NumberArrayStep(1, 5);\r\n * // => [1, 2, 3, 4]\r\n *\r\n * NumberArrayStep(0, 20, 5);\r\n * // => [0, 5, 10, 15]\r\n *\r\n * NumberArrayStep(0, -4, -1);\r\n * // => [0, -1, -2, -3]\r\n *\r\n * NumberArrayStep(1, 4, 0);\r\n * // => [1, 1, 1]\r\n *\r\n * NumberArrayStep(0);\r\n * // => []\r\n *\r\n * @param {number} [start=0] - The start of the range.\r\n * @param {number} [end=null] - The end of the range.\r\n * @param {number} [step=1] - The value to increment or decrement by.\r\n *\r\n * @return {number[]} The array of number values.\r\n */\r\nexport function NumberArrayStep (start: number, end: number, step: number): number[]\r\n{\r\n    const result: number[] = [];\r\n\r\n    const total = Math.max(RoundAwayFromZero((end - start) / (step || 1)), 0);\r\n\r\n    for (let i = 0; i < total; i++)\r\n    {\r\n        result.push(start);\r\n\r\n        start += step;\r\n    }\r\n\r\n    return result;\r\n}\r\n", "/**\r\n * @author       Niklas von Hertzen (https://github.com/niklasvh/base64-arraybuffer)\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nconst chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\r\n\r\n/**\r\n * Converts an ArrayBuffer into a base64 string.\r\n *\r\n * The resulting string can optionally be a data uri if the `mediaType` argument is provided.\r\n *\r\n * See https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs for more details.\r\n *\r\n * @function Phaser.Utils.Base64.ArrayBufferToBase64\r\n * @since 3.18.0\r\n *\r\n * @param {ArrayBuffer} arrayBuffer - The Array Buffer to encode.\r\n * @param {string} [mediaType] - An optional media type, i.e. `audio/ogg` or `image/jpeg`. If included the resulting string will be a data URI.\r\n *\r\n * @return {string} The base64 encoded Array Buffer.\r\n */\r\nexport function ArrayBufferToBase64 (arrayBuffer: ArrayBuffer, mediaType: string): string\r\n{\r\n    const bytes = new Uint8Array(arrayBuffer);\r\n    const len = bytes.length;\r\n\r\n    let base64 = (mediaType) ? 'data:' + mediaType + ';base64,' : '';\r\n\r\n    for (let i = 0; i < len; i += 3)\r\n    {\r\n        base64 += chars[bytes[i] >> 2];\r\n        base64 += chars[((bytes[i] & 3) << 4) | (bytes[i + 1] >> 4)];\r\n        base64 += chars[((bytes[i + 1] & 15) << 2) | (bytes[i + 2] >> 6)];\r\n        base64 += chars[bytes[i + 2] & 63];\r\n    }\r\n\r\n    if ((len % 3) === 2)\r\n    {\r\n        base64 = base64.substring(0, base64.length - 1) + '=';\r\n    }\r\n    else if (len % 3 === 1)\r\n    {\r\n        base64 = base64.substring(0, base64.length - 2) + '==';\r\n    }\r\n\r\n    return base64;\r\n}\r\n", "/**\r\n * @author       Niklas von Hertzen (https://github.com/niklasvh/base64-arraybuffer)\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nconst chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\r\n\r\n//  Use a lookup table to find the index.\r\nconst lookup = new Uint8Array(256);\r\n\r\nfor (let i = 0; i < chars.length; i++)\r\n{\r\n    lookup[chars.charCodeAt(i)] = i;\r\n}\r\n\r\n/**\r\n * Converts a base64 string, either with or without a data uri, into an Array Buffer.\r\n *\r\n * @function Phaser.Utils.Base64.Base64ToArrayBuffer\r\n * @since 3.18.0\r\n *\r\n * @param {string} base64 - The base64 string to be decoded. Can optionally contain a data URI header, which will be stripped out prior to decoding.\r\n *\r\n * @return {ArrayBuffer} An ArrayBuffer decoded from the base64 data.\r\n */\r\nexport function Base64ToArrayBuffer (base64: string): ArrayBuffer\r\n{\r\n    //  Is it a data uri? if so, strip the header away\r\n    base64 = base64.substr(base64.indexOf(',') + 1);\r\n\r\n    const len = base64.length;\r\n    let bufferLength = len * 0.75;\r\n    let p = 0;\r\n    let encoded1;\r\n    let encoded2;\r\n    let encoded3;\r\n    let encoded4;\r\n\r\n    if (base64[len - 1] === '=')\r\n    {\r\n        bufferLength--;\r\n\r\n        if (base64[len - 2] === '=')\r\n        {\r\n            bufferLength--;\r\n        }\r\n    }\r\n\r\n    const arrayBuffer = new ArrayBuffer(bufferLength);\r\n    const bytes = new Uint8Array(arrayBuffer);\r\n\r\n    for (let i = 0; i < len; i += 4)\r\n    {\r\n        encoded1 = lookup[base64.charCodeAt(i)];\r\n        encoded2 = lookup[base64.charCodeAt(i + 1)];\r\n        encoded3 = lookup[base64.charCodeAt(i + 2)];\r\n        encoded4 = lookup[base64.charCodeAt(i + 3)];\r\n\r\n        bytes[p++] = (encoded1 << 2) | (encoded2 >> 4);\r\n        bytes[p++] = ((encoded2 & 15) << 4) | (encoded3 >> 2);\r\n        bytes[p++] = ((encoded3 & 3) << 6) | (encoded4 & 63);\r\n    }\r\n\r\n    return arrayBuffer;\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Takes a string and removes the character at the given index.\r\n *\r\n * @function Phaser.Utils.String.RemoveAt\r\n * @since 3.50.0\r\n *\r\n * @param {string} string - The string to be worked on.\r\n * @param {number} index - The index of the character to be removed.\r\n *\r\n * @return {string} The modified string.\r\n */\r\nexport function RemoveAt (string: string, index: number): string\r\n{\r\n    if (index === 0)\r\n    {\r\n        return string.slice(1);\r\n    }\r\n    else\r\n    {\r\n        return string.slice(0, index - 1) + string.slice(index);\r\n    }\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Takes the given string and reverses it, returning the reversed string.\r\n * For example if given the string `Atari 520ST` it would return `TS025 iratA`.\r\n *\r\n * @function Phaser.Utils.String.Reverse\r\n * @since 3.0.0\r\n *\r\n * @param {string} string - The string to be reversed.\r\n *\r\n * @return {string} The reversed string.\r\n */\r\nexport function Reverse (string: string): string\r\n{\r\n    return string.split('').reverse().join('');\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Capitalizes the first letter of a string if there is one.\r\n * @example\r\n * UppercaseFirst('abc');\r\n * // returns 'Abc'\r\n * @example\r\n * UppercaseFirst('the happy family');\r\n * // returns 'The happy family'\r\n * @example\r\n * UppercaseFirst('');\r\n * // returns ''\r\n *\r\n * @function Phaser.Utils.String.UppercaseFirst\r\n * @since 3.0.0\r\n *\r\n * @param {string} str - The string to capitalize.\r\n *\r\n * @return {string} A new string, same as the first, but with the first letter capitalized.\r\n */\r\nexport function UppercaseFirst (str: string): string\r\n{\r\n    return str && str[0].toUpperCase() + str.slice(1);\r\n}\r\n", "export function NOOP (): void\r\n{\r\n    //  No-op\r\n}\r\n", "import { NOOP } from '../../utils';\r\n\r\n//  4x4 Matrix in column-major format\r\n\r\n/**\r\n * data[0] = m00\r\n * data[1] = m01\r\n * data[2] = m02\r\n * data[3] = m03\r\n * data[4] = m10\r\n * data[5] = m11\r\n * data[6] = m12\r\n * data[7] = m13\r\n * data[8] = m20\r\n * data[9] = m21\r\n * data[10] = m22\r\n * data[11] = m23\r\n * data[12] = m30\r\n * data[13] = m31\r\n * data[14] = m32\r\n * data[15] = m33\r\n */\r\n\r\nexport class Matrix4\r\n{\r\n    data: Float32Array;\r\n\r\n    onChange: (mat4: Matrix4) => void;\r\n\r\n    constructor (src?: Matrix4 | Float32List)\r\n    {\r\n        const data = new Float32Array(16);\r\n\r\n        this.data = data;\r\n        this.onChange = NOOP;\r\n\r\n        if (src)\r\n        {\r\n            if (Array.isArray(src))\r\n            {\r\n                this.fromArray(src);\r\n            }\r\n            else\r\n            {\r\n                this.fromArray((src as Matrix4).data);\r\n            }\r\n        }\r\n        else\r\n        {\r\n            data[0] = 1;\r\n            data[5] = 1;\r\n            data[10] = 1;\r\n            data[15] = 1;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param m00 - 1st value of 1st row\r\n     * @param m01 - 2nd value of 1st row\r\n     * @param m02 - 3rd value of 1st row\r\n     * @param m03 - 4th value of 1st row\r\n     * @param m10 - 1st value of 2nd row\r\n     * @param m11 - 2nd value of 2nd row\r\n     * @param m12 - 3rd value of 2nd row\r\n     * @param m13 - 4th value of 2nd row\r\n     * @param m20 - 1st value of 3rd row\r\n     * @param m21 - 2nd value of 3rd row\r\n     * @param m22 - 3rd value of 3rd row\r\n     * @param m23 - 4th value of 3rd row\r\n     * @param m30 - 1st value of 4th row\r\n     * @param m31 - 2nd value of 4th row\r\n     * @param m32 - 3rd value of 4th row\r\n     * @param m33 - 4th value of 4th row\r\n     */\r\n    set (m00: number, m01: number, m02: number, m03: number, m10: number, m11: number, m12: number, m13: number, m20: number, m21: number, m22: number, m23: number, m30: number, m31: number, m32: number, m33: number): this\r\n    {\r\n        const data = this.data;\r\n\r\n        data[ 0 ] = m00;\r\n        data[ 1 ] = m01;\r\n        data[ 2 ] = m02;\r\n        data[ 3 ] = m03;\r\n\r\n        data[ 4 ] = m10;\r\n        data[ 5 ] = m11;\r\n        data[ 6 ] = m12;\r\n        data[ 7 ] = m13;\r\n\r\n        data[ 8 ] = m20;\r\n        data[ 9 ] = m21;\r\n        data[ 10 ] = m22;\r\n        data[ 11 ] = m23;\r\n\r\n        data[ 12 ] = m30;\r\n        data[ 13 ] = m31;\r\n        data[ 14 ] = m32;\r\n        data[ 15 ] = m33;\r\n\r\n        this.onChange(this);\r\n\r\n        return this;\r\n    }\r\n\r\n    toArray (dst: Float32List = [], index: number = 0): Float32List\r\n    {\r\n        const data = this.data;\r\n\r\n        for (let i = 0; i < 16; i++)\r\n        {\r\n            dst[ index + i ] = data[i];\r\n        }\r\n\r\n        return dst;\r\n    }\r\n\r\n    fromArray (src: Float32List, index: number = 0): this\r\n    {\r\n        const data = this.data;\r\n\r\n        for (let i = 0; i < 16; i++)\r\n        {\r\n            data[i] = src[ index + i ];\r\n        }\r\n\r\n        this.onChange(this);\r\n\r\n        return this;\r\n    }\r\n\r\n    toString (): string\r\n    {\r\n        return '[ mat4=' + this.data.join(', ') + ' ]';\r\n    }\r\n\r\n    destroy (): void\r\n    {\r\n        this.onChange = NOOP;\r\n        this.data = null;\r\n    }\r\n}\r\n", "import { Matrix4 } from './Matrix4';\r\n\r\n// Generates a orthogonal projection matrix with the given bounds\r\n\r\nexport function Mat4Ortho (left: number, right: number, bottom: number, top: number, near: number, far: number, out: Matrix4 = new Matrix4()): Matrix4\r\n{\r\n    const lr = 1 / (left - right);\r\n    const bt = 1 / (bottom - top);\r\n    const nf = 1 / (near - far);\r\n\r\n    return out.set(\r\n        -2 * lr,\r\n        0,\r\n        0,\r\n        0,\r\n        0,\r\n        -2 * bt,\r\n        0,\r\n        0,\r\n        0,\r\n        0,\r\n        2 * nf,\r\n        0,\r\n        (left + right) * lr,\r\n        (top + bottom) * bt,\r\n        (far + near) * nf,\r\n        1\r\n    );\r\n}\r\n", "import { IVertexAttribPointer } from './IVertexAttribPointer';\r\nimport { gl } from '../GL';\r\n\r\nexport function CreateAttributes (program: WebGLProgram, config: Object): Map<string, IVertexAttribPointer>\r\n{\r\n    const attributes = new Map();\r\n\r\n    const defaultSettings =\r\n    {\r\n        size: 1,\r\n        type: gl.FLOAT,\r\n        normalized: false,\r\n        stride: 0,\r\n        offset: 0\r\n    };\r\n\r\n    const total = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);\r\n\r\n    for (let i = 0; i < total; i++)\r\n    {\r\n        const attrib = gl.getActiveAttrib(program, i);\r\n\r\n        if (!attrib)\r\n        {\r\n            break;\r\n        }\r\n\r\n        const name = attrib.name;\r\n\r\n        const index = gl.getAttribLocation(program, name);\r\n\r\n        gl.enableVertexAttribArray(index);\r\n\r\n        const setting = config.hasOwnProperty(name) ? config[name] : {};\r\n\r\n        const {\r\n\r\n            size = defaultSettings.size,\r\n            type = defaultSettings.type,\r\n            normalized = defaultSettings.normalized,\r\n            stride = defaultSettings.stride,\r\n            offset = defaultSettings.offset\r\n\r\n        } = setting;\r\n\r\n        attributes.set(name, { index, size, type, normalized, stride, offset });\r\n    }\r\n\r\n    return attributes;\r\n}\r\n", "import { gl } from '../GL';\r\n\r\nexport function DeleteShaders (...shaders: WebGLShader[]): void\r\n{\r\n    shaders.forEach(shader =>\r\n    {\r\n        gl.deleteShader(shader);\r\n    });\r\n}\r\n", "import { DeleteShaders } from './DeleteShaders';\r\nimport { gl } from '../GL';\r\n\r\nexport function CreateProgram (...shaders: WebGLShader[]): WebGLProgram\r\n{\r\n    const program = gl.createProgram();\r\n\r\n    shaders.forEach(shader =>\r\n    {\r\n        gl.attachShader(program, shader);\r\n    });\r\n\r\n    gl.linkProgram(program);\r\n\r\n    const status = gl.getProgramParameter(program, gl.LINK_STATUS);\r\n\r\n    if (!status)\r\n    {\r\n        const info = gl.getProgramInfoLog(program);\r\n\r\n        console.error(`Error linking program: ${info}`);\r\n\r\n        gl.deleteProgram(program);\r\n\r\n        DeleteShaders(...shaders);\r\n\r\n        return null;\r\n    }\r\n\r\n    return program;\r\n}\r\n", "import { gl } from '../GL';\r\n\r\nexport function CreateShader (source: string, type: GLenum): WebGLShader | null\r\n{\r\n    const shader = gl.createShader(type);\r\n\r\n    gl.shaderSource(shader, source);\r\n\r\n    gl.compileShader(shader);\r\n\r\n    const status = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\r\n\r\n    if (!status)\r\n    {\r\n        const info = gl.getShaderInfoLog(shader);\r\n\r\n        //  Adding line numbers idea borrowed from Gregg Tavares!\r\n        const sourceLines = source.split('\\n').map((line, index) =>\r\n        {\r\n            return `${index}: ${line}`;\r\n        });\r\n\r\n        console.error(`Error compiling shader: ${info}`, sourceLines.join('\\n'));\r\n\r\n        gl.deleteShader(shader);\r\n\r\n        return null;\r\n    }\r\n\r\n    return shader;\r\n}\r\n", "import { gl } from '../GL';\r\n\r\nexport type FloatSetter = (v: number) => void;\r\nexport type F32Setter = (v: Float32List) => void;\r\nexport type I32Setter = (v: Int32List) => void;\r\n\r\nexport function CreateUniformSetter (uniform: WebGLActiveInfo, location: WebGLUniformLocation, isArray: boolean = false): FloatSetter | F32Setter | I32Setter\r\n{\r\n    switch (uniform.type)\r\n    {\r\n        case gl.INT:\r\n        case gl.BOOL:\r\n        {\r\n            if (isArray)\r\n            {\r\n                return (v: Int32List): void =>\r\n                {\r\n                    gl.uniform1iv(location, v);\r\n                };\r\n            }\r\n            else\r\n            {\r\n                return (v: number): void =>\r\n                {\r\n                    gl.uniform1i(location, v);\r\n                };\r\n            }\r\n        }\r\n\r\n        case gl.INT_VEC2:\r\n        case gl.BOOL_VEC2:\r\n        {\r\n            return (v: Int32List): void =>\r\n            {\r\n                gl.uniform2iv(location, v);\r\n            };\r\n        }\r\n\r\n        case gl.INT_VEC3:\r\n        case gl.BOOL_VEC3:\r\n        {\r\n            return (v: Int32List): void =>\r\n            {\r\n                gl.uniform3iv(location, v);\r\n            };\r\n        }\r\n\r\n        case gl.INT_VEC4:\r\n        case gl.BOOL_VEC4:\r\n        {\r\n            return (v: Int32List): void =>\r\n            {\r\n                gl.uniform4iv(location, v);\r\n            };\r\n        }\r\n\r\n        case gl.FLOAT:\r\n        {\r\n            if (isArray)\r\n            {\r\n                return (v: Float32List): void =>\r\n                {\r\n                    gl.uniform1fv(location, v);\r\n                };\r\n            }\r\n            else\r\n            {\r\n                return (v: number): void =>\r\n                {\r\n                    gl.uniform1f(location, v);\r\n                };\r\n            }\r\n        }\r\n\r\n        case gl.FLOAT_VEC2:\r\n        {\r\n            return (v: Float32List): void =>\r\n            {\r\n                gl.uniform2fv(location, v);\r\n            };\r\n        }\r\n\r\n        case gl.FLOAT_VEC3:\r\n        {\r\n            return (v: Float32List): void =>\r\n            {\r\n                gl.uniform3fv(location, v);\r\n            };\r\n        }\r\n\r\n        case gl.FLOAT_VEC4:\r\n        {\r\n            return (v: Float32List): void =>\r\n            {\r\n                gl.uniform4fv(location, v);\r\n            };\r\n        }\r\n\r\n        case gl.FLOAT_MAT2:\r\n        {\r\n            return (v: Float32List): void =>\r\n            {\r\n                gl.uniformMatrix2fv(location, false, v);\r\n            };\r\n        }\r\n\r\n        case gl.FLOAT_MAT3:\r\n        {\r\n            return (v: Float32List): void =>\r\n            {\r\n                gl.uniformMatrix3fv(location, false, v);\r\n            };\r\n        }\r\n\r\n        case gl.FLOAT_MAT4:\r\n        {\r\n            return (v: Float32List): void =>\r\n            {\r\n                gl.uniformMatrix4fv(location, false, v);\r\n            };\r\n        }\r\n\r\n        case gl.SAMPLER_2D:\r\n        case gl.SAMPLER_CUBE:\r\n        {\r\n            if (uniform.size > 1)\r\n            {\r\n                return (v: Int32List): void =>\r\n                {\r\n                    gl.uniform1iv(location, v);\r\n                };\r\n            }\r\n            else\r\n            {\r\n                return (v: number): void =>\r\n                {\r\n                    gl.uniform1i(location, v);\r\n                };\r\n            }\r\n        }\r\n    }\r\n}\r\n", "import { CreateUniformSetter } from './CreateUniformSetter';\r\nimport { gl } from '../GL';\r\n\r\nexport function CreateUniforms (program: WebGLProgram): Map<string, Function>\r\n{\r\n    const uniforms = new Map();\r\n\r\n    const total = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);\r\n\r\n    for (let i = 0; i < total; i++)\r\n    {\r\n        const uniform = gl.getActiveUniform(program, i);\r\n\r\n        let name = uniform.name;\r\n\r\n        if (name.startsWith('gl_') || name.startsWith('webgl_'))\r\n        {\r\n            //  Skip built-in uniforms\r\n            continue;\r\n        }\r\n\r\n        const location = gl.getUniformLocation(program, uniform.name);\r\n\r\n        if (location)\r\n        {\r\n            let isArray = false;\r\n\r\n            //  If uniform name has [0] at the end, remove it\r\n            if (name.substr(-3) === '[0]')\r\n            {\r\n                name = name.substr(0, name.length - 3);\r\n\r\n                isArray = (uniform.size > 1);\r\n            }\r\n\r\n            uniforms.set(name, CreateUniformSetter(uniform, location, isArray));\r\n        }\r\n    }\r\n\r\n    return uniforms;\r\n}\r\n", "const BYTE                   = 0x1400;\r\nconst UNSIGNED_BYTE          = 0x1401;\r\nconst SHORT                  = 0x1402;\r\nconst UNSIGNED_SHORT         = 0x1403;\r\nconst INT                    = 0x1404;\r\nconst UNSIGNED_INT           = 0x1405;\r\nconst FLOAT                  = 0x1406;\r\nconst REPEAT                 = 0x2901;  // eslint-disable-line\r\nconst CLAMP_TO_EDGE          = 0x812F;\r\nconst MIRRORED_REPEAT        = 0x8370;  // eslint-disable-line\r\nconst NEAREST                = 0x2600;  // eslint-disable-line\r\nconst LINEAR                 = 0x2601;\r\nconst NEAREST_MIPMAP_NEAREST = 0x2700;  // eslint-disable-line\r\nconst LINEAR_MIPMAP_NEAREST  = 0x2701;  // eslint-disable-line\r\nconst NEAREST_MIPMAP_LINEAR  = 0x2702;  // eslint-disable-line\r\nconst LINEAR_MIPMAP_LINEAR   = 0x2703;  // eslint-disable-line\r\n\r\nexport {\r\n    BYTE,\r\n    UNSIGNED_BYTE,\r\n    SHORT,\r\n    UNSIGNED_SHORT,\r\n    INT,\r\n    UNSIGNED_INT,\r\n    FLOAT,\r\n    REPEAT,\r\n    CLAMP_TO_EDGE,\r\n    MIRRORED_REPEAT,\r\n    NEAREST,\r\n    LINEAR,\r\n    NEAREST_MIPMAP_NEAREST,\r\n    LINEAR_MIPMAP_NEAREST,\r\n    NEAREST_MIPMAP_LINEAR,\r\n    LINEAR_MIPMAP_LINEAR\r\n};\r\n", "import * as GL_CONST from '../GL_CONST';\r\n\r\n// size = 8\r\n// size = 8, offset = position\r\n// size = 4, offset = position + tex coord\r\n// size = 4, offset = position + tex coord + index\r\n\r\nexport const DefaultQuadAttributes =\r\n{\r\n    aVertexPosition: { size: 2, type: GL_CONST.FLOAT, normalized: false, offset: 0 },\r\n    aTextureCoord: { size: 2, type: GL_CONST.FLOAT, normalized: false, offset: 8 },\r\n    aTextureId: { size: 1, type: GL_CONST.FLOAT, normalized: false, offset: 16 },\r\n    aTintColor: { size: 4, type: GL_CONST.UNSIGNED_BYTE, normalized: true, offset: 20 }\r\n};\r\n", "export const DefaultQuadUniforms =\r\n{\r\n    uProjectionMatrix: new Float32Array(),\r\n    uCameraMatrix: new Float32Array(),\r\n    uTexture: 0\r\n};\r\n", "import { gl } from '../GL';\r\n\r\nexport function CreateDepthBuffer (framebuffer: WebGLFramebuffer, textureWidth: number, textureHeight: number): WebGLRenderbuffer\r\n{\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\r\n\r\n    const depthBuffer = gl.createRenderbuffer();\r\n\r\n    gl.bindRenderbuffer(gl.RENDERBUFFER, depthBuffer);\r\n\r\n    gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, textureWidth, textureHeight);\r\n\r\n    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, depthBuffer);\r\n\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n\r\n    return depthBuffer;\r\n}\r\n", "import { gl } from '../GL';\r\n\r\nexport function CreateFramebuffer (texture: WebGLTexture, attachment?: GLenum): WebGLFramebuffer\r\n{\r\n    if (!attachment)\r\n    {\r\n        attachment = gl.COLOR_ATTACHMENT0;\r\n    }\r\n\r\n    const framebuffer = gl.createFramebuffer();\r\n\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\r\n\r\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, attachment, gl.TEXTURE_2D, texture, 0);\r\n\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n\r\n    return framebuffer;\r\n}\r\n", "export const SINGLE_QUAD_FRAG =\r\n`#define SHADER_NAME SINGLE_QUAD_FRAG\r\n\r\nprecision highp float;\r\n\r\nvarying vec2 vTextureCoord;\r\nvarying float vTextureId;\r\nvarying vec4 vTintColor;\r\n\r\nuniform sampler2D uTexture;\r\n\r\nvoid main (void)\r\n{\r\n    vec4 color = texture2D(uTexture, vTextureCoord);\r\n\r\n    gl_FragColor = color * vec4(vTintColor.bgr * vTintColor.a, vTintColor.a);\r\n}`;\r\n", "export const SINGLE_QUAD_VERT =\r\n`#define SHADER_NAME SINGLE_QUAD_VERT\r\n\r\nprecision highp float;\r\n\r\nattribute vec2 aVertexPosition;\r\nattribute vec2 aTextureCoord;\r\nattribute float aTextureId;\r\nattribute vec4 aTintColor;\r\n\r\nuniform mat4 uProjectionMatrix;\r\nuniform mat4 uCameraMatrix;\r\n\r\nvarying vec2 vTextureCoord;\r\nvarying float vTextureId;\r\nvarying vec4 vTintColor;\r\n\r\nvoid main (void)\r\n{\r\n    vTextureCoord = aTextureCoord;\r\n    vTextureId = aTextureId;\r\n    vTintColor = aTintColor;\r\n\r\n    gl_Position = uProjectionMatrix * uCameraMatrix * vec4(aVertexPosition, 0.0, 1.0);\r\n}`;\r\n", "export const TYPES_ENUM = {\r\n  i8: 'i8',\r\n  ui8: 'ui8',\r\n  ui8c: 'ui8c',\r\n  i16: 'i16',\r\n  ui16: 'ui16',\r\n  i32: 'i32',\r\n  ui32: 'ui32',\r\n  f32: 'f32',\r\n  f64: 'f64'\r\n}\r\n\r\nexport const TYPES_NAMES = {\r\n  i8: 'Int8',\r\n  ui8: 'Uint8',\r\n  ui8c: 'Uint8Clamped',\r\n  i16: 'Int16',\r\n  ui16: 'Uint16',\r\n  i32: 'Int32',\r\n  ui32: 'Uint32',\r\n  f32: 'Float32',\r\n  f64: 'Float64'\r\n}\r\n\r\nexport const TYPES = {\r\n  i8: Int8Array,\r\n  ui8: Uint8Array,\r\n  ui8c: Uint8ClampedArray,\r\n  i16: Int16Array,\r\n  ui16: Uint16Array,\r\n  i32: Int32Array,\r\n  ui32: Uint32Array,\r\n  f32: Float32Array,\r\n  f64: Float64Array\r\n}\r\n\r\nconst UNSIGNED_MAX = {\r\n  uint8: 2**8,\r\n  uint16: 2**16,\r\n  uint32: 2**32\r\n}\r\n\r\nconst roundToMultiple4 = x => Math.ceil(x / 4) * 4\r\n\r\nexport const $storeRef = Symbol('storeRef')\r\nexport const $storeSize = Symbol('storeSize')\r\nexport const $storeMaps = Symbol('storeMaps')\r\nexport const $storeFlattened = Symbol('storeFlattened')\r\nexport const $storeBase = Symbol('storeBase')\r\nexport const $storeType = Symbol('storeType')\r\n\r\nexport const $storeArrayCounts = Symbol('storeArrayCount')\r\nexport const $storeSubarrays = Symbol('storeSubarrays')\r\nexport const $storeCursor = Symbol('storeCursor')\r\nexport const $subarrayCursors = Symbol('subarrayCursors')\r\nexport const $subarray = Symbol('subarray')\r\nexport const $parentArray = Symbol('subStore')\r\nexport const $tagStore = Symbol('tagStore')\r\n\r\nexport const $queryShadow = Symbol('queryShadow')\r\nexport const $serializeShadow = Symbol('serializeShadow')\r\n\r\nexport const $indexType = Symbol('indexType')\r\nexport const $indexBytes = Symbol('indexBytes')\r\n\r\nconst stores = {}\r\n\r\nexport const resize = (ta, size) => {\r\n  const newBuffer = new ArrayBuffer(size * ta.BYTES_PER_ELEMENT)\r\n  const newTa = new ta.constructor(newBuffer)\r\n  newTa.set(ta, 0)\r\n  return newTa\r\n}\r\n\r\nconst resizeSubarray = (metadata, store, size) => {\r\n  const cursors = metadata[$subarrayCursors]\r\n  const type = store[$storeType]\r\n  const length = store[0].length\r\n  const indexType =\r\n    length <= UNSIGNED_MAX.uint8\r\n      ? 'ui8'\r\n      : length <= UNSIGNED_MAX.uint16\r\n        ? 'ui16'\r\n        : 'ui32'\r\n        \r\n  const arrayCount = metadata[$storeArrayCounts][type]\r\n  const summedLength = Array(arrayCount).fill(0).reduce((a, p) => a + length, 0)\r\n  \r\n  // for threaded impl\r\n  // const summedBytesPerElement = Array(arrayCount).fill(0).reduce((a, p) => a + TYPES[type].BYTES_PER_ELEMENT, 0)\r\n  // const totalBytes = roundToMultiple4(summedBytesPerElement * summedLength * size)\r\n  // const buffer = new ArrayBuffer(totalBytes)\r\n\r\n  const array = new TYPES[type](summedLength * size)\r\n\r\n  array.set(metadata[$storeSubarrays][type])\r\n  \r\n  metadata[$storeSubarrays][type] = array\r\n  metadata[$storeSubarrays][type][$queryShadow] = array.slice(0)\r\n  metadata[$storeSubarrays][type][$serializeShadow] = array.slice(0)\r\n  \r\n  array[$indexType] = TYPES_NAMES[indexType]\r\n  array[$indexBytes] = TYPES[indexType].BYTES_PER_ELEMENT\r\n\r\n  const start = cursors[type]\r\n  let end = 0\r\n  for (let eid = 0; eid < size; eid++) {\r\n    const from = cursors[type] + (eid * length)\r\n    const to = from + length\r\n\r\n    store[eid] = metadata[$storeSubarrays][type].subarray(from, to)\r\n    \r\n    store[eid].from = from\r\n    store[eid].to = to\r\n    store[eid][$queryShadow] = metadata[$storeSubarrays][type][$queryShadow].subarray(from, to)\r\n    store[eid][$serializeShadow] = metadata[$storeSubarrays][type][$serializeShadow].subarray(from, to)\r\n    store[eid][$subarray] = true\r\n    store[eid][$indexType] = array[$indexType]\r\n    store[eid][$indexBytes] = array[$indexBytes]\r\n    \r\n    end = to\r\n  }\r\n\r\n  cursors[type] = end\r\n\r\n  store[$parentArray] = metadata[$storeSubarrays][type].subarray(start, end)\r\n}\r\n\r\nconst resizeRecursive = (metadata, store, size) => {\r\n  Object.keys(store).forEach(key => {\r\n    const ta = store[key]\r\n    if (Array.isArray(ta)) {\r\n      resizeSubarray(metadata, ta, size)\r\n      store[$storeFlattened].push(ta)\r\n    } else if (ArrayBuffer.isView(ta)) {\r\n      store[key] = resize(ta, size)\r\n      store[$storeFlattened].push(store[key])\r\n      store[key][$queryShadow] = resize(ta[$queryShadow], size)\r\n      store[key][$serializeShadow] = resize(ta[$serializeShadow], size)\r\n    } else if (typeof ta === 'object') {\r\n      resizeRecursive(metadata, store[key], size)\r\n    }\r\n  })\r\n}\r\n\r\nexport const resizeStore = (store, size) => {\r\n  if (store[$tagStore]) return\r\n  store[$storeSize] = size\r\n  store[$storeFlattened].length = 0\r\n  Object.keys(store[$subarrayCursors]).forEach(k => {\r\n    store[$subarrayCursors][k] = 0\r\n  })\r\n  resizeRecursive(store, store, size)\r\n}\r\n\r\nexport const resetStore = store => {\r\n  if (store[$storeFlattened]) {\r\n    store[$storeFlattened].forEach(ta => {\r\n      ta.fill(0)\r\n    })\r\n    Object.keys(store[$storeSubarrays]).forEach(key => {\r\n      store[$storeSubarrays][key].fill(0)\r\n    })\r\n  }\r\n}\r\n\r\nexport const resetStoreFor = (store, eid) => {\r\n  if (store[$storeFlattened]) {\r\n    store[$storeFlattened].forEach(ta => {\r\n      if (ArrayBuffer.isView(ta)) ta[eid] = 0\r\n      else ta[eid].fill(0)\r\n    })\r\n  }\r\n}\r\n\r\nconst createTypeStore = (type, length) => {\r\n  const totalBytes = length * TYPES[type].BYTES_PER_ELEMENT\r\n  const buffer = new ArrayBuffer(totalBytes)\r\n  return new TYPES[type](buffer)\r\n}\r\n\r\nexport const parentArray = store => store[$parentArray]\r\n\r\nconst createArrayStore = (metadata, type, length) => {\r\n  const size = metadata[$storeSize]\r\n  const store = Array(size).fill(0)\r\n  store[$storeType] = type\r\n\r\n  const cursors = metadata[$subarrayCursors]\r\n  const indexType =\r\n    length < UNSIGNED_MAX.uint8\r\n      ? 'ui8'\r\n      : length < UNSIGNED_MAX.uint16\r\n        ? 'ui16'\r\n        : 'ui32'\r\n\r\n  if (!length) throw new Error('\u274C Must define a length for component array.')\r\n  if (!TYPES[type]) throw new Error(`\u274C Invalid component array property type ${type}.`)\r\n\r\n  // create buffer for type if it does not already exist\r\n  if (!metadata[$storeSubarrays][type]) {\r\n    const arrayCount = metadata[$storeArrayCounts][type]\r\n    const summedLength = Array(arrayCount).fill(0).reduce((a, p) => a + length, 0)\r\n    \r\n    // for threaded impl\r\n    // const summedBytesPerElement = Array(arrayCount).fill(0).reduce((a, p) => a + TYPES[type].BYTES_PER_ELEMENT, 0)\r\n    // const totalBytes = roundToMultiple4(summedBytesPerElement * summedLength * size)\r\n    // const buffer = new ArrayBuffer(totalBytes)\r\n\r\n    const array = new TYPES[type](summedLength * size)\r\n\r\n    metadata[$storeSubarrays][type] = array\r\n    metadata[$storeSubarrays][type][$queryShadow] = array.slice(0)\r\n    metadata[$storeSubarrays][type][$serializeShadow] = array.slice(0)\r\n    \r\n    array[$indexType] = TYPES_NAMES[indexType]\r\n    array[$indexBytes] = TYPES[indexType].BYTES_PER_ELEMENT\r\n  }\r\n\r\n  // pre-generate subarrays for each eid\r\n  const start = cursors[type]\r\n  let end = 0\r\n  for (let eid = 0; eid < size; eid++) {\r\n    const from = cursors[type] + (eid * length)\r\n    const to = from + length\r\n\r\n    store[eid] = metadata[$storeSubarrays][type].subarray(from, to)\r\n    \r\n    store[eid].from = from\r\n    store[eid].to = to\r\n    store[eid][$queryShadow] = metadata[$storeSubarrays][type][$queryShadow].subarray(from, to)\r\n    store[eid][$serializeShadow] = metadata[$storeSubarrays][type][$serializeShadow].subarray(from, to)\r\n    store[eid][$subarray] = true\r\n    store[eid][$indexType] = TYPES_NAMES[indexType]\r\n    store[eid][$indexBytes] = TYPES[indexType].BYTES_PER_ELEMENT\r\n    \r\n    end = to\r\n  }\r\n\r\n  cursors[type] = end\r\n\r\n  store[$parentArray] = metadata[$storeSubarrays][type].subarray(start, end)\r\n\r\n  return store\r\n}\r\n\r\nconst createShadows = (store) => {\r\n  store[$queryShadow] = store.slice(0)\r\n  store[$serializeShadow] = store.slice(0)\r\n}\r\n\r\nconst isArrayType = x => Array.isArray(x) && typeof x[0] === 'string' && typeof x[1] === 'number'\r\n\r\nexport const createStore = (schema, size) => {\r\n  const $store = Symbol('store')\r\n\r\n  if (!schema || !Object.keys(schema).length) {\r\n    // tag component\r\n    stores[$store] = {\r\n      [$storeSize]: size,\r\n      [$tagStore]: true,\r\n      [$storeBase]: () => stores[$store]\r\n    }\r\n    return stores[$store]\r\n  }\r\n\r\n  schema = JSON.parse(JSON.stringify(schema))\r\n\r\n  const arrayCounts = {}\r\n  const collectArrayCounts = s => {\r\n    const keys = Object.keys(s)\r\n    for (const k of keys) {\r\n      if (isArrayType(s[k])) {\r\n        if (!arrayCounts[s[k][0]]) arrayCounts[s[k][0]] = 0\r\n        arrayCounts[s[k][0]]++\r\n      } else if (s[k] instanceof Object) {\r\n        collectArrayCounts(s[k])\r\n      }\r\n    }\r\n  }\r\n  collectArrayCounts(schema)\r\n\r\n  const metadata = {\r\n    [$storeSize]: size,\r\n    [$storeMaps]: {},\r\n    [$storeSubarrays]: {},\r\n    [$storeRef]: $store,\r\n    [$storeCursor]: 0,\r\n    [$subarrayCursors]: Object.keys(TYPES).reduce((a, type) => ({ ...a, [type]: 0 }), {}),\r\n    [$storeFlattened]: [],\r\n    [$storeArrayCounts]: arrayCounts\r\n  }\r\n\r\n  if (schema instanceof Object && Object.keys(schema).length) {\r\n\r\n    const recursiveTransform = (a, k) => {\r\n\r\n      if (typeof a[k] === 'string') {\r\n\r\n        a[k] = createTypeStore(a[k], size)\r\n        createShadows(a[k])\r\n        a[k][$storeBase] = () => stores[$store]\r\n        metadata[$storeFlattened].push(a[k])\r\n\r\n      } else if (isArrayType(a[k])) {\r\n        \r\n        const [type, length] = a[k]\r\n        a[k] = createArrayStore(metadata, type, length)\r\n        a[k][$storeBase] = () => stores[$store]\r\n        metadata[$storeFlattened].push(a[k])\r\n        // Object.seal(a[k])\r\n\r\n      } else if (a[k] instanceof Object) {\r\n        \r\n        a[k] = Object.keys(a[k]).reduce(recursiveTransform, a[k])\r\n        // Object.seal(a[k])\r\n        \r\n      }\r\n\r\n      return a\r\n    }\r\n\r\n    stores[$store] = Object.assign(Object.keys(schema).reduce(recursiveTransform, schema), metadata)\r\n    stores[$store][$storeBase] = () => stores[$store]\r\n\r\n    // Object.seal(stores[$store])\r\n\r\n    return stores[$store]\r\n\r\n  }\r\n}\r\n\r\nexport const free = (store) => {\r\n  delete stores[store[$storeRef]]\r\n}", "export const Uint32SparseSet = (length) => {\r\n  const dense = []\r\n  const sparse = new Uint32Array(length).fill(2**32-1)\r\n\r\n  const has = val => dense[sparse[val]] === val\r\n\r\n  const add = val => {\r\n    if (has(val)) return\r\n    sparse[val] = dense.push(val) - 1\r\n  }\r\n\r\n  const remove = val => {\r\n    if (!has(val)) return\r\n    const index = sparse[val]\r\n    const swapped = dense.pop()\r\n    if (swapped !== val) {\r\n      dense[index] = swapped\r\n      sparse[swapped] = index\r\n    }\r\n  }\r\n\r\n  return {\r\n    add,\r\n    remove,\r\n    has,\r\n    sparse,\r\n    dense,\r\n  }\r\n}\r\n\r\nexport const SparseSet = () => {\r\n  const dense = []\r\n  const sparse = []\r\n\r\n  const has = val => dense[sparse[val]] === val\r\n\r\n  const add = val => {\r\n    if (has(val)) return\r\n    sparse[val] = dense.push(val) - 1\r\n  }\r\n\r\n  const remove = val => {\r\n    if (!has(val)) return\r\n    const index = sparse[val]\r\n    const swapped = dense.pop()\r\n    if (swapped !== val) {\r\n      dense[index] = swapped\r\n      sparse[swapped] = index\r\n    }\r\n  }\r\n\r\n  return {\r\n    add,\r\n    remove,\r\n    has,\r\n    sparse,\r\n    dense,\r\n  }\r\n}", "import { $indexBytes, $indexType, $serializeShadow, $storeBase, $storeFlattened, $tagStore } from \"./Storage.js\"\r\nimport { $componentMap, addComponent, hasComponent } from \"./Component.js\"\r\nimport { $entityArray, $entityEnabled, $entitySparseSet, addEntity, eidToWorld } from \"./Entity.js\"\r\n\r\nlet resized = false\r\n\r\nexport const setSerializationResized = v => { resized = v }\r\n\r\nconst canonicalize = (target) => {\r\n  let componentProps = []\r\n  let changedProps = new Set()\r\n  if (Array.isArray(target)) {\r\n    componentProps = target\r\n      .map(p => {\r\n        if (typeof p === 'function' && p.name === 'QueryChanged') {\r\n          p()[$storeFlattened].forEach(prop => {\r\n            changedProps.add(prop)\r\n          })\r\n          return p()[$storeFlattened]\r\n        }\r\n        if (Object.getOwnPropertySymbols(p).includes($storeFlattened)) {\r\n          return p[$storeFlattened]\r\n        }\r\n        if (Object.getOwnPropertySymbols(p).includes($storeBase)) {\r\n          return p\r\n        }\r\n      })\r\n      .reduce((a,v) => a.concat(v), [])\r\n  }\r\n  return [componentProps, changedProps]\r\n}\r\n\r\nexport const defineSerializer = (target, maxBytes = 20000000) => {\r\n  const isWorld = Object.getOwnPropertySymbols(target).includes($componentMap)\r\n\r\n  let [componentProps, changedProps] = canonicalize(target)\r\n\r\n  // TODO: calculate max bytes based on target\r\n\r\n  const buffer = new ArrayBuffer(maxBytes)\r\n  const view = new DataView(buffer)\r\n\r\n  return (ents) => {\r\n\r\n    if (resized) {\r\n      [componentProps, changedProps] = canonicalize(target)\r\n      resized = false\r\n    }\r\n\r\n    if (isWorld) {\r\n      componentProps = []\r\n      target[$componentMap].forEach((c, component) => {\r\n        if (component[$storeFlattened])\r\n          componentProps.push(...component[$storeFlattened])\r\n        else componentProps.push(component)\r\n      })\r\n    }\r\n    \r\n    let world\r\n    if (Object.getOwnPropertySymbols(ents).includes($componentMap)) {\r\n      world = ents\r\n      ents = ents[$entityArray]\r\n    } else {\r\n      world = eidToWorld.get(ents[0])\r\n    }\r\n\r\n    if (!ents.length) return\r\n\r\n    let where = 0\r\n\r\n    // iterate over component props\r\n    for (let pid = 0; pid < componentProps.length; pid++) {\r\n      const prop = componentProps[pid]\r\n      const diff = changedProps.has(prop)\r\n      \r\n      // write pid\r\n      view.setUint8(where, pid)\r\n      where += 1\r\n\r\n      // save space for entity count\r\n      const countWhere = where\r\n      where += 4\r\n      \r\n      let count = 0\r\n      // write eid,val\r\n      for (let i = 0; i < ents.length; i++) {\r\n        const eid = ents[i]\r\n\r\n        // skip if entity doesn't have this component\r\n        if (!hasComponent(world, prop[$storeBase](), eid)) {\r\n          continue\r\n        }\r\n\r\n        // skip if diffing and no change\r\n        if (diff && prop[eid] === prop[$serializeShadow][eid]) {\r\n          continue\r\n        }\r\n        \r\n        count++\r\n\r\n        // write eid\r\n        view.setUint32(where, eid)\r\n        where += 4\r\n\r\n        if (prop[$tagStore]) {\r\n          continue\r\n        }\r\n\r\n        // if property is an array\r\n        if (ArrayBuffer.isView(prop[eid])) {\r\n          const type = prop[eid].constructor.name.replace('Array', '')\r\n          const indexType = prop[eid][$indexType]\r\n          const indexBytes = prop[eid][$indexBytes]\r\n\r\n          // add space for count of dirty array elements\r\n          const countWhere2 = where\r\n          where += 1\r\n\r\n          let count2 = 0\r\n\r\n          // write index,value\r\n          for (let i = 0; i < prop[eid].length; i++) {\r\n            const value = prop[eid][i]\r\n\r\n            if (diff && prop[eid][i] === prop[eid][$serializeShadow][i]) {\r\n              continue\r\n            }\r\n\r\n            // write array index\r\n            view[`set${indexType}`](where, i)\r\n            where += indexBytes\r\n\r\n            // write value at that index\r\n            view[`set${type}`](where, value)\r\n            where += prop[eid].BYTES_PER_ELEMENT\r\n            count2++\r\n          }\r\n\r\n          // write total element count\r\n          view[`set${indexType}`](countWhere2, count2)\r\n\r\n        } else {\r\n          // regular property values\r\n          const type = prop.constructor.name.replace('Array', '')\r\n          // set value next [type] bytes\r\n          view[`set${type}`](where, prop[eid])\r\n          where += prop.BYTES_PER_ELEMENT\r\n\r\n          // sync shadow state\r\n          prop[$serializeShadow][eid] = prop[eid]\r\n        }\r\n      }\r\n\r\n      view.setUint32(countWhere, count)\r\n    }\r\n    return buffer.slice(0, where)\r\n  }\r\n}\r\n\r\nconst newEntities = new Map()\r\n\r\nexport const defineDeserializer = (target) => {\r\n  const isWorld = Object.getOwnPropertySymbols(target).includes($componentMap)\r\n  let [componentProps] = canonicalize(target)\r\n  return (world, packet, overwrite=true) => {\r\n\r\n    newEntities.clear()\r\n    \r\n    if (resized) {\r\n      [componentProps] = canonicalize(target)\r\n      resized = false\r\n    }\r\n\r\n    if (isWorld) {\r\n      componentProps = []\r\n      target[$componentMap].forEach((c, component) => {\r\n        if (component[$storeFlattened])\r\n          componentProps.push(...component[$storeFlattened])\r\n        else componentProps.push(component)\r\n      })\r\n    }\r\n\r\n    const view = new DataView(packet)\r\n    let where = 0\r\n\r\n    while (where < packet.byteLength) {\r\n\r\n      // pid\r\n      const pid = view.getUint8(where)\r\n      where += 1\r\n\r\n      // entity count\r\n      const entityCount = view.getUint32(where)\r\n      where += 4\r\n\r\n      // component property\r\n      const prop = componentProps[pid]\r\n\r\n      // Get the entities and set their prop values\r\n      for (let i = 0; i < entityCount; i++) {\r\n        let eid = view.getUint32(where)\r\n        where += 4\r\n\r\n        let newEid = newEntities.get(eid)\r\n        if (newEid !== undefined) {\r\n          eid = newEid\r\n        }\r\n\r\n        // if this world hasn't seen this eid yet, or if not overwriting\r\n        if (!world[$entitySparseSet].has(eid) || !overwrite) {\r\n          // make a new entity for the data\r\n          const newEid = addEntity(world)\r\n          newEntities.set(eid, newEid)\r\n          eid = newEid\r\n        }\r\n\r\n        const component = prop[$storeBase]()\r\n        if (!hasComponent(world, component, eid)) {\r\n          addComponent(world, component, eid)\r\n        }\r\n\r\n        if (component[$tagStore]) {\r\n          continue\r\n        }\r\n        \r\n        if (ArrayBuffer.isView(prop[eid])) {\r\n          const array = prop[eid]\r\n          const count = view[`get${array[$indexType]}`](where)\r\n          where += array[$indexBytes]\r\n\r\n          // iterate over count\r\n          for (let i = 0; i < count; i++) {\r\n            const index = view[`get${array[$indexType]}`](where)\r\n            where += array[$indexBytes]\r\n\r\n            const value = view[`get${array.constructor.name.replace('Array', '')}`](where)\r\n            where += array.BYTES_PER_ELEMENT\r\n\r\n            prop[eid][index] = value\r\n          }\r\n        } else {\r\n          const value = view[`get${prop.constructor.name.replace('Array', '')}`](where)\r\n          where += prop.BYTES_PER_ELEMENT\r\n\r\n          prop[eid] = value\r\n        }\r\n      }\r\n    }\r\n  }\r\n}", "import { $componentMap, resizeComponents } from './Component.js'\r\nimport { $queries, $queryMap, queryRemoveEntity } from './Query.js'\r\nimport { resize, resizeStore } from './Storage.js'\r\nimport { $size, $resizeThreshold, worlds, resizeWorlds } from './World.js'\r\nimport { setSerializationResized } from './Serialize.js'\r\n\r\nexport const $entityMasks = Symbol('entityMasks')\r\nexport const $entityEnabled = Symbol('entityEnabled')\r\nexport const $entitySparseSet = Symbol('entitySparseSet')\r\nexport const $entityArray = Symbol('entityArray')\r\nexport const $entityIndices = Symbol('entityIndices')\r\nexport const $removedEntities = Symbol('removedEntities')\r\n\r\nlet defaultSize = 100000\r\n\r\n// need a global EID cursor which all worlds and all components know about\r\n// so that world entities can posess entire rows spanning all component tables\r\nlet globalEntityCursor = 0\r\nlet globalSize = defaultSize\r\nconst threshold = globalSize - (globalSize / 5)\r\nlet resizeThreshold = () => threshold\r\n\r\nexport const getGlobalSize = () => globalSize\r\n\r\n// removed eids should also be global to prevent memory leaks\r\nconst removed = []\r\n\r\nexport const resetGlobals = () => {\r\n  globalSize = defaultSize\r\n  globalEntityCursor = 0\r\n  removed.length = 0\r\n}\r\n\r\nexport const getDefaultSize = () => defaultSize\r\nexport const setDefaultSize = x => { \r\n  defaultSize = x\r\n  resetGlobals()\r\n}\r\n\r\nexport const getEntityCursor = () => globalEntityCursor\r\nexport const getRemovedEntities = () => removed\r\n\r\nexport const eidToWorld = new Map()\r\n\r\nexport const addEntity = (world) => {\r\n  \r\n  const eid = removed.length > 0 ? removed.shift() : globalEntityCursor++\r\n  world[$entitySparseSet].add(eid)\r\n  eidToWorld.set(eid, world)\r\n\r\n  // if data stores are 80% full\r\n  if (globalEntityCursor >= resizeThreshold()) {\r\n    // grow by half the original size rounded up to a multiple of 4\r\n    const size = globalSize\r\n    const amount = Math.ceil((size/2) / 4) * 4\r\n    const newSize = size + amount\r\n    globalSize = newSize\r\n    resizeWorlds(newSize)\r\n    resizeComponents(newSize)\r\n    setSerializationResized(true)\r\n    console.info(`\uD83D\uDC7E bitECS - resizing all worlds from ${size} to ${size+amount}`)\r\n  }\r\n\r\n  return eid\r\n}\r\n\r\nexport const removeEntity = (world, eid) => {\r\n  // Check if entity is already removed\r\n  if (!world[$entitySparseSet].has(eid)) return\r\n\r\n  // Remove entity from all queries\r\n  // TODO: archetype graph\r\n  world[$queries].forEach(q => {\r\n    queryRemoveEntity(world, q, eid)\r\n  })\r\n\r\n  // Free the entity\r\n  removed.push(eid)\r\n\r\n  // pop swap\r\n  world[$entitySparseSet].remove(eid)\r\n\r\n  // Clear entity bitmasks\r\n  for (let i = 0; i < world[$entityMasks].length; i++) world[$entityMasks][i][eid] = 0\r\n}", "import { SparseSet, Uint32SparseSet } from './Util.js'\r\nimport { $queryShadow, $storeFlattened, $storeSize, $tagStore } from './Storage.js'\r\nimport { $componentMap, registerComponent } from './Component.js'\r\nimport { $entityMasks, $entityEnabled, $entityArray, getEntityCursor, getDefaultSize, $entitySparseSet } from './Entity.js'\r\n\r\nexport function Not(c) { return function QueryNot() { return c } }\r\nexport function Or(c) { return function QueryOr() { return c } }\r\nexport function Changed(c) { return function QueryChanged() { return c } }\r\n\r\nexport const $queries = Symbol('queries')\r\nexport const $queryMap = Symbol('queryMap')\r\nexport const $dirtyQueries = Symbol('$dirtyQueries')\r\nexport const $queryComponents = Symbol('queryComponents')\r\nexport const $enterQuery = Symbol('enterQuery')\r\nexport const $exitQuery = Symbol('exitQuery')\r\n\r\nexport const enterQuery = query => world => {\r\n  if (!world[$queryMap].has(query)) registerQuery(world, query)\r\n  const q = world[$queryMap].get(query)\r\n  return q.entered.splice(0)\r\n}\r\n\r\nexport const exitQuery = query => world => {\r\n  if (!world[$queryMap].has(query)) registerQuery(world, query)\r\n  const q = world[$queryMap].get(query)\r\n  return q.exited.splice(0)\r\n}\r\n\r\nexport const registerQuery = (world, query) => {\r\n\r\n  const components = []\r\n  const notComponents = []\r\n  const changedComponents = []\r\n\r\n  query[$queryComponents].forEach(c => {\r\n    if (typeof c === 'function') {\r\n      const comp = c()\r\n      if (!world[$componentMap].has(comp)) registerComponent(world, comp)\r\n      if (c.name === 'QueryNot') {\r\n        notComponents.push(comp)\r\n      }\r\n      if (c.name === 'QueryChanged') {\r\n        changedComponents.push(comp)\r\n        components.push(comp)\r\n      }\r\n    } else {\r\n      if (!world[$componentMap].has(c)) registerComponent(world, c)\r\n      components.push(c)\r\n    }\r\n  })\r\n\r\n  const mapComponents = c => world[$componentMap].get(c)\r\n\r\n  const sparseSet = SparseSet()\r\n  const archetypes = []\r\n  const changed = []\r\n  const toRemove = []\r\n  const entered = []\r\n  const exited = []\r\n\r\n  const generations = components\r\n    .concat(notComponents)\r\n    .map(mapComponents)\r\n    .map(c => c.generationId)\r\n    .reduce((a,v) => {\r\n      if (a.includes(v)) return a\r\n      a.push(v)\r\n      return a\r\n    }, [])\r\n\r\n  const reduceBitmasks = (a,c) => {\r\n    if (!a[c.generationId]) a[c.generationId] = 0\r\n    a[c.generationId] |= c.bitflag\r\n    return a\r\n  }\r\n  const masks = components\r\n    .map(mapComponents)\r\n    .reduce(reduceBitmasks, {})\r\n\r\n  const notMasks = notComponents\r\n    .map(mapComponents)\r\n    .reduce((a,c) => {\r\n      if (!a[c.generationId]) {\r\n        a[c.generationId] = 0\r\n        a[c.generationId] |= c.bitflag\r\n      }\r\n      return a\r\n    }, {})\r\n\r\n  // const orMasks = orComponents\r\n  //   .map(mapComponents)\r\n  //   .reduce(reduceBitmasks, {})\r\n\r\n  const flatProps = components\r\n    .filter(c => !c[$tagStore])\r\n    .map(c => Object.getOwnPropertySymbols(c).includes($storeFlattened) ? c[$storeFlattened] : [c])\r\n    .reduce((a,v) => a.concat(v), [])\r\n\r\n\r\n  const q = Object.assign(sparseSet, {\r\n    archetypes,\r\n    changed,\r\n    components,\r\n    notComponents,\r\n    changedComponents,\r\n    masks,\r\n    notMasks,\r\n    // orMasks,\r\n    generations,\r\n    flatProps,\r\n    toRemove,\r\n    entered,\r\n    exited,\r\n  })\r\n\r\n  world[$queryMap].set(query, q)\r\n  \r\n  world[$queries].add(q)\r\n\r\n  for (let eid = 0; eid < getEntityCursor(); eid++) {\r\n    if (!world[$entitySparseSet].has(eid)) continue\r\n    if (queryCheckEntity(world, q, eid)) {\r\n      queryAddEntity(world, q, eid)\r\n    }\r\n  }\r\n}\r\n\r\nconst diff = (q, clearDiff) => {\r\n  if (clearDiff) q.changed.length = 0\r\n  const flat = q.flatProps\r\n  for (let i = 0; i < q.dense.length; i++) {\r\n    const eid = q.dense[i]\r\n    let dirty = false\r\n    for (let pid = 0; pid < flat.length; pid++) {\r\n      const prop = flat[pid]\r\n      if (ArrayBuffer.isView(prop[eid])) {\r\n        for (let i = 0; i < prop[eid].length; i++) {\r\n          if (prop[eid][i] !== prop[eid][$queryShadow][i]) {\r\n            dirty = true\r\n            prop[eid][$queryShadow][i] = prop[eid][i]\r\n          }\r\n        }\r\n      } else {\r\n        if (prop[eid] !== prop[$queryShadow][eid]) {\r\n          dirty = true\r\n          prop[$queryShadow][eid] = prop[eid]\r\n        }\r\n      }\r\n    }\r\n    if (dirty) q.changed.push(eid)\r\n  }\r\n  return q.changed\r\n}\r\n\r\nexport const defineQuery = (components) => {\r\n  if (components === undefined || components[$componentMap] !== undefined) {\r\n    return world => world ? world[$entityArray] : components[$entityArray]\r\n  }\r\n\r\n  const query = function (world, clearDiff=true) {\r\n    if (!world[$queryMap].has(query)) registerQuery(world, query)\r\n\r\n    const q = world[$queryMap].get(query)\r\n\r\n    queryCommitRemovals(world, q)\r\n\r\n    if (q.changedComponents.length) return diff(q, clearDiff)\r\n\r\n    return q.dense\r\n  }\r\n  query[$queryComponents] = components\r\n  return query\r\n}\r\n\r\n// TODO: archetype graph\r\nexport const queryCheckEntity = (world, q, eid) => {\r\n  const { masks, notMasks, generations } = q\r\n  // let or = true\r\n  for (let i = 0; i < generations.length; i++) {\r\n    const generationId = generations[i]\r\n    const qMask = masks[generationId]\r\n    const qNotMask = notMasks[generationId]\r\n    // const qOrMask = orMasks[generationId]\r\n    const eMask = world[$entityMasks][generationId][eid]\r\n    \r\n    if (qNotMask && (eMask & qNotMask) !== 0) {\r\n      return false\r\n    }\r\n    // if (qOrMask && (eMask & qOrMask) !== qOrMask) {\r\n    //   continue\r\n    // }\r\n    if (qMask && (eMask & qMask) !== qMask) {\r\n      return false\r\n    }\r\n  }\r\n  return true\r\n}\r\n\r\nexport const queryCheckComponent = (world, q, component) => {\r\n  const { generationId, bitflag } = world[$componentMap].get(component)\r\n  const { masks } = q\r\n  const mask = masks[generationId]\r\n  return (mask & bitflag) === bitflag\r\n}\r\n\r\nexport const queryAddEntity = (world, q, eid) => {\r\n  if (q.has(eid)) return\r\n  q.add(eid)\r\n  q.entered.push(eid)\r\n}\r\n\r\nconst queryCommitRemovals = (world, q) => {\r\n  while (q.toRemove.length) {\r\n    q.remove(q.toRemove.pop())\r\n  }\r\n  world[$dirtyQueries].delete(q)\r\n}\r\n\r\nexport const commitRemovals = (world) => {\r\n  world[$dirtyQueries].forEach(q => {\r\n    queryCommitRemovals(world, q)\r\n  })\r\n}\r\n\r\nexport const queryRemoveEntity = (world, q, eid) => {\r\n  if (!q.has(eid)) return\r\n  q.remove(eid)\r\n  q.toRemove.push(eid)\r\n  world[$dirtyQueries].add(q)\r\n  q.exited.push(eid)\r\n}\r\n\r\nexport const resetChangedQuery = (world, query) => {\r\n  const q = world[$queryMap].get(query)\r\n  q.changed.length = 0\r\n}\r\n\r\nexport const removeQuery = (world, query) => {\r\n  const q = world[$queryMap].get(query)\r\n  world[$queries].delete(q)\r\n  world[$queryMap].delete(query)\r\n}", "import { $storeSize, createStore, resetStoreFor, resizeStore } from './Storage.js'\r\nimport { $queries, queryAddEntity, queryRemoveEntity, queryCheckEntity, queryCheckComponent } from './Query.js'\r\nimport { $bitflag, $size } from './World.js'\r\nimport { $entityMasks, getDefaultSize, eidToWorld } from './Entity.js'\r\n\r\nexport const $componentMap = Symbol('componentMap')\r\n\r\nexport const components = []\r\n\r\nexport const resizeComponents = (size) => {\r\n  components.forEach(component => resizeStore(component, size))\r\n}\r\n\r\nexport const defineComponent = (schema) => {\r\n  const component = createStore(schema, getDefaultSize())\r\n  if (schema && Object.keys(schema).length) components.push(component)\r\n  return component\r\n}\r\n\r\nexport const incrementBitflag = (world) => {\r\n  world[$bitflag] *= 2\r\n  if (world[$bitflag] >= 2**32) {\r\n    world[$bitflag] = 1\r\n    world[$entityMasks].push(new Uint32Array(world[$size]))\r\n  }\r\n}\r\n\r\nexport const registerComponent = (world, component) => {\r\n  world[$componentMap].set(component, { \r\n    generationId: world[$entityMasks].length - 1,\r\n    bitflag: world[$bitflag],\r\n    store: component\r\n  })\r\n\r\n  if (component[$storeSize] < world[$size]) {\r\n    resizeStore(component, world[$size])\r\n  }\r\n\r\n  incrementBitflag(world)\r\n}\r\n\r\nexport const registerComponents = (world, components) => {\r\n  components.forEach(c => registerComponent(world, c))\r\n}\r\n\r\nexport const hasComponent = (world, component, eid) => {\r\n  const registeredComponent = world[$componentMap].get(component)\r\n  if (!registeredComponent) return\r\n  const { generationId, bitflag } = registeredComponent\r\n  const mask = world[$entityMasks][generationId][eid]\r\n  return (mask & bitflag) === bitflag\r\n}\r\n\r\nexport const addComponent = (world, component, eid, reset=false) => {\r\n  if (!Number.isInteger(eid)) {\r\n    component = world\r\n    world = eidToWorld.get(eid)\r\n    reset = eid || reset\r\n  }\r\n  if (!world[$componentMap].has(component)) registerComponent(world, component)\r\n  if (hasComponent(world, component, eid)) return\r\n  // Add bitflag to entity bitmask\r\n  const { generationId, bitflag } = world[$componentMap].get(component)\r\n  world[$entityMasks][generationId][eid] |= bitflag\r\n\r\n  // todo: archetype graph\r\n  world[$queries].forEach(q => {\r\n    if (!queryCheckComponent(world, q, component)) return\r\n    const match = queryCheckEntity(world, q, eid)\r\n    if (match) queryAddEntity(world, q, eid)\r\n  })\r\n  \r\n  // Zero out each property value\r\n  if (reset) resetStoreFor(component, eid)\r\n}\r\n\r\nexport const removeComponent = (world, component, eid, reset=true) => {\r\n  if (!Number.isInteger(eid)) {\r\n    component = world\r\n    world = eidToWorld.get(eid)\r\n    reset = eid || reset\r\n  }\r\n  const { generationId, bitflag } = world[$componentMap].get(component)\r\n\r\n  if (!(world[$entityMasks][generationId][eid] & bitflag)) return\r\n\r\n  // todo: archetype graph\r\n  world[$queries].forEach(q => {\r\n    if (!queryCheckComponent(world, q, component)) return\r\n    const match = queryCheckEntity(world, q, eid)\r\n    if (match) queryRemoveEntity(world, q, eid)\r\n  })\r\n\r\n  // Remove flag from entity bitmask\r\n  world[$entityMasks][generationId][eid] &= ~bitflag\r\n  \r\n  // Zero out each property value\r\n  if (reset) resetStoreFor(component, eid)\r\n}\r\n", "import { $componentMap } from './Component.js'\r\nimport { $queryMap, $queries, $dirtyQueries } from './Query.js'\r\nimport { $entityArray, $entityIndices, $entityEnabled, $entityMasks, $entitySparseSet, getGlobalSize, removeEntity } from './Entity.js'\r\nimport { resize } from './Storage.js'\r\nimport { SparseSet } from './Util.js'\r\n\r\nexport const $size = Symbol('size')\r\nexport const $resizeThreshold = Symbol('resizeThreshold')\r\nexport const $bitflag = Symbol('bitflag')\r\nexport const $archetypes = Symbol('archetypes')\r\n\r\nexport const worlds = []\r\n\r\nexport const resizeWorlds = (size) => {\r\n  worlds.forEach(world => {\r\n    world[$size] = size\r\n    \r\n    for (let i = 0; i < world[$entityMasks].length; i++) {\r\n      const masks = world[$entityMasks][i];\r\n      world[$entityMasks][i] = resize(masks, size)\r\n    }\r\n    \r\n    world[$resizeThreshold] = world[$size] - (world[$size] / 5)\r\n  })\r\n}\r\n\r\nexport const createWorld = () => {\r\n  const world = {}\r\n  resetWorld(world)\r\n  worlds.push(world)\r\n  return world\r\n}\r\n\r\nexport const resetWorld = (world) => {\r\n  const size = getGlobalSize()\r\n  world[$size] = size\r\n\r\n  world[$entityMasks] = [new Uint32Array(size)]\r\n  world[$archetypes] = []\r\n\r\n  if (world[$entityArray]) world[$entityArray].forEach(eid => removeEntity(world, eid))\r\n  world[$entitySparseSet] = SparseSet()\r\n  world[$entityArray] = world[$entitySparseSet].dense\r\n\r\n  world[$bitflag] = 1\r\n\r\n  world[$componentMap] = new Map()\r\n\r\n  world[$queryMap] = new Map()\r\n  world[$queries] = new Set()\r\n  world[$dirtyQueries] = new Set()\r\n\r\n  return world\r\n}\r\n\r\nexport const deleteWorld = (world) => {\r\n  delete world[$size]\r\n  delete world[$archetypes]\r\n  delete world[$entityMasks]\r\n  delete world[$entityArray]\r\n  delete world[$entityIndices]\r\n  delete world[$bitflag]\r\n  delete world[$componentMap]\r\n  delete world[$queryMap]\r\n  delete world[$queries]\r\n  delete world[$dirtyQueries]\r\n  Object.keys(world).forEach(key => {\r\n    delete world[key]\r\n  })\r\n  worlds.splice(worlds.indexOf(world), 1)\r\n}\r\n", "import { commitRemovals } from './Query.js'\r\n\r\nexport const defineSystem = (fn1, fn2) => {\r\n  const update = fn2 !== undefined ? fn2 : fn1\r\n  const create = fn2 !== undefined ? fn1 : undefined\r\n  const init = new Set()\r\n  const system = (world, ...args) => {\r\n    if (create && !init.has(world)) {\r\n      create(world, ...args)\r\n      init.add(world)\r\n    }\r\n    update(world, ...args)\r\n    commitRemovals(world)\r\n    return world\r\n  }\r\n\r\n  Object.defineProperty(system, 'name', {\r\n    value: (update.name || \"AnonymousSystem\") + \"_internal\",\r\n    configurable: true,\r\n  })\r\n\r\n  return system\r\n}", "import { createWorld, resetWorld, deleteWorld } from './World.js'\r\nimport { addEntity, removeEntity, setDefaultSize } from './Entity.js'\r\nimport { defineComponent, registerComponent, registerComponents, hasComponent, addComponent, removeComponent } from './Component.js'\r\nimport { defineSystem } from './System.js'\r\nimport { defineQuery, enterQuery, exitQuery, Changed, Not, commitRemovals, resetChangedQuery, removeQuery } from './Query.js'\r\nimport { defineSerializer, defineDeserializer } from './Serialize.js'\r\nimport { TYPES_ENUM, parentArray } from './Storage.js'\r\n\r\nexport const pipe = (...fns) => (...args) => {\r\n  const input = Array.isArray(args[0]) ? args[0] : args\r\n  if (!input || input.length === 0) return\r\n  fns = Array.isArray(fns[0]) ? fns[0] : fns\r\n  let tmp = input\r\n  for (let i = 0; i < fns.length; i++) {\r\n    const fn = fns[i]\r\n    if (Array.isArray(tmp)) {\r\n      // tmp = tmp.reduce((a,v) => a.concat(fn(v)),[])\r\n      tmp = fn(...tmp)\r\n    } else {\r\n      tmp = fn(tmp)\r\n    }\r\n  }\r\n  return tmp\r\n}\r\n\r\nexport const Types = TYPES_ENUM\r\n\r\nexport {\r\n\r\n  setDefaultSize,\r\n  createWorld,\r\n  resetWorld,\r\n  deleteWorld,\r\n  addEntity,\r\n  removeEntity,\r\n\r\n  registerComponent,\r\n  registerComponents,\r\n  defineComponent,\r\n  addComponent,\r\n  removeComponent,\r\n  hasComponent,\r\n  \r\n  defineQuery,\r\n  Changed,\r\n  Not,\r\n  // Or,\r\n  enterQuery,\r\n  exitQuery,\r\n  commitRemovals,\r\n  resetChangedQuery,\r\n  removeQuery,\r\n\r\n  defineSystem,\r\n  \r\n  defineSerializer,\r\n  defineDeserializer,\r\n\r\n  parentArray,\r\n\r\n}\r\n", "import { Types, defineComponent } from 'bitecs';\r\n\r\nconst QuadVertex = defineComponent({\r\n    v1: Types.ui32,\r\n    v2: Types.ui32,\r\n    v3: Types.ui32,\r\n    v4: Types.ui32\r\n});\r\n\r\nexport const QuadVertexComponent = QuadVertex;\r\n", "import { Types, defineComponent } from 'bitecs';\r\n\r\nconst Extent2D = defineComponent({\r\n    x: Types.f32,\r\n    y: Types.f32,\r\n    width: Types.f32,\r\n    height: Types.f32,\r\n    right: Types.f32,\r\n    bottom: Types.f32\r\n});\r\n\r\nexport const Extent2DComponent = Extent2D;\r\n", "import { Types, defineComponent } from 'bitecs';\r\n\r\nconst Dirty = defineComponent({\r\n    frame: Types.ui32,\r\n    transform: Types.ui32,\r\n    update: Types.ui32,\r\n    childCache: Types.ui32,\r\n    postRender: Types.ui32,\r\n    bounds: Types.ui32,\r\n    texture: Types.ui32,\r\n    textureFrame: Types.ui32,\r\n    child: Types.ui32,\r\n    displayList: Types.ui32\r\n});\r\n\r\nexport const DirtyComponent = Dirty;\r\n", "import { createWorld } from 'bitecs';\r\n\r\nconst world = createWorld();\r\n\r\nexport const GameObjectWorld = world;\r\n", "import { DirtyComponent } from './DirtyComponent';\r\nimport { GameObjectWorld } from '../../GameObjectWorld';\r\nimport { addComponent } from 'bitecs';\r\n\r\nexport function AddDirtyComponent (id: number): void\r\n{\r\n    addComponent(GameObjectWorld, DirtyComponent, id);\r\n\r\n    DirtyComponent.frame[id] = 0;\r\n    DirtyComponent.transform[id] = 1;\r\n    DirtyComponent.update[id] = 1;\r\n    DirtyComponent.childCache[id] = 0;\r\n    DirtyComponent.postRender[id] = 0;\r\n    DirtyComponent.bounds[id] = 1;\r\n    DirtyComponent.texture[id] = 0;\r\n    DirtyComponent.textureFrame[id] = 0;\r\n    DirtyComponent.child[id] = 0;\r\n    DirtyComponent.displayList[id] = 0;\r\n}\r\n", "import { DirtyComponent } from './DirtyComponent';\r\n\r\nexport function ClearDirtyDisplayList (id: number): void\r\n{\r\n    DirtyComponent.displayList[id] = 0;\r\n}\r\n", "import { DirtyComponent } from './DirtyComponent';\r\n\r\nexport function HasDirtyDisplayList (id: number): boolean\r\n{\r\n    return Boolean(DirtyComponent.displayList[id]);\r\n}\r\n", "import { DirtyComponent } from './DirtyComponent';\r\n\r\nexport function SetDirtyDisplayList (id: number): void\r\n{\r\n    DirtyComponent.displayList[id] = 1;\r\n}\r\n", "import { Game } from './Game';\r\n\r\nexport let instance: Game;\r\nexport let frame: number = 0;\r\nexport let elapsed: number = 0;\r\n\r\nexport const GameInstance =\r\n{\r\n    get: (): Game =>\r\n    {\r\n        return instance;\r\n    },\r\n\r\n    set: (game: Game | undefined): void =>\r\n    {\r\n        instance = game;\r\n    },\r\n\r\n    getFrame: (): number =>\r\n    {\r\n        return frame;\r\n    },\r\n\r\n    setFrame: (current: number): void =>\r\n    {\r\n        frame = current;\r\n    },\r\n\r\n    getElapsed: (): number =>\r\n    {\r\n        return elapsed;\r\n    },\r\n\r\n    setElapsed: (current: number): void =>\r\n    {\r\n        elapsed = current;\r\n    }\r\n\r\n};\r\n", "import { DirtyComponent } from './DirtyComponent';\r\n\r\nexport function SetDirtyTransform (id: number): void\r\n{\r\n    DirtyComponent.transform[id] = 1;\r\n}\r\n", "import { Types, defineComponent } from 'bitecs';\r\n\r\nconst Hierarchy = defineComponent({\r\n    worldID: Types.ui32,\r\n    parentID: Types.ui32,\r\n    numChildren: Types.ui32,\r\n    depth: Types.ui32\r\n});\r\n\r\nexport const HierarchyComponent = Hierarchy;\r\n", "import { DirtyComponent } from './DirtyComponent';\r\nimport { HierarchyComponent } from '../hierarchy/HierarchyComponent';\r\n\r\nexport function SetDirtyWorldDisplayList (id: number): void\r\n{\r\n    const worldID = HierarchyComponent.worldID[id];\r\n\r\n    DirtyComponent.displayList[worldID] = 1;\r\n}\r\n", "import { Extent2DComponent } from './Extent2DComponent';\r\nimport { SetDirtyTransform } from '../dirty';\r\n\r\n//  The area covered by this transform component + origin + size (usually from a Frame)\r\n\r\nexport function SetExtent (id: number, x: number, y: number, width: number, height: number): void\r\n{\r\n    Extent2DComponent.x[id] = x;\r\n    Extent2DComponent.y[id] = y;\r\n    Extent2DComponent.width[id] = width;\r\n    Extent2DComponent.height[id] = height;\r\n    Extent2DComponent.right[id] = x + width;\r\n    Extent2DComponent.bottom[id] = y + height;\r\n\r\n    SetDirtyTransform(id);\r\n}\r\n", "import { Types, defineComponent } from 'bitecs';\r\n\r\nconst Vertex = defineComponent({\r\n    x: Types.f32,\r\n    y: Types.f32,\r\n    z: Types.f32,\r\n    u: Types.f32,\r\n    v: Types.f32,\r\n    texture: Types.ui8,\r\n    tint: Types.ui32,\r\n    alpha: Types.f32,\r\n    color: Types.ui32,\r\n    offset: Types.f32\r\n});\r\n\r\nexport const VertexComponent = Vertex;\r\n", "import { VertexComponent } from './VertexComponent';\r\n\r\nexport function SetUV (id: number, u: number, v: number): void\r\n{\r\n    VertexComponent.u[id] = u;\r\n    VertexComponent.v[id] = v;\r\n}\r\n", "import { IContainer } from '../gameobjects/container/IContainer';\r\nimport { IFrame } from './IFrame';\r\nimport { QuadVertexComponent } from '../components/vertices/QuadVertexComponent';\r\nimport { SetExtent } from '../components/transform/SetExtent';\r\nimport { SetUV } from '../components/vertices/SetUV';\r\nimport { Texture } from './Texture';\r\nimport { Vertex } from '../components';\r\n\r\nexport class Frame implements IFrame\r\n{\r\n    texture: Texture;\r\n    key: string | number;\r\n\r\n    //  This is the actual area of the texture to draw to canvas / webgl, including any extruded data.\r\n    //  This is the same as the 'trimmed' + 'extruded' area from an atlas.\r\n    x: number;\r\n    y: number;\r\n    width: number;\r\n    height: number;\r\n\r\n    trimmed: boolean = false;\r\n\r\n    //  Original size of the image before being trimmed or added to an atlas (which can add extrude data to it).\r\n    sourceSizeWidth: number;\r\n    sourceSizeHeight: number;\r\n\r\n    //  The size of the image having been trimmed, before being added to the atlas (i.e. doesn't have any extrusion values in it)\r\n    spriteSourceSizeX: number;\r\n    spriteSourceSizeY: number;\r\n    spriteSourceSizeWidth: number;\r\n    spriteSourceSizeHeight: number;\r\n\r\n    pivot: { x: number; y: number };\r\n\r\n    u0: number;\r\n    v0: number;\r\n    u1: number;\r\n    v1: number;\r\n\r\n    constructor (texture: Texture, key: string | number, x: number, y: number, width: number, height: number)\r\n    {\r\n        this.texture = texture;\r\n        this.key = key;\r\n\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = width;\r\n        this.height = height;\r\n\r\n        this.sourceSizeWidth = width;\r\n        this.sourceSizeHeight = height;\r\n\r\n        this.updateUVs();\r\n    }\r\n\r\n    setPivot (x: number, y: number): void\r\n    {\r\n        this.pivot = { x, y };\r\n    }\r\n\r\n    setSize (width: number, height: number): void\r\n    {\r\n        this.width = width;\r\n        this.height = height;\r\n        this.sourceSizeWidth = width;\r\n        this.sourceSizeHeight = height;\r\n\r\n        this.updateUVs();\r\n    }\r\n\r\n    setSourceSize (width: number, height: number): void\r\n    {\r\n        this.sourceSizeWidth = width;\r\n        this.sourceSizeHeight = height;\r\n    }\r\n\r\n    setTrim (width: number, height: number, x: number, y: number, w: number, h: number): void\r\n    {\r\n        this.trimmed = true;\r\n\r\n        this.sourceSizeWidth = width;\r\n        this.sourceSizeHeight = height;\r\n\r\n        this.spriteSourceSizeX = x;\r\n        this.spriteSourceSizeY = y;\r\n        this.spriteSourceSizeWidth = w;\r\n        this.spriteSourceSizeHeight = h;\r\n    }\r\n\r\n    getExtent (originX: number, originY: number): { left: number; right: number; top: number; bottom: number }\r\n    {\r\n        const sourceSizeWidth = this.sourceSizeWidth;\r\n        const sourceSizeHeight = this.sourceSizeHeight;\r\n\r\n        let left: number;\r\n        let right: number;\r\n        let top: number;\r\n        let bottom: number;\r\n\r\n        if (this.trimmed)\r\n        {\r\n            left = this.spriteSourceSizeX - (originX * sourceSizeWidth);\r\n            right = left + this.spriteSourceSizeWidth;\r\n\r\n            top = this.spriteSourceSizeY - (originY * sourceSizeHeight);\r\n            bottom = top + this.spriteSourceSizeHeight;\r\n        }\r\n        else\r\n        {\r\n            left = -originX * sourceSizeWidth;\r\n            right = left + sourceSizeWidth;\r\n\r\n            top = -originY * sourceSizeHeight;\r\n            bottom = top + sourceSizeHeight;\r\n        }\r\n\r\n        return { left, right, top, bottom };\r\n    }\r\n\r\n    copyToExtent (child: IContainer): this\r\n    {\r\n        const originX = child.origin.x;\r\n        const originY = child.origin.y;\r\n\r\n        const sourceSizeWidth = this.sourceSizeWidth;\r\n        const sourceSizeHeight = this.sourceSizeHeight;\r\n\r\n        let x: number;\r\n        let y: number;\r\n        let width: number;\r\n        let height: number;\r\n\r\n        if (this.trimmed)\r\n        {\r\n            x = this.spriteSourceSizeX - (originX * sourceSizeWidth);\r\n            y = this.spriteSourceSizeY - (originY * sourceSizeHeight);\r\n\r\n            width = this.spriteSourceSizeWidth;\r\n            height = this.spriteSourceSizeHeight;\r\n        }\r\n        else\r\n        {\r\n            x = -originX * sourceSizeWidth;\r\n            y = -originY * sourceSizeHeight;\r\n\r\n            width = sourceSizeWidth;\r\n            height = sourceSizeHeight;\r\n        }\r\n\r\n        SetExtent(child.id, x, y, width, height);\r\n\r\n        return this;\r\n    }\r\n\r\n    copyToVertices (id: number): this\r\n    {\r\n        const { u0, u1, v0, v1 } = this;\r\n\r\n        //  TODO: Move to a system based on frame change\r\n        SetUV(QuadVertexComponent.v1[id], u0, v0);\r\n        SetUV(QuadVertexComponent.v2[id], u0, v1);\r\n        SetUV(QuadVertexComponent.v3[id], u1, v1);\r\n        SetUV(QuadVertexComponent.v4[id], u1, v0);\r\n\r\n        // vertices[offset + 0].setUV(u0, v0);\r\n        // vertices[offset + 1].setUV(u0, v1);\r\n        // vertices[offset + 2].setUV(u1, v1);\r\n        // vertices[offset + 3].setUV(u1, v0);\r\n\r\n        return this;\r\n    }\r\n\r\n    updateUVs (): void\r\n    {\r\n        const { x, y, width, height } = this;\r\n\r\n        const baseTextureWidth = this.texture.width;\r\n        const baseTextureHeight = this.texture.height;\r\n\r\n        this.u0 = x / baseTextureWidth;\r\n        this.v0 = y / baseTextureHeight;\r\n\r\n        this.u1 = (x + width) / baseTextureWidth;\r\n        this.v1 = (y + height) / baseTextureHeight;\r\n    }\r\n\r\n    destroy (): void\r\n    {\r\n        this.texture = null;\r\n    }\r\n}\r\n", "import { BindingQueue } from '../renderer/BindingQueue';\r\nimport { Frame } from './Frame';\r\nimport { IGLTextureBinding } from '../renderer/webgl1/textures/IGLTextureBinding';\r\nimport { IGLTextureBindingConfig } from '../renderer/webgl1/textures/IGLTextureBindingConfig';\r\nimport { ITexture } from './ITexture';\r\n\r\nexport class Texture implements ITexture\r\n{\r\n    //  Unique identifier of this Texture, if stored in the Texture Manager\r\n    key: string = '';\r\n\r\n    width: number;\r\n    height: number;\r\n\r\n    image: TexImageSource;\r\n\r\n    binding: IGLTextureBinding;\r\n\r\n    firstFrame: Frame;\r\n\r\n    frames: Map<string | number, Frame>;\r\n\r\n    data: unknown;\r\n\r\n    constructor (image?: TexImageSource, width?: number, height?: number, glConfig?: IGLTextureBindingConfig)\r\n    {\r\n        if (image)\r\n        {\r\n            width = image.width;\r\n            height = image.height;\r\n        }\r\n\r\n        this.image = image;\r\n\r\n        this.width = width;\r\n        this.height = height;\r\n\r\n        this.frames = new Map();\r\n\r\n        this.data = {};\r\n\r\n        this.addFrame('__BASE', 0, 0, width, height);\r\n\r\n        BindingQueue.add(this, glConfig);\r\n    }\r\n\r\n    addFrame (key: string | number, x: number, y: number, width: number, height: number): Frame\r\n    {\r\n        if (this.frames.has(key))\r\n        {\r\n            return null;\r\n        }\r\n\r\n        const frame = new Frame(this, key, x, y, width, height);\r\n\r\n        this.frames.set(key, frame);\r\n\r\n        if (!this.firstFrame || this.firstFrame.key === '__BASE')\r\n        {\r\n            this.firstFrame = frame;\r\n        }\r\n\r\n        return frame;\r\n    }\r\n\r\n    getFrame (key?: string | number | Frame): Frame\r\n    {\r\n        //  null, undefined, empty string, zero\r\n        if (!key)\r\n        {\r\n            return this.firstFrame;\r\n        }\r\n\r\n        if (key instanceof Frame)\r\n        {\r\n            key = key.key;\r\n        }\r\n\r\n        let frame: Frame = this.frames.get(key);\r\n\r\n        if (!frame)\r\n        {\r\n            console.warn(`Frame missing: ${key}`);\r\n\r\n            frame = this.firstFrame;\r\n        }\r\n\r\n        return frame;\r\n    }\r\n\r\n    setSize (width: number, height: number): void\r\n    {\r\n        this.width = width;\r\n        this.height = height;\r\n\r\n        const frame = this.frames.get('__BASE');\r\n\r\n        frame.setSize(width, height);\r\n    }\r\n\r\n    destroy (): void\r\n    {\r\n        if (this.binding)\r\n        {\r\n            this.binding.destroy();\r\n        }\r\n\r\n        this.frames.clear();\r\n\r\n        this.data = null;\r\n        this.image = null;\r\n        this.firstFrame = null;\r\n    }\r\n}\r\n", "import { GetHeight, GetResolution, GetWidth } from '../../../config/size/';\r\n\r\nimport { CreateAttributes } from './CreateAttributes';\r\nimport { CreateDepthBuffer } from '../fbo/CreateDepthBuffer';\r\nimport { CreateFramebuffer } from '../fbo/CreateFramebuffer';\r\nimport { CreateProgram } from './CreateProgram';\r\nimport { CreateShader } from './CreateShader';\r\nimport { CreateUniforms } from './CreateUniforms';\r\nimport { DefaultQuadAttributes } from './DefaultQuadAttributes';\r\nimport { DefaultQuadUniforms } from './DefaultQuadUniforms';\r\nimport { DeleteFramebuffer } from '../fbo/DeleteFramebuffer';\r\nimport { DeleteGLTexture } from '../textures/DeleteGLTexture';\r\nimport { DeleteShaders } from './DeleteShaders';\r\nimport { GLTextureBinding } from '../textures/GLTextureBinding';\r\nimport { IRenderPass } from '../renderpass/IRenderPass';\r\nimport { IShader } from './IShader';\r\nimport { IShaderConfig } from './IShaderConfig';\r\nimport { IVertexAttribPointer } from './IVertexAttribPointer';\r\nimport { SINGLE_QUAD_FRAG } from '../glsl/SINGLE_QUAD_FRAG';\r\nimport { SINGLE_QUAD_VERT } from '../glsl/SINGLE_QUAD_VERT';\r\nimport { Texture } from '../../../textures/Texture';\r\nimport { gl } from '../GL';\r\n\r\nexport class Shader implements IShader\r\n{\r\n    program: WebGLProgram;\r\n\r\n    attributes: Map<string, IVertexAttribPointer>;\r\n\r\n    uniforms: Map<string, unknown>;\r\n\r\n    uniformSetters: Map<string, Function>;\r\n\r\n    texture: Texture;\r\n\r\n    framebuffer: WebGLFramebuffer;\r\n\r\n    renderToFramebuffer: boolean = false;\r\n\r\n    renderToDepthbuffer: boolean = false;\r\n\r\n    isActive: boolean = false;\r\n\r\n    constructor (config?: IShaderConfig)\r\n    {\r\n        if (config)\r\n        {\r\n            this.fromConfig(config);\r\n        }\r\n    }\r\n\r\n    fromConfig (config: IShaderConfig): void\r\n    {\r\n        const {\r\n            attributes = DefaultQuadAttributes,\r\n            fragmentShader = SINGLE_QUAD_FRAG,\r\n            height = GetHeight(),\r\n            renderToFramebuffer = false,\r\n            renderToDepthbuffer = false,\r\n            resolution = GetResolution(),\r\n            vertexShader = SINGLE_QUAD_VERT,\r\n            width = GetWidth(),\r\n            uniforms = DefaultQuadUniforms\r\n        } = config;\r\n\r\n        this.create(fragmentShader, vertexShader, uniforms, attributes);\r\n\r\n        if (renderToFramebuffer)\r\n        {\r\n            this.renderToFramebuffer = true;\r\n\r\n            const texture = new Texture(null, width * resolution, height * resolution);\r\n            const binding = new GLTextureBinding(texture);\r\n\r\n            texture.binding = binding;\r\n\r\n            binding.framebuffer = CreateFramebuffer(binding.texture);\r\n\r\n            if (renderToDepthbuffer)\r\n            {\r\n                this.renderToDepthbuffer = true;\r\n\r\n                binding.depthbuffer = CreateDepthBuffer(binding.framebuffer, texture.width, texture.height);\r\n            }\r\n\r\n            this.texture = texture;\r\n            this.framebuffer = binding.framebuffer;\r\n        }\r\n    }\r\n\r\n    create (fragmentShaderSource: string, vertexShaderSource: string, uniforms: {}, attribs: {}): void\r\n    {\r\n        const fragmentShader = CreateShader(fragmentShaderSource, gl.FRAGMENT_SHADER);\r\n        const vertexShader = CreateShader(vertexShaderSource, gl.VERTEX_SHADER);\r\n\r\n        if (!fragmentShader || !vertexShader)\r\n        {\r\n            return;\r\n        }\r\n\r\n        const program = CreateProgram(fragmentShader, vertexShader);\r\n\r\n        if (!program)\r\n        {\r\n            return;\r\n        }\r\n\r\n        const currentProgram = gl.getParameter(gl.CURRENT_PROGRAM);\r\n\r\n        gl.useProgram(program);\r\n\r\n        this.program = program;\r\n\r\n        this.uniformSetters = CreateUniforms(program);\r\n\r\n        this.uniforms = new Map();\r\n\r\n        //  Copy starting values from the config object to the uniforms map\r\n        for (const [ key, value ] of Object.entries(uniforms))\r\n        {\r\n            this.uniforms.set(key, value);\r\n        }\r\n\r\n        this.attributes = CreateAttributes(program, attribs);\r\n\r\n        gl.useProgram(currentProgram);\r\n\r\n        this.isActive = false;\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    updateUniforms (renderPass: IRenderPass): void\r\n    {\r\n        //  Use this to set any extra uniform values prior to the bind\r\n    }\r\n\r\n    bind (renderPass: IRenderPass): boolean\r\n    {\r\n        const uniforms = this.uniforms;\r\n\r\n        uniforms.set('uProjectionMatrix', renderPass.projectionMatrix.data);\r\n        uniforms.set('uCameraMatrix', renderPass.cameraMatrix.data);\r\n\r\n        this.updateUniforms(renderPass);\r\n\r\n        return this.setUniforms(renderPass);\r\n    }\r\n\r\n    setUniform (key: string, value: unknown): void\r\n    {\r\n        const uniforms = this.uniforms;\r\n\r\n        if (uniforms.has(key))\r\n        {\r\n            uniforms.set(key, value);\r\n\r\n            const setter = this.uniformSetters.get(key);\r\n\r\n            setter(value);\r\n        }\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    setUniforms (renderPass: IRenderPass): boolean\r\n    {\r\n        if (!this.program)\r\n        {\r\n            return false;\r\n        }\r\n\r\n        gl.useProgram(this.program);\r\n\r\n        this.isActive = true;\r\n\r\n        const uniforms = this.uniforms;\r\n\r\n        for (const [ name, setter ] of this.uniformSetters.entries())\r\n        {\r\n            setter(uniforms.get(name));\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    //  stride = vertexByteSize\r\n    setAttributes (renderPass: IRenderPass): void\r\n    {\r\n        if (this.program)\r\n        {\r\n            const stride = renderPass.currentVertexBuffer.vertexByteSize;\r\n\r\n            this.attributes.forEach(attrib =>\r\n            {\r\n                gl.vertexAttribPointer(attrib.index, attrib.size, attrib.type, attrib.normalized, stride, attrib.offset);\r\n            });\r\n        }\r\n    }\r\n\r\n    destroy (): void\r\n    {\r\n        DeleteShaders(this.program);\r\n        DeleteGLTexture(this.texture);\r\n        DeleteFramebuffer(this.framebuffer);\r\n\r\n        this.uniforms.clear();\r\n        this.uniformSetters.clear();\r\n        this.attributes.clear();\r\n\r\n        this.program = null;\r\n        this.texture = null;\r\n        this.framebuffer = null;\r\n    }\r\n}\r\n", "import { DefaultQuadAttributes } from './DefaultQuadAttributes';\r\nimport { IRenderPass } from '../renderpass/IRenderPass';\r\nimport { IShader } from './IShader';\r\nimport { IShaderConfig } from './IShaderConfig';\r\nimport { Shader } from './Shader';\r\n\r\nexport class QuadShader extends Shader implements IShader\r\n{\r\n    constructor (config: IShaderConfig = {})\r\n    {\r\n        const shaderConfig = config;\r\n\r\n        shaderConfig.attributes = (!shaderConfig.attributes) ? DefaultQuadAttributes : shaderConfig.attributes;\r\n\r\n        super(shaderConfig);\r\n    }\r\n\r\n    bind (renderPass: IRenderPass): boolean\r\n    {\r\n        const uniforms = this.uniforms;\r\n\r\n        uniforms.set('uProjectionMatrix', renderPass.projectionMatrix.data);\r\n        uniforms.set('uCameraMatrix', renderPass.cameraMatrix.data);\r\n\r\n        return super.bind(renderPass);\r\n    }\r\n}\r\n", "export const MULTI_QUAD_FRAG =\r\n`#define SHADER_NAME MULTI_QUAD_FRAG\r\n\r\nprecision highp float;\r\n\r\nvarying vec2 vTextureCoord;\r\nvarying float vTextureId;\r\nvarying vec4 vTintColor;\r\n\r\nuniform sampler2D uTexture[%count%];\r\n\r\nvoid main (void)\r\n{\r\n    vec4 color;\r\n\r\n    %forloop%\r\n\r\n    gl_FragColor = color * vec4(vTintColor.bgr * vTintColor.a, vTintColor.a);\r\n}`;\r\n", "import { GetMaxTextures } from '../../../config/maxtextures/GetMaxTextures';\r\nimport { IRenderPass } from '../renderpass/IRenderPass';\r\nimport { IShaderConfig } from './IShaderConfig';\r\nimport { MULTI_QUAD_FRAG } from '../glsl/MULTI_QUAD_FRAG';\r\nimport { QuadShader } from './QuadShader';\r\n\r\nexport class MultiTextureQuadShader extends QuadShader\r\n{\r\n    constructor (config: IShaderConfig = {})\r\n    {\r\n        if (!config.fragmentShader)\r\n        {\r\n            config.fragmentShader = MULTI_QUAD_FRAG;\r\n        }\r\n\r\n        super(config);\r\n    }\r\n\r\n    create (fragmentShaderSource: string, vertexShaderSource: string, uniforms: {}, attribs: {}): void\r\n    {\r\n        const maxTextures = GetMaxTextures();\r\n\r\n        let src = '';\r\n\r\n        for (let i = 1; i < maxTextures; i++)\r\n        {\r\n            if (i > 1)\r\n            {\r\n                src += '\\n\\telse ';\r\n            }\r\n\r\n            if (i < maxTextures - 1)\r\n            {\r\n                src += `if (vTextureId < ${i}.5)`;\r\n            }\r\n\r\n            src += '\\n\\t{';\r\n            src += `\\n\\t\\tcolor = texture2D(uTexture[${i}], vTextureCoord);`;\r\n            src += '\\n\\t}';\r\n        }\r\n\r\n        fragmentShaderSource = fragmentShaderSource.replace(/%count%/gi, `${maxTextures}`);\r\n        fragmentShaderSource = fragmentShaderSource.replace(/%forloop%/gi, src);\r\n\r\n        super.create(fragmentShaderSource, vertexShaderSource, uniforms, attribs);\r\n    }\r\n\r\n    bind (renderPass: IRenderPass): boolean\r\n    {\r\n        this.uniforms.set('uTexture', renderPass.textureIndex);\r\n\r\n        return super.bind(renderPass);\r\n    }\r\n}\r\n", "import { IRenderPass } from './IRenderPass';\r\n\r\nexport function SetDefaultBlendMode (renderPass: IRenderPass, enable: boolean, sfactor?: number, dfactor?: number): void\r\n{\r\n    const entry = { enable, sfactor, dfactor };\r\n\r\n    //  The default entry always goes into index zero\r\n    renderPass.blendModeStack[0] = entry;\r\n\r\n    renderPass.currentBlendMode = entry;\r\n    renderPass.defaultBlendMode = entry;\r\n}\r\n", "import { IRenderPass } from './IRenderPass';\r\nimport { Rectangle } from '../../../geom/rectangle/Rectangle';\r\n\r\nexport function SetDefaultFramebuffer (renderPass: IRenderPass, framebuffer: WebGLFramebuffer = null, viewport?: Rectangle): void\r\n{\r\n    const entry = { framebuffer, viewport };\r\n\r\n    //  The default entry always goes into index zero\r\n    renderPass.framebufferStack[0] = entry;\r\n\r\n    renderPass.currentFramebuffer = entry;\r\n    renderPass.defaultFramebuffer = entry;\r\n}\r\n", "import { IRenderPass } from './IRenderPass';\r\nimport { IShader } from '../shaders/IShader';\r\n\r\nexport function SetDefaultShader (renderPass: IRenderPass, shader: IShader, textureID?: number): void\r\n{\r\n    const entry = { shader, textureID };\r\n\r\n    //  The default entry always goes into index zero\r\n    renderPass.shaderStack[0] = entry;\r\n\r\n    renderPass.currentShader = entry;\r\n    renderPass.defaultShader = entry;\r\n}\r\n", "import { IRenderPass } from './IRenderPass';\r\nimport { IVertexBuffer } from '../buffers/IVertexBuffer';\r\n\r\nexport function SetDefaultVertexBuffer (renderPass: IRenderPass, buffer: IVertexBuffer): void\r\n{\r\n    //  The default entry always goes into index zero\r\n    renderPass.vertexBufferStack[0] = buffer;\r\n\r\n    renderPass.currentVertexBuffer = buffer;\r\n    renderPass.defaultVertexBuffer = buffer;\r\n}\r\n", "import { IRenderPass } from './IRenderPass';\r\nimport { Rectangle } from '../../../geom/rectangle/Rectangle';\r\n\r\nexport function SetDefaultViewport (renderPass: IRenderPass, x: number = 0, y: number = 0, width: number = 0, height: number = 0): void\r\n{\r\n    const entry = new Rectangle(x, y, width, height);\r\n\r\n    //  The default entry always goes into index zero\r\n    renderPass.viewportStack[0] = entry;\r\n\r\n    renderPass.currentViewport = entry;\r\n    renderPass.defaultViewport = entry;\r\n}\r\n", "import { Matrix4 } from './Matrix4';\r\n\r\nexport function Mat4Identity (matrix: Matrix4 = new Matrix4()): Matrix4\r\n{\r\n    return matrix.set(\r\n        1, 0, 0, 0,\r\n        0, 1, 0, 0,\r\n        0, 0, 1, 0,\r\n        0, 0, 0, 1\r\n    );\r\n}\r\n", "//  A Matrix2D contains six elements in a short-form of the 3x3 Matrix, with the last column ignored.\r\n\r\n//  |----|----|----|\r\n//  | a  | b  | 0  |\r\n//  |----|----|----|\r\n//  | c  | d  | 0  |\r\n//  |----|----|----|\r\n//  | tx | ty | 1  |\r\n//  |----|----|----|\r\n\r\nexport class Matrix2D\r\n{\r\n    a: number; // element 0\r\n    b: number; // element 1\r\n    c: number; // element 2\r\n    d: number; // element 3\r\n    tx: number; // element 4\r\n    ty: number; // element 5\r\n\r\n    /**\r\n     * Creates an instance of Matrix2D.\r\n     *\r\n     * @param {number} [a=1] - X scale.\r\n     * @param {number} [b=0] - X skew.\r\n     * @param {number} [c=0] - Y skew.\r\n     * @param {number} [d=1] - Y scale.\r\n     * @param {number} [tx=0] - X translation\r\n     * @param {number} [ty=0] - Y translation\r\n     * @memberof Matrix2D\r\n     */\r\n    constructor (a: number = 1, b: number = 0, c: number = 0, d: number = 1, tx: number = 0, ty: number = 0)\r\n    {\r\n        this.set(a, b, c, d, tx, ty);\r\n    }\r\n\r\n    set (a: number = 1, b: number = 0, c: number = 0, d: number = 1, tx: number = 0, ty: number = 0): this\r\n    {\r\n        this.a = a;\r\n        this.b = b;\r\n        this.c = c;\r\n        this.d = d;\r\n        this.tx = tx;\r\n        this.ty = ty;\r\n\r\n        return this;\r\n    }\r\n\r\n    identity (): this\r\n    {\r\n        return this.set();\r\n    }\r\n\r\n    toArray (): number[]\r\n    {\r\n        const  { a, b, c, d, tx, ty } = this;\r\n\r\n        return [ a, b, c, d, tx, ty ];\r\n    }\r\n\r\n    fromArray (src: number[]): Matrix2D\r\n    {\r\n        return this.set(src[0], src[1], src[2], src[3], src[4], src[5]);\r\n    }\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Find the angle of a segment from (x1, y1) -> (x2, y2).\r\n *\r\n * @function Phaser.Math.Angle.Between\r\n * @since 3.0.0\r\n *\r\n * @param {number} x1 - The x coordinate of the first point.\r\n * @param {number} y1 - The y coordinate of the first point.\r\n * @param {number} x2 - The x coordinate of the second point.\r\n * @param {number} y2 - The y coordinate of the second point.\r\n *\r\n * @return {number} The angle in radians.\r\n */\r\nexport function AngleBetween (x1: number, y1: number, x2: number, y2: number): number\r\n{\r\n    return Math.atan2(y2 - y1, x2 - x1);\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Find the angle of a segment from (x1, y1) -> (x2, y2).\r\n *\r\n * The difference between this method and {@link Phaser.Math.Angle.Between} is that this assumes the y coordinate\r\n * travels down the screen.\r\n *\r\n * @function Phaser.Math.Angle.BetweenY\r\n * @since 3.0.0\r\n *\r\n * @param {number} x1 - The x coordinate of the first point.\r\n * @param {number} y1 - The y coordinate of the first point.\r\n * @param {number} x2 - The x coordinate of the second point.\r\n * @param {number} y2 - The y coordinate of the second point.\r\n *\r\n * @return {number} The angle in radians.\r\n */\r\nexport function AngleBetweenY (x1: number, y1: number, x2: number, y2: number): number\r\n{\r\n    return Math.atan2(x2 - x1, y2 - y1);\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nexport const MATH_CONST = {\r\n\r\n    /**\r\n     * The value of PI * 2.\r\n     *\r\n     * @name Phaser.Math.PI2\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    PI2: Math.PI * 2,\r\n\r\n    /**\r\n     * The value of PI * 2.\r\n     *\r\n     * @name Phaser.Math.HALF_PI\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    HALF_PI: Math.PI * 0.5,\r\n\r\n    /**\r\n     * An epsilon value (1.0e-6)\r\n     *\r\n     * @name Phaser.Math.EPSILON\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    EPSILON: 1.0e-6,\r\n\r\n    /**\r\n     * For converting degrees to radians (PI / 180)\r\n     *\r\n     * @name Phaser.Math.DEG_TO_RAD\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    DEG_TO_RAD: Math.PI / 180,\r\n\r\n    /**\r\n     * For converting radians to degrees (180 / PI)\r\n     *\r\n     * @name Phaser.Math.RAD_TO_DEG\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    RAD_TO_DEG: 180 / Math.PI,\r\n\r\n    /**\r\n     * The minimum safe integer this browser supports.\r\n     * We use a const for backward compatibility with Internet Explorer.\r\n     *\r\n     * @name Phaser.Math.MIN_SAFE_INTEGER\r\n     * @type {number}\r\n     * @since 3.21.0\r\n     */\r\n    MIN_SAFE_INTEGER: Number.MIN_SAFE_INTEGER || -9007199254740991,\r\n\r\n    /**\r\n     * The maximum safe integer this browser supports.\r\n     * We use a const for backward compatibility with Internet Explorer.\r\n     *\r\n     * @name Phaser.Math.MAX_SAFE_INTEGER\r\n     * @type {number}\r\n     * @since 3.21.0\r\n     */\r\n    MAX_SAFE_INTEGER: Number.MAX_SAFE_INTEGER || 9007199254740991\r\n\r\n};\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nimport { MATH_CONST as CONST } from '../const';\r\n\r\n/**\r\n * Takes an angle in Phasers default clockwise format and converts it so that\r\n * 0 is North, 90 is West, 180 is South and 270 is East,\r\n * therefore running counter-clockwise instead of clockwise.\r\n * \r\n * You can pass in the angle from a Game Object using:\r\n * \r\n * ```javascript\r\n * var converted = CounterClockwise(gameobject.rotation);\r\n * ```\r\n * \r\n * All values for this function are in radians.\r\n *\r\n * @function Phaser.Math.Angle.CounterClockwise\r\n * @since 3.16.0\r\n *\r\n * @param {number} angle - The angle to convert, in radians.\r\n *\r\n * @return {number} The converted angle, in radians.\r\n */\r\nexport function CounterClockwise (angle: number): number\r\n{\r\n    if (angle > Math.PI)\r\n    {\r\n        angle -= CONST.PI2;\r\n    }\r\n\r\n    return Math.abs((((angle + CONST.HALF_PI) % CONST.PI2) - CONST.PI2) % CONST.PI2);\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nimport { MATH_CONST } from '../const';\r\n\r\n/**\r\n * Normalize an angle to the [0, 2pi] range.\r\n *\r\n * @function Phaser.Math.Angle.Normalize\r\n * @since 3.0.0\r\n *\r\n * @param {number} angle - The angle to normalize, in radians.\r\n *\r\n * @return {number} The normalized angle, in radians.\r\n */\r\nexport function NormalizeAngle (angle: number): number\r\n{\r\n    angle = angle % MATH_CONST.PI2;\r\n\r\n    if (angle >= 0)\r\n    {\r\n        return angle;\r\n    }\r\n    else\r\n    {\r\n        return angle + MATH_CONST.PI2;\r\n    }\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nimport { NormalizeAngle } from './NormalizeAngle';\r\n\r\n/**\r\n * Reverse the given angle.\r\n *\r\n * @function Phaser.Math.Angle.Reverse\r\n * @since 3.0.0\r\n *\r\n * @param {number} angle - The angle to reverse, in radians.\r\n *\r\n * @return {number} The reversed angle, in radians.\r\n */\r\nexport function ReverseAngle (angle: number): number\r\n{\r\n    return NormalizeAngle(angle + Math.PI);\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nimport { MATH_CONST } from '../const';\r\n\r\n/**\r\n * Rotates `currentAngle` towards `targetAngle`, taking the shortest rotation distance. The `lerp` argument is the amount to rotate by in this call.\r\n *\r\n * @function Phaser.Math.Angle.RotateTo\r\n * @since 3.0.0\r\n *\r\n * @param {number} currentAngle - The current angle, in radians.\r\n * @param {number} targetAngle - The target angle to rotate to, in radians.\r\n * @param {number} [lerp=0.05] - The lerp value to add to the current angle.\r\n *\r\n * @return {number} The adjusted angle.\r\n */\r\nexport function RotateAngleTo (currentAngle: number, targetAngle: number, lerp: number = 0.05): number\r\n{\r\n    if (currentAngle === targetAngle)\r\n    {\r\n        return currentAngle;\r\n    }\r\n\r\n    if (Math.abs(targetAngle - currentAngle) <= lerp || Math.abs(targetAngle - currentAngle) >= (MATH_CONST.PI2 - lerp))\r\n    {\r\n        currentAngle = targetAngle;\r\n    }\r\n    else\r\n    {\r\n        if (Math.abs(targetAngle - currentAngle) > Math.PI)\r\n        {\r\n            if (targetAngle < currentAngle)\r\n            {\r\n                targetAngle += MATH_CONST.PI2;\r\n            }\r\n            else\r\n            {\r\n                targetAngle -= MATH_CONST.PI2;\r\n            }\r\n        }\r\n\r\n        if (targetAngle > currentAngle)\r\n        {\r\n            currentAngle += lerp;\r\n        }\r\n        else if (targetAngle < currentAngle)\r\n        {\r\n            currentAngle -= lerp;\r\n        }\r\n    }\r\n\r\n    return currentAngle;\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Gets the shortest angle between `angle1` and `angle2`.\r\n *\r\n * Both angles must be in the range -180 to 180, which is the same clamped\r\n * range that `sprite.angle` uses, so you can pass in two sprite angles to\r\n * this method and get the shortest angle back between the two of them.\r\n *\r\n * The angle returned will be in the same range. If the returned angle is\r\n * greater than 0 then it's a counter-clockwise rotation, if < 0 then it's\r\n * a clockwise rotation.\r\n *\r\n * TODO: Wrap the angles in this function?\r\n *\r\n * @function Phaser.Math.Angle.ShortestBetween\r\n * @since 3.0.0\r\n *\r\n * @param {number} angle1 - The first angle in the range -180 to 180.\r\n * @param {number} angle2 - The second angle in the range -180 to 180.\r\n *\r\n * @return {number} The shortest angle, in degrees. If greater than zero it's a counter-clockwise rotation.\r\n */\r\nexport function ShortestAngleBetween (angle1: number, angle2: number): number\r\n{\r\n    const difference = angle2 - angle1;\r\n\r\n    if (difference === 0)\r\n    {\r\n        return 0;\r\n    }\r\n\r\n    const times = Math.floor((difference - (-180)) / 360);\r\n\r\n    return difference - (times * 360);\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Wrap the given `value` between `min` and `max.\r\n *\r\n * @function Phaser.Math.Wrap\r\n * @since 3.0.0\r\n *\r\n * @param {number} value - The value to wrap.\r\n * @param {number} min - The minimum value.\r\n * @param {number} max - The maximum value.\r\n *\r\n * @return {number} The wrapped value.\r\n */\r\nexport function Wrap (value: number, min: number, max: number): number\r\n{\r\n    const range = max - min;\r\n\r\n    return (min + ((((value - min) % range) + range) % range));\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nimport { Wrap } from '../Wrap';\r\n\r\n/**\r\n * Wrap an angle.\r\n *\r\n * Wraps the angle to a value in the range of -PI to PI.\r\n *\r\n * @function Phaser.Math.Angle.Wrap\r\n * @since 3.0.0\r\n *\r\n * @param {number} angle - The angle to wrap, in radians.\r\n *\r\n * @return {number} The wrapped angle, in radians.\r\n */\r\nexport function WrapAngle (angle: number): number\r\n{\r\n    return Wrap(angle, -Math.PI, Math.PI);\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nimport { Wrap } from '../Wrap';\r\n\r\n/**\r\n * Wrap an angle in degrees.\r\n *\r\n * Wraps the angle to a value in the range of -180 to 180.\r\n *\r\n * @function Phaser.Math.Angle.WrapDegrees\r\n * @since 3.0.0\r\n *\r\n * @param {number} angle - The angle to wrap, in degrees.\r\n *\r\n * @return {number} The wrapped angle, in degrees.\r\n */\r\nexport function WrapAngleDegrees (angle: number): number\r\n{\r\n    return Wrap(angle, -180, 180);\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nimport { AngleBetween } from './AngleBetween';\r\nimport { AngleBetweenY } from './AngleBetweenY';\r\nimport { CounterClockwise } from './CounterClockwise';\r\nimport { NormalizeAngle } from './NormalizeAngle';\r\nimport { ReverseAngle } from './ReverseAngle';\r\nimport { RotateAngleTo } from './RotateAngleTo';\r\nimport { ShortestAngleBetween } from './ShortestAngleBetween';\r\nimport { WrapAngle } from './WrapAngle';\r\nimport { WrapAngleDegrees } from './WrapAngleDegrees';\r\n\r\n/**\r\n * @namespace Phaser.Math.Angle\r\n */\r\n\r\nexport {\r\n    AngleBetween,\r\n    AngleBetweenY,\r\n    CounterClockwise,\r\n    NormalizeAngle,\r\n    ReverseAngle,\r\n    RotateAngleTo,\r\n    ShortestAngleBetween,\r\n    WrapAngle,\r\n    WrapAngleDegrees\r\n};\r\n", "import { GameInstance } from '../GameInstance';\r\nimport { IRenderer } from '../renderer/IRenderer';\r\nimport { IStaticCamera } from './IStaticCamera';\r\nimport { IStaticWorld } from '../world/IStaticWorld';\r\nimport { Mat4Identity } from '../math/mat4';\r\nimport { Matrix2D } from '../math/mat2d/Matrix2D';\r\nimport { Matrix4 } from '../math/mat4/Matrix4';\r\nimport { Rectangle } from '../geom/rectangle/Rectangle';\r\n\r\nexport class StaticCamera implements IStaticCamera\r\n{\r\n    world: IStaticWorld;\r\n    matrix: Matrix4;\r\n    renderer: IRenderer;\r\n    type: string;\r\n\r\n    width: number;\r\n    height: number;\r\n    bounds: Rectangle;\r\n\r\n    dirtyRender: boolean;\r\n    worldTransform: Matrix2D;\r\n\r\n    constructor ()\r\n    {\r\n        this.dirtyRender = true;\r\n\r\n        const game = GameInstance.get();\r\n\r\n        this.renderer = game.renderer;\r\n\r\n        this.matrix = Mat4Identity();\r\n\r\n        this.bounds = new Rectangle();\r\n\r\n        this.worldTransform = new Matrix2D();\r\n\r\n        this.reset();\r\n    }\r\n\r\n    reset (): void\r\n    {\r\n        const renderer = this.renderer;\r\n\r\n        if (renderer)\r\n        {\r\n            const width = renderer.width;\r\n            const height = renderer.height;\r\n\r\n            this.width = width;\r\n            this.height = height;\r\n        }\r\n\r\n        this.bounds.set(0, 0, this.width, this.height);\r\n    }\r\n\r\n    destroy (): void\r\n    {\r\n        this.world = null;\r\n        this.worldTransform = null;\r\n        this.renderer = null;\r\n        this.matrix = null;\r\n        this.bounds = null;\r\n    }\r\n}\r\n", "import { CreateTempTextures } from './CreateTempTextures';\r\nimport { GetBatchSize } from '../../../config/batchsize/GetBatchSize';\r\nimport { IBaseCamera } from '../../../camera/IBaseCamera';\r\nimport { IRenderPass } from './IRenderPass';\r\nimport { IShader } from '../shaders/IShader';\r\nimport { IVertexBuffer } from '../buffers/IVertexBuffer';\r\nimport { IWebGLRenderer } from '../IWebGLRenderer';\r\nimport { IndexedVertexBuffer } from '../buffers/IndexedVertexBuffer';\r\nimport { Mat4Ortho } from '../../../math/mat4/Mat4Ortho';\r\nimport { Matrix4 } from '../../../math/mat4/Matrix4';\r\nimport { MultiTextureQuadShader } from '../shaders';\r\nimport { QuadShader } from '../shaders/QuadShader';\r\nimport { Rectangle } from '../../../geom/rectangle/Rectangle';\r\nimport { SetDefaultBlendMode } from './SetDefaultBlendMode';\r\nimport { SetDefaultFramebuffer } from './SetDefaultFramebuffer';\r\nimport { SetDefaultShader } from './SetDefaultShader';\r\nimport { SetDefaultVertexBuffer } from './SetDefaultVertexBuffer';\r\nimport { SetDefaultViewport } from './SetDefaultViewport';\r\nimport { StaticCamera } from '../../../camera';\r\n\r\nexport type FramebufferStackEntry = {\r\n    framebuffer: WebGLFramebuffer;\r\n    viewport?: Rectangle;\r\n};\r\n\r\nexport type ShaderStackEntry = {\r\n    shader: IShader;\r\n    textureID?: number;\r\n};\r\n\r\nexport type BlendModeStackEntry = {\r\n    enable: boolean;\r\n    sfactor?: number;\r\n    dfactor?: number;\r\n};\r\n\r\nexport class RenderPass implements IRenderPass\r\n{\r\n    renderer: IWebGLRenderer;\r\n\r\n    projectionMatrix: Matrix4;\r\n    cameraMatrix: Matrix4;\r\n\r\n    count: number = 0;\r\n    prevCount: number = 0;\r\n    flushTotal: number = 0;\r\n\r\n    //  The maximum number of combined image units the GPU supports\r\n    //  According to the WebGL spec the minimum is 8\r\n    maxTextures: number = 0;\r\n    currentActiveTexture: number = 0;\r\n    startActiveTexture: number = 0;\r\n    tempTextures: WebGLTexture[] = [];\r\n    textureIndex: number[] = [];\r\n\r\n    //  FBO\r\n    framebufferStack: FramebufferStackEntry[] = [];\r\n    currentFramebuffer: FramebufferStackEntry = null;\r\n    defaultFramebuffer: FramebufferStackEntry = null;\r\n\r\n    //  VBO\r\n    vertexBufferStack: IVertexBuffer[] = [];\r\n    currentVertexBuffer: IVertexBuffer = null;\r\n    defaultVertexBuffer: IVertexBuffer = null;\r\n\r\n    //  Shader\r\n    shaderStack: ShaderStackEntry[] = [];\r\n    currentShader: ShaderStackEntry = null;\r\n    defaultShader: ShaderStackEntry = null;\r\n\r\n    //  Viewport\r\n    viewportStack: Rectangle[] = [];\r\n    currentViewport: Rectangle = null;\r\n    defaultViewport: Rectangle = null;\r\n\r\n    //  Blend Mode\r\n    blendModeStack: BlendModeStackEntry[] = [];\r\n    currentBlendMode: BlendModeStackEntry = null;\r\n    defaultBlendMode: BlendModeStackEntry = null;\r\n\r\n    //  Single Texture Quad Shader + Camera\r\n    quadShader: IShader;\r\n    quadBuffer: IVertexBuffer;\r\n    quadCamera: IBaseCamera;\r\n\r\n    //  Current 2D Camera\r\n    current2DCamera: IBaseCamera;\r\n\r\n    constructor (renderer: IWebGLRenderer)\r\n    {\r\n        this.renderer = renderer;\r\n\r\n        this.projectionMatrix = new Matrix4();\r\n\r\n        this.reset();\r\n    }\r\n\r\n    //  TODO - Call when context is lost and restored\r\n    reset (): void\r\n    {\r\n        const gl = this.renderer.gl;\r\n\r\n        const indexLayout = [ 0, 1, 2, 2, 3, 0 ];\r\n\r\n        //  TODO - If already created, delete shaders / buffers first (i.e. during context loss)\r\n\r\n        //  Default QuadShader (for FBO drawing)\r\n\r\n        this.quadShader = new QuadShader();\r\n        this.quadBuffer = new IndexedVertexBuffer({ isDynamic: false, indexLayout });\r\n        this.quadCamera = new StaticCamera();\r\n\r\n        //  Default settings\r\n\r\n        CreateTempTextures(this);\r\n\r\n        SetDefaultFramebuffer(this);\r\n        SetDefaultBlendMode(this, true, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\r\n        SetDefaultVertexBuffer(this, new IndexedVertexBuffer({ batchSize: GetBatchSize(), indexLayout }));\r\n        SetDefaultShader(this, new MultiTextureQuadShader());\r\n    }\r\n\r\n    resize (width: number, height: number): void\r\n    {\r\n        //  TODO - -1 to 1?\r\n        Mat4Ortho(0, width, height, 0, -1000, 1000, this.projectionMatrix);\r\n\r\n        this.quadCamera.reset();\r\n\r\n        SetDefaultViewport(this, 0, 0, width, height);\r\n    }\r\n}\r\n", "import { IRenderPass } from './IRenderPass';\r\nimport { ShaderStackEntry } from '../shaders/ShaderStackEntry';\r\n\r\nexport function BindShader (renderPass: IRenderPass, entry?: ShaderStackEntry): void\r\n{\r\n    let prevShader;\r\n\r\n    if (!entry)\r\n    {\r\n        entry = renderPass.currentShader;\r\n    }\r\n    else\r\n    {\r\n        prevShader = renderPass.currentShader.shader;\r\n    }\r\n\r\n    if (!entry.shader.isActive)\r\n    {\r\n        const success = entry.shader.bind(renderPass, entry.textureID);\r\n\r\n        if (success)\r\n        {\r\n            entry.shader.setAttributes(renderPass);\r\n\r\n            if (prevShader && prevShader !== entry.shader)\r\n            {\r\n                prevShader.isActive = false;\r\n            }\r\n        }\r\n    }\r\n}\r\n", "import { BindShader } from './BindShader';\r\nimport { IBaseCamera } from '../../../camera/IBaseCamera';\r\nimport { IRenderPass } from './IRenderPass';\r\n\r\nexport function Begin (renderPass: IRenderPass, camera2D: IBaseCamera): void\r\n{\r\n    renderPass.current2DCamera = camera2D;\r\n    renderPass.cameraMatrix = camera2D.matrix;\r\n\r\n    BindShader(renderPass);\r\n}\r\n", "import { BlendModeStackEntry } from './RenderPass';\r\nimport { IRenderPass } from './IRenderPass';\r\nimport { gl } from '../GL';\r\n\r\nexport function BindBlendMode (renderPass: IRenderPass, entry?: BlendModeStackEntry): void\r\n{\r\n    if (!entry)\r\n    {\r\n        entry = renderPass.currentBlendMode;\r\n    }\r\n\r\n    if (entry.enable)\r\n    {\r\n        if (!gl.isEnabled(gl.BLEND) || (renderPass.currentBlendMode.sfactor !== entry.sfactor || renderPass.currentBlendMode.dfactor !== entry.dfactor))\r\n        {\r\n            gl.enable(gl.BLEND);\r\n            gl.blendFunc(entry.sfactor, entry.dfactor);\r\n        }\r\n    }\r\n    else\r\n    {\r\n        gl.disable(gl.BLEND);\r\n    }\r\n}\r\n", "import { IRenderPass } from './IRenderPass';\r\nimport { IVertexBuffer } from '../buffers/IVertexBuffer';\r\nimport { gl } from '../GL';\r\n\r\nexport function BindVertexBuffer (renderPass: IRenderPass, buffer?: IVertexBuffer): void\r\n{\r\n    if (buffer)\r\n    {\r\n        buffer.isBound = false;\r\n    }\r\n    else\r\n    {\r\n        buffer = renderPass.currentVertexBuffer;\r\n    }\r\n\r\n    if (!buffer.isBound)\r\n    {\r\n        const indexBuffer = (buffer.indexed) ? buffer.indexBuffer : null;\r\n\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);\r\n\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, buffer.vertexBuffer);\r\n\r\n        buffer.isBound = true;\r\n    }\r\n}\r\n", "import { BufferEntry } from '../draw/BufferEntry';\r\nimport { Flush } from './Flush';\r\nimport { IRenderPass } from './IRenderPass';\r\n\r\nexport function GetVertexBufferEntry (renderPass: IRenderPass, addToCount: number = 0): BufferEntry\r\n{\r\n    const buffer = renderPass.currentVertexBuffer;\r\n\r\n    //  If batch cannot take the size of this entry, flush it first\r\n    if (renderPass.count + addToCount >= buffer.batchSize)\r\n    {\r\n        Flush(renderPass);\r\n    }\r\n\r\n    const offset = (buffer.indexed) ? renderPass.count * buffer.entryElementSize : renderPass.count * buffer.vertexElementSize;\r\n\r\n    renderPass.count += addToCount;\r\n\r\n    return {\r\n        buffer,\r\n        F32: buffer.vertexViewF32,\r\n        U32: buffer.vertexViewU32,\r\n        offset\r\n    };\r\n}\r\n", "import { Flush } from './Flush';\r\nimport { IRenderPass } from './IRenderPass';\r\nimport { ITexture } from '../../../textures/ITexture';\r\nimport { gl } from '../GL';\r\n\r\n//  request the next available texture and bind it\r\n//  returns the new ID\r\nexport function SetTexture (renderPass: IRenderPass, texture: ITexture): number\r\n{\r\n    const binding = texture.binding;\r\n    const currentActiveTexture = renderPass.currentActiveTexture;\r\n\r\n    if (binding.indexCounter < renderPass.startActiveTexture)\r\n    {\r\n        binding.indexCounter = renderPass.startActiveTexture;\r\n\r\n        if (currentActiveTexture < renderPass.maxTextures)\r\n        {\r\n            binding.setIndex(currentActiveTexture);\r\n\r\n            gl.activeTexture(gl.TEXTURE0 + currentActiveTexture);\r\n            gl.bindTexture(gl.TEXTURE_2D, binding.texture);\r\n\r\n            renderPass.currentActiveTexture++;\r\n        }\r\n        else\r\n        {\r\n            //  We're out of textures, so flush the batch and reset back to 1\r\n            Flush(renderPass);\r\n\r\n            renderPass.startActiveTexture++;\r\n\r\n            binding.indexCounter = renderPass.startActiveTexture;\r\n\r\n            binding.setIndex(1);\r\n\r\n            gl.activeTexture(gl.TEXTURE1);\r\n            gl.bindTexture(gl.TEXTURE_2D, binding.texture);\r\n\r\n            renderPass.currentActiveTexture = 2;\r\n        }\r\n    }\r\n\r\n    return binding.index;\r\n}\r\n", "import { BindBlendMode } from './BindBlendMode';\r\nimport { BindFramebuffer } from './BindFramebuffer';\r\nimport { BindVertexBuffer } from './BindVertexBuffer';\r\nimport { BindViewport } from './BindViewport';\r\nimport { IRenderPass } from './IRenderPass';\r\n\r\nexport function Start (renderPass: IRenderPass): void\r\n{\r\n    //  Rather than doing Bind object comparisons each bind can store an integer that is checked\r\n\r\n    renderPass.current2DCamera = renderPass.quadCamera;\r\n    renderPass.cameraMatrix = renderPass.quadCamera.matrix;\r\n\r\n    renderPass.count = 0;\r\n    renderPass.flushTotal = 0;\r\n\r\n    BindFramebuffer(renderPass, false, renderPass.defaultFramebuffer);\r\n    BindBlendMode(renderPass, renderPass.defaultBlendMode);\r\n    BindViewport(renderPass, renderPass.defaultViewport);\r\n    BindVertexBuffer(renderPass, renderPass.defaultVertexBuffer);\r\n}\r\n", "import { WebGLRenderer } from './WebGLRenderer';\r\n\r\nexport let instance: WebGLRenderer;\r\n\r\nexport const WebGLRendererInstance =\r\n{\r\n    get: (): WebGLRenderer =>\r\n    {\r\n        return instance;\r\n    },\r\n\r\n    set: (renderer: WebGLRenderer | undefined): void =>\r\n    {\r\n        instance = renderer;\r\n    }\r\n};\r\n", "import { IBaseWorld } from './IBaseWorld';\r\nimport { IScene } from '../scenes/IScene';\r\n\r\nexport const WorldList: Map<IScene, IBaseWorld[]> = new Map();\r\n", "import { GetHeight, GetResolution, GetWidth } from '../../config/size/';\r\n\r\nimport { End } from './renderpass/End';\r\nimport { GL } from './GL';\r\nimport { GetBackgroundColor } from '../../config/backgroundcolor/GetBackgroundColor';\r\nimport { GetRGBArray } from './colors/GetRGBArray';\r\nimport { GetWebGLContext } from '../../config/webglcontext/GetWebGLContext';\r\nimport { IRenderPass } from './renderpass/IRenderPass';\r\nimport { IScene } from '../../scenes/IScene';\r\nimport { ProcessBindingQueue } from './renderpass/ProcessBindingQueue';\r\nimport { RenderPass } from './renderpass/RenderPass';\r\nimport { Start } from './renderpass';\r\nimport { WebGLRendererInstance } from './WebGLRendererInstance';\r\nimport { WorldList } from '../../world/WorldList';\r\n\r\nexport class WebGLRenderer\r\n{\r\n    canvas: HTMLCanvasElement;\r\n    gl: WebGLRenderingContext;\r\n\r\n    renderPass: IRenderPass;\r\n\r\n    clearColor = [ 0, 0, 0, 1 ];\r\n\r\n    width: number;\r\n    height: number;\r\n    resolution: number;\r\n\r\n    clearBeforeRender: boolean = true;\r\n    optimizeRedraw: boolean = true;\r\n    autoResize: boolean = true;\r\n\r\n    contextLost: boolean = false;\r\n\r\n    constructor ()\r\n    {\r\n        this.width = GetWidth();\r\n        this.height = GetHeight();\r\n        this.resolution = GetResolution();\r\n\r\n        this.setBackgroundColor(GetBackgroundColor());\r\n\r\n        const canvas = document.createElement('canvas');\r\n\r\n        canvas.addEventListener('webglcontextlost', (event) => this.onContextLost(event), false);\r\n        canvas.addEventListener('webglcontextrestored', () => this.onContextRestored(), false);\r\n\r\n        this.canvas = canvas;\r\n\r\n        this.initContext();\r\n\r\n        //  By this stage the context is available\r\n        WebGLRendererInstance.set(this);\r\n\r\n        this.renderPass = new RenderPass(this);\r\n\r\n        this.resize(this.width, this.height, this.resolution);\r\n    }\r\n\r\n    initContext (): void\r\n    {\r\n        const gl = this.canvas.getContext('webgl', GetWebGLContext());\r\n\r\n        GL.set(gl);\r\n\r\n        this.gl = gl;\r\n\r\n        gl.disable(gl.DEPTH_TEST);\r\n        gl.disable(gl.CULL_FACE);\r\n    }\r\n\r\n    resize (width: number, height: number, resolution: number = 1): void\r\n    {\r\n        const calcWidth = width * resolution;\r\n        const calcHeight = height * resolution;\r\n\r\n        this.width = calcWidth;\r\n        this.height = calcHeight;\r\n        this.resolution = resolution;\r\n\r\n        const canvas = this.canvas;\r\n\r\n        canvas.width = calcWidth;\r\n        canvas.height = calcHeight;\r\n\r\n        if (this.autoResize)\r\n        {\r\n            canvas.style.width = width.toString() + 'px';\r\n            canvas.style.height = height.toString() + 'px';\r\n        }\r\n\r\n        this.renderPass.resize(calcWidth, calcHeight);\r\n    }\r\n\r\n    onContextLost (event: Event): void\r\n    {\r\n        event.preventDefault();\r\n\r\n        this.contextLost = true;\r\n    }\r\n\r\n    onContextRestored (): void\r\n    {\r\n        this.contextLost = false;\r\n\r\n        this.initContext();\r\n    }\r\n\r\n    setBackgroundColor (color: number): this\r\n    {\r\n        GetRGBArray(color, this.clearColor);\r\n\r\n        return this;\r\n    }\r\n\r\n    //  TODO - Remove?\r\n    reset (): void\r\n    {\r\n        // this.renderPass.reset();\r\n    }\r\n\r\n    render (willRedraw: boolean, scenes: Map<string, IScene>): void\r\n    {\r\n        if (this.contextLost)\r\n        {\r\n            return;\r\n        }\r\n\r\n        const gl = this.gl;\r\n        const renderPass = this.renderPass;\r\n\r\n        //  This is only here because if we don't do _something_ with the context,\r\n        //  GL Spector can't see it!\r\n        gl.getContextAttributes();\r\n\r\n        ProcessBindingQueue();\r\n\r\n        //  Nothing dirty? Display the previous frame\r\n        if (this.optimizeRedraw && !willRedraw)\r\n        {\r\n            // return;\r\n        }\r\n\r\n        if (this.clearBeforeRender)\r\n        {\r\n            const cls = this.clearColor;\r\n\r\n            gl.clearColor(cls[0], cls[1], cls[2], cls[3]);\r\n            gl.clear(gl.COLOR_BUFFER_BIT);\r\n        }\r\n\r\n        Start(renderPass);\r\n\r\n        for (const scene of scenes.values())\r\n        {\r\n            const worlds = WorldList.get(scene);\r\n\r\n            for (const world of worlds)\r\n            {\r\n                if (world.runRender)\r\n                {\r\n                    world.renderGL(renderPass);\r\n                }\r\n\r\n                world.postRenderGL(renderPass);\r\n            }\r\n        }\r\n\r\n        End(renderPass);\r\n\r\n        // eslint-disable-next-line no-debugger\r\n        // debugger;\r\n    }\r\n\r\n    destroy (): void\r\n    {\r\n        WebGLRendererInstance.set(undefined);\r\n    }\r\n}\r\n", "import { SetRenderer } from '../renderer/SetRenderer';\r\nimport { WebGLRenderer } from '../../renderer/webgl1/WebGLRenderer';\r\n\r\nexport function WebGL (): () => void\r\n{\r\n    return (): void =>\r\n    {\r\n        SetRenderer(WebGLRenderer);\r\n    };\r\n}\r\n", "import { CONFIG_DEFAULTS } from '../const';\r\nimport { ConfigStore } from '../ConfigStore';\r\n\r\nexport function SetWebGLContext (contextAttributes: WebGLContextAttributes): void\r\n{\r\n    ConfigStore.set(CONFIG_DEFAULTS.WEBGL_CONTEXT, contextAttributes);\r\n}\r\n", "import { CONFIG_DEFAULTS } from '../const';\r\nimport { ConfigStore } from '../ConfigStore';\r\n\r\nexport function SetWorldSize (size: number): void\r\n{\r\n    ConfigStore.set(CONFIG_DEFAULTS.WORLD_SIZE, size);\r\n}\r\n", "export function PackColor (rgb: number, alpha: number): number\r\n{\r\n    const ua = ((alpha * 255) | 0) & 0xFF;\r\n\r\n    return ((ua << 24) | rgb) >>> 0;\r\n}\r\n", "import { GetVertexBufferEntry } from '../renderpass/GetVertexBufferEntry';\r\nimport { IFrame } from '../../../textures/IFrame';\r\nimport { IRenderPass } from '../renderpass/IRenderPass';\r\nimport { ITexture } from '../../../textures/ITexture';\r\nimport { PackColor } from '../colors/PackColor';\r\nimport { SetTexture } from '../renderpass/SetTexture';\r\n\r\nexport function DrawFrame (renderPass: IRenderPass, texture: ITexture, frame: string | number | IFrame, x: number, y: number, alpha: number = 1, scaleX: number = 1, scaleY: number = 1): void\r\n{\r\n    const { F32, U32, offset } = GetVertexBufferEntry(renderPass, 1);\r\n\r\n    const packedColor = PackColor(0xffffff, alpha);\r\n\r\n    frame = texture.getFrame(frame);\r\n\r\n    const textureIndex = SetTexture(renderPass, texture);\r\n\r\n    const displayWidth = frame.width * scaleX;\r\n    const displayHeight = frame.height * scaleY;\r\n\r\n    //  top left\r\n    F32[offset + 0] = x;\r\n    F32[offset + 1] = y;\r\n    F32[offset + 2] = frame.u0;\r\n    F32[offset + 3] = frame.v0;\r\n    F32[offset + 4] = textureIndex;\r\n    U32[offset + 5] = packedColor;\r\n\r\n    //  bottom left\r\n    F32[offset + 6] = x;\r\n    F32[offset + 7] = y + displayHeight;\r\n    F32[offset + 8] = frame.u0;\r\n    F32[offset + 9] = frame.v1;\r\n    F32[offset + 10] = textureIndex;\r\n    U32[offset + 11] = packedColor;\r\n\r\n    //  bottom right\r\n    F32[offset + 12] = x + displayWidth;\r\n    F32[offset + 13] = y + displayHeight;\r\n    F32[offset + 14] = frame.u1;\r\n    F32[offset + 15] = frame.v1;\r\n    F32[offset + 16] = textureIndex;\r\n    U32[offset + 17] = packedColor;\r\n\r\n    //  top right\r\n    F32[offset + 18] = x + displayWidth;\r\n    F32[offset + 19] = y;\r\n    F32[offset + 20] = frame.u1;\r\n    F32[offset + 21] = frame.v0;\r\n    F32[offset + 22] = textureIndex;\r\n    U32[offset + 23] = packedColor;\r\n}\r\n", "import { GetElement } from './GetElement';\r\n\r\nexport function AddToDOM (element: HTMLElement, parent?: string | HTMLElement): HTMLElement\r\n{\r\n    const target: HTMLElement = GetElement(parent);\r\n\r\n    target.appendChild(element);\r\n\r\n    return element;\r\n}\r\n", "export function DOMContentLoaded (callback: () => void): void\r\n{\r\n    const readyState = document.readyState;\r\n\r\n    if (readyState === 'complete' || readyState === 'interactive')\r\n    {\r\n        callback();\r\n\r\n        return;\r\n    }\r\n\r\n    const check = (): void =>\r\n    {\r\n        document.removeEventListener('deviceready', check, true);\r\n        document.removeEventListener('DOMContentLoaded', check, true);\r\n        window.removeEventListener('load', check, true);\r\n\r\n        callback();\r\n    };\r\n\r\n    // TODO - Swap is IsCordova call\r\n\r\n    if (!document.body)\r\n    {\r\n        window.setTimeout(check, 20);\r\n    }\r\n    else if (window.hasOwnProperty('cordova'))\r\n    {\r\n        document.addEventListener('deviceready', check, true);\r\n    }\r\n    else\r\n    {\r\n        document.addEventListener('DOMContentLoaded', check, true);\r\n        window.addEventListener('load', check, true);\r\n    }\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Takes the given data string and parses it as XML using the native DOMParser interface.\r\n * The parsed XML object is returned, or `null` if there was an error while parsing the data.\r\n *\r\n * @function Phaser.DOM.ParseXML\r\n * @since 3.0.0\r\n *\r\n * @param {string} data - The XML source stored in a string.\r\n *\r\n * @return {?XMLDocument} The parsed XML data, or `null` if the data could not be parsed.\r\n */\r\nexport function ParseXML (data: string): XMLDocument | null\r\n{\r\n    let xml: XMLDocument;\r\n\r\n    try\r\n    {\r\n        const parser = new DOMParser();\r\n\r\n        xml = parser.parseFromString(data, 'text/xml');\r\n\r\n        if (!xml || !xml.documentElement || xml.getElementsByTagName('parsererror').length)\r\n        {\r\n            return null;\r\n        }\r\n        else\r\n        {\r\n            return xml;\r\n        }\r\n    }\r\n    catch (error)\r\n    {\r\n        return null;\r\n    }\r\n}\r\n", "import { IEventEmitter } from './IEventEmitter';\r\nimport { IEventInstance } from './IEventInstance';\r\n\r\nexport function Emit (emitter: IEventEmitter, event: string, ...args: unknown[]): boolean\r\n{\r\n    if (emitter.events.size === 0 || !emitter.events.has(event))\r\n    {\r\n        return false;\r\n    }\r\n\r\n    const listeners: Set<IEventInstance> = emitter.events.get(event);\r\n\r\n    //  Convert to an array so the callbacks cannot impact what we're iterating\r\n    //  It works, but generates gc\r\n    const handlers = [ ...listeners ];\r\n\r\n    for (const ee of handlers)\r\n    {\r\n        ee.callback.apply(ee.context, args);\r\n\r\n        if (ee.once)\r\n        {\r\n            listeners.delete(ee);\r\n        }\r\n    }\r\n\r\n    if (listeners.size === 0)\r\n    {\r\n        emitter.events.delete(event);\r\n    }\r\n\r\n    return true;\r\n}\r\n", "import { IEventInstance } from './IEventInstance';\r\n\r\nexport class EventEmitter\r\n{\r\n    events: Map<string, Set<IEventInstance>>;\r\n\r\n    constructor ()\r\n    {\r\n        this.events = new Map();\r\n    }\r\n}\r\n", "export class EventInstance\r\n{\r\n    callback: Function;\r\n    context: unknown;\r\n    once: boolean;\r\n\r\n    constructor (callback: Function, context: unknown, once: boolean = false)\r\n    {\r\n        this.callback = callback;\r\n        this.context = context;\r\n        this.once = once;\r\n    }\r\n}\r\n", "import { EventInstance } from './EventInstance';\r\nimport { IEventEmitter } from './IEventEmitter';\r\nimport { IEventInstance } from './IEventInstance';\r\n\r\nexport function On (emitter: IEventEmitter, event: string, callback: Function, context: unknown = emitter, once: boolean = false): IEventInstance\r\n{\r\n    if (typeof callback !== 'function')\r\n    {\r\n        throw new TypeError('Listener not a function');\r\n    }\r\n\r\n    const listener = new EventInstance(callback, context, once);\r\n    const listeners = emitter.events.get(event);\r\n\r\n    if (!listeners)\r\n    {\r\n        emitter.events.set(event, new Set([ listener ]));\r\n    }\r\n    else\r\n    {\r\n        listeners.add(listener);\r\n    }\r\n\r\n    return listener;\r\n}\r\n", "import { IEventEmitter } from './IEventEmitter';\r\nimport { IEventInstance } from './IEventInstance';\r\nimport { On } from './On';\r\n\r\nexport function Once (emitter: IEventEmitter, event: string, callback: Function, context: unknown = emitter): IEventInstance\r\n{\r\n    return On(emitter, event, callback, context, true);\r\n}\r\n", "import { CONFIG_DEFAULTS } from '../const';\r\nimport { ConfigStore } from '../ConfigStore';\r\n\r\nexport function GetBanner (): void\r\n{\r\n    const { title, version, url, color, background } = ConfigStore.get(CONFIG_DEFAULTS.BANNER);\r\n\r\n    if (title !== '')\r\n    {\r\n        const str = (version !== '') ? title + ' ' + version : title;\r\n\r\n        console.log(\r\n            `%c${str}%c ${url}`,\r\n            `padding: 4px 16px; color: ${color}; background: ${background}`,\r\n            ''\r\n        );\r\n    }\r\n}\r\n", "import { CONFIG_DEFAULTS } from '../const';\r\nimport { ConfigStore } from '../ConfigStore';\r\n\r\nexport function GetGlobalVar (): number\r\n{\r\n    return ConfigStore.get(CONFIG_DEFAULTS.GLOBAL_VAR);\r\n}\r\n", "import { CONFIG_DEFAULTS } from '../const';\r\nimport { ConfigStore } from '../ConfigStore';\r\n\r\nexport function GetParent (): string | HTMLElement | undefined\r\n{\r\n    return ConfigStore.get(CONFIG_DEFAULTS.PARENT);\r\n}\r\n", "import { Types, defineComponent } from 'bitecs';\r\n\r\nconst RenderStats = defineComponent({\r\n\r\n    //  The current Game Frame number\r\n    gameFrame: Types.ui32,\r\n\r\n    //  Total number of Scenes rendered\r\n    numScenes: Types.ui8,\r\n\r\n    //  Total number of Worlds rendered\r\n    numWorlds: Types.ui8,\r\n\r\n    //  Total number of Game Objects (across all worlds)\r\n    numGameObjects: Types.ui32,\r\n\r\n    //  Total number of Game Objects to be rendered (across all worlds)\r\n    numGameObjectsRendered: Types.ui32,\r\n\r\n    //  Total number of Game Objects with dirty local transforms\r\n    numDirtyLocalTransforms: Types.ui32,\r\n\r\n    //  Total number of Game Objects with dirty world transforms\r\n    numDirtyWorldTransforms: Types.ui32,\r\n\r\n    //  Total number of Game Objects with dirty vertices\r\n    numDirtyVertices: Types.ui32,\r\n\r\n    //  Total number of Worlds that had to recalculate their display lists\r\n    numDirtyWorldLists: Types.ui8,\r\n\r\n    //  How many Cameras were made dirty this frame across all Scenes?\r\n    numDirtyCameras: Types.ui32\r\n\r\n});\r\n\r\nexport const RenderStatsComponent = RenderStats;\r\n", "import { GameObjectWorld } from '../GameObjectWorld';\r\nimport { RenderStatsComponent } from './RenderStatsComponent';\r\nimport { addComponent } from 'bitecs';\r\n\r\nexport function AddRenderStatsComponent (id: number): void\r\n{\r\n    addComponent(GameObjectWorld, RenderStatsComponent, id);\r\n}\r\n", "import { IGameObject } from '../gameobjects/IGameObject';\r\n\r\nexport const GameObjectRenderList: Set<IGameObject> = new Set();\r\n", "import { ISceneConfig } from './ISceneConfig';\r\n\r\nexport function GetConfigValue<Property extends keyof ISceneConfig> (config: ISceneConfig, property: Property, defaultValue: ISceneConfig[Property]): ISceneConfig[Property]\r\n{\r\n    if (Object.prototype.hasOwnProperty.call(config, property))\r\n    {\r\n        return config[property];\r\n    }\r\n    else\r\n    {\r\n        return defaultValue;\r\n    }\r\n}\r\n", "import { SceneManager } from './SceneManager';\r\n\r\nlet instance: SceneManager;\r\n\r\nexport const SceneManagerInstance =\r\n{\r\n    get: (): SceneManager =>\r\n    {\r\n        return instance;\r\n    },\r\n\r\n    set: (manager: SceneManager | null): void =>\r\n    {\r\n        if (instance)\r\n        {\r\n            throw new Error('SceneManager should not be instantiated more than once');\r\n        }\r\n\r\n        instance = manager;\r\n    }\r\n};\r\n", "import { IRenderStats } from './IRenderStats';\r\nimport { RenderStatsComponent } from './RenderStatsComponent';\r\nimport { SceneManagerInstance } from './SceneManagerInstance';\r\n\r\nexport function GetRenderStatsAsObject (obj?: IRenderStats): IRenderStats\r\n{\r\n    const id = SceneManagerInstance.get().id;\r\n\r\n    if (!obj)\r\n    {\r\n        obj = { fps: 0, delta: 0, gameFrame: 0, numScenes: 0, numWorlds: 0, numGameObjects: 0, numGameObjectsRendered: 0, numDirtyLocalTransforms: 0, numDirtyWorldTransforms: 0, numDirtyVertices: 0, numDirtyWorldLists: 0, numDirtyCameras: 0 };\r\n    }\r\n\r\n    obj.gameFrame = RenderStatsComponent.gameFrame[id];\r\n    obj.numScenes = RenderStatsComponent.numScenes[id];\r\n    obj.numWorlds = RenderStatsComponent.numWorlds[id];\r\n    obj.numGameObjects = RenderStatsComponent.numGameObjects[id];\r\n    obj.numGameObjectsRendered = RenderStatsComponent.numGameObjectsRendered[id];\r\n    obj.numDirtyLocalTransforms = RenderStatsComponent.numDirtyLocalTransforms[id];\r\n    obj.numDirtyWorldTransforms = RenderStatsComponent.numDirtyWorldTransforms[id];\r\n    obj.numDirtyVertices = RenderStatsComponent.numDirtyVertices[id];\r\n    obj.numDirtyWorldLists = RenderStatsComponent.numDirtyWorldLists[id];\r\n    obj.numDirtyCameras = RenderStatsComponent.numDirtyCameras[id];\r\n\r\n    return obj;\r\n}\r\n", "import { GetConfigValue } from './GetConfigValue';\r\nimport { IScene } from './IScene';\r\nimport { ISceneConfig } from './ISceneConfig';\r\nimport { SceneManagerInstance } from './SceneManagerInstance';\r\nimport { WorldList } from '../world/WorldList';\r\n\r\nexport function Install (scene: IScene, config: string | ISceneConfig = {}): void\r\n{\r\n    const sceneManager = SceneManagerInstance.get();\r\n\r\n    const size = sceneManager.scenes.size;\r\n    const sceneIndex = sceneManager.sceneIndex;\r\n    const firstScene = (size === 0);\r\n\r\n    if (typeof config === 'string')\r\n    {\r\n        scene.key = config;\r\n    }\r\n    else if (config || (!config && firstScene))\r\n    {\r\n        scene.key = GetConfigValue(config, 'key', 'scene' + sceneIndex.toString());\r\n    }\r\n\r\n    if (sceneManager.scenes.has(scene.key))\r\n    {\r\n        console.warn('Scene key already in use: ' + scene.key);\r\n    }\r\n    else\r\n    {\r\n        sceneManager.scenes.set(scene.key, scene);\r\n\r\n        sceneManager.flush = true;\r\n\r\n        sceneManager.sceneIndex++;\r\n    }\r\n\r\n    WorldList.set(scene, []);\r\n}\r\n", "import { RenderStatsComponent } from './RenderStatsComponent';\r\n\r\nexport function ResetRenderStats (id: number, gameFrame: number, scenes: number, worlds: number, transforms: number): void\r\n{\r\n    //  TODO - Consider using an array instead so we can plot changes across frames\r\n    RenderStatsComponent.gameFrame[id] = gameFrame;\r\n    RenderStatsComponent.numScenes[id] = scenes;\r\n    RenderStatsComponent.numWorlds[id] = worlds;\r\n    RenderStatsComponent.numGameObjects[id] = 0;\r\n    RenderStatsComponent.numGameObjectsRendered[id] = 0;\r\n    RenderStatsComponent.numDirtyWorldLists[id] = 0;\r\n    RenderStatsComponent.numDirtyVertices[id] = 0;\r\n    RenderStatsComponent.numDirtyLocalTransforms[id] = transforms;\r\n    RenderStatsComponent.numDirtyWorldTransforms[id] = 0;\r\n    RenderStatsComponent.numDirtyCameras[id] = 0;\r\n}\r\n", "import { Game } from '../Game';\r\nimport { GameInstance } from '../GameInstance';\r\nimport { IEventEmitter } from '../events/IEventEmitter';\r\nimport { IEventInstance } from '../events/IEventInstance';\r\nimport { IScene } from './IScene';\r\nimport { ISceneConfig } from './ISceneConfig';\r\nimport { Install } from './Install';\r\n\r\nexport class Scene implements IScene, IEventEmitter\r\n{\r\n    key: string;\r\n    game: Game;\r\n    events: Map<string, Set<IEventInstance>>;\r\n\r\n    constructor (config?: string | ISceneConfig)\r\n    {\r\n        this.game = GameInstance.get();\r\n        this.events = new Map();\r\n\r\n        Install(this, config);\r\n    }\r\n}\r\n", "import { CONFIG_DEFAULTS } from '../const';\r\nimport { ConfigStore } from '../ConfigStore';\r\nimport { ISceneConstructor } from '../../scenes/ISceneConstructor';\r\n\r\nexport function GetScenes (): ISceneConstructor[]\r\n{\r\n    return ConfigStore.get(CONFIG_DEFAULTS.SCENES);\r\n}\r\n", "import { Types, defineComponent } from 'bitecs';\r\n\r\nconst LocalMatrix2D = defineComponent({\r\n    a: Types.f32,\r\n    b: Types.f32,\r\n    c: Types.f32,\r\n    d: Types.f32,\r\n    tx: Types.f32,\r\n    ty: Types.f32,\r\n    dirty: Types.ui32\r\n});\r\n\r\nexport const LocalMatrix2DComponent = LocalMatrix2D;\r\n", "import { Types, defineComponent } from 'bitecs';\r\n\r\nconst Transform2D = defineComponent({\r\n    x: Types.f32,\r\n    y: Types.f32,\r\n    rotation: Types.f32,\r\n    scaleX: Types.f32,\r\n    scaleY: Types.f32,\r\n    skewX: Types.f32,\r\n    skewY: Types.f32,\r\n    originX: Types.f32,\r\n    originY: Types.f32\r\n});\r\n\r\nexport const Transform2DComponent = Transform2D;\r\n", "import { Types, defineComponent } from 'bitecs';\r\n\r\nconst WorldMatrix2D = defineComponent({\r\n    a: Types.f32,\r\n    b: Types.f32,\r\n    c: Types.f32,\r\n    d: Types.f32,\r\n    tx: Types.f32,\r\n    ty: Types.f32\r\n});\r\n\r\nexport const WorldMatrix2DComponent = WorldMatrix2D;\r\n", "import { GameObjectWorld } from '../../GameObjectWorld';\r\nimport { LocalMatrix2DComponent } from './LocalMatrix2DComponent';\r\nimport { hasComponent } from 'bitecs';\r\n\r\nexport function InvalidateLocalMatrix2DComponent (id: number): void\r\n{\r\n    if (hasComponent(GameObjectWorld, LocalMatrix2DComponent, id))\r\n    {\r\n        LocalMatrix2DComponent.dirty[id]++;\r\n    }\r\n}\r\n", "export const DIRTY_CONST = {\r\n\r\n    CLEAR: 0,\r\n    TRANSFORM: 1,\r\n    UPDATE: 2,\r\n    CHILD_CACHE: 4,\r\n    POST_RENDER: 8,\r\n    COLORS: 16,\r\n    BOUNDS: 32,\r\n    TEXTURE: 64,\r\n    FRAME: 128,\r\n    ALPHA: 256,\r\n    CHILD: 512,\r\n\r\n    //  Special combinations\r\n    DEFAULT: 1 + 2 + 16 + 32,\r\n\r\n    //  Reserved for future use:\r\n    //  1024\r\n    //  2048\r\n    //  4096\r\n    //  8192\r\n    //  16384\r\n    //  32768\r\n    //  65536\r\n    //  131072\r\n    //  262144\r\n    //  524288\r\n    //  1048576\r\n    //  2097152\r\n    //  4194304\r\n    //  8388608\r\n    //  16777216\r\n    //  33554432\r\n    //  67108864\r\n    //  134217728\r\n    //  268435456\r\n\r\n    //  Reserved for user use\r\n    USER1: 536870912,\r\n    USER2: 1073741824,\r\n    USER3: 2147483648,\r\n    USER4: 4294967296\r\n\r\n};\r\n", "import { Changed, IWorld, defineQuery, defineSystem } from 'bitecs';\r\n\r\nimport { LocalMatrix2DComponent } from './LocalMatrix2DComponent';\r\nimport { Transform2DComponent } from './Transform2DComponent';\r\n\r\nconst changedLocalTransformQuery = defineQuery([ Changed(Transform2DComponent) ]);\r\n\r\nlet entities: number[];\r\n\r\nconst updateLocalTransformSystem = defineSystem(world =>\r\n{\r\n    for (let i = 0; i < entities.length; i++)\r\n    {\r\n        const id = entities[i];\r\n\r\n        const x = Transform2DComponent.x[id];\r\n        const y = Transform2DComponent.y[id];\r\n        const rotation = Transform2DComponent.rotation[id];\r\n        const scaleX = Transform2DComponent.scaleX[id];\r\n        const scaleY = Transform2DComponent.scaleY[id];\r\n        const skewX = Transform2DComponent.skewX[id];\r\n        const skewY = Transform2DComponent.skewY[id];\r\n\r\n        LocalMatrix2DComponent.a[id] = Math.cos(rotation + skewY) * scaleX;\r\n        LocalMatrix2DComponent.b[id] = Math.sin(rotation + skewY) * scaleX;\r\n        LocalMatrix2DComponent.c[id] = -Math.sin(rotation - skewX) * scaleY;\r\n        LocalMatrix2DComponent.d[id] = Math.cos(rotation - skewX) * scaleY;\r\n        LocalMatrix2DComponent.tx[id] = x;\r\n        LocalMatrix2DComponent.ty[id] = y;\r\n    }\r\n\r\n    return world;\r\n});\r\n\r\nexport const UpdateLocalTransform2DSystem = (world: IWorld): number[] =>\r\n{\r\n    entities = changedLocalTransformQuery(world);\r\n\r\n    updateLocalTransformSystem(world);\r\n\r\n    return entities;\r\n};\r\n", "import { LocalMatrix2DComponent } from './LocalMatrix2DComponent';\r\nimport { WorldMatrix2DComponent } from './WorldMatrix2DComponent';\r\n\r\nexport function CopyLocalToWorld (source: number, target: number): void\r\n{\r\n    WorldMatrix2DComponent.a[target] = LocalMatrix2DComponent.a[source];\r\n    WorldMatrix2DComponent.b[target] = LocalMatrix2DComponent.b[source];\r\n    WorldMatrix2DComponent.c[target] = LocalMatrix2DComponent.c[source];\r\n    WorldMatrix2DComponent.d[target] = LocalMatrix2DComponent.d[source];\r\n    WorldMatrix2DComponent.tx[target] = LocalMatrix2DComponent.tx[source];\r\n    WorldMatrix2DComponent.ty[target] = LocalMatrix2DComponent.ty[source];\r\n}\r\n", "import { WorldMatrix2DComponent } from './WorldMatrix2DComponent';\r\n\r\nexport function CopyWorldToWorld (source: number, target: number): void\r\n{\r\n    WorldMatrix2DComponent.a[target] = WorldMatrix2DComponent.a[source];\r\n    WorldMatrix2DComponent.b[target] = WorldMatrix2DComponent.b[source];\r\n    WorldMatrix2DComponent.c[target] = WorldMatrix2DComponent.c[source];\r\n    WorldMatrix2DComponent.d[target] = WorldMatrix2DComponent.d[source];\r\n    WorldMatrix2DComponent.tx[target] = WorldMatrix2DComponent.tx[source];\r\n    WorldMatrix2DComponent.ty[target] = WorldMatrix2DComponent.ty[source];\r\n}\r\n", "import { GameObjectWorld } from '../../GameObjectWorld';\r\nimport { HierarchyComponent } from './HierarchyComponent';\r\nimport { addComponent } from 'bitecs';\r\n\r\nexport function AddHierarchyComponent (id: number): void\r\n{\r\n    addComponent(GameObjectWorld, HierarchyComponent, id);\r\n}\r\n", "import { IGameObject } from './IGameObject';\r\n\r\nexport const GameObjectCache: Map<number, IGameObject> = new Map();\r\n", "import { GetParentID, GetWorldID, HierarchyComponent, UpdateNumChildren } from './';\r\n\r\nimport { GameObjectCache } from '../../gameobjects/GameObjectCache';\r\nimport { GameObjectWorld } from '../../GameObjectWorld';\r\nimport { IBaseWorld } from '../../world/IBaseWorld';\r\nimport { SetDirtyDisplayList } from '../dirty';\r\nimport { removeComponent } from 'bitecs';\r\n\r\nexport function ClearWorldAndParentID (id: number): void\r\n{\r\n    const worldID = GetWorldID(id);\r\n    const parentID = GetParentID(id);\r\n    const world = GameObjectCache.get(worldID) as IBaseWorld;\r\n\r\n    HierarchyComponent.worldID[id] = 0;\r\n    HierarchyComponent.parentID[id] = 0;\r\n\r\n    removeComponent(GameObjectWorld, world.tag, id);\r\n\r\n    UpdateNumChildren(parentID);\r\n\r\n    SetDirtyDisplayList(worldID);\r\n}\r\n", "import { Types, defineComponent } from 'bitecs';\r\n\r\nconst Bounds = defineComponent({\r\n    x: Types.f32,\r\n    y: Types.f32,\r\n    width: Types.f32,\r\n    height: Types.f32,\r\n    right: Types.f32,\r\n    bottom: Types.f32\r\n});\r\n\r\nexport const BoundsComponent = Bounds;\r\n", "import { Types, defineComponent } from 'bitecs';\r\n\r\nconst Color = defineComponent({\r\n    alpha: Types.f32,\r\n    tint: Types.ui32\r\n});\r\n\r\nexport const ColorComponent = Color;\r\n", "import { createWorld } from 'bitecs';\r\n\r\nconst world = createWorld();\r\n\r\nexport const VertexWorld = world;\r\n", "import { Changed, IWorld, defineQuery, defineSystem } from 'bitecs';\r\n\r\nimport { BoundsComponent } from '../bounds/BoundsComponent';\r\nimport { Extent2DComponent } from '../transform/Extent2DComponent';\r\nimport { QuadVertexComponent } from './QuadVertexComponent';\r\nimport { VertexComponent } from './VertexComponent';\r\nimport { WorldMatrix2DComponent } from '../transform/WorldMatrix2DComponent';\r\n\r\nconst changedWorldExtentQuery = defineQuery([\r\n    Changed(WorldMatrix2DComponent),\r\n    Changed(Extent2DComponent)\r\n]);\r\n\r\nlet entities: number[];\r\n\r\nconst updateVertexPositionSystem = defineSystem(world =>\r\n{\r\n    for (let i = 0; i < entities.length; i++)\r\n    {\r\n        const id = entities[i];\r\n\r\n        const a = WorldMatrix2DComponent.a[id];\r\n        const b = WorldMatrix2DComponent.b[id];\r\n        const c = WorldMatrix2DComponent.c[id];\r\n        const d = WorldMatrix2DComponent.d[id];\r\n        const tx = WorldMatrix2DComponent.tx[id];\r\n        const ty = WorldMatrix2DComponent.ty[id];\r\n\r\n        const x = Extent2DComponent.x[id];\r\n        const y = Extent2DComponent.y[id];\r\n        const right = Extent2DComponent.right[id];\r\n        const bottom = Extent2DComponent.bottom[id];\r\n\r\n        const v1 = QuadVertexComponent.v1[id];\r\n        const v2 = QuadVertexComponent.v2[id];\r\n        const v3 = QuadVertexComponent.v3[id];\r\n        const v4 = QuadVertexComponent.v4[id];\r\n\r\n        const x0 = (x * a) + (y * c) + tx;\r\n        const y0 = (x * b) + (y * d) + ty;\r\n\r\n        const x1 = (x * a) + (bottom * c) + tx;\r\n        const y1 = (x * b) + (bottom * d) + ty;\r\n\r\n        const x2 = (right * a) + (bottom * c) + tx;\r\n        const y2 = (right * b) + (bottom * d) + ty;\r\n\r\n        const x3 = (right * a) + (y * c) + tx;\r\n        const y3 = (right * b) + (y * d) + ty;\r\n\r\n        VertexComponent.x[v1] = x0;\r\n        VertexComponent.y[v1] = y0;\r\n\r\n        VertexComponent.x[v2] = x1;\r\n        VertexComponent.y[v2] = y1;\r\n\r\n        VertexComponent.x[v3] = x2;\r\n        VertexComponent.y[v3] = y2;\r\n\r\n        VertexComponent.x[v4] = x3;\r\n        VertexComponent.y[v4] = y3;\r\n\r\n        BoundsComponent.x[id] = Math.min(x0, x1, x2, x3);\r\n        BoundsComponent.y[id] = Math.min(y0, y1, y2, y3);\r\n        BoundsComponent.right[id] = Math.max(x0, x1, x2, x3);\r\n        BoundsComponent.bottom[id] = Math.max(y0, y1, y2, y3);\r\n        BoundsComponent.width[id] = BoundsComponent.right[id] - BoundsComponent.x[id];\r\n        BoundsComponent.height[id] = BoundsComponent.bottom[id] - BoundsComponent.y[id];\r\n    }\r\n\r\n    return world;\r\n});\r\n\r\nexport const UpdateVertexPositionSystem = (world: IWorld): number[] =>\r\n{\r\n    entities = changedWorldExtentQuery(world);\r\n\r\n    updateVertexPositionSystem(world);\r\n\r\n    return entities;\r\n};\r\n\r\n", "import { Changed, defineQuery, defineSystem } from 'bitecs';\r\nimport { QuadVertexComponent, VertexComponent } from '../vertices';\r\n\r\nimport { ColorComponent } from './ColorComponent';\r\nimport { PackColor } from '../../renderer/webgl1';\r\n\r\nconst changedColorQuery = defineQuery([ Changed(ColorComponent), QuadVertexComponent ]);\r\n\r\nconst packQuadColorsSystem = defineSystem(world =>\r\n{\r\n    const entities = changedColorQuery(world);\r\n\r\n    for (let i = 0; i < entities.length; i++)\r\n    {\r\n        const id = entities[i];\r\n\r\n        const v1 = QuadVertexComponent.v1[id];\r\n        const v2 = QuadVertexComponent.v2[id];\r\n        const v3 = QuadVertexComponent.v3[id];\r\n        const v4 = QuadVertexComponent.v4[id];\r\n\r\n        const color = PackColor(ColorComponent.tint[id], ColorComponent.alpha[id]);\r\n\r\n        VertexComponent.color[v1] = color;\r\n        VertexComponent.color[v2] = color;\r\n        VertexComponent.color[v3] = color;\r\n        VertexComponent.color[v4] = color;\r\n    }\r\n\r\n    return world;\r\n});\r\n\r\nexport const PackQuadColorsSystem = packQuadColorsSystem;\r\n", "import { Types, defineComponent } from 'bitecs';\r\n\r\nconst Permissions = defineComponent({\r\n    visible: Types.ui8,\r\n    visibleChildren: Types.ui8,\r\n    willUpdate: Types.ui8,\r\n    willUpdateChildren: Types.ui8,\r\n    willRender: Types.ui8,\r\n    willRenderChildren: Types.ui8,\r\n    willCacheChildren: Types.ui8,\r\n    willTransformChildren: Types.ui8\r\n});\r\n\r\nexport const PermissionsComponent = Permissions;\r\n", "import { GameObjectWorld } from '../../GameObjectWorld';\r\nimport { PermissionsComponent } from './PermissionsComponent';\r\nimport { addComponent } from 'bitecs';\r\n\r\nexport function AddPermissionsComponent (id: number): void\r\n{\r\n    addComponent(GameObjectWorld, PermissionsComponent, id);\r\n\r\n    PermissionsComponent.visible[id] = 1;\r\n    PermissionsComponent.visibleChildren[id] = 1;\r\n    PermissionsComponent.willUpdate[id] = 1;\r\n    PermissionsComponent.willUpdateChildren[id] = 1;\r\n    PermissionsComponent.willRender[id] = 1;\r\n    PermissionsComponent.willRenderChildren[id] = 1;\r\n    PermissionsComponent.willCacheChildren[id] = 0;\r\n    PermissionsComponent.willTransformChildren[id] = 1;\r\n}\r\n", "import { PermissionsComponent } from './PermissionsComponent';\r\n\r\nexport function WillRender (id: number): boolean\r\n{\r\n    return Boolean(PermissionsComponent.visible[id]) && Boolean(PermissionsComponent.willRender[id]);\r\n}\r\n", "import { PermissionsComponent } from './PermissionsComponent';\r\n\r\nexport function WillRenderChildren (id: number): boolean\r\n{\r\n    return Boolean(PermissionsComponent.visibleChildren[id]) && Boolean(PermissionsComponent.willRenderChildren[id]);\r\n}\r\n", "import { PermissionsComponent } from './PermissionsComponent';\r\n\r\nexport function WillUpdate (id: number): boolean\r\n{\r\n    return Boolean(PermissionsComponent.willUpdate[id]);\r\n}\r\n", "import { PermissionsComponent } from './PermissionsComponent';\r\n\r\nexport function WillUpdateChildren (id: number): boolean\r\n{\r\n    return Boolean(PermissionsComponent.willUpdateChildren[id]);\r\n}\r\n", "import { GameObjectCache, GameObjectTree } from '../gameobjects';\r\n\r\nimport { ClearWorldAndParentID } from '../components/hierarchy';\r\nimport { IGameObject } from '../gameobjects/IGameObject';\r\n\r\nexport function RemoveChildrenBetween <P extends IGameObject> (parent: P, beginIndex: number = 0, endIndex?: number): IGameObject[]\r\n{\r\n    const children = GameObjectTree.get(parent.id);\r\n\r\n    if (endIndex === undefined)\r\n    {\r\n        endIndex = children.length;\r\n    }\r\n\r\n    const range = endIndex - beginIndex;\r\n\r\n    if (range > 0 && range <= endIndex)\r\n    {\r\n        const removed = children.splice(beginIndex, range);\r\n\r\n        removed.forEach(childID =>\r\n        {\r\n            ClearWorldAndParentID(childID);\r\n        });\r\n\r\n        return removed.map(id => GameObjectCache.get(id));\r\n    }\r\n    else\r\n    {\r\n        return [];\r\n    }\r\n}\r\n", "import { IGameObject } from '../gameobjects/IGameObject';\r\nimport { RemoveChildrenBetween } from './RemoveChildrenBetween';\r\nimport { SetDirtyWorldDisplayList } from '../components/dirty';\r\n\r\nexport function DestroyChildren <T extends IGameObject> (parent: T, beginIndex: number = 0, endIndex?: number): void\r\n{\r\n    const removed = RemoveChildrenBetween(parent, beginIndex, endIndex);\r\n\r\n    removed.forEach(child =>\r\n    {\r\n        child.destroy();\r\n    });\r\n\r\n    SetDirtyWorldDisplayList(parent.id);\r\n}\r\n", "import { IGameObject } from '../IGameObject';\r\n\r\nexport const DestroyEvent: string = 'destroy';\r\n\r\nexport type DestroyEventHandler = <T extends IGameObject> (child: T) => void;\r\n", "export const GameObjectTree: Map<number, number[]> = new Map();\r\n", "import { HierarchyComponent } from './HierarchyComponent';\r\n\r\nexport function GetParentID (id: number): number\r\n{\r\n    return HierarchyComponent.parentID[id];\r\n}\r\n", "import { GetParentID } from '../components/hierarchy/GetParentID';\r\nimport { IGameObject } from '../gameobjects/IGameObject';\r\n\r\nexport function IsValidParent <P extends IGameObject, C extends IGameObject> (parent: P, child: C): boolean\r\n{\r\n    //  It's not a valid parent if the ID matches the parent, or it's already the child's parent\r\n    return !(child.id === parent.id || parent.id === GetParentID(child.id));\r\n}\r\n", "import { GameObjectTree } from '../gameobjects/GameObjectTree';\r\nimport { GetParentID } from '../components/hierarchy';\r\nimport { IGameObject } from '../gameobjects/IGameObject';\r\n\r\nexport function GetChildIndex <T extends IGameObject> (child: T): number\r\n{\r\n    const childID = child.id;\r\n\r\n    return GameObjectTree.get(GetParentID(childID)).indexOf(childID);\r\n}\r\n", "import { ClearWorldAndParentID } from '../components/hierarchy';\r\nimport { GameObjectCache } from '../gameobjects/GameObjectCache';\r\nimport { GameObjectTree } from '../gameobjects/GameObjectTree';\r\nimport { IGameObject } from '../gameobjects/IGameObject';\r\n\r\nexport function RemoveChildAt <T extends IGameObject> (parent: T, index: number): IGameObject | undefined\r\n{\r\n    const children = GameObjectTree.get(parent.id);\r\n\r\n    if (index >= 0 && index < children.length)\r\n    {\r\n        const removedID = children.splice(index, 1)[0];\r\n\r\n        if (removedID)\r\n        {\r\n            ClearWorldAndParentID(removedID);\r\n\r\n            //  Emit remove event?\r\n\r\n            return GameObjectCache.get(removedID);\r\n        }\r\n    }\r\n}\r\n", "import { GetChildIndex } from './GetChildIndex';\r\nimport { IGameObject } from '../gameobjects/IGameObject';\r\nimport { RemoveChildAt } from './RemoveChildAt';\r\n\r\nexport function RemoveChild <P extends IGameObject, C extends IGameObject> (parent: P, child: C): C\r\n{\r\n    if (parent && child.hasParent(parent.id))\r\n    {\r\n        RemoveChildAt(parent, GetChildIndex(child));\r\n    }\r\n\r\n    return child;\r\n}\r\n", "import { AddedToWorldEvent, RemovedFromWorldEvent } from '../gameobjects/events';\r\n\r\nimport { Emit } from '../events/Emit';\r\nimport { GameObjectWorld } from '../GameObjectWorld';\r\nimport { HierarchyComponent } from '../components/hierarchy/HierarchyComponent';\r\nimport { IBaseWorld } from '../world/IBaseWorld';\r\nimport { IGameObject } from '../gameobjects/IGameObject';\r\nimport { SetDirtyDisplayList } from '../components/dirty/SetDirtyDisplayList';\r\nimport { addComponent } from 'bitecs';\r\n\r\nexport function SetWorld <W extends IBaseWorld, C extends IGameObject> (world: W, ...children: C[]): C[]\r\n{\r\n    const worldID = world.id;\r\n    const worldTag = world.tag;\r\n\r\n    children.forEach(child =>\r\n    {\r\n        // if (child.world)\r\n        // {\r\n        //     Emit(child.world, RemovedFromWorldEvent, child, child.world);\r\n        //     Emit(child, RemovedFromWorldEvent, child, child.world);\r\n        // }\r\n\r\n        addComponent(GameObjectWorld, worldTag, child.id);\r\n\r\n        HierarchyComponent.worldID[child.id] = worldID;\r\n\r\n        // Emit(world, AddedToWorldEvent, child, world);\r\n        // Emit(child, AddedToWorldEvent, child, world);\r\n    });\r\n\r\n    SetDirtyDisplayList(worldID);\r\n\r\n    return children;\r\n}\r\n", "import { GetWorldFromParentID, SetParentID } from '../components/hierarchy';\r\n\r\nimport { GameObjectTree } from '../gameobjects/GameObjectTree';\r\nimport { IGameObject } from '../gameobjects/IGameObject';\r\nimport { InvalidateLocalMatrix2DComponent } from '../components/transform';\r\nimport { IsValidParent } from './IsValidParent';\r\nimport { RemoveChild } from './RemoveChild';\r\nimport { SetWorld } from './SetWorld';\r\n\r\nexport function AddChildAt <P extends IGameObject, C extends IGameObject> (parent: P, child: C, index: number = -1): C\r\n{\r\n    if (IsValidParent(parent, child))\r\n    {\r\n        const childID = child.id;\r\n        const parentID = parent.id;\r\n        const world = GetWorldFromParentID(parentID);\r\n\r\n        const children = GameObjectTree.get(parentID);\r\n\r\n        if (index === -1)\r\n        {\r\n            index = children.length;\r\n        }\r\n\r\n        if (index >= 0 && index <= children.length && world)\r\n        {\r\n            RemoveChild(child.getParent(), child);\r\n\r\n            //  Always modify the array before calling SetParentID\r\n            children.splice(index, 0, childID);\r\n\r\n            InvalidateLocalMatrix2DComponent(child.id);\r\n\r\n            SetWorld(world, child);\r\n\r\n            SetParentID(childID, parentID);\r\n        }\r\n    }\r\n\r\n    return child;\r\n}\r\n", "import { AddChildAt } from './AddChildAt';\r\nimport { IGameObject } from '../gameobjects/IGameObject';\r\n\r\n//  Adds all of the children to the given parent\r\n//  If already a child of the parent, it is skipped\r\n//  If already child of another parent, it is removed from it first\r\n\r\nexport function SetParent <P extends IGameObject, C extends IGameObject> (parent: P, ...children: C[]): C[]\r\n{\r\n    children.forEach(child =>\r\n    {\r\n        AddChildAt(parent, child);\r\n    });\r\n\r\n    return children;\r\n}\r\n", "import { IGameObject } from '../gameobjects/IGameObject';\r\nimport { RemoveChildrenBetween } from './RemoveChildrenBetween';\r\nimport { SetParent } from './SetParent';\r\n\r\nexport function ReparentChildren <P extends IGameObject, T extends IGameObject> (parent: P, newParent: T, beginIndex: number = 0, endIndex?: number): IGameObject[]\r\n{\r\n    const moved = RemoveChildrenBetween(parent, beginIndex, endIndex);\r\n\r\n    SetParent(newParent, ...moved);\r\n\r\n    return moved;\r\n}\r\n", "import { AddHierarchyComponent, GetChildrenFromParentID, GetNumChildren, GetParentGameObject, GetWorldID, HierarchyComponent } from '../components/hierarchy';\r\nimport { AddPermissionsComponent, PermissionsComponent, WillRender, WillUpdate, WillUpdateChildren } from '../components/permissions';\r\n\r\nimport { AddDirtyComponent } from '../components/dirty/AddDirtyComponent';\r\nimport { DestroyChildren } from '../display/DestroyChildren';\r\nimport { DestroyEvent } from './events/DestroyEvent';\r\nimport { Emit } from '../events/Emit';\r\nimport { GameObjectCache } from './GameObjectCache';\r\nimport { GameObjectTree } from './GameObjectTree';\r\nimport { GameObjectWorld } from '../GameObjectWorld';\r\nimport { ICanvasRenderer } from '../renderer/canvas/ICanvasRenderer';\r\nimport { IEventInstance } from '../events/IEventInstance';\r\nimport { IGameObject } from './IGameObject';\r\nimport { IRenderPass } from '../renderer/webgl1/renderpass/IRenderPass';\r\nimport { ReparentChildren } from '../display/ReparentChildren';\r\nimport { SetDirtyDisplayList } from '../components/dirty';\r\nimport { addEntity } from 'bitecs';\r\n\r\nexport class GameObject implements IGameObject\r\n{\r\n    readonly id: number = addEntity(GameObjectWorld);\r\n\r\n    readonly type: string = 'GameObject';\r\n\r\n    //  User defined name. Never used internally.\r\n    name: string = '';\r\n\r\n    events: Map<string, Set<IEventInstance>>;\r\n\r\n    constructor ()\r\n    {\r\n        const id = this.id;\r\n\r\n        AddHierarchyComponent(id);\r\n        AddPermissionsComponent(id);\r\n        AddDirtyComponent(id);\r\n\r\n        GameObjectCache.set(id, this);\r\n        GameObjectTree.set(id, []);\r\n\r\n        this.events = new Map();\r\n    }\r\n\r\n    isRenderable (): boolean\r\n    {\r\n        return WillRender(this.id);\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    beforeUpdate (delta: number, time: number): void\r\n    {\r\n        //  Empty for parent classes to use.\r\n        //  Called before this GameObject and all of its children have been updated.\r\n    }\r\n\r\n    update (delta: number, time: number): void\r\n    {\r\n        this.beforeUpdate(delta, time);\r\n\r\n        if (WillUpdateChildren(this.id))\r\n        {\r\n            const children = GameObjectTree.get(this.id);\r\n\r\n            for (let i = 0; i < children.length; i++)\r\n            {\r\n                const childID = children[i];\r\n\r\n                if (WillUpdate(childID))\r\n                {\r\n                    GameObjectCache.get(childID).update(delta, time);\r\n                }\r\n            }\r\n        }\r\n\r\n        this.afterUpdate(delta, time);\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    afterUpdate (delta: number, time: number): void\r\n    {\r\n        //  Empty for parent classes to use.\r\n        //  Called after this GameObject and all of its children have been updated.\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    renderGL <T extends IRenderPass> (renderPass: T): void\r\n    {\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    renderCanvas <T extends ICanvasRenderer> (renderer: T): void\r\n    {\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    postRenderGL <T extends IRenderPass> (renderPass: T): void\r\n    {\r\n        //  Called after this GameObject and all of its children have been rendered.\r\n        //  If it doesn't have any children, this method is never called.\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    postRenderCanvas <T extends ICanvasRenderer> (renderer: T): void\r\n    {\r\n        //  Called after this GameObject and all of its children have been rendered.\r\n        //  If it doesn't have any children, this method is never called.\r\n    }\r\n\r\n    set visible (value: boolean)\r\n    {\r\n        PermissionsComponent.visible[this.id] = Number(value);\r\n\r\n        SetDirtyDisplayList(GetWorldID(this.id));\r\n    }\r\n\r\n    get visible (): boolean\r\n    {\r\n        return Boolean(PermissionsComponent.visible[this.id]);\r\n    }\r\n\r\n    set visibleChildren (value: boolean)\r\n    {\r\n        PermissionsComponent.visibleChildren[this.id] = Number(value);\r\n\r\n        SetDirtyDisplayList(GetWorldID(this.id));\r\n    }\r\n\r\n    get visibleChildren (): boolean\r\n    {\r\n        return Boolean(PermissionsComponent.visibleChildren[this.id]);\r\n    }\r\n\r\n    set depth (value: number)\r\n    {\r\n        HierarchyComponent.depth[this.id] = value;\r\n    }\r\n\r\n    get depth (): number\r\n    {\r\n        return HierarchyComponent.depth[this.id];\r\n    }\r\n\r\n    hasParent (id?: number): boolean\r\n    {\r\n        if (id)\r\n        {\r\n            return (HierarchyComponent.parentID[this.id] === id);\r\n        }\r\n        else\r\n        {\r\n            return (HierarchyComponent.parentID[this.id] > 0);\r\n        }\r\n    }\r\n\r\n    getParent (): IGameObject | undefined\r\n    {\r\n        return GetParentGameObject(this.id);\r\n    }\r\n\r\n    getChildren (): IGameObject[]\r\n    {\r\n        return GetChildrenFromParentID(this.id);\r\n    }\r\n\r\n    getNumChildren (): number\r\n    {\r\n        return GetNumChildren(this.id);\r\n    }\r\n\r\n    toString (): string\r\n    {\r\n        return `${this.type} id=\"${this.id}\" name=\"${this.name}\"`;\r\n    }\r\n\r\n    destroy <P extends IGameObject> (reparentChildren?: P): void\r\n    {\r\n        if (reparentChildren)\r\n        {\r\n            ReparentChildren(this, reparentChildren);\r\n        }\r\n        else\r\n        {\r\n            DestroyChildren(this);\r\n        }\r\n\r\n        Emit(this, DestroyEvent, this);\r\n\r\n        this.events.clear();\r\n\r\n        this.events = null;\r\n\r\n        //  TODO - Destroy process, remove from Cache, Tree, etc.\r\n    }\r\n}\r\n", "import { TextureManager } from './TextureManager';\r\n\r\nlet instance: TextureManager;\r\n\r\nexport const TextureManagerInstance =\r\n{\r\n    get: (): TextureManager =>\r\n    {\r\n        return instance;\r\n    },\r\n\r\n    set: (manager: TextureManager | null): void =>\r\n    {\r\n        instance = manager;\r\n    }\r\n};\r\n", "import { Texture } from './Texture';\r\nimport { TextureManagerInstance } from './TextureManagerInstance';\r\n\r\nexport function GetTexture (key: string): Texture\r\n{\r\n    return TextureManagerInstance.get().get(key);\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Force a value within the boundaries by clamping it to the range `min`, `max`.\r\n *\r\n * @function Phaser.Math.Clamp\r\n * @since 3.0.0\r\n *\r\n * @param {number} value - The value to be clamped.\r\n * @param {number} min - The minimum bounds.\r\n * @param {number} max - The maximum bounds.\r\n *\r\n * @return {number} The clamped value.\r\n */\r\nexport function Clamp (value: number, min: number, max: number): number\r\n{\r\n    return Math.max(min, Math.min(max, value));\r\n}\r\n", "export function CreateCanvas (width: number, height: number): CanvasRenderingContext2D\r\n{\r\n    const canvas = document.createElement('canvas');\r\n\r\n    canvas.width = width;\r\n    canvas.height = height;\r\n\r\n    return canvas.getContext('2d');\r\n}\r\n", "import { GameObjectCache } from '../../gameobjects/GameObjectCache';\r\nimport { GameObjectTree } from '../../gameobjects/GameObjectTree';\r\nimport { IGameObject } from '../../gameobjects/IGameObject';\r\n\r\nexport function GetChildrenFromParentID (id: number): IGameObject[]\r\n{\r\n    const out: IGameObject[] = [];\r\n\r\n    GameObjectTree.get(id).forEach(childID =>\r\n    {\r\n        out.push(GameObjectCache.get(childID));\r\n    });\r\n\r\n    return out;\r\n}\r\n", "import { HierarchyComponent } from './HierarchyComponent';\r\n\r\nexport function GetNumChildren (id: number): number\r\n{\r\n    return HierarchyComponent.numChildren[id];\r\n}\r\n", "import { GameObjectCache } from '../../gameobjects/GameObjectCache';\r\nimport { HierarchyComponent } from './HierarchyComponent';\r\nimport { IGameObject } from '../../gameobjects/IGameObject';\r\n\r\nexport function GetParentGameObject (id: number): IGameObject\r\n{\r\n    return GameObjectCache.get(HierarchyComponent.parentID[id]);\r\n}\r\n", "import { HierarchyComponent } from './HierarchyComponent';\r\n\r\nexport function GetWorldID (id: number): number\r\n{\r\n    return HierarchyComponent.worldID[id];\r\n}\r\n", "import { GameObjectCache } from '../../gameobjects/GameObjectCache';\r\nimport { GetWorldID } from './GetWorldID';\r\nimport { IBaseWorld } from '../../world/IBaseWorld';\r\n\r\nexport function GetWorldFromParentID (parentID: number): IBaseWorld | undefined\r\n{\r\n    const worldID = GetWorldID(parentID);\r\n\r\n    return GameObjectCache.get(worldID) as IBaseWorld;\r\n}\r\n", "import { GameObjectTree } from '../../gameobjects/GameObjectTree';\r\nimport { HierarchyComponent } from './HierarchyComponent';\r\n\r\nexport function UpdateNumChildren (id: number): void\r\n{\r\n    HierarchyComponent.numChildren[id] = GameObjectTree.get(id).length;\r\n}\r\n", "import { HierarchyComponent } from './HierarchyComponent';\r\nimport { UpdateNumChildren } from './UpdateNumChildren';\r\n\r\nexport function SetParentID (childID: number, parentID: number): void\r\n{\r\n    HierarchyComponent.parentID[childID] = parentID;\r\n\r\n    UpdateNumChildren(parentID);\r\n\r\n    //  Emit add event?\r\n}\r\n", "import { HierarchyComponent } from './HierarchyComponent';\r\n\r\nexport function SetWorldID (id: number, worldID: number): void\r\n{\r\n    HierarchyComponent.worldID[id] = worldID;\r\n}\r\n", "import { LocalMatrix2DComponent } from './LocalMatrix2DComponent';\r\nimport { WorldMatrix2DComponent } from './WorldMatrix2DComponent';\r\n\r\nexport function MultiplyLocalWithWorld (parentID: number, id: number): void\r\n{\r\n    const pa = WorldMatrix2DComponent.a[parentID];\r\n    const pb = WorldMatrix2DComponent.b[parentID];\r\n    const pc = WorldMatrix2DComponent.c[parentID];\r\n    const pd = WorldMatrix2DComponent.d[parentID];\r\n    const ptx = WorldMatrix2DComponent.tx[parentID];\r\n    const pty = WorldMatrix2DComponent.ty[parentID];\r\n\r\n    const a = LocalMatrix2DComponent.a[id];\r\n    const b = LocalMatrix2DComponent.b[id];\r\n    const c = LocalMatrix2DComponent.c[id];\r\n    const d = LocalMatrix2DComponent.d[id];\r\n    const tx = LocalMatrix2DComponent.tx[id];\r\n    const ty = LocalMatrix2DComponent.ty[id];\r\n\r\n    WorldMatrix2DComponent.a[id] = a * pa + b * pc;\r\n    WorldMatrix2DComponent.b[id] = a * pb + b * pd;\r\n    WorldMatrix2DComponent.c[id] = c * pa + d * pc;\r\n    WorldMatrix2DComponent.d[id] = c * pb + d * pd;\r\n    WorldMatrix2DComponent.tx[id] = tx * pa + ty * pc + ptx;\r\n    WorldMatrix2DComponent.ty[id] = tx * pb + ty * pd + pty;\r\n}\r\n", "import { Types, defineComponent } from 'bitecs';\r\n\r\nconst RenderData = defineComponent({\r\n    gameFrame: Types.ui32,\r\n    dirtyFrame: Types.ui32,\r\n    numRendered: Types.ui32,\r\n    numRenderable: Types.ui32\r\n});\r\n\r\nexport const RenderDataComponent = RenderData;\r\n", "import { RenderDataComponent } from './RenderDataComponent';\r\n\r\nlet numWorldTransforms: number = 0;\r\n\r\nexport function ResetWorldRenderData (id: number, gameFrame: number): void\r\n{\r\n    numWorldTransforms = 0;\r\n\r\n    RenderDataComponent.gameFrame[id] = gameFrame;\r\n    RenderDataComponent.dirtyFrame[id] = 0;\r\n    RenderDataComponent.numRendered[id] = 0;\r\n    RenderDataComponent.numRenderable[id] = 0;\r\n}\r\n\r\nexport function UpdateNumWorldTransforms (): void\r\n{\r\n    numWorldTransforms++;\r\n}\r\n\r\nexport function GetNumWorldTransforms (): number\r\n{\r\n    return numWorldTransforms;\r\n}\r\n", "import { PermissionsComponent } from './PermissionsComponent';\r\n\r\nexport function WillTransformChildren (id: number): boolean\r\n{\r\n    return Boolean(PermissionsComponent.willTransformChildren[id]);\r\n}\r\n", "import { CopyLocalToWorld } from './CopyLocalToWorld';\r\nimport { CopyWorldToWorld } from './CopyWorldToWorld';\r\nimport { GameObjectWorld } from '../../GameObjectWorld';\r\nimport { GetParentID } from '../hierarchy';\r\nimport { MultiplyLocalWithWorld } from './MultiplyLocalWithWorld';\r\nimport { Transform2DComponent } from './Transform2DComponent';\r\nimport { UpdateNumWorldTransforms } from '../../world/ResetWorldRenderData';\r\nimport { WillTransformChildren } from '../permissions/WillTransformChildren';\r\nimport { hasComponent } from 'bitecs';\r\n\r\nexport function UpdateWorldTransform (id: number): void\r\n{\r\n    const parentID = GetParentID(id);\r\n\r\n    if (!hasComponent(GameObjectWorld, Transform2DComponent, parentID))\r\n    {\r\n        CopyLocalToWorld(id, id);\r\n    }\r\n    else if (!WillTransformChildren(id))\r\n    {\r\n        CopyWorldToWorld(parentID, id);\r\n    }\r\n    else\r\n    {\r\n        MultiplyLocalWithWorld(parentID, id);\r\n    }\r\n\r\n    UpdateNumWorldTransforms();\r\n}\r\n", "import { Changed, defineQuery, defineSystem } from 'bitecs';\r\n\r\nimport { CopyLocalToWorld } from './CopyLocalToWorld';\r\nimport { CopyWorldToWorld } from './CopyWorldToWorld';\r\nimport { GameObjectCache } from '../../gameobjects/GameObjectCache';\r\nimport { LocalMatrix2DComponent } from './LocalMatrix2DComponent';\r\nimport { MultiplyLocalWithWorld } from './MultiplyLocalWithWorld';\r\nimport { WillTransformChildren } from '../permissions/WillTransformChildren';\r\n\r\nconst changedWorldTransformQuery = defineQuery([ Changed(LocalMatrix2DComponent) ]);\r\n\r\nconst updateWorldTransformSystem = defineSystem(world =>\r\n{\r\n    const entities = changedWorldTransformQuery(world);\r\n\r\n    for (let i = 0; i < entities.length; i++)\r\n    {\r\n        const id = entities[i];\r\n        const gameObject = GameObjectCache.get(id);\r\n        const parent = gameObject.parent;\r\n\r\n        if (!parent)\r\n        {\r\n            CopyLocalToWorld(id, id);\r\n        }\r\n        else if (!WillTransformChildren(id))\r\n        {\r\n            CopyWorldToWorld(parent.id, id);\r\n        }\r\n        else\r\n        {\r\n            MultiplyLocalWithWorld(parent.id, id);\r\n        }\r\n    }\r\n});\r\n\r\nexport const UpdateWorldTransform2DSystem = updateWorldTransformSystem;\r\n", "import { Changed, addEntity, defineQuery } from 'bitecs';\r\n\r\nimport { AddRenderStatsComponent } from './AddRenderStatsComponent';\r\nimport { Game } from '../Game';\r\nimport { GameInstance } from '../GameInstance';\r\nimport { GameObjectWorld } from '../GameObjectWorld';\r\nimport { GetScenes } from '../config/scenes';\r\nimport { IGameObject } from '../gameobjects/IGameObject';\r\nimport { IScene } from './IScene';\r\nimport { LocalMatrix2DComponent } from '../components/transform';\r\nimport { Once } from '../events';\r\nimport { PackQuadColorsSystem } from '../components/color/PackQuadColorsSystem';\r\nimport { RenderStatsComponent } from './RenderStatsComponent';\r\nimport { ResetRenderStats } from './ResetRenderStats';\r\nimport { SceneManagerInstance } from './SceneManagerInstance';\r\nimport { UpdateLocalTransform2DSystem } from '../components/transform/UpdateLocalTransform2DSystem';\r\nimport { UpdateVertexPositionSystem } from '../components/vertices/UpdateVertexPositionSystem';\r\nimport { WorldList } from '../world/WorldList';\r\n\r\nexport class SceneManager\r\n{\r\n    readonly id: number = addEntity(GameObjectWorld);\r\n\r\n    game: Game;\r\n\r\n    scenes: Map<string, IScene> = new Map();\r\n\r\n    //  Used by Install to assign default scene keys when not specified\r\n    sceneIndex: number = 0;\r\n\r\n    //  Force the renderer to fully redraw\r\n    flush: boolean;\r\n\r\n    changedMatrixQuery = defineQuery([ Changed(LocalMatrix2DComponent) ]);\r\n\r\n    constructor ()\r\n    {\r\n        this.game = GameInstance.get();\r\n\r\n        SceneManagerInstance.set(this);\r\n\r\n        AddRenderStatsComponent(this.id);\r\n\r\n        Once(this.game, 'boot', () => this.boot());\r\n    }\r\n\r\n    boot (): void\r\n    {\r\n        GetScenes().forEach(scene => new scene());\r\n    }\r\n\r\n    update (delta: number, time: number, gameFrame: number): void\r\n    {\r\n        let sceneTotal = 0;\r\n        let worldTotal = 0;\r\n\r\n        for (const scene of this.scenes.values())\r\n        {\r\n            const worlds = WorldList.get(scene);\r\n\r\n            for (const world of worlds)\r\n            {\r\n                world.beforeUpdate(delta, time);\r\n                world.update(delta, time);\r\n                world.afterUpdate(delta, time);\r\n\r\n                worldTotal++;\r\n            }\r\n\r\n            sceneTotal++;\r\n        }\r\n\r\n        //  Process all dirty 2D transforms and update the local matrix across all Worlds and Scenes\r\n        const localTransforms = UpdateLocalTransform2DSystem(GameObjectWorld);\r\n\r\n        ResetRenderStats(this.id, gameFrame, sceneTotal, worldTotal, localTransforms.length);\r\n    }\r\n\r\n    //  Run through all Scenes and Worlds within them, telling them to prepare to render\r\n    //  The renderer itself tells them to actually render\r\n    preRender (gameFrame: number): void\r\n    {\r\n        const dirtyTransforms = this.changedMatrixQuery(GameObjectWorld);\r\n\r\n        let dirtyWorld = false;\r\n\r\n        for (const scene of this.scenes.values())\r\n        {\r\n            const worlds = WorldList.get(scene);\r\n\r\n            for (const world of worlds)\r\n            {\r\n                if (world.preRender(gameFrame, dirtyTransforms))\r\n                {\r\n                    dirtyWorld = true;\r\n                }\r\n            }\r\n        }\r\n\r\n        //  Repack any changed vertex colors\r\n        PackQuadColorsSystem(GameObjectWorld);\r\n\r\n        //  Update all vertices across the whole game, ready for rendering\r\n        const updatedEntities = UpdateVertexPositionSystem(GameObjectWorld);\r\n\r\n        RenderStatsComponent.numDirtyVertices[this.id] = updatedEntities.length * 4;\r\n\r\n        if (dirtyWorld)\r\n        {\r\n            this.flush = true;\r\n        }\r\n    }\r\n\r\n    getRenderList (): IGameObject[]\r\n    {\r\n        let output: IGameObject[] = [];\r\n\r\n        for (const scene of this.scenes.values())\r\n        {\r\n            const worlds = WorldList.get(scene);\r\n\r\n            for (const world of worlds)\r\n            {\r\n                output = output.concat(world.getRenderList());\r\n            }\r\n        }\r\n\r\n        return output;\r\n    }\r\n\r\n    updateWorldStats (numGameObjects: number, numRendered: number, numDisplayLists: number, numWorldTransforms: number): void\r\n    {\r\n        const id = this.id;\r\n\r\n        RenderStatsComponent.numGameObjects[id] += numGameObjects;\r\n        RenderStatsComponent.numGameObjectsRendered[id] += numRendered;\r\n        RenderStatsComponent.numDirtyWorldLists[id] += numDisplayLists;\r\n        RenderStatsComponent.numDirtyWorldTransforms[id] += numWorldTransforms;\r\n    }\r\n}\r\n", "import { CONFIG_DEFAULTS } from '../const';\r\nimport { ConfigStore } from '../ConfigStore';\r\nimport { IRendererConstructor } from '../../renderer/IRendererConstructor';\r\n\r\nexport function GetRenderer (): IRendererConstructor\r\n{\r\n    return ConfigStore.get(CONFIG_DEFAULTS.RENDERER);\r\n}\r\n", "import { SetBackgroundColor } from './backgroundcolor/SetBackgroundColor';\r\nimport { SetBanner } from './banner/SetBanner';\r\nimport { SetBatchSize } from './batchsize/SetBatchSize';\r\nimport { SetDefaultOrigin } from './defaultorigin/SetDefaultOrigin';\r\nimport { SetMaxTextures } from './maxtextures/SetMaxTextures';\r\nimport { SetSize } from './size/SetSize';\r\nimport { SetWebGLContext } from './webglcontext';\r\nimport { SetWorldSize } from './worldsize/SetWorldSize';\r\n\r\n//  Phaser 4 defaults\r\n\r\nexport function SetConfigDefaults (): void\r\n{\r\n    SetBackgroundColor(0);\r\n    SetBatchSize(4096);\r\n    SetBanner('Phaser', '4.0.0', 'https://phaser4.io');\r\n    SetMaxTextures(0);\r\n    SetDefaultOrigin(0.5, 0.5);\r\n    SetSize(800, 600, 1);\r\n    SetWebGLContext({\r\n        antialias: true,\r\n        desynchronized: true,\r\n        preserveDrawingBuffer: true\r\n    });\r\n    SetWorldSize(512);\r\n}\r\n", "import { CreateCanvas } from './CreateCanvas';\r\nimport { IGLTextureBindingConfig } from '../renderer/webgl1/textures/IGLTextureBindingConfig';\r\nimport { Texture } from './Texture';\r\nimport { TextureManagerInstance } from './TextureManagerInstance';\r\n\r\nexport class TextureManager\r\n{\r\n    textures: Map<string, Texture>;\r\n\r\n    constructor ()\r\n    {\r\n        this.textures = new Map();\r\n\r\n        this.createDefaultTextures();\r\n\r\n        TextureManagerInstance.set(this);\r\n    }\r\n\r\n    private createDefaultTextures (): void\r\n    {\r\n        this.add('__BLANK', new Texture(CreateCanvas(32, 32).canvas));\r\n\r\n        const missing = CreateCanvas(32, 32);\r\n\r\n        missing.strokeStyle = '#0f0';\r\n        missing.moveTo(0, 0);\r\n        missing.lineTo(32, 32);\r\n        missing.stroke();\r\n        missing.strokeRect(0.5, 0.5, 31, 31);\r\n\r\n        this.add('__MISSING', new Texture(missing.canvas));\r\n\r\n        const white = CreateCanvas(32, 32);\r\n\r\n        white.fillStyle = '#fff';\r\n        white.fillRect(0, 0, 32, 32);\r\n\r\n        this.add('__WHITE', new Texture(white.canvas));\r\n    }\r\n\r\n    get (key: string): Texture\r\n    {\r\n        const textures = this.textures;\r\n\r\n        if (textures.has(key))\r\n        {\r\n            return textures.get(key);\r\n        }\r\n        else\r\n        {\r\n            return textures.get('__MISSING');\r\n        }\r\n    }\r\n\r\n    has (key: string): boolean\r\n    {\r\n        return this.textures.has(key);\r\n    }\r\n\r\n    add (key: string, source: Texture | HTMLImageElement, glConfig?: IGLTextureBindingConfig): Texture\r\n    {\r\n        let texture: Texture;\r\n        const textures = this.textures;\r\n\r\n        if (!textures.has(key))\r\n        {\r\n            if (source instanceof Texture)\r\n            {\r\n                texture = source;\r\n            }\r\n            else\r\n            {\r\n                texture = new Texture(source, 0, 0, glConfig);\r\n            }\r\n\r\n            texture.key = key;\r\n\r\n            textures.set(key, texture);\r\n        }\r\n\r\n        return texture;\r\n    }\r\n}\r\n", "import { AddToDOM, DOMContentLoaded } from './dom';\r\nimport { Emit, EventEmitter } from './events';\r\n\r\nimport { GameInstance } from './GameInstance';\r\nimport { GameObjectWorld } from './GameObjectWorld';\r\nimport { GetBanner } from './config/banner';\r\nimport { GetGlobalVar } from './config/globalvar';\r\nimport { GetParent } from './config/parent';\r\nimport { GetRenderStatsAsObject } from './scenes';\r\nimport { GetRenderer } from './config/renderer';\r\nimport { IRenderStats } from './scenes/IRenderStats';\r\nimport { IRenderer } from './renderer/IRenderer';\r\nimport { SceneManager } from './scenes/SceneManager';\r\nimport { SetConfigDefaults } from './config/SetConfigDefaults';\r\nimport { TextureManager } from './textures/TextureManager';\r\nimport { addEntity } from 'bitecs';\r\n\r\nexport class Game extends EventEmitter\r\n{\r\n    readonly id: number = addEntity(GameObjectWorld);\r\n\r\n    readonly VERSION: string = '4.0.0-beta1';\r\n\r\n    //  TODO - Consider moving all of these to RenderStats Component\r\n    isBooted: boolean = false;\r\n    isPaused: boolean = false;\r\n\r\n    //  TODO - Allow update to run on different tick to render\r\n    //  TODO - Allow update and render to be called directly\r\n    willUpdate: boolean = true;\r\n    willRender: boolean = true;\r\n\r\n    lastTick: number = 0;\r\n    elapsed: number = 0;\r\n    delta: number = 0;\r\n    fps: number = 0;\r\n    frame: number = 0;\r\n\r\n    private frames: number = 0;\r\n    private prevFrame: number = 0;\r\n\r\n    renderStats: IRenderStats;\r\n\r\n    renderer: IRenderer;\r\n    textureManager: TextureManager;\r\n    sceneManager: SceneManager;\r\n\r\n    constructor (...settings: { (): void }[])\r\n    {\r\n        super();\r\n\r\n        GameInstance.set(this);\r\n\r\n        SetConfigDefaults();\r\n\r\n        DOMContentLoaded(() => this.boot(settings));\r\n    }\r\n\r\n    boot (settings: { (): void }[]): void\r\n    {\r\n        //  Activate the settings post DOM Content Loaded\r\n        settings.forEach(setting => setting());\r\n\r\n        const renderer = GetRenderer();\r\n\r\n        this.renderer = new renderer();\r\n        this.textureManager = new TextureManager();\r\n        this.sceneManager = new SceneManager();\r\n\r\n        //  Only add to the DOM if they either didn't set a Parent, or expressly set it to be non-null\r\n        //  Otherwise we'll let them add the canvas to the DOM themselves\r\n        const parent = GetParent();\r\n\r\n        if (parent)\r\n        {\r\n            AddToDOM(this.renderer.canvas, parent);\r\n        }\r\n\r\n        const globalVar = GetGlobalVar();\r\n\r\n        if (globalVar && window)\r\n        {\r\n            (window as unknown)[globalVar] = this;\r\n        }\r\n\r\n        this.isBooted = true;\r\n\r\n        GetBanner();\r\n\r\n        Emit(this, 'boot');\r\n\r\n        this.lastTick = performance.now();\r\n        this.prevFrame = performance.now();\r\n\r\n        this.renderStats = GetRenderStatsAsObject();\r\n\r\n        this.step(this.lastTick);\r\n    }\r\n\r\n    pause (): void\r\n    {\r\n        this.isPaused = true;\r\n    }\r\n\r\n    resume (): void\r\n    {\r\n        this.isPaused = false;\r\n\r\n        this.lastTick = performance.now();\r\n    }\r\n\r\n    step (time: number): void\r\n    {\r\n        const renderer = this.renderer;\r\n        const sceneManager = this.sceneManager;\r\n\r\n        if (!this.isPaused)\r\n        {\r\n            if (this.willUpdate)\r\n            {\r\n                sceneManager.update(this.delta, time, this.frame);\r\n            }\r\n\r\n            if (this.willRender)\r\n            {\r\n                sceneManager.preRender(this.frame);\r\n\r\n                renderer.render(sceneManager.flush, sceneManager.scenes);\r\n\r\n                sceneManager.flush = false;\r\n            }\r\n        }\r\n\r\n        //  Note that privacy.resistFingerprinting can round this value to 100ms or more!\r\n        const now = performance.now();\r\n\r\n        //  How long it took to process this frame\r\n        const delta = now - time;\r\n\r\n        this.frames++;\r\n\r\n        if (now >= this.prevFrame + 1000)\r\n        {\r\n            this.fps = (this.frames * 1000) / (now - this.prevFrame);\r\n            this.prevFrame = now;\r\n            this.frames = 0;\r\n        }\r\n\r\n        this.lastTick = now;\r\n        this.elapsed += delta;\r\n        this.delta = delta;\r\n\r\n        GetRenderStatsAsObject(this.renderStats);\r\n\r\n        this.renderStats.fps = this.fps;\r\n        this.renderStats.delta = delta;\r\n\r\n        Emit(this, 'step');\r\n\r\n        //  The frame always advances by 1 each step (even when paused)\r\n        this.frame++;\r\n\r\n        GameInstance.setFrame(this.frame);\r\n        GameInstance.setElapsed(this.elapsed);\r\n\r\n        requestAnimationFrame(now => this.step(now));\r\n    }\r\n\r\n    destroy (): void\r\n    {\r\n        //  TODO - Code destroy function\r\n    }\r\n}\r\n", "import { Loader } from './Loader';\r\n\r\nexport class File <TData = any, TConfig = any>\r\n{\r\n    key: string;\r\n    url: string;\r\n    responseType: XMLHttpRequestResponseType = 'text';\r\n    crossOrigin: string | undefined = undefined;\r\n\r\n    data: TData;\r\n\r\n    error: ErrorEvent | undefined;\r\n    config: TConfig;\r\n    skipCache: boolean = false;\r\n    hasLoaded: boolean = false;\r\n    loader: Loader;\r\n    load: () => Promise<File<TData>>;\r\n\r\n    constructor (key: string, url: string, config?: TConfig)\r\n    {\r\n        this.key = key;\r\n        this.url = url;\r\n        this.config = config;\r\n    }\r\n}\r\n", "import { Loader } from './Loader';\r\n\r\nexport function GetURL (key: string, url: string, extension: string, loader?: Loader): string\r\n{\r\n    if (!url)\r\n    {\r\n        url = key + extension;\r\n    }\r\n\r\n    if ((/^(?:blob:|data:|http:\\/\\/|https:\\/\\/|\\/\\/)/).exec(url))\r\n    {\r\n        return url;\r\n    }\r\n    else if (loader)\r\n    {\r\n        return loader.baseURL + loader.path + url;\r\n    }\r\n    else\r\n    {\r\n        return url;\r\n    }\r\n}\r\n", "import { File } from './File';\r\n\r\nexport function ImageTagLoader (file: File<string>): Promise<File<HTMLImageElement>>\r\n{\r\n    const fileCast = file as unknown as File<HTMLImageElement>;\r\n\r\n    fileCast.data = new Image();\r\n\r\n    if (fileCast.crossOrigin)\r\n    {\r\n        fileCast.data.crossOrigin = file.crossOrigin;\r\n    }\r\n\r\n    return new Promise((resolve, reject) =>\r\n    {\r\n        fileCast.data.onload = (): void =>\r\n        {\r\n            if (fileCast.data.onload)\r\n            {\r\n                fileCast.data.onload = null;\r\n                fileCast.data.onerror = null;\r\n                resolve(fileCast);\r\n            }\r\n        };\r\n\r\n        fileCast.data.onerror = (event): void =>\r\n        {\r\n            if (fileCast.data.onload)\r\n            {\r\n                fileCast.data.onload = null;\r\n                fileCast.data.onerror = null;\r\n                fileCast.error = event as ErrorEvent;\r\n                reject(fileCast);\r\n            }\r\n        };\r\n\r\n        fileCast.data.src = file.url;\r\n\r\n        // Image is immediately-available or cached\r\n\r\n        if (fileCast.data.complete && fileCast.data.width && fileCast.data.height)\r\n        {\r\n            fileCast.data.onload = null;\r\n            fileCast.data.onerror = null;\r\n            resolve(fileCast);\r\n        }\r\n    });\r\n}\r\n", "import { IFrameConfig } from '../IFrameConfig';\r\nimport { Texture } from '../Texture';\r\n\r\nexport function SpriteSheetParser (texture: Texture, x: number, y: number, width: number, height: number, frameConfig: IFrameConfig): void\r\n{\r\n    const {\r\n        frameWidth = null,\r\n        endFrame = -1,\r\n        margin = 0,\r\n        spacing = 0\r\n    } = frameConfig;\r\n\r\n    let {\r\n        frameHeight = null,\r\n        startFrame = 0\r\n    } = frameConfig;\r\n\r\n    if (!frameHeight)\r\n    {\r\n        frameHeight = frameWidth;\r\n    }\r\n\r\n    //  If missing we can't proceed\r\n    if (frameWidth === null)\r\n    {\r\n        throw new Error('SpriteSheetParser: Invalid frameWidth');\r\n    }\r\n\r\n    const row: number = Math.floor((width - margin + spacing) / (frameWidth + spacing));\r\n    const column: number = Math.floor((height - margin + spacing) / (frameHeight + spacing));\r\n    let total: number = row * column;\r\n\r\n    if (total === 0)\r\n    {\r\n        console.warn('SpriteSheetParser: Frame config will result in zero frames');\r\n    }\r\n\r\n    if (startFrame > total || startFrame < -total)\r\n    {\r\n        startFrame = 0;\r\n    }\r\n\r\n    if (startFrame < 0)\r\n    {\r\n        //  Allow negative skipframes.\r\n        startFrame = total + startFrame;\r\n    }\r\n\r\n    if (endFrame !== -1)\r\n    {\r\n        total = startFrame + (endFrame + 1);\r\n    }\r\n\r\n    let fx: number = margin;\r\n    let fy: number = margin;\r\n    let ax: number = 0;\r\n    let ay: number = 0;\r\n\r\n    for (let i: number = 0; i < total; i++)\r\n    {\r\n        ax = 0;\r\n        ay = 0;\r\n\r\n        const w: number = fx + frameWidth;\r\n        const h: number = fy + frameHeight;\r\n\r\n        if (w > width)\r\n        {\r\n            ax = w - width;\r\n        }\r\n\r\n        if (h > height)\r\n        {\r\n            ay = h - height;\r\n        }\r\n\r\n        texture.addFrame(i, x + fx, y + fy, frameWidth - ax, frameHeight - ay);\r\n\r\n        fx += frameWidth + spacing;\r\n\r\n        if (fx + frameWidth > width)\r\n        {\r\n            fx = margin;\r\n            fy += frameHeight + spacing;\r\n        }\r\n    }\r\n}\r\n", "import { File } from '../File';\r\nimport { GetURL } from '../GetURL';\r\nimport { IFrameConfig } from '../../textures/IFrameConfig';\r\nimport { IGLTextureBindingConfig } from '../../renderer/webgl1/textures/IGLTextureBindingConfig';\r\nimport { ImageTagLoader } from '../ImageLoader';\r\nimport { SpriteSheetParser } from '../../textures/parsers/SpriteSheetParser';\r\nimport { TextureManagerInstance } from '../../textures/TextureManagerInstance';\r\n\r\nexport function SpriteSheetFile (key: string, url: string, frameConfig: IFrameConfig, glConfig?: IGLTextureBindingConfig): File\r\n{\r\n    const file = new File(key, url);\r\n\r\n    file.load = (): Promise<File> =>\r\n    {\r\n        file.url = GetURL(file.key, file.url, '.png', file.loader);\r\n\r\n        if (file.loader)\r\n        {\r\n            file.crossOrigin = file.loader.crossOrigin;\r\n        }\r\n\r\n        return new Promise((resolve, reject) =>\r\n        {\r\n            const textureManager = TextureManagerInstance.get();\r\n\r\n            if (textureManager.has(file.key))\r\n            {\r\n                resolve(file);\r\n            }\r\n            else\r\n            {\r\n                ImageTagLoader(file).then(file =>\r\n                {\r\n                    const texture = textureManager.add(file.key, file.data, glConfig);\r\n\r\n                    if (texture)\r\n                    {\r\n                        SpriteSheetParser(texture, 0, 0, texture.width, texture.height, frameConfig);\r\n\r\n                        resolve(file);\r\n                    }\r\n                    else\r\n                    {\r\n                        reject(file);\r\n                    }\r\n\r\n                }).catch(file =>\r\n                {\r\n                    reject(file);\r\n                });\r\n            }\r\n        });\r\n    };\r\n\r\n    return file;\r\n}\r\n", "import { IBaseWorld } from '../IBaseWorld';\r\n\r\nexport const WorldAfterUpdateEvent: string = 'afterupdate';\r\n\r\nexport type WorldAfterUpdateEventHandler = <T extends IBaseWorld> (delta: number, time: number, world: T) => void;\r\n", "import { IBaseWorld } from '../IBaseWorld';\r\n\r\nexport const WorldBeforeUpdateEvent: string = 'beforeupdate';\r\n\r\nexport type WorldBeforeUpdateEventHandler = <T extends IBaseWorld> (delta: number, time: number, world: T) => void;\r\n", "import { IBaseWorld } from '../IBaseWorld';\r\nimport { IRenderPass } from '../../renderer/webgl1/renderpass/IRenderPass';\r\n\r\nexport const WorldPostRenderEvent: string = 'worldpostrender';\r\n\r\nexport type WorldPostRenderEventHandler = (renderPass: IRenderPass, world: IBaseWorld) => void;\r\n", "import { IBaseWorld } from '../IBaseWorld';\r\nimport { IWorldRenderData } from '../IWorldRenderData';\r\n\r\nexport const WorldRenderEvent: string = 'worldrender';\r\n\r\nexport type WorldRenderEventHandler = (renderData: IWorldRenderData, world: IBaseWorld) => void;\r\n", "import { IBaseWorld } from '../IBaseWorld';\r\n\r\nexport const WorldShutdownEvent: string = 'worldshutdown';\r\n\r\nexport type WorldShutdownEventHandler = (world: IBaseWorld) => void;\r\n", "import { IBaseWorld } from '../IBaseWorld';\r\n\r\nexport const WorldUpdateEvent: string = 'update';\r\n\r\nexport type WorldUpdateEventHandler = <T extends IBaseWorld> (delta: number, time: number, world: T) => void;\r\n", "import { GameObjectWorld } from '../GameObjectWorld';\r\nimport { RenderDataComponent } from './RenderDataComponent';\r\nimport { addComponent } from 'bitecs';\r\n\r\nexport function AddRenderDataComponent (id: number): void\r\n{\r\n    addComponent(GameObjectWorld, RenderDataComponent, id);\r\n}\r\n", "import { GetWorldID } from '../components/hierarchy';\r\n\r\nexport function CheckDirtyTransforms (worldID: number, list: number[]): boolean\r\n{\r\n    for (let i = 0; i < list.length; i++)\r\n    {\r\n        if (GetWorldID(list[i]) === worldID)\r\n        {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    return false;\r\n}\r\n", "import { CONFIG_DEFAULTS } from '../const';\r\nimport { ConfigStore } from '../ConfigStore';\r\n\r\nexport function GetWorldSize (): number\r\n{\r\n    return ConfigStore.get(CONFIG_DEFAULTS.WORLD_SIZE);\r\n}\r\n", "import { IMatrix2D } from './IMatrix2D';\r\n\r\n//  Compares the a and b matrix and returns if they are equal.\r\n\r\nexport function Mat2dEquals (a: IMatrix2D, b: IMatrix2D): boolean\r\n{\r\n    return (\r\n        a.a === b.a &&\r\n        a.b === b.b &&\r\n        a.c === b.c &&\r\n        a.d === b.d &&\r\n        a.tx === b.tx &&\r\n        a.ty === b.ty\r\n    );\r\n}\r\n", "import { WillCacheChildren, WillRender, WillRenderChildren } from '../components/permissions';\r\n\r\nimport { GameObjectTree } from '../gameobjects';\r\nimport { GetNumChildren } from '../components/hierarchy';\r\nimport { IBaseWorld } from './IBaseWorld';\r\n\r\nexport function RebuildWorldList (world: IBaseWorld, parent: number): void\r\n{\r\n    if (WillRender(parent))\r\n    {\r\n        if (world.id !== parent)\r\n        {\r\n            world.addToRenderList(parent, 0);\r\n        }\r\n\r\n        const children = GameObjectTree.get(parent);\r\n\r\n        for (let i = 0; i < children.length; i++)\r\n        {\r\n            const nodeID = children[i];\r\n\r\n            if (WillRender(nodeID))\r\n            {\r\n                if (GetNumChildren(nodeID) > 0 && WillRenderChildren(nodeID))\r\n                {\r\n                    //  TODO\r\n                    // if (WillCacheChildren(nodeID))\r\n                    // {\r\n                    //     cachedLayers.push(entry);\r\n                    // }\r\n\r\n                    RebuildWorldList(world, nodeID);\r\n                }\r\n                else\r\n                {\r\n                    world.addToRenderList(nodeID, 0);\r\n                    world.addToRenderList(nodeID, 1);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (world.id !== parent)\r\n        {\r\n            world.addToRenderList(parent, 1);\r\n        }\r\n    }\r\n}\r\n", "import { Transform2DComponent, UpdateWorldTransform } from '../components/transform';\r\nimport { WillRender, WillRenderChildren } from '../components/permissions';\r\n\r\nimport { GameObjectTree } from '../gameobjects';\r\nimport { GameObjectWorld } from '../GameObjectWorld';\r\nimport { GetNumChildren } from '../components/hierarchy';\r\nimport { IBaseWorld } from './IBaseWorld';\r\nimport { WillTransformChildren } from '../components/permissions/WillTransformChildren';\r\nimport { hasComponent } from 'bitecs';\r\n\r\nexport function RebuildWorldTransforms (world: IBaseWorld, parent: number, transformList: number[], forceUpdate: boolean): void\r\n{\r\n    if (WillRender(parent))\r\n    {\r\n        if (!forceUpdate && transformList.indexOf(parent) > -1)\r\n        {\r\n            forceUpdate = true;\r\n        }\r\n\r\n        if (forceUpdate && hasComponent(GameObjectWorld, Transform2DComponent, parent))\r\n        {\r\n            UpdateWorldTransform(parent);\r\n        }\r\n\r\n        const children = GameObjectTree.get(parent);\r\n\r\n        for (let i = 0; i < children.length; i++)\r\n        {\r\n            const nodeID = children[i];\r\n\r\n            if (WillRender(nodeID))\r\n            {\r\n                if (GetNumChildren(nodeID) > 0)\r\n                {\r\n                    if (WillRenderChildren(nodeID) && WillTransformChildren(nodeID))\r\n                    {\r\n                        RebuildWorldTransforms(world, nodeID, transformList, forceUpdate);\r\n                    }\r\n                }\r\n                else if (forceUpdate || transformList.indexOf(nodeID) > -1)\r\n                {\r\n                    UpdateWorldTransform(nodeID);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n", "import { IGameObject } from '../gameobjects/IGameObject';\r\nimport { RemoveChild } from './RemoveChild';\r\n\r\nexport function RemoveChildren <P extends IGameObject, C extends IGameObject> (parent: P, ...children: C[]): C[]\r\n{\r\n    children.forEach(child =>\r\n    {\r\n        RemoveChild(parent, child);\r\n    });\r\n\r\n    return children;\r\n}\r\n", "export const SceneDestroyEvent: string = 'destroy';\r\n\r\nexport type SceneDestroyEventHandler = () => void;\r\n", "import * as WorldEvents from './events';\r\n\r\nimport { Begin, Flush } from '../renderer/webgl1/renderpass';\r\nimport { Changed, defineComponent, defineQuery, resetChangedQuery } from 'bitecs';\r\nimport { ClearDirtyDisplayList, HasDirtyDisplayList } from '../components/dirty';\r\nimport { Emit, Once } from '../events';\r\nimport { GameObject, GameObjectCache } from '../gameobjects';\r\nimport { GetNumWorldTransforms, ResetWorldRenderData } from './ResetWorldRenderData';\r\n\r\nimport { AddRenderDataComponent } from './AddRenderDataComponent';\r\nimport { CheckDirtyTransforms } from './CheckDirtyTransforms';\r\nimport { GameObjectWorld } from '../GameObjectWorld';\r\nimport { GetWorldSize } from '../config/worldsize';\r\nimport { IBaseCamera } from '../camera/IBaseCamera';\r\nimport { IBaseWorld } from './IBaseWorld';\r\nimport { IGameObject } from '../gameobjects/IGameObject';\r\nimport { IRenderPass } from '../renderer/webgl1/renderpass/IRenderPass';\r\nimport { IScene } from '../scenes/IScene';\r\nimport { Mat2dEquals } from '../math/mat2d/Mat2dEquals';\r\nimport { RebuildWorldList } from './RebuildWorldList';\r\nimport { RebuildWorldTransforms } from './RebuildWorldTransforms';\r\nimport { RemoveChildren } from '../display';\r\nimport { SceneDestroyEvent } from '../scenes/events';\r\nimport { SceneManager } from '../scenes/SceneManager';\r\nimport { SceneManagerInstance } from '../scenes/SceneManagerInstance';\r\nimport { SetWorldID } from '../components/hierarchy';\r\nimport { WillUpdate } from '../components/permissions';\r\nimport { WorldList } from './WorldList';\r\nimport { WorldMatrix2DComponent } from '../components/transform';\r\n\r\nexport class BaseWorld extends GameObject implements IBaseWorld\r\n{\r\n    tag = defineComponent();\r\n\r\n    scene: IScene;\r\n\r\n    sceneManager: SceneManager;\r\n\r\n    camera: IBaseCamera;\r\n\r\n    forceRefresh: boolean = false;\r\n\r\n    is3D: boolean = false;\r\n\r\n    runRender: boolean = false;\r\n\r\n    private renderList: Uint32Array;\r\n    private listLength: number;\r\n\r\n    private totalChildren: number;\r\n    private totalChildrenQuery;\r\n    private dirtyWorldQuery;\r\n\r\n    constructor (scene: IScene)\r\n    {\r\n        super();\r\n\r\n        this.scene = scene;\r\n        this.sceneManager = SceneManagerInstance.get();\r\n\r\n        this.totalChildren = 0;\r\n        this.totalChildrenQuery = defineQuery([ this.tag ]);\r\n        this.dirtyWorldQuery = defineQuery([ this.tag, Changed(WorldMatrix2DComponent) ]);\r\n\r\n        //  * 4 because each Game Object ID is added twice (render and post render) + each has the render type flag\r\n        this.renderList = new Uint32Array(GetWorldSize() * 4);\r\n        this.listLength = 0;\r\n\r\n        const id = this.id;\r\n\r\n        AddRenderDataComponent(id);\r\n\r\n        SetWorldID(id, id);\r\n\r\n        WorldList.get(scene).push(this);\r\n\r\n        Once(scene, SceneDestroyEvent, () => this.destroy());\r\n    }\r\n\r\n    beforeUpdate (delta: number, time: number): void\r\n    {\r\n        Emit(this, WorldEvents.WorldBeforeUpdateEvent, delta, time, this);\r\n    }\r\n\r\n    update (delta: number, time: number): void\r\n    {\r\n        if (!WillUpdate(this.id))\r\n        {\r\n            return;\r\n        }\r\n\r\n        Emit(this, WorldEvents.WorldUpdateEvent, delta, time, this);\r\n\r\n        super.update(delta, time);\r\n    }\r\n\r\n    afterUpdate (delta: number, time: number): void\r\n    {\r\n        Emit(this, WorldEvents.WorldAfterUpdateEvent, delta, time, this);\r\n    }\r\n\r\n    addToRenderList (id: number, renderType: number): void\r\n    {\r\n        let len = this.listLength;\r\n        const list = this.renderList;\r\n\r\n        list[len] = id;\r\n        list[len + 1] = renderType;\r\n\r\n        this.listLength += 2;\r\n\r\n        len += 2;\r\n\r\n        if (len === list.length)\r\n        {\r\n            const newList = new Uint32Array(len + (GetWorldSize() * 4));\r\n\r\n            newList.set(list, 0);\r\n\r\n            this.renderList = newList;\r\n        }\r\n    }\r\n\r\n    getRenderList (): IGameObject[]\r\n    {\r\n        const list = this.renderList;\r\n\r\n        const output = [];\r\n\r\n        for (let i = 0; i < this.listLength; i += 2)\r\n        {\r\n            const eid = list[i];\r\n            const type = list[i + 1];\r\n\r\n            if (type === 0)\r\n            {\r\n                output.push(GameObjectCache.get(eid));\r\n            }\r\n        }\r\n\r\n        return output;\r\n    }\r\n\r\n    preRender (gameFrame: number, transformList: number[]): boolean\r\n    {\r\n        const sceneManager = this.sceneManager;\r\n\r\n        if (!this.isRenderable())\r\n        {\r\n            this.runRender = false;\r\n\r\n            sceneManager.updateWorldStats(this.totalChildren, 0, 0, 0);\r\n\r\n            return false;\r\n        }\r\n\r\n        const id = this.id;\r\n\r\n        const dirtyDisplayList = HasDirtyDisplayList(id);\r\n\r\n        ResetWorldRenderData(id, gameFrame);\r\n\r\n        let isDirty = false;\r\n\r\n        if (dirtyDisplayList)\r\n        {\r\n            this.listLength = 0;\r\n\r\n            RebuildWorldList(this, id);\r\n\r\n            ClearDirtyDisplayList(id);\r\n\r\n            isDirty = true;\r\n\r\n            this.totalChildren = this.totalChildrenQuery(GameObjectWorld).length;\r\n        }\r\n\r\n        if (dirtyDisplayList || CheckDirtyTransforms(id, transformList))\r\n        {\r\n            RebuildWorldTransforms(this, id, transformList, false);\r\n\r\n            isDirty = true;\r\n        }\r\n\r\n        this.camera.dirtyRender = false;\r\n\r\n        this.runRender = (this.listLength > 0);\r\n\r\n        //  So close, but so far ... doesn't work quite right in bitecs yet:\r\n        // const dirtyWorld = this.dirtyWorldQuery(GameObjectWorld, false).length;\r\n        const dirtyWorld = GetNumWorldTransforms();\r\n\r\n        sceneManager.updateWorldStats(this.totalChildren, this.listLength / 4, Number(dirtyDisplayList), dirtyWorld);\r\n\r\n        return isDirty;\r\n    }\r\n\r\n    getTotalChildren (): number\r\n    {\r\n        if (HasDirtyDisplayList(this.id))\r\n        {\r\n            this.totalChildren = this.totalChildrenQuery(GameObjectWorld).length;\r\n        }\r\n\r\n        return this.totalChildren;\r\n    }\r\n\r\n    renderGL <T extends IRenderPass> (renderPass: T): void\r\n    {\r\n        Emit(this, WorldEvents.WorldRenderEvent, this);\r\n\r\n        const currentCamera = renderPass.current2DCamera;\r\n        const camera = this.camera;\r\n\r\n        if (!currentCamera || !Mat2dEquals(camera.worldTransform, currentCamera.worldTransform))\r\n        {\r\n            Flush(renderPass);\r\n        }\r\n\r\n        Begin(renderPass, camera);\r\n\r\n        const list = this.renderList;\r\n\r\n        for (let i = 0; i < this.listLength; i += 2)\r\n        {\r\n            const eid = list[i];\r\n            const type = list[i + 1];\r\n\r\n            const entry = GameObjectCache.get(eid);\r\n\r\n            if (type === 1)\r\n            {\r\n                entry.postRenderGL(renderPass);\r\n            }\r\n            else\r\n            {\r\n                entry.renderGL(renderPass);\r\n            }\r\n        }\r\n    }\r\n\r\n    postRenderGL <T extends IRenderPass> (renderPass: T): void\r\n    {\r\n        if (!this.runRender)\r\n        {\r\n            Begin(renderPass, this.camera);\r\n        }\r\n\r\n        Emit(this, WorldEvents.WorldPostRenderEvent, renderPass, this);\r\n\r\n        // resetChangedQuery(GameObjectWorld, this.dirtyWorldQuery);\r\n    }\r\n\r\n    shutdown (): void\r\n    {\r\n        //  Clear the display list and reset the camera, but leave\r\n        //  everything in place so we can return to this World again\r\n        //  at a later stage\r\n\r\n        RemoveChildren(this);\r\n\r\n        Emit(this, WorldEvents.WorldShutdownEvent, this);\r\n\r\n        ResetWorldRenderData(this.id, 0);\r\n\r\n        if (this.camera)\r\n        {\r\n            this.camera.reset();\r\n        }\r\n    }\r\n\r\n    destroy (reparentChildren?: IGameObject): void\r\n    {\r\n        super.destroy(reparentChildren);\r\n\r\n        this.shutdown();\r\n\r\n        if (this.camera)\r\n        {\r\n            this.camera.destroy();\r\n        }\r\n\r\n        this.camera = null;\r\n    }\r\n}\r\n", "import { BaseWorld } from './BaseWorld';\r\nimport { IScene } from '../scenes/IScene';\r\nimport { IStaticCamera } from '../camera/IStaticCamera';\r\nimport { IStaticWorld } from './IStaticWorld';\r\nimport { StaticCamera } from '../camera/StaticCamera';\r\n\r\n//  A Static World is designed specifically to have a bounds of a fixed size\r\n//  and a camera that doesn't move at all (no scrolling, rotation, etc)\r\n//  Because it has a fixed size, there is no camera culling enabled.\r\n//  Games that use this kind of world include Pacman, Bejeweled and 2048.\r\n\r\nexport class StaticWorld extends BaseWorld implements IStaticWorld\r\n{\r\n    camera: IStaticCamera;\r\n\r\n    constructor (scene: IScene)\r\n    {\r\n        super(scene);\r\n\r\n        this.camera = new StaticCamera();\r\n    }\r\n}\r\n", "import { BackgroundColor, GlobalVar, Parent, Scenes, WebGL } from '../../../../phaser-genesis/src/config';\r\n\r\nimport { DrawFrame } from '../../../../phaser-genesis/src/renderer/webgl1/draw/DrawFrame';\r\nimport { Game } from '../../../../phaser-genesis/src/Game';\r\nimport { GetTexture } from '../../../../phaser-genesis/src/textures/GetTexture';\r\nimport { IRenderPass } from '../../../../phaser-genesis/src/renderer/webgl1/renderpass/IRenderPass';\r\nimport { ImageFile } from '../../../../phaser-genesis/src/loader/files/ImageFile';\r\nimport { Loader } from '../../../../phaser-genesis/src/loader/Loader';\r\nimport { On } from '../../../../phaser-genesis/src/events/On';\r\nimport { Scene } from '../../../../phaser-genesis/src/scenes/Scene';\r\nimport { SpriteSheetFile } from '../../../../phaser-genesis/src/loader/files/SpriteSheetFile';\r\nimport { StaticWorld } from '../../../../phaser-genesis/src/world/StaticWorld';\r\nimport { WorldPostRenderEvent } from '../../../../phaser-genesis/src/world/events';\r\nimport { gl } from '../../../../phaser-genesis/src/renderer/webgl1/GL';\r\n\r\nclass Demo extends Scene\r\n{\r\n    constructor ()\r\n    {\r\n        super();\r\n\r\n        this.create();\r\n    }\r\n\r\n    async create ()\r\n    {\r\n        await SpriteSheetFile('fruit', 'assets/32x32-item-pack.png', { frameWidth: 32 }, { minFilter: gl.NEAREST, magFilter: gl.NEAREST }).load();\r\n\r\n        const texture = GetTexture('fruit');\r\n\r\n        const world = new StaticWorld(this);\r\n\r\n        On(world, WorldPostRenderEvent, (renderPass: IRenderPass) => {\r\n\r\n            DrawFrame(renderPass, texture, 0, 56, 6, 1, 9, 9);\r\n            DrawFrame(renderPass, texture, 1, 456, 6, 1, 9, 9);\r\n            DrawFrame(renderPass, texture, 2, 56, 306, 1, 9, 9);\r\n            DrawFrame(renderPass, texture, 3, 456, 306, 1, 9, 9);\r\n\r\n        });\r\n    }\r\n}\r\n\r\nnew Game(\r\n    WebGL(),\r\n    Parent('gameParent'),\r\n    GlobalVar('Phaser4'),\r\n    BackgroundColor(0x2d2d2d),\r\n    Scenes(Demo)\r\n);\r\n"],
  "mappings": "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",
  "names": []
}
