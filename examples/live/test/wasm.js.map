{
  "version": 3,
  "sources": ["../../../rustwasm/pkg/rustwasm.js", "../../src/test/wasm.ts"],
  "sourcesContent": ["\nlet wasm;\n\nconst heap = new Array(32).fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nlet heap_next = heap.length;\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    heap[idx] = obj;\n    return idx;\n}\n\nlet cachedTextDecoder = new TextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nlet cachegetUint8Memory0 = null;\nfunction getUint8Memory0() {\n    if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm.memory.buffer) {\n        cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachegetUint8Memory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\n\nfunction getObject(idx) { return heap[idx]; }\n\nfunction dropObject(idx) {\n    if (idx < 36) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\n/**\n* @param {number} x\n* @returns {Array<any>}\n*/\nexport function bob(x) {\n    var ret = wasm.bob(x);\n    return takeObject(ret);\n}\n\nasync function load(module, imports) {\n    if (typeof Response === 'function' && module instanceof Response) {\n        if (typeof WebAssembly.instantiateStreaming === 'function') {\n            try {\n                return await WebAssembly.instantiateStreaming(module, imports);\n\n            } catch (e) {\n                if (module.headers.get('Content-Type') != 'application/wasm') {\n                    console.warn(\"`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\\n\", e);\n\n                } else {\n                    throw e;\n                }\n            }\n        }\n\n        const bytes = await module.arrayBuffer();\n        return await WebAssembly.instantiate(bytes, imports);\n\n    } else {\n        const instance = await WebAssembly.instantiate(module, imports);\n\n        if (instance instanceof WebAssembly.Instance) {\n            return { instance, module };\n\n        } else {\n            return instance;\n        }\n    }\n}\n\nasync function init(input) {\n    if (typeof input === 'undefined') {\n        input = new URL('rustwasm_bg.wasm', import.meta.url);\n    }\n    const imports = {};\n    imports.wbg = {};\n    imports.wbg.__wbindgen_number_new = function(arg0) {\n        var ret = arg0;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_newwithlength_b9cd312bebec8dd5 = function(arg0) {\n        var ret = new Array(arg0 >>> 0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_set_d87dea4838fe4322 = function(arg0, arg1, arg2) {\n        getObject(arg0)[arg1 >>> 0] = takeObject(arg2);\n    };\n    imports.wbg.__wbindgen_throw = function(arg0, arg1) {\n        throw new Error(getStringFromWasm0(arg0, arg1));\n    };\n\n    if (typeof input === 'string' || (typeof Request === 'function' && input instanceof Request) || (typeof URL === 'function' && input instanceof URL)) {\n        input = fetch(input);\n    }\n\n\n\n    const { instance, module } = await load(await input, imports);\n\n    wasm = instance.exports;\n    init.__wbindgen_wasm_module = module;\n\n    return wasm;\n}\n\nexport default init;\n\n", "/*\nimport load from '../../../rustwasm/pkg/rustwasm_bg.wasm';\n\nload().then(lib =>\n{\n    console.log('wasm alive 20');\n    console.log(lib);\n\n    lib.start();\n\n    // const v = lib.add(99);\n\n    // console.log(v);\n\n});\n*/\n\n//  Windows:\nimport init, { add, bob } from '../../../rustwasm/pkg/rustwasm';\n\n// Copy `data` into the `instance` exported memory buffer.\nfunction copyMemory (data, instance)\n{\n    // the `alloc` function returns an offset in\n    // the module's memory to the start of the block\n    // const ptr = instance.memalloc(data.length);\n    // const ptr = instance.memalloc(data.length);\n    const ptr = instance.my_alloc(data.length);\n\n    // create a typed `ArrayBuffer` at `ptr` of proper size\n    const mem = new Uint8Array(instance.memory.buffer, ptr, data.length);\n\n    // copy the content of `data` into the memory buffer\n    mem.set(new Uint8Array(data));\n\n    // return the pointer\n    return ptr;\n}\n\n// Invoke the `array_sum` exported method and\n// log the result to the console\nfunction arraySum (array, instance)\n{\n    // copy the contents of `array` into the\n    // module's memory and get the offset\n    const ptr = copyMemory(array, instance);\n\n    // invoke the module's `array_sum` exported function\n    // and log the result\n    const res = instance.array_sum(ptr, array.length);\n\n    console.log('Result: ' + res);\n}\n\n// init('/dev/rustwasm/pkg/rustwasm_bg.wasm').then(wasm => {\ninit('//wasm.test.local:8890/rustwasm_bg.wasm').then(wasm => {\n\n    console.log(wasm.add(333));\n    console.log(wasm.bob(66));\n\n    // const v = add(321);\n    // console.log(v);\n    // console.log(bob(55));\n\n    arraySum([ 10, 20, 30, 40, 50 ], wasm);\n\n    // const array = new Int32Array(wasm.memory.buffer, 0, 5);\n    // array.set([3, 15, 18, 4, 2])\n    // const result = sumArrayInt32(array.byteOffset, array.length)\n\n});\n\n/*\nimport rust from '../../../rustwasm/target/wasm32-unknown-unknown/release/rustwasm.wasm';\n\nrust().then(lib => {\n\n    console.log(lib);\n\n}).catch(console.error);\n*/\n\n/*\n//  Works with wasm-pack build:\n(async () => {\n    let response = await fetch('/dev/rustwasm/pkg/rustwasm_bg.wasm');\n    let bytes = await response.arrayBuffer();\n    let { instance } = await WebAssembly.instantiate(bytes, { });\n\n    console.log('The answer is: ', instance.exports.add(333));\n})();\n*/\n\n/*\nload(imports).then(lib =>\n{\n    console.log('wasm alive 20');\n    console.log(lib);\n\n    // const v = lib.add_array(100);\n\n    const v = lib.add(100, 555);\n\n    console.log(v);\n\n});\n*/\n"],
  "mappings": "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",
  "names": []
}
