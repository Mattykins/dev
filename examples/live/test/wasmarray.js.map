{
  "version": 3,
  "sources": ["../../../rustwasm/pkg/rustwasm.js", "../../src/test/wasmarray.ts"],
  "sourcesContent": ["\nlet wasm;\n\n/**\n* @param {number} x\n* @param {number} y\n* @param {number} rotation\n* @param {number} scale_x\n* @param {number} scale_y\n* @param {number} skew_x\n* @param {number} skew_y\n*/\nexport function load_matrix(x, y, rotation, scale_x, scale_y, skew_x, skew_y) {\n    wasm.load_matrix(x, y, rotation, scale_x, scale_y, skew_x, skew_y);\n}\n\n/**\n* @returns {number}\n*/\nexport function get_matrix2d_pointer() {\n    var ret = wasm.get_matrix2d_pointer();\n    return ret;\n}\n\nasync function load(module, imports) {\n    if (typeof Response === 'function' && module instanceof Response) {\n        if (typeof WebAssembly.instantiateStreaming === 'function') {\n            try {\n                return await WebAssembly.instantiateStreaming(module, imports);\n\n            } catch (e) {\n                if (module.headers.get('Content-Type') != 'application/wasm') {\n                    console.warn(\"`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\\n\", e);\n\n                } else {\n                    throw e;\n                }\n            }\n        }\n\n        const bytes = await module.arrayBuffer();\n        return await WebAssembly.instantiate(bytes, imports);\n\n    } else {\n        const instance = await WebAssembly.instantiate(module, imports);\n\n        if (instance instanceof WebAssembly.Instance) {\n            return { instance, module };\n\n        } else {\n            return instance;\n        }\n    }\n}\n\nasync function init(input) {\n    if (typeof input === 'undefined') {\n        input = new URL('rustwasm_bg.wasm', import.meta.url);\n    }\n    const imports = {};\n\n\n    if (typeof input === 'string' || (typeof Request === 'function' && input instanceof Request) || (typeof URL === 'function' && input instanceof URL)) {\n        input = fetch(input);\n    }\n\n\n\n    const { instance, module } = await load(await input, imports);\n\n    wasm = instance.exports;\n    init.__wbindgen_wasm_module = module;\n\n    return wasm;\n}\n\nexport default init;\n\n", "import init from '../../../rustwasm/pkg/rustwasm';\n\n// init('/dev/rustwasm/pkg/rustwasm_bg.wasm').then(wasm => {\ninit('//wasm.test.local:8890/rustwasm_bg.wasm').then(rustWasm => {\n\n    console.log('wasm-array-f32-2216');\n\n    /**\n     * Part one: Write in Wasm, Read in JS\n     */\n    console.log(\"Write in Wasm, Read in JS, Index 0:\");\n\n    // First, let's have wasm write to our buffer\n    rustWasm.store_value_in_wasm_memory_buffer_index_zero(24);\n\n    // Next, let's create a Uint8Array of our wasm memory\n    let wasmMemory = new Uint8Array(rustWasm.memory.buffer);\n    // let wasmMemory = new Float32Array(rustWasm.memory.buffer);\n\n    // Then, let's get the pointer to our buffer that is within wasmMemory\n    let bufferPointer = rustWasm.get_wasm_memory_buffer_pointer();\n\n    // Then, let's read the written value at index zero of the buffer,\n    // by accessing the index of wasmMemory[bufferPointer + bufferIndex]\n    console.log(wasmMemory[bufferPointer + 0]); // Should log \"24\"\n\n    /**\n     * Part two: Write in JS, Read in Wasm\n     */\n    console.log(\"Write in JS, Read in Wasm, Index 1:\");\n\n    // First, let's write to index one of our buffer\n    wasmMemory[bufferPointer + 1] = 15;\n\n    // Then, let's have wasm read index one of the buffer,\n    // and return the result\n    console.log(rustWasm.read_wasm_memory_buffer_and_return_index_one()); // Should log \"15\"\n\n    /**\n     * NOTE: if we were to continue reading and writing memory,\n     * depending on how the memory is grown by rust, you may have\n     * to re-create the Uint8Array since memory layout could change.\n     * For example, `let wasmMemory = new Uint8Array(rustWasm.memory.buffer);`\n     * In this example, we did not, but be aware this may happen :)\n     */\n\n    console.log(\"Transform Test\");\n\n    const ptr = rustWasm.get_transform_pointer();\n\n    // console.log(ptr);\n\n    const mem = new Float32Array(rustWasm.memory.buffer, ptr, 6);\n\n    rustWasm.load_matrix(400, 300, 0, 1, 1, 0, 0);\n\n    console.log(mem);\n\n    rustWasm.load_matrix(100, 200, 0.67, 1, 1, 0, 0.2);\n\n    console.log(mem);\n\n    /*\n\n     // Next, let's create a Uint8Array of our wasm memory\n     let f32wasmMemory = new Float32Array(rustWasm.memory.buffer);\n \n     // Then, let's get the pointer to our buffer that is within wasmMemory\n     let f32bufferPointer = rustWasm.get_invader_pointer();\n\n     console.log(f32wasmMemory);\n     console.log(f32bufferPointer);\n \n     // Then, let's read the written value at index zero of the buffer,\n     // by accessing the index of wasmMemory[bufferPointer + bufferIndex]\n     console.log(f32wasmMemory[f32bufferPointer + 0]); // Should log \"24\"\n \n     console.log(\"f32 Write in JS, Read in Wasm, Index 1:\");\n \n     // First, let's write to index one of our buffer\n     f32wasmMemory[f32bufferPointer + 1] = 15.99;\n \n     // Then, let's have wasm read index one of the buffer,\n     // and return the result\n     console.log(rustWasm.read_f32_wasm_memory_buffer_and_return_index_one());\n     */\n \n});\n"],
  "mappings": ";;AAAA;AACA,MAAI;AAuBJ,sBAAoB,QAAQ,SAAS;AACjC,QAAI,OAAO,aAAa,cAAc,kBAAkB,UAAU;AAC9D,UAAI,OAAO,YAAY,yBAAyB,YAAY;AACxD,YAAI;AACA,iBAAO,MAAM,YAAY,qBAAqB,QAAQ;AAAA,iBAEjD,GAAP;AACE,cAAI,OAAO,QAAQ,IAAI,mBAAmB,oBAAoB;AAC1D,oBAAQ,KAAK,qMAAqM;AAAA,iBAE/M;AACH,kBAAM;AAAA;AAAA;AAAA;AAKlB,YAAM,QAAQ,MAAM,OAAO;AAC3B,aAAO,MAAM,YAAY,YAAY,OAAO;AAAA,WAEzC;AACH,YAAM,WAAW,MAAM,YAAY,YAAY,QAAQ;AAEvD,UAAI,oBAAoB,YAAY,UAAU;AAC1C,eAAO,EAAE,UAAU;AAAA,aAEhB;AACH,eAAO;AAAA;AAAA;AAAA;AAKnB,sBAAoB,OAAO;AACvB,QAAI,OAAO,UAAU,aAAa;AAC9B,cAAQ,IAAI,IAAI,oBAAoB,YAAY;AAAA;AAEpD,UAAM,UAAU;AAGhB,QAAI,OAAO,UAAU,YAAa,OAAO,YAAY,cAAc,iBAAiB,WAAa,OAAO,QAAQ,cAAc,iBAAiB,KAAM;AACjJ,cAAQ,MAAM;AAAA;AAKlB,UAAM,EAAE,UAAU,WAAW,MAAM,KAAK,MAAM,OAAO;AAErD,WAAO,SAAS;AAChB,SAAK,yBAAyB;AAE9B,WAAO;AAAA;AAGX,MAAO,mBAAQ;;;ACzEf,mBAAK,2CAA2C,KAAK,cAAY;AAE7D,YAAQ,IAAI;AAKZ,YAAQ,IAAI;AAGZ,aAAS,6CAA6C;AAGtD,QAAI,aAAa,IAAI,WAAW,SAAS,OAAO;AAIhD,QAAI,gBAAgB,SAAS;AAI7B,YAAQ,IAAI,WAAW,gBAAgB;AAKvC,YAAQ,IAAI;AAGZ,eAAW,gBAAgB,KAAK;AAIhC,YAAQ,IAAI,SAAS;AAUrB,YAAQ,IAAI;AAEZ,UAAM,MAAM,SAAS;AAIrB,UAAM,MAAM,IAAI,aAAa,SAAS,OAAO,QAAQ,KAAK;AAE1D,aAAS,YAAY,KAAK,KAAK,GAAG,GAAG,GAAG,GAAG;AAE3C,YAAQ,IAAI;AAEZ,aAAS,YAAY,KAAK,KAAK,MAAM,GAAG,GAAG,GAAG;AAE9C,YAAQ,IAAI;AAAA;",
  "names": []
}
