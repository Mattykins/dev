{
  "version": 3,
  "sources": ["../../../../../phaser-genesis/src/config/const.ts", "../../../../../phaser-genesis/src/config/ConfigStore.ts", "../../../../../phaser-genesis/src/config/backgroundcolor/SetBackgroundColor.ts", "../../../../../phaser-genesis/src/config/backgroundcolor/BackgroundColor.ts", "../../../../../phaser-genesis/src/config/banner/SetBanner.ts", "../../../../../phaser-genesis/src/config/batchsize/SetBatchSize.ts", "../../../../../phaser-genesis/src/config/size/GetHeight.ts", "../../../../../phaser-genesis/src/config/size/GetResolution.ts", "../../../../../phaser-genesis/src/config/size/GetWidth.ts", "../../../../../phaser-genesis/src/config/size/SetSize.ts", "../../../../../phaser-genesis/src/renderer/BindingQueue.ts", "../../../../../phaser-genesis/src/config/backgroundcolor/GetBackgroundColor.ts", "../../../../../phaser-genesis/src/config/renderer/SetRenderer.ts", "../../../../../phaser-genesis/src/config/defaultorigin/SetDefaultOrigin.ts", "../../../../../phaser-genesis/src/config/globalvar/SetGlobalVar.ts", "../../../../../phaser-genesis/src/config/globalvar/GlobalVar.ts", "../../../../../phaser-genesis/src/config/maxtextures/SetMaxTextures.ts", "../../../../../phaser-genesis/src/dom/GetElement.ts", "../../../../../phaser-genesis/src/config/parent/SetParent.ts", "../../../../../phaser-genesis/src/config/parent/Parent.ts", "../../../../../phaser-genesis/src/config/scenes/SetScenes.ts", "../../../../../phaser-genesis/src/config/scenes/Scenes.ts", "../../../../../phaser-genesis/src/renderer/webgl1/GL.ts", "../../../../../phaser-genesis/src/renderer/webgl1/renderpass/Draw.ts", "../../../../../phaser-genesis/src/renderer/webgl1/renderpass/Flush.ts", "../../../../../phaser-genesis/src/renderer/webgl1/renderpass/End.ts", "../../../../../phaser-genesis/src/renderer/webgl1/textures/GetCompressedTextures.ts", "../../../../../phaser-genesis/src/renderer/webgl1/colors/GetRGBArray.ts", "../../../../../phaser-genesis/src/config/webglcontext/GetWebGLContext.ts", "../../../../../phaser-genesis/src/renderer/webgl1/fbo/CreateFramebuffer.ts", "../../../../../phaser-genesis/src/renderer/webgl1/textures/CreateGLTexture.ts", "../../../../../phaser-genesis/src/renderer/webgl1/fbo/DeleteFramebuffer.ts", "../../../../../phaser-genesis/src/renderer/webgl1/textures/DeleteGLTexture.ts", "../../../../../phaser-genesis/src/math/pow2/IsSizePowerOfTwo.ts", "../../../../../phaser-genesis/src/renderer/webgl1/textures/SetGLTextureFilterMode.ts", "../../../../../phaser-genesis/src/renderer/webgl1/textures/UpdateGLTexture.ts", "../../../../../phaser-genesis/src/renderer/webgl1/textures/GLTextureBinding.ts", "../../../../../phaser-genesis/src/renderer/webgl1/renderpass/ProcessBindingQueue.ts", "../../../../../phaser-genesis/src/renderer/webgl1/renderpass/BlendModeStack.ts", "../../../../../phaser-genesis/src/renderer/webgl1/renderpass/FramebufferStack.ts", "../../../../../phaser-genesis/src/config/batchsize/GetBatchSize.ts", "../../../../../phaser-genesis/src/config/maxtextures/GetMaxTextures.ts", "../../../../../phaser-genesis/src/renderer/webgl1/buffers/DeleteGLBuffer.ts", "../../../../../phaser-genesis/src/renderer/webgl1/buffers/VertexBuffer.ts", "../../../../../phaser-genesis/src/renderer/webgl1/buffers/IndexedVertexBuffer.ts", "../../../../../phaser-genesis/src/utils/array/matrix/CheckMatrix.ts", "../../../../../phaser-genesis/src/utils/array/matrix/MatrixToString.ts", "../../../../../phaser-genesis/src/utils/array/matrix/ReverseColumns.ts", "../../../../../phaser-genesis/src/utils/array/matrix/ReverseRows.ts", "../../../../../phaser-genesis/src/utils/array/matrix/TransposeMatrix.ts", "../../../../../phaser-genesis/src/utils/array/matrix/RotateMatrix.ts", "../../../../../phaser-genesis/src/utils/array/matrix/Rotate180.ts", "../../../../../phaser-genesis/src/utils/array/matrix/RotateLeft.ts", "../../../../../phaser-genesis/src/utils/array/matrix/RotateRight.ts", "../../../../../phaser-genesis/src/utils/array/NumberArray.ts", "../../../../../phaser-genesis/src/math/RoundAwayFromZero.ts", "../../../../../phaser-genesis/src/utils/array/NumberArrayStep.ts", "../../../../../phaser-genesis/src/utils/base64/ArrayBufferToBase64.ts", "../../../../../phaser-genesis/src/utils/base64/Base64ToArrayBuffer.ts", "../../../../../phaser-genesis/src/utils/string/RemoveAt.ts", "../../../../../phaser-genesis/src/utils/string/Reverse.ts", "../../../../../phaser-genesis/src/utils/string/UppercaseFirst.ts", "../../../../../phaser-genesis/src/utils/NOOP.ts", "../../../../../phaser-genesis/src/math/mat4/Matrix4.ts", "../../../../../phaser-genesis/src/math/mat4/Mat4Ortho.ts", "../../../../../phaser-genesis/src/renderer/webgl1/GL_CONST.ts", "../../../../../phaser-genesis/src/renderer/webgl1/shaders/CreateAttributes.ts", "../../../../../phaser-genesis/src/renderer/webgl1/shaders/DeleteShaders.ts", "../../../../../phaser-genesis/src/renderer/webgl1/shaders/CreateProgram.ts", "../../../../../phaser-genesis/src/renderer/webgl1/shaders/CreateShader.ts", "../../../../../phaser-genesis/src/renderer/webgl1/shaders/CreateUniformSetter.ts", "../../../../../phaser-genesis/src/renderer/webgl1/shaders/CreateUniforms.ts", "../../../../../phaser-genesis/src/renderer/webgl1/shaders/DefaultQuadAttributes.ts", "../../../../../phaser-genesis/src/renderer/webgl1/shaders/DefaultQuadUniforms.ts", "../../../../../phaser-genesis/src/renderer/webgl1/fbo/CreateDepthBuffer.ts", "../../../../../phaser-genesis/src/renderer/webgl1/glsl/SINGLE_QUAD_FRAG.ts", "../../../../../phaser-genesis/src/renderer/webgl1/glsl/SINGLE_QUAD_VERT.ts", "../../../../../phaser-genesis/node_modules/bitecs/src/Storage.js", "../../../../../phaser-genesis/node_modules/bitecs/src/Util.js", "../../../../../phaser-genesis/node_modules/bitecs/src/Serialize.js", "../../../../../phaser-genesis/node_modules/bitecs/src/Entity.js", "../../../../../phaser-genesis/node_modules/bitecs/src/Query.js", "../../../../../phaser-genesis/node_modules/bitecs/src/Component.js", "../../../../../phaser-genesis/node_modules/bitecs/src/World.js", "../../../../../phaser-genesis/node_modules/bitecs/src/System.js", "../../../../../phaser-genesis/node_modules/bitecs/src/index.js", "../../../../../phaser-genesis/src/components/vertices/QuadVertexComponent.ts", "../../../../../phaser-genesis/src/components/transform/Extent2DComponent.ts", "../../../../../phaser-genesis/src/components/dirty/DirtyComponent.ts", "../../../../../phaser-genesis/src/GameObjectWorld.ts", "../../../../../phaser-genesis/src/components/dirty/AddDirtyComponent.ts", "../../../../../phaser-genesis/src/components/dirty/ClearDirtyDisplayList.ts", "../../../../../phaser-genesis/src/components/dirty/HasDirtyChildCache.ts", "../../../../../phaser-genesis/src/components/dirty/HasDirtyDisplayList.ts", "../../../../../phaser-genesis/src/components/dirty/SetDirtyChildCache.ts", "../../../../../phaser-genesis/src/components/dirty/SetDirtyDisplayList.ts", "../../../../../phaser-genesis/src/GameInstance.ts", "../../../../../phaser-genesis/src/components/hierarchy/HierarchyComponent.ts", "../../../../../phaser-genesis/src/components/hierarchy/AddHierarchyComponent.ts", "../../../../../phaser-genesis/src/gameobjects/GameObjectCache.ts", "../../../../../phaser-genesis/src/components/hierarchy/ClearWorldAndParentID.ts", "../../../../../phaser-genesis/src/components/bounds/BoundsComponent.ts", "../../../../../phaser-genesis/src/components/color/ColorComponent.ts", "../../../../../phaser-genesis/src/components/vertices/VertexComponent.ts", "../../../../../phaser-genesis/src/components/vertices/VertexWorld.ts", "../../../../../phaser-genesis/src/components/vertices/SetUV.ts", "../../../../../phaser-genesis/src/components/transform/WorldMatrix2DComponent.ts", "../../../../../phaser-genesis/src/components/vertices/UpdateVertexPositionSystem.ts", "../../../../../phaser-genesis/src/renderer/webgl1/colors/PackColor.ts", "../../../../../phaser-genesis/src/components/color/PackQuadColorsSystem.ts", "../../../../../phaser-genesis/src/components/permissions/PermissionsComponent.ts", "../../../../../phaser-genesis/src/components/permissions/AddPermissionsComponent.ts", "../../../../../phaser-genesis/src/components/permissions/WillCacheChildren.ts", "../../../../../phaser-genesis/src/components/permissions/WillRender.ts", "../../../../../phaser-genesis/src/components/permissions/WillRenderChildren.ts", "../../../../../phaser-genesis/src/components/permissions/WillUpdate.ts", "../../../../../phaser-genesis/src/components/permissions/WillUpdateChildren.ts", "../../../../../phaser-genesis/src/components/transform/LocalMatrix2DComponent.ts", "../../../../../phaser-genesis/src/components/transform/Transform2DComponent.ts", "../../../../../phaser-genesis/src/math/vec2/Vec2FromArray.ts", "../../../../../phaser-genesis/src/math/vec2/Vec2ToArray.ts", "../../../../../phaser-genesis/src/math/vec2/Vec2.ts", "../../../../../phaser-genesis/src/components/transform/InvalidateLocalMatrix2DComponent.ts", "../../../../../phaser-genesis/src/gameobjects/DIRTY_CONST.ts", "../../../../../phaser-genesis/src/components/transform/UpdateLocalTransform2DSystem.ts", "../../../../../phaser-genesis/src/components/transform/CopyLocalToWorld.ts", "../../../../../phaser-genesis/src/components/transform/CopyWorldToWorld.ts", "../../../../../phaser-genesis/src/components/transform/MultiplyLocalWithWorld.ts", "../../../../../phaser-genesis/src/components/permissions/WillTransformChildren.ts", "../../../../../phaser-genesis/src/components/transform/UpdateWorldTransform.ts", "../../../../../phaser-genesis/src/components/transform/UpdateWorldTransform2DSystem.ts", "../../../../../phaser-genesis/src/renderer/webgl1/renderpass/GetVertexBufferEntry.ts", "../../../../../phaser-genesis/src/display/RemoveChildrenBetween.ts", "../../../../../phaser-genesis/src/display/DestroyChildren.ts", "../../../../../phaser-genesis/src/gameobjects/events/DestroyEvent.ts", "../../../../../phaser-genesis/src/events/Emit.ts", "../../../../../phaser-genesis/src/gameobjects/GameObjectTree.ts", "../../../../../phaser-genesis/src/components/hierarchy/GetParentID.ts", "../../../../../phaser-genesis/src/display/IsValidParent.ts", "../../../../../phaser-genesis/src/display/GetChildIndex.ts", "../../../../../phaser-genesis/src/display/RemoveChildAt.ts", "../../../../../phaser-genesis/src/display/RemoveChild.ts", "../../../../../phaser-genesis/src/display/SetWorld.ts", "../../../../../phaser-genesis/src/display/AddChildAt.ts", "../../../../../phaser-genesis/src/display/SetParent.ts", "../../../../../phaser-genesis/src/display/ReparentChildren.ts", "../../../../../phaser-genesis/src/gameobjects/GameObject.ts", "../../../../../phaser-genesis/src/geom/rectangle/RectangleContains.ts", "../../../../../phaser-genesis/src/geom/rectangle/Rectangle.ts", "../../../../../phaser-genesis/src/textures/TextureManagerInstance.ts", "../../../../../phaser-genesis/src/textures/GetTexture.ts", "../../../../../phaser-genesis/src/renderer/webgl1/draw/DrawFrame.ts", "../../../../../phaser-genesis/src/renderer/webgl1/draw/DrawImage.ts", "../../../../../phaser-genesis/src/math/angle/AngleBetween.ts", "../../../../../phaser-genesis/src/math/angle/AngleBetweenY.ts", "../../../../../phaser-genesis/src/math/const.ts", "../../../../../phaser-genesis/src/math/angle/CounterClockwise.ts", "../../../../../phaser-genesis/src/math/angle/NormalizeAngle.ts", "../../../../../phaser-genesis/src/math/angle/ReverseAngle.ts", "../../../../../phaser-genesis/src/math/angle/RotateAngleTo.ts", "../../../../../phaser-genesis/src/math/angle/ShortestAngleBetween.ts", "../../../../../phaser-genesis/src/math/Wrap.ts", "../../../../../phaser-genesis/src/math/angle/WrapAngle.ts", "../../../../../phaser-genesis/src/math/angle/WrapAngleDegrees.ts", "../../../../../phaser-genesis/src/math/angle/index.ts", "../../../../../phaser-genesis/src/math/easing/back/In.ts", "../../../../../phaser-genesis/src/math/easing/back/InOut.ts", "../../../../../phaser-genesis/src/math/easing/back/Out.ts", "../../../../../phaser-genesis/src/math/easing/bounce/In.ts", "../../../../../phaser-genesis/src/math/easing/bounce/InOut.ts", "../../../../../phaser-genesis/src/math/easing/bounce/Out.ts", "../../../../../phaser-genesis/src/math/easing/circular/In.ts", "../../../../../phaser-genesis/src/math/easing/circular/InOut.ts", "../../../../../phaser-genesis/src/math/easing/circular/Out.ts", "../../../../../phaser-genesis/src/math/easing/cubic/In.ts", "../../../../../phaser-genesis/src/math/easing/cubic/InOut.ts", "../../../../../phaser-genesis/src/math/easing/cubic/Out.ts", "../../../../../phaser-genesis/src/math/easing/elastic/In.ts", "../../../../../phaser-genesis/src/math/easing/elastic/InOut.ts", "../../../../../phaser-genesis/src/math/easing/elastic/Out.ts", "../../../../../phaser-genesis/src/math/easing/expo/In.ts", "../../../../../phaser-genesis/src/math/easing/expo/InOut.ts", "../../../../../phaser-genesis/src/math/easing/expo/Out.ts", "../../../../../phaser-genesis/src/math/easing/quadratic/In.ts", "../../../../../phaser-genesis/src/math/easing/quadratic/InOut.ts", "../../../../../phaser-genesis/src/math/easing/quadratic/Out.ts", "../../../../../phaser-genesis/src/math/easing/quartic/In.ts", "../../../../../phaser-genesis/src/math/easing/quartic/InOut.ts", "../../../../../phaser-genesis/src/math/easing/quartic/Out.ts", "../../../../../phaser-genesis/src/math/easing/quintic/In.ts", "../../../../../phaser-genesis/src/math/easing/quintic/InOut.ts", "../../../../../phaser-genesis/src/math/easing/quintic/Out.ts", "../../../../../phaser-genesis/src/math/easing/sine/In.ts", "../../../../../phaser-genesis/src/math/easing/sine/InOut.ts", "../../../../../phaser-genesis/src/math/easing/sine/Out.ts", "../../../../../phaser-genesis/src/math/easing/Linear.ts", "../../../../../phaser-genesis/src/math/easing/Stepped.ts", "../../../../../phaser-genesis/src/math/easing/GetEase.ts", "../../../../../phaser-genesis/src/math/fuzzy/FuzzyCeil.ts", "../../../../../phaser-genesis/src/math/fuzzy/FuzzyEqual.ts", "../../../../../phaser-genesis/src/math/fuzzy/FuzzyFloor.ts", "../../../../../phaser-genesis/src/math/fuzzy/FuzzyGreaterThan.ts", "../../../../../phaser-genesis/src/math/fuzzy/FuzzyLessThan.ts", "../../../../../phaser-genesis/src/math/fuzzy/index.ts", "../../../../../phaser-genesis/src/math/Factorial.ts", "../../../../../phaser-genesis/src/math/Bernstein.ts", "../../../../../phaser-genesis/src/math/interpolation/BezierInterpolation.ts", "../../../../../phaser-genesis/src/math/interpolation/CatmullRomInterpolation.ts", "../../../../../phaser-genesis/src/math/interpolation/CubicBezierInterpolation.ts", "../../../../../phaser-genesis/src/math/Linear.ts", "../../../../../phaser-genesis/src/math/interpolation/LinearInterpolation.ts", "../../../../../phaser-genesis/src/math/interpolation/QuadraticBezierInterpolation.ts", "../../../../../phaser-genesis/src/math/SmoothStep.ts", "../../../../../phaser-genesis/src/math/interpolation/SmoothStepInterpolation.ts", "../../../../../phaser-genesis/src/math/SmootherStep.ts", "../../../../../phaser-genesis/src/math/interpolation/SmootherStepInterpolation.ts", "../../../../../phaser-genesis/src/math/interpolation/index.ts", "../../../../../phaser-genesis/src/math/mat2d/Matrix2D.ts", "../../../../../phaser-genesis/src/math/mat2d/Mat2dEquals.ts", "../../../../../phaser-genesis/src/math/vec3/Vec3.ts", "../../../../../phaser-genesis/src/math/mat4/Mat4Identity.ts", "../../../../../phaser-genesis/src/math/pow2/GetPowerOfTwo.ts", "../../../../../phaser-genesis/src/math/pow2/IsValuePowerOfTwo.ts", "../../../../../phaser-genesis/src/math/Clamp.ts", "../../../../../phaser-genesis/src/math/vec3/Vec3Backward.ts", "../../../../../phaser-genesis/src/math/vec3/Vec3Down.ts", "../../../../../phaser-genesis/src/math/vec3/Vec3Forward.ts", "../../../../../phaser-genesis/src/math/vec3/Vec3Left.ts", "../../../../../phaser-genesis/src/math/vec3/Vec3Right.ts", "../../../../../phaser-genesis/src/math/vec3/Vec3Up.ts", "../../../../../phaser-genesis/src/math/vec3/Vec3Zero.ts", "../../../../../phaser-genesis/src/math/vec3/const.ts", "../../../../../phaser-genesis/src/math/vec3/Vec3Project.ts", "../../../../../phaser-genesis/src/math/vec3/Vec3Unproject.ts", "../../../../../phaser-genesis/src/math/snap/SnapCeil.ts", "../../../../../phaser-genesis/src/math/snap/SnapFloor.ts", "../../../../../phaser-genesis/src/math/snap/SnapTo.ts", "../../../../../phaser-genesis/src/math/snap/index.ts", "../../../../../phaser-genesis/src/math/Average.ts", "../../../../../phaser-genesis/src/math/CeilTo.ts", "../../../../../phaser-genesis/src/math/DegToRad.ts", "../../../../../phaser-genesis/src/math/Difference.ts", "../../../../../phaser-genesis/src/math/FloorTo.ts", "../../../../../phaser-genesis/src/math/FromPercent.ts", "../../../../../phaser-genesis/src/math/GetSpeed.ts", "../../../../../phaser-genesis/src/math/MaxAdd.ts", "../../../../../phaser-genesis/src/math/MinSub.ts", "../../../../../phaser-genesis/src/math/Percent.ts", "../../../../../phaser-genesis/src/math/RadToDeg.ts", "../../../../../phaser-genesis/src/math/RoundTo.ts", "../../../../../phaser-genesis/src/math/SinCosTableGenerator.ts", "../../../../../phaser-genesis/src/math/Within.ts", "../../../../../phaser-genesis/src/renderer/webgl1/draw/DrawImagePart.ts", "../../../../../phaser-genesis/src/renderer/webgl1/draw/DrawQuad.ts", "../../../../../phaser-genesis/src/geom/circle/CircleContains.ts", "../../../../../phaser-genesis/src/geom/circle/Circle.ts", "../../../../../phaser-genesis/src/geom/circle/CircleContainsPoint.ts", "../../../../../phaser-genesis/src/geom/circle/CircleContainsRect.ts", "../../../../../phaser-genesis/src/geom/circle/CircleEquals.ts", "../../../../../phaser-genesis/src/geom/circle/CloneCircle.ts", "../../../../../phaser-genesis/src/geom/circle/CopyCircleFrom.ts", "../../../../../phaser-genesis/src/geom/circle/GetCircleArea.ts", "../../../../../phaser-genesis/src/geom/circle/GetCircleBounds.ts", "../../../../../phaser-genesis/src/geom/circle/GetCircleCircumference.ts", "../../../../../phaser-genesis/src/geom/circle/GetCircleCircumferencePoint.ts", "../../../../../phaser-genesis/src/geom/circle/GetCirclePoint.ts", "../../../../../phaser-genesis/src/geom/circle/GetCirclePoints.ts", "../../../../../phaser-genesis/src/geom/circle/GetCircleRandomPoint.ts", "../../../../../phaser-genesis/src/geom/circle/TranslateCircle.ts", "../../../../../phaser-genesis/src/geom/circle/TranslateCirclePoint.ts", "../../../../../phaser-genesis/src/geom/circle/index.ts", "../../../../../phaser-genesis/src/geom/PolyPartition.ts", "../../../../../phaser-genesis/src/renderer/webgl1/draw/FillArc.ts", "../../../../../phaser-genesis/src/renderer/webgl1/draw/FillLine.ts", "../../../../../phaser-genesis/src/renderer/webgl1/draw/FillRect.ts", "../../../../../phaser-genesis/src/renderer/webgl1/draw/FillTriangle.ts", "../../../../../phaser-genesis/src/gameobjects/directdraw/DirectDraw.ts", "../../../../../phaser-genesis/src/renderer/webgl1/renderpass/Begin.ts", "../../../../../phaser-genesis/src/renderer/webgl1/renderpass/Start.ts", "../../../../../phaser-genesis/src/textures/CreateCanvas.ts", "../../../../../phaser-genesis/src/components/hierarchy/DepthFirstSearchFromParentID.ts", "../../../../../phaser-genesis/src/components/hierarchy/GetChildrenFromParentID.ts", "../../../../../phaser-genesis/src/components/hierarchy/GetNumChildren.ts", "../../../../../phaser-genesis/src/components/hierarchy/GetParentGameObject.ts", "../../../../../phaser-genesis/src/components/hierarchy/GetWorldID.ts", "../../../../../phaser-genesis/src/components/hierarchy/GetWorldFromParentID.ts", "../../../../../phaser-genesis/src/components/hierarchy/UpdateNumChildren.ts", "../../../../../phaser-genesis/src/components/hierarchy/SetParentID.ts", "../../../../../phaser-genesis/src/components/hierarchy/SetWorldID.ts", "../../../../../phaser-genesis/src/components/dirty/SetDirtyParents.ts", "../../../../../phaser-genesis/src/components/dirty/SetDirtyTransform.ts", "../../../../../phaser-genesis/src/components/dirty/SetDirtyWorldDisplayList.ts", "../../../../../phaser-genesis/src/components/transform/SetExtent.ts", "../../../../../phaser-genesis/src/textures/Frame.ts", "../../../../../phaser-genesis/src/textures/Texture.ts", "../../../../../phaser-genesis/src/renderer/webgl1/shaders/Shader.ts", "../../../../../phaser-genesis/src/renderer/webgl1/shaders/QuadShader.ts", "../../../../../phaser-genesis/src/renderer/webgl1/glsl/MULTI_QUAD_FRAG.ts", "../../../../../phaser-genesis/src/renderer/webgl1/shaders/MultiTextureQuadShader.ts", "../../../../../phaser-genesis/src/renderer/webgl1/renderpass/ShaderStack.ts", "../../../../../phaser-genesis/src/camera/StaticCamera.ts", "../../../../../phaser-genesis/src/renderer/webgl1/renderpass/CreateTempTextures.ts", "../../../../../phaser-genesis/src/renderer/webgl1/renderpass/TextureStack.ts", "../../../../../phaser-genesis/src/renderer/webgl1/renderpass/VertexBufferStack.ts", "../../../../../phaser-genesis/src/geom/rectangle/RectangleEquals.ts", "../../../../../phaser-genesis/src/renderer/webgl1/renderpass/ViewportStack.ts", "../../../../../phaser-genesis/src/renderer/webgl1/renderpass/RenderPass.ts", "../../../../../phaser-genesis/src/renderer/webgl1/WebGLRendererInstance.ts", "../../../../../phaser-genesis/src/world/WorldList.ts", "../../../../../phaser-genesis/src/renderer/webgl1/WebGLRenderer.ts", "../../../../../phaser-genesis/src/config/webgl/WebGL.ts", "../../../../../phaser-genesis/src/config/webglcontext/SetWebGLContext.ts", "../../../../../phaser-genesis/src/config/worldsize/SetWorldSize.ts", "../../../../../phaser-genesis/src/display/AddChild.ts", "../../../../../phaser-genesis/src/display/RemoveChildren.ts", "../../../../../phaser-genesis/src/dom/AddToDOM.ts", "../../../../../phaser-genesis/src/dom/DOMContentLoaded.ts", "../../../../../phaser-genesis/src/dom/ParseXML.ts", "../../../../../phaser-genesis/src/events/EventEmitter.ts", "../../../../../phaser-genesis/src/events/EventInstance.ts", "../../../../../phaser-genesis/src/events/On.ts", "../../../../../phaser-genesis/src/events/Once.ts", "../../../../../phaser-genesis/src/config/banner/GetBanner.ts", "../../../../../phaser-genesis/src/config/globalvar/GetGlobalVar.ts", "../../../../../phaser-genesis/src/config/parent/GetParent.ts", "../../../../../phaser-genesis/src/scenes/RenderStatsComponent.ts", "../../../../../phaser-genesis/src/scenes/AddRenderStatsComponent.ts", "../../../../../phaser-genesis/src/scenes/GetConfigValue.ts", "../../../../../phaser-genesis/src/scenes/SceneManagerInstance.ts", "../../../../../phaser-genesis/src/scenes/GetRenderStatsAsObject.ts", "../../../../../phaser-genesis/src/scenes/Install.ts", "../../../../../phaser-genesis/src/scenes/ResetRenderStats.ts", "../../../../../phaser-genesis/src/scenes/Scene.ts", "../../../../../phaser-genesis/src/config/scenes/GetScenes.ts", "../../../../../phaser-genesis/src/scenes/SceneManager.ts", "../../../../../phaser-genesis/src/config/renderer/GetRenderer.ts", "../../../../../phaser-genesis/src/config/SetConfigDefaults.ts", "../../../../../phaser-genesis/src/textures/TextureManager.ts", "../../../../../phaser-genesis/src/Game.ts", "../../../../../phaser-genesis/src/world/events/WorldAfterUpdateEvent.ts", "../../../../../phaser-genesis/src/world/events/WorldBeforeUpdateEvent.ts", "../../../../../phaser-genesis/src/world/events/WorldPostRenderEvent.ts", "../../../../../phaser-genesis/src/world/events/WorldRenderEvent.ts", "../../../../../phaser-genesis/src/world/events/WorldShutdownEvent.ts", "../../../../../phaser-genesis/src/world/events/WorldUpdateEvent.ts", "../../../../../phaser-genesis/src/world/RenderDataComponent.ts", "../../../../../phaser-genesis/src/world/AddRenderDataComponent.ts", "../../../../../phaser-genesis/src/world/CheckDirtyTransforms.ts", "../../../../../phaser-genesis/src/config/worldsize/GetWorldSize.ts", "../../../../../phaser-genesis/src/world/RebuildWorldList.ts", "../../../../../phaser-genesis/src/world/RebuildWorldTransforms.ts", "../../../../../phaser-genesis/src/world/ResetWorldRenderData.ts", "../../../../../phaser-genesis/src/scenes/events/SceneDestroyEvent.ts", "../../../../../phaser-genesis/src/world/BaseWorld.ts", "../../../../../phaser-genesis/src/world/StaticWorld.ts", "../../../src/gameobjects/directdraw/circle.ts"],
  "sourcesContent": ["export const CONFIG_DEFAULTS = {\n    AUTO: 'Auto',\n    BACKGROUND_COLOR: 'BackgroundColor',\n    BANNER: 'Banner',\n    BATCH_SIZE: 'BatchSize',\n    CANVAS_CONTEXT: 'CanvasContext',\n    CANVAS: 'Canvas',\n    DEFAULT_ORIGIN: 'DefaultOrigin',\n    GLOBAL_VAR: 'GlobalVar',\n    MAX_TEXTURES: 'MaxTextures',\n    PARENT: 'Parent',\n    RENDERER: 'Renderer',\n    SCENES: 'Scenes',\n    SIZE: 'Size',\n    WEBGL_CONTEXT: 'WebGLContext',\n    WEBGL: 'WebGL',\n    WORLD_SIZE: 'WorldSize'\n};\n", "export const ConfigStore = new Map();\n", "import { CONFIG_DEFAULTS } from '../const';\nimport { ConfigStore } from '../ConfigStore';\n\nexport function SetBackgroundColor (color: number): void\n{\n    ConfigStore.set(CONFIG_DEFAULTS.BACKGROUND_COLOR, color);\n}\n", "import { SetBackgroundColor } from './SetBackgroundColor';\n\nexport function BackgroundColor (color: number): () => void\n{\n    return (): void =>\n    {\n        SetBackgroundColor(color);\n    };\n}\n", "import { CONFIG_DEFAULTS } from '../const';\nimport { ConfigStore } from '../ConfigStore';\n\nexport function SetBanner (title: string = '', version: string = '', url: string = '', color: string = '#fff', background: string = 'linear-gradient(#3e0081 40%, #00bcc3)'): void\n{\n    ConfigStore.set(CONFIG_DEFAULTS.BANNER, { title, version, url, color, background });\n}\n", "import { CONFIG_DEFAULTS } from '../const';\nimport { ConfigStore } from '../ConfigStore';\n\nexport function SetBatchSize (size: number): void\n{\n    ConfigStore.set(CONFIG_DEFAULTS.BATCH_SIZE, size);\n}\n", "import { CONFIG_DEFAULTS } from '../const';\nimport { ConfigStore } from '../ConfigStore';\n\nexport function GetHeight (): number\n{\n    return ConfigStore.get(CONFIG_DEFAULTS.SIZE).height;\n}\n", "import { CONFIG_DEFAULTS } from '../const';\nimport { ConfigStore } from '../ConfigStore';\n\nexport function GetResolution (): number\n{\n    return ConfigStore.get(CONFIG_DEFAULTS.SIZE).resolution;\n}\n", "import { CONFIG_DEFAULTS } from '../const';\nimport { ConfigStore } from '../ConfigStore';\n\nexport function GetWidth (): number\n{\n    return ConfigStore.get(CONFIG_DEFAULTS.SIZE).width;\n}\n", "import { CONFIG_DEFAULTS } from '../const';\nimport { ConfigStore } from '../ConfigStore';\n\nexport function SetSize (width: number = 800, height: number = 600, resolution: number = 1): void\n{\n    if (resolution === 0)\n    {\n        resolution = window.devicePixelRatio;\n    }\n\n    ConfigStore.set(CONFIG_DEFAULTS.SIZE, { width, height, resolution });\n}\n", "import { IGLTextureBindingConfig } from './webgl1/textures/IGLTextureBindingConfig';\nimport { ITexture } from '../textures/ITexture';\n\nexport type BindingQueueEntry = {\n    texture: ITexture,\n    glConfig: IGLTextureBindingConfig\n};\n\nconst queue: BindingQueueEntry[] = [];\n\nexport const BindingQueue =\n{\n    add: (texture: ITexture, glConfig?: IGLTextureBindingConfig): void =>\n    {\n        queue.push({ texture, glConfig });\n    },\n\n    get: (): BindingQueueEntry[] =>\n    {\n        return queue;\n    },\n\n    clear: (): void =>\n    {\n        queue.length = 0;\n    }\n};\n", "import { CONFIG_DEFAULTS } from '../const';\nimport { ConfigStore } from '../ConfigStore';\n\nexport function GetBackgroundColor (): number\n{\n    return ConfigStore.get(CONFIG_DEFAULTS.BACKGROUND_COLOR);\n}\n", "import { CONFIG_DEFAULTS } from '../const';\nimport { ConfigStore } from '../ConfigStore';\nimport { IRendererConstructor } from '../../renderer/IRendererConstructor';\n\nexport function SetRenderer (renderer: IRendererConstructor): void\n{\n    ConfigStore.set(CONFIG_DEFAULTS.RENDERER, renderer);\n}\n", "import { CONFIG_DEFAULTS } from '../const';\nimport { ConfigStore } from '../ConfigStore';\n\nexport function SetDefaultOrigin (x: number = 0.5, y: number = x): void\n{\n    ConfigStore.set(CONFIG_DEFAULTS.DEFAULT_ORIGIN, { x, y });\n}\n", "import { CONFIG_DEFAULTS } from '../const';\nimport { ConfigStore } from '../ConfigStore';\n\nexport function SetGlobalVar (name: string): void\n{\n    ConfigStore.set(CONFIG_DEFAULTS.GLOBAL_VAR, name);\n}\n", "import { SetGlobalVar } from './SetGlobalVar';\n\nexport function GlobalVar (name: string): () => void\n{\n    return (): void =>\n    {\n        SetGlobalVar(name);\n    };\n}\n", "import { CONFIG_DEFAULTS } from '../const';\nimport { ConfigStore } from '../ConfigStore';\n\nexport function SetMaxTextures (max: number): void\n{\n    ConfigStore.set(CONFIG_DEFAULTS.MAX_TEXTURES, max);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Attempts to get the target DOM element based on the given value, which can be either\n * a string, in which case it will be looked-up by ID, or an element node. If nothing\n * can be found it will return a reference to the document.body.\n *\n * @function Phaser.DOM.GetElement\n * @since 4.0.0\n *\n * @param {(string | HTMLElement)} [target] - The DOM element to look-up.\n * \n * @returns {HTMLElement} The HTML Element that was found.\n */\nexport function GetElement (target?: string | HTMLElement): HTMLElement\n{\n    let element: HTMLElement;\n\n    if (target)\n    {\n        if (typeof target === 'string')\n        {\n            //  Hopefully an element ID\n            element = document.getElementById(target);\n        }\n        else if (typeof target === 'object' && target.nodeType === 1)\n        {\n            //  Quick test for a HTMLElement\n            element = target;\n        }\n    }\n\n    if (!element)\n    {\n        element = document.body;\n    }\n\n    return element;\n}\n", "import { CONFIG_DEFAULTS } from '../const';\nimport { ConfigStore } from '../ConfigStore';\nimport { GetElement } from '../../dom/GetElement';\n\nexport function SetParent (parentElement?: string | HTMLElement): void\n{\n    //  If this function was called and `null` *wasn't* given as the parent\n    //  then we try to figure it out, or fallback to the document body\n    if (parentElement)\n    {\n        ConfigStore.set(CONFIG_DEFAULTS.PARENT, GetElement(parentElement));\n    }\n}\n", "import { SetParent } from './SetParent';\n\nexport function Parent (parentElement?: string | HTMLElement): () => void\n{\n    return (): void =>\n    {\n        SetParent(parentElement);\n    };\n}\n", "import { CONFIG_DEFAULTS } from '../const';\nimport { ConfigStore } from '../ConfigStore';\nimport { ISceneConstructor } from '../../scenes/ISceneConstructor';\n\nexport function SetScenes (scenes?: ISceneConstructor | Array<ISceneConstructor>): void\n{\n    ConfigStore.set(CONFIG_DEFAULTS.SCENES, [].concat(scenes));\n}\n", "import { ISceneConstructor } from '../../scenes/ISceneConstructor';\nimport { SetScenes } from './SetScenes';\n\nexport function Scenes (scenes?: ISceneConstructor | Array<ISceneConstructor>): () => void\n{\n    return (): void =>\n    {\n        SetScenes(scenes);\n    };\n}\n", "export let gl: WebGLRenderingContext;\n\nexport const GL =\n{\n    get: (): WebGLRenderingContext =>\n    {\n        return gl;\n    },\n\n    set: (context: WebGLRenderingContext | undefined): void =>\n    {\n        gl = context;\n    }\n};\n", "import { IRenderPass } from './IRenderPass';\nimport { gl } from '../GL';\n\nexport function Draw (renderPass: IRenderPass): void\n{\n    const count = renderPass.count;\n\n    if (count === 0)\n    {\n        return;\n    }\n\n    const currentBuffer = renderPass.vertexbuffer.current;\n    const currentShader = renderPass.shader.current;\n\n    const renderToFramebuffer = currentShader.shader.renderToFramebuffer;\n\n    if (renderToFramebuffer)\n    {\n        renderPass.framebuffer.set(currentShader.shader.framebuffer, true);\n    }\n\n    if (count === currentBuffer.batchSize)\n    {\n        const type = (currentBuffer.isDynamic) ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW;\n\n        gl.bufferData(gl.ARRAY_BUFFER, currentBuffer.data, type);\n    }\n    else\n    {\n        const subsize = count * currentBuffer.entryElementSize;\n\n        const view = currentBuffer.vertexViewF32.subarray(0, subsize);\n\n        gl.bufferSubData(gl.ARRAY_BUFFER, 0, view);\n    }\n\n    if (currentBuffer.indexed)\n    {\n        gl.drawElements(gl.TRIANGLES, count * currentBuffer.entryIndexSize, gl.UNSIGNED_SHORT, 0);\n    }\n    else\n    {\n        gl.drawArrays(gl.TRIANGLES, 0, count * currentBuffer.elementsPerEntry);\n    }\n\n    if (renderToFramebuffer)\n    {\n        renderPass.framebuffer.pop();\n    }\n}\n", "import { Draw } from './Draw';\nimport { IRenderPass } from './IRenderPass';\n\nexport function Flush (renderPass: IRenderPass, forceCount?: number): boolean\n{\n    if (forceCount)\n    {\n        renderPass.count = forceCount;\n    }\n\n    const count = renderPass.count;\n\n    if (count === 0)\n    {\n        return false;\n    }\n\n    Draw(renderPass);\n\n    renderPass.flush();\n\n    return true;\n}\n", "import { Flush } from './Flush';\nimport { IRenderPass } from './IRenderPass';\n\nexport function End (renderPass: IRenderPass): void\n{\n    Flush(renderPass);\n}\n", "import { ICompressedTextures } from './ICompressedTextures';\n\nexport function GetCompressedTextures (gl: WebGLRenderingContext): ICompressedTextures\n{\n    const extString = 'WEBGL_compressed_texture_';\n    const wkExtString = 'WEBKIT_' + extString;\n\n    const hasExt = (format: string) =>\n    {\n        const results = gl.getExtension(extString + format) || gl.getExtension(wkExtString + format);\n\n        if (results)\n        {\n            const glEnums = {};\n\n            for (const key in results)\n            {\n                glEnums[results[key]] = key;\n            }\n\n            return glEnums;\n        }\n    };\n\n    return {\n        ETC: hasExt('etc'),\n        ETC1: hasExt('etc1'),\n        ATC: hasExt('atc'),\n        ASTC: hasExt('astc'),\n        BPTC: hasExt('bptc'),\n        RGTC: hasExt('rgtc'),\n        PVRTC: hasExt('pvrtc'),\n        S3TC: hasExt('s3tc'),\n        S3TCSRGB: hasExt('s3tc_srgb'),\n        IMG: true\n    };\n}\n", "export function GetRGBArray (color: number, output: number[] = []): number[]\n{\n    const r: number = color >> 16 & 0xFF;\n    const g: number = color >> 8 & 0xFF;\n    const b: number = color & 0xFF;\n    const a: number = (color > 16777215) ? color >>> 24 : 255;\n\n    output[0] = r / 255;\n    output[1] = g / 255;\n    output[2] = b / 255;\n    output[3] = a / 255;\n\n    return output;\n}\n", "import { CONFIG_DEFAULTS } from '../const';\nimport { ConfigStore } from '../ConfigStore';\n\nexport function GetWebGLContext (): WebGLContextAttributes\n{\n    return ConfigStore.get(CONFIG_DEFAULTS.WEBGL_CONTEXT);\n}\n", "import { gl } from '../GL';\n\nexport function CreateFramebuffer (texture: WebGLTexture, attachment?: GLenum): WebGLFramebuffer\n{\n    if (!attachment)\n    {\n        attachment = gl.COLOR_ATTACHMENT0;\n    }\n\n    const framebuffer = gl.createFramebuffer();\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, attachment, gl.TEXTURE_2D, texture, 0);\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\n    return framebuffer;\n}\n", "import { IGLMipmapType } from './IGLTextureBindingConfig';\nimport { IGLTextureBinding } from './IGLTextureBinding';\nimport { gl } from '../GL';\n\nexport function CreateGLTexture <T extends IGLTextureBinding> (binding: T, mipmaps?: IGLMipmapType[]): WebGLTexture\n{\n    const { generateMipmap, minFilter, parent, compressed, internalFormat, flipY, unpackPremultiplyAlpha, magFilter, wrapS, wrapT, isPOT } = binding;\n\n    const source = parent.image;\n\n    let width = parent.width;\n    let height = parent.height;\n\n    const glTexture: WebGLTexture = gl.createTexture();\n\n    gl.activeTexture(gl.TEXTURE0);\n    gl.bindTexture(gl.TEXTURE_2D, glTexture);\n\n    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, flipY);\n    gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, unpackPremultiplyAlpha);\n\n    if (source)\n    {\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, source);\n\n        width = source.width;\n        height = source.height;\n    }\n    else if (compressed && mipmaps)\n    {\n        for (let i = 0; i < mipmaps.length; i++)\n        {\n            gl.compressedTexImage2D(gl.TEXTURE_2D, i, internalFormat, mipmaps[i].width, mipmaps[i].height, 0, mipmaps[i].data);\n        }\n    }\n    else\n    {\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n    }\n\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, minFilter);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, magFilter);\n\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, wrapS);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, wrapT);\n\n    if (generateMipmap && isPOT)\n    {\n        gl.generateMipmap(gl.TEXTURE_2D);\n    }\n\n    binding.texture = glTexture;\n\n    return glTexture;\n}\n", "import { gl } from '../GL';\n\nexport function DeleteFramebuffer (framebuffer: WebGLFramebuffer): void\n{\n    if (gl && gl.isFramebuffer(framebuffer))\n    {\n        gl.deleteFramebuffer(framebuffer);\n    }\n}\n", "import { gl } from '../GL';\n\nexport function DeleteGLTexture (texture: WebGLTexture): void\n{\n    if (gl.isTexture(texture))\n    {\n        gl.deleteTexture(texture);\n    }\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Checks if the given `width` and `height` are a power of two.\n * Useful for checking texture dimensions.\n *\n * @function Phaser.Math.Pow2.IsSize\n * @since 3.0.0\n *\n * @param {number} width - The width.\n * @param {number} height - The height.\n *\n * @return {boolean} `true` if `width` and `height` are a power of two, otherwise `false`.\n */\nexport function IsSizePowerOfTwo (width: number, height: number): boolean\n{\n    if (width < 1 || height < 1)\n    {\n        return false;\n    }\n\n    return ((width & (width - 1)) === 0) && ((height & (height - 1)) === 0);\n}\n", "import { gl } from '../GL';\n\nexport function SetGLTextureFilterMode (texture: WebGLTexture, linear: boolean = true): void\n{\n    gl.activeTexture(gl.TEXTURE0);\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n\n    const mode = (linear) ? gl.LINEAR : gl.NEAREST;\n\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, mode);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, mode);\n}\n", "import { IGLTextureBinding } from './IGLTextureBinding';\nimport { gl } from '../GL';\n\nexport function UpdateGLTexture <T extends IGLTextureBinding> (binding: T): WebGLTexture\n{\n    const source = binding.parent.image;\n    const width = source.width;\n    const height = source.height;\n\n    if (width > 0 && height > 0)\n    {\n        gl.activeTexture(gl.TEXTURE0);\n        gl.bindTexture(gl.TEXTURE_2D, binding.texture);\n\n        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, binding.flipY);\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, source);\n    }\n\n    return binding.texture;\n}\n", "import { IGLMipmapType, IGLTextureBindingConfig } from './IGLTextureBindingConfig';\n\nimport { CreateFramebuffer } from '../fbo/CreateFramebuffer';\nimport { CreateGLTexture } from './CreateGLTexture';\nimport { DeleteFramebuffer } from '../fbo/DeleteFramebuffer';\nimport { DeleteGLTexture } from './DeleteGLTexture';\nimport { IGLTextureBinding } from './IGLTextureBinding';\nimport { ITexture } from '../../../textures/ITexture';\nimport { IsSizePowerOfTwo } from '../../../math/pow2/IsSizePowerOfTwo';\nimport { SetGLTextureFilterMode } from './SetGLTextureFilterMode';\nimport { UpdateGLTexture } from './UpdateGLTexture';\nimport { gl } from '../GL';\n\nexport class GLTextureBinding implements IGLTextureBinding\n{\n    parent: ITexture;\n\n    texture: WebGLTexture;\n    framebuffer: WebGLFramebuffer;\n    depthbuffer: WebGLRenderbuffer;\n\n    format: string;\n    internalFormat: GLenum;\n    compressed: boolean;\n    mipmaps: IGLMipmapType[];\n\n    isBound: boolean = false;\n    textureUnit: number = 0;\n\n    unpackPremultiplyAlpha: boolean = true;\n\n    minFilter: GLenum;\n    magFilter: GLenum;\n    wrapS: GLenum;\n    wrapT: GLenum;\n\n    flipY: boolean = false;\n    isPOT: boolean = false;\n    generateMipmap: boolean = false;\n\n    constructor (parent: ITexture, config: IGLTextureBindingConfig = {})\n    {\n        this.parent = parent;\n\n        this.isPOT = IsSizePowerOfTwo(parent.width, parent.height);\n\n        //  Add option to dump the mipmaps arrays after binding - but prevents context loss restoration\n\n        const {\n            mipmaps = null,\n            compressed = false,\n            format = 'IMG',\n            internalFormat = 0,\n            texture = null,\n            framebuffer = null,\n            createFramebuffer = false,\n            depthbuffer = null,\n            unpackPremultiplyAlpha = true,\n            minFilter = (this.isPOT) ? gl.LINEAR_MIPMAP_LINEAR : gl.LINEAR,\n            magFilter = gl.LINEAR,\n            wrapS = gl.CLAMP_TO_EDGE,\n            wrapT = gl.CLAMP_TO_EDGE,\n            generateMipmap = this.isPOT,\n            flipY = false\n        } = config;\n\n        this.compressed = compressed;\n        this.format = format;\n        this.internalFormat = internalFormat;\n        this.mipmaps = mipmaps;\n\n        //  If you don't set minFilter to LINEAR then the compressed textures don't work!\n        if (compressed)\n        {\n            this.minFilter = gl.LINEAR;\n        }\n        else\n        {\n            this.minFilter = minFilter;\n        }\n\n        this.magFilter = magFilter;\n        this.wrapS = wrapS;\n        this.wrapT = wrapT;\n        this.generateMipmap = generateMipmap;\n        this.flipY = flipY;\n        this.unpackPremultiplyAlpha = unpackPremultiplyAlpha;\n\n        if (texture)\n        {\n            this.texture = texture;\n        }\n        else\n        {\n            CreateGLTexture(this, mipmaps);\n        }\n\n        if (framebuffer)\n        {\n            this.framebuffer = framebuffer;\n        }\n        else if (createFramebuffer)\n        {\n            this.framebuffer = CreateFramebuffer(this.texture);\n        }\n\n        if (depthbuffer)\n        {\n            this.depthbuffer = depthbuffer;\n        }\n\n        parent.binding = this;\n    }\n\n    //  Needed?\n    setFilter (linear: boolean): void\n    {\n        if (this.texture)\n        {\n            SetGLTextureFilterMode(this.texture, linear);\n        }\n    }\n\n    create (): WebGLTexture\n    {\n        const texture = this.texture;\n\n        if (texture)\n        {\n            DeleteGLTexture(texture);\n        }\n\n        return CreateGLTexture(this);\n    }\n\n    update (): WebGLTexture\n    {\n        const texture = this.texture;\n\n        if (!texture)\n        {\n            return CreateGLTexture(this);\n        }\n        else\n        {\n            return UpdateGLTexture(this);\n        }\n    }\n\n    bind (index: number): void\n    {\n        this.isBound = true;\n        this.textureUnit = index;\n    }\n\n    unbind (): void\n    {\n        this.isBound = false;\n        this.textureUnit = 0;\n    }\n\n    destroy (): void\n    {\n        this.unbind();\n\n        DeleteGLTexture(this.texture);\n        DeleteFramebuffer(this.framebuffer);\n\n        this.parent = null;\n        this.texture = null;\n        this.framebuffer = null;\n    }\n}\n", "import { BindingQueue } from '../../BindingQueue';\nimport { GLTextureBinding } from '../textures/GLTextureBinding';\n\nexport function ProcessBindingQueue (): void\n{\n    const queue = BindingQueue.get();\n\n    queue.forEach(entry =>\n    {\n        const { texture, glConfig } = entry;\n\n        if (!texture.binding)\n        {\n            texture.binding = new GLTextureBinding(texture, glConfig);\n        }\n    });\n\n    BindingQueue.clear();\n}\n", "import { IRenderPass } from './IRenderPass';\nimport { gl } from '../GL';\n\nexport type BlendModeStackEntry = {\n    enable: boolean;\n    sfactor?: number;\n    dfactor?: number;\n};\n\nexport class BlendModeStack\n{\n    renderPass: IRenderPass;\n\n    stack: BlendModeStackEntry[];\n    default: BlendModeStackEntry;\n    index: number;\n\n    constructor (renderPass: IRenderPass)\n    {\n        this.renderPass = renderPass;\n        this.stack = [];\n    }\n\n    get current (): BlendModeStackEntry\n    {\n        return this.stack[this.index];\n    }\n\n    add (enable: boolean, sfactor?: number, dfactor?: number): BlendModeStackEntry\n    {\n        const entry = { enable, sfactor, dfactor };\n\n        this.index++;\n\n        //  cursor already at the end of the stack, so we need to grow it\n        if (this.index === this.stack.length)\n        {\n            this.stack.push(entry);\n        }\n        else\n        {\n            this.stack[this.index] = entry;\n        }\n\n        return entry;\n    }\n\n    bindDefault (): void\n    {\n        this.index = 0;\n\n        this.bind(this.default);\n    }\n\n    bind (entry?: BlendModeStackEntry): void\n    {\n        if (!entry)\n        {\n            entry = this.current;\n        }\n\n        if (entry.enable)\n        {\n            if (!gl.isEnabled(gl.BLEND) || (this.current.sfactor !== entry.sfactor || this.current.dfactor !== entry.dfactor))\n            {\n                gl.enable(gl.BLEND);\n                gl.blendFunc(entry.sfactor, entry.dfactor);\n            }\n        }\n        else\n        {\n            gl.disable(gl.BLEND);\n        }\n    }\n\n    pop (): void\n    {\n        this.index--;\n\n        this.bind();\n    }\n\n    set (enable: boolean, sfactor?: number, dfactor?: number): void\n    {\n        const entry = this.add(enable, sfactor, dfactor);\n\n        this.bind(entry);\n    }\n\n    setDefault (enable: boolean, sfactor?: number, dfactor?: number): void\n    {\n        const entry = { enable, sfactor, dfactor };\n\n        //  The default entry always goes into index zero\n        this.stack[0] = entry;\n\n        this.index = 0;\n\n        this.default = entry;\n    }\n}\n", "import { IRenderPass } from './IRenderPass';\nimport { Rectangle } from '../../../geom/rectangle/Rectangle';\nimport { gl } from '../GL';\n\nexport type FramebufferStackEntry = {\n    framebuffer: WebGLFramebuffer;\n    viewport?: Rectangle;\n};\n\nexport class FramebufferStack\n{\n    renderPass: IRenderPass;\n\n    stack: FramebufferStackEntry[];\n    active: WebGLFramebuffer;\n    default: FramebufferStackEntry;\n    index: number;\n\n    constructor (renderPass: IRenderPass)\n    {\n        this.renderPass = renderPass;\n        this.stack = [];\n    }\n\n    get current (): FramebufferStackEntry\n    {\n        return this.stack[this.index];\n    }\n\n    add (framebuffer: WebGLFramebuffer, viewport?: Rectangle): FramebufferStackEntry\n    {\n        const entry = { framebuffer, viewport };\n\n        this.index++;\n\n        //  cursor already at the end of the stack, so we need to grow it\n        if (this.index === this.stack.length)\n        {\n            this.stack.push(entry);\n        }\n        else\n        {\n            this.stack[this.index] = entry;\n        }\n\n        return entry;\n    }\n\n    bindDefault (): void\n    {\n        this.index = 0;\n\n        this.bind(false, this.default);\n    }\n\n    bind (clear: boolean = true, entry?: FramebufferStackEntry): void\n    {\n        if (!entry)\n        {\n            entry = this.current;\n        }\n\n        const { framebuffer, viewport } = entry;\n\n        if (this.active !== framebuffer)\n        {\n            gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n        }\n\n        if (clear)\n        {\n            gl.clearColor(0, 0, 0, 0);\n            gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n        }\n\n        if (viewport)\n        {\n            this.renderPass.viewport.set(viewport.x, viewport.y, viewport.width, viewport.height);\n        }\n\n        this.active = framebuffer;\n    }\n\n    pop (): void\n    {\n        if (this.current.viewport)\n        {\n            this.renderPass.viewport.pop();\n        }\n\n        this.index--;\n\n        this.bind(false);\n    }\n\n    set (framebuffer: WebGLFramebuffer, clear: boolean = true, viewport?: Rectangle): void\n    {\n        const entry = this.add(framebuffer, viewport);\n\n        this.bind(clear, entry);\n    }\n\n    setDefault (framebuffer: WebGLFramebuffer = null, viewport?: Rectangle): void\n    {\n        const entry = { framebuffer, viewport };\n\n        //  The default entry always goes into index zero\n        this.stack[0] = entry;\n\n        this.index = 0;\n\n        this.default = entry;\n    }\n}\n", "import { CONFIG_DEFAULTS } from '../const';\nimport { ConfigStore } from '../ConfigStore';\n\nexport function GetBatchSize (): number\n{\n    return ConfigStore.get(CONFIG_DEFAULTS.BATCH_SIZE);\n}\n", "import { CONFIG_DEFAULTS } from '../const';\nimport { ConfigStore } from '../ConfigStore';\n\nexport function GetMaxTextures (): number\n{\n    return ConfigStore.get(CONFIG_DEFAULTS.MAX_TEXTURES);\n}\n", "import { gl } from '../GL';\n\nexport function DeleteGLBuffer (buffer: WebGLBuffer): void\n{\n    if (gl.isBuffer(buffer))\n    {\n        gl.deleteBuffer(buffer);\n    }\n}\n", "import { DeleteGLBuffer } from './DeleteGLBuffer';\nimport { IVertexBuffer } from './IVertexBuffer';\nimport { IVertexBufferConfig } from './IVertexBufferConfig';\nimport { gl } from '../GL';\n\nexport class VertexBuffer implements IVertexBuffer\n{\n    //  Handy for debug tracing\n    name: string;\n\n    /**\n     * Maximum number of entries per batch before a flush takes place.\n     * For a Mesh, this is the number of triangles / faces in the vertex buffer.\n     * Typically each face consists of 3 verticies.\n     *\n     * @type {number}\n     */\n    batchSize: number;\n\n    /**\n     * The size, in bytes, per entry in the array buffer.\n     *\n     * @type {number}\n     */\n    dataSize: number;\n\n    /**\n     * The amount of elements / floats a single vertex consists of.\n     *\n     * The default is 6:\n     *\n     * position (x,y - 2 floats)\n     * texture coord (x,y - 2 floats)\n     * texture index (uint)\n     * packed color (uint)\n     *\n     * @type {number}\n     */\n    vertexElementSize: number;\n\n    /**\n     * The size, in bytes, of a single vertex in the array buffer.\n     *\n     * This is `vertexElementSize * dataSize`.\n     *\n     * @type {number}\n     */\n    vertexByteSize: number;\n\n    /**\n     * The size, in bytes, of a single entry in the array buffer.\n     *\n     * This is `vertexByteSize * 4` for a quad.\n     *\n     * @type {number}\n     */\n    entryByteSize: number;\n\n    /**\n     * The size, in bytes, of the Array Buffer.\n     *\n     * This is `batchSize * entryByteSize`\n     *\n     * @type {number}\n     */\n    bufferByteSize: number;\n\n    /**\n     * The Array Buffer.\n     *\n     * @type {ArrayBuffer}\n     */\n    data: ArrayBuffer;\n\n    /**\n     * Float32 View of the Array Buffer.\n     *\n     * @type {Float32Array}\n     */\n    vertexViewF32: Float32Array;\n\n    /**\n     * Uint32 View of the Array Buffer.\n     *\n     * @type {Uint32Array}\n     */\n    vertexViewU32: Uint32Array;\n\n    /**\n     * The data array buffer.\n     *\n     * @type {WebGLBuffer}\n     */\n    vertexBuffer: WebGLBuffer;\n\n    /**\n     * The size, in quantity of elements, of a single entry in the element index array.\n     *\n     * This is `vertexElementSize * elementsPerEntry`\n     *\n     * @type {number}\n     */\n    entryElementSize: number;\n\n    indexed: boolean = false;\n\n    isDynamic: boolean = false;\n\n    /**\n     * The total number of entries added to the buffer so far, or reserved to be added.\n     *\n     * This is the total number of indices / verticies, not faces.\n     * Typically there are 3 verts per face, so this value is usually batchSize x 3 for a Mesh.\n     *\n     * @type {number}\n     */\n    count: number = 0;\n\n    /**\n     * The current buffer offset.\n     *\n     * @type {number}\n     */\n    offset: number = 0;\n\n    /**\n     * The number of elements per entry in the buffer.\n     *\n     * This is 3 for a tri and 4 for a quad in an indexed buffer.\n     *\n     * @type {number}\n     */\n    elementsPerEntry: number;\n\n    isBound: boolean = false;\n\n    constructor (config: IVertexBufferConfig = {})\n    {\n        const {\n            name = 'VBO',\n            batchSize = 1,\n            dataSize = 4,\n            isDynamic = true,\n            elementsPerEntry = 3,\n            vertexElementSize = 6\n        } = config;\n\n        this.name = name;\n        this.batchSize = batchSize;\n        this.dataSize = dataSize;\n        this.vertexElementSize = vertexElementSize;\n        this.isDynamic = isDynamic;\n        this.elementsPerEntry = elementsPerEntry;\n\n        //  Derive the remaining values\n        this.vertexByteSize = vertexElementSize * dataSize;\n        this.entryByteSize = this.vertexByteSize * elementsPerEntry;\n        this.bufferByteSize = batchSize * this.entryByteSize;\n        this.entryElementSize = this.vertexElementSize * this.elementsPerEntry;\n\n        this.create();\n    }\n\n    resize (batchSize: number): void\n    {\n        this.batchSize = batchSize;\n        this.bufferByteSize = batchSize * this.entryByteSize;\n\n        if (this.vertexBuffer)\n        {\n            DeleteGLBuffer(this.vertexBuffer);\n        }\n\n        this.create();\n    }\n\n    create (): void\n    {\n        const data = new ArrayBuffer(this.bufferByteSize);\n\n        this.data = data;\n\n        this.vertexViewF32 = new Float32Array(data);\n        this.vertexViewU32 = new Uint32Array(data);\n\n        this.vertexBuffer = gl.createBuffer();\n\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);\n\n        const type = (this.isDynamic) ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW;\n\n        gl.bufferData(gl.ARRAY_BUFFER, data, type);\n\n        gl.bindBuffer(gl.ARRAY_BUFFER, null);\n\n        this.isBound = false;\n    }\n\n    add (count: number): void\n    {\n        this.count += count;\n        this.offset += (this.vertexElementSize * count);\n    }\n\n    reset (): void\n    {\n        this.count = 0;\n        this.offset = 0;\n    }\n\n    canContain (count: number): boolean\n    {\n        return ((this.count + count) <= this.batchSize);\n    }\n\n    free (): number\n    {\n        return Math.max(0, 1 - (this.count / this.batchSize));\n    }\n\n    bind (): void\n    {\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);\n    }\n\n    destroy (): void\n    {\n        DeleteGLBuffer(this.vertexBuffer);\n\n        this.data = null;\n        this.vertexViewF32 = null;\n        this.vertexViewU32 = null;\n        this.vertexBuffer = null;\n    }\n}\n", "import { DeleteGLBuffer } from './DeleteGLBuffer';\nimport { IIndexedVertexBuffer } from './IIndexedVertexBuffer';\nimport { IVertexBufferConfig } from './IVertexBufferConfig';\nimport { VertexBuffer } from './VertexBuffer';\nimport { gl } from '../GL';\n\nexport class IndexedVertexBuffer extends VertexBuffer implements IIndexedVertexBuffer\n{\n    /**\n     * The size, in bytes, per entry in the element index array.\n     *\n     * @type {number}\n     */\n    indexSize: number;\n\n    /**\n     * The total number of entries per entry in the element index array.\n     *\n     * For a quad, the IBO contains 6 entries per entry:\n     *\n     * 0, 1, 2\n     * 2, 3, 0\n     *\n     * @type {number}\n     */\n    entryIndexSize: number;\n\n    /**\n     * The Element Array Buffer.\n     *\n     * @type {Uint16Array}\n     */\n    index: Uint16Array;\n\n    /**\n     * The element array buffer.\n     *\n     * @type {WebGLBuffer}\n     */\n    indexBuffer: WebGLBuffer;\n\n    indexLayout: number[];\n\n    constructor (config: IVertexBufferConfig = {})\n    {\n        super(config);\n\n        const {\n            indexSize = 4,\n            entryIndexSize = 6,\n            indexLayout = null\n        } = config;\n\n        this.indexed = true;\n\n        this.indexSize = indexSize;\n        this.entryIndexSize = entryIndexSize;\n\n        const seededIndexBuffer = [];\n\n        if (indexLayout)\n        {\n            this.indexLayout = indexLayout;\n\n            //  Seed the index buffer\n            for (let i = 0; i < (this.batchSize * indexSize); i += indexSize)\n            {\n                for (let c = 0; c < indexLayout.length; c++)\n                {\n                    seededIndexBuffer.push(i + indexLayout[c]);\n                }\n            }\n        }\n\n        // this.create();\n\n        this.createIndexBuffer(seededIndexBuffer);\n    }\n\n    createIndexBuffer (seededIndex: number[]): void\n    {\n        this.index = new Uint16Array(seededIndex);\n\n        this.indexBuffer = gl.createBuffer();\n\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, this.index, gl.STATIC_DRAW);\n\n        //  Free memory\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\n        seededIndex = [];\n    }\n\n    bind (): void\n    {\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);\n    }\n\n    destroy (): void\n    {\n        super.destroy();\n\n        DeleteGLBuffer(this.indexBuffer);\n\n        this.index = null;\n        this.indexLayout = null;\n        this.indexBuffer = null;\n    }\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Checks if an array can be used as a matrix.\n *\n * A matrix is a two-dimensional array (array of arrays), where all sub-arrays (rows) have the same length. There must be at least two rows:\n *\n * ```\n *    [\n *        [ 1, 1, 1, 1, 1, 1 ],\n *        [ 2, 0, 0, 0, 0, 4 ],\n *        [ 2, 0, 1, 2, 0, 4 ],\n *        [ 2, 0, 3, 4, 0, 4 ],\n *        [ 2, 0, 0, 0, 0, 4 ],\n *        [ 3, 3, 3, 3, 3, 3 ]\n *    ]\n * ```\n */\nexport function CheckMatrix (matrix: unknown[][]): boolean\n{\n    if (!Array.isArray(matrix) || matrix.length < 2 || !Array.isArray(matrix[0]))\n    {\n        return false;\n    }\n\n    //  How long is the first row?\n    const size = matrix[0].length;\n\n    //  Validate the rest of the rows are the same length\n    for (let i = 1; i < matrix.length; i++)\n    {\n        if (matrix[i].length !== size)\n        {\n            return false;\n        }\n    }\n\n    return true;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { CheckMatrix } from './CheckMatrix';\n\n/**\n * Generates a string (which you can pass to console.log) from the given Array Matrix.\n */\nexport function MatrixToString (matrix: unknown[][]): string\n{\n    let str = '';\n\n    if (!CheckMatrix(matrix))\n    {\n        return str;\n    }\n\n    for (let r = 0; r < matrix.length; r++)\n    {\n        for (let c = 0; c < matrix[r].length; c++)\n        {\n            const cell = matrix[r][c].toString();\n\n            if (cell !== 'undefined')\n            {\n                str = str.padEnd(2, cell);\n            }\n            else\n            {\n                str += '?';\n            }\n\n            if (c < matrix[r].length - 1)\n            {\n                str += ' |';\n            }\n        }\n\n        if (r < matrix.length - 1)\n        {\n            str += '\\n';\n\n            for (let i = 0; i < matrix[r].length; i++)\n            {\n                str += '---';\n\n                if (i < matrix[r].length - 1)\n                {\n                    str += '+';\n                }\n            }\n\n            str += '\\n';\n        }\n\n    }\n\n    return str;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Reverses the columns in the given Array Matrix.\n */\nexport function ReverseColumns (matrix: unknown[][]): unknown[][]\n{\n    return matrix.reverse();\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Reverses the rows in the given Array Matrix.\n */\nexport function ReverseRows (matrix: unknown[][]): unknown[][]\n{\n    for (let i = 0; i < matrix.length; i++)\n    {\n        matrix[i].reverse();\n    }\n\n    return matrix;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Transposes the elements of the given matrix (array of arrays).\n *\n * The transpose of a matrix is a new matrix whose rows are the columns of the original.\n */\nexport function TransposeMatrix (matrix: unknown[][]): unknown[][]\n{\n    const sourceRowCount = matrix.length;\n    const sourceColCount = matrix[0].length;\n\n    const result = new Array(sourceColCount);\n\n    for (let i = 0; i < sourceColCount; i++)\n    {\n        result[i] = new Array(sourceRowCount);\n\n        for (let j = sourceRowCount - 1; j > -1; j--)\n        {\n            result[i][j] = matrix[j][i];\n        }\n    }\n\n    return result;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { CheckMatrix } from './CheckMatrix';\nimport { TransposeMatrix } from './TransposeMatrix';\n\n/**\n * Rotates the array matrix based on the given rotation value.\n *\n * The value can be given in degrees: 90, -90, 270, -270 or 180,\n * or a string command: `rotateLeft`, `rotateRight` or `rotate180`.\n *\n * Based on the routine from {@link http://jsfiddle.net/MrPolywhirl/NH42z/}.\n */\nexport function RotateMatrix (matrix: unknown[][], direction: number | string = 90): unknown[][]\n{\n    if (!CheckMatrix(matrix))\n    {\n        return matrix;\n    }\n\n    if (typeof direction !== 'string')\n    {\n        direction = ((direction % 360) + 360) % 360;\n    }\n\n    if (direction === 90 || direction === -270 || direction === 'rotateLeft')\n    {\n        matrix = TransposeMatrix(matrix);\n        matrix.reverse();\n    }\n    else if (direction === -90 || direction === 270 || direction === 'rotateRight')\n    {\n        matrix.reverse();\n        matrix = TransposeMatrix(matrix);\n    }\n    else if (Math.abs(direction as number) === 180 || direction === 'rotate180')\n    {\n        for (let i = 0; i < matrix.length; i++)\n        {\n            matrix[i].reverse();\n        }\n\n        matrix.reverse();\n    }\n\n    return matrix;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { RotateMatrix } from './RotateMatrix';\n\n/**\n * Rotates the array matrix 180 degrees.\n *\n * @function Phaser.Utils.Array.Matrix.Rotate180\n * @since 3.0.0\n *\n * @generic T\n * @genericUse {T[][]} - [matrix,$return]\n *\n * @param {T[][]} [matrix] - The array to rotate.\n *\n * @return {T[][]} The rotated matrix array. The source matrix should be discard for the returned matrix.\n */\nexport function Rotate180 (matrix: unknown[][]): unknown[][]\n{\n    return RotateMatrix(matrix, 180);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { RotateMatrix } from './RotateMatrix';\n\n/**\n * Rotates the array matrix to the left (or 90 degrees)\n *\n * @function Phaser.Utils.Array.Matrix.RotateLeft\n * @since 3.0.0\n *\n * @generic T\n * @genericUse {T[][]} - [matrix,$return]\n *\n * @param {T[][]} [matrix] - The array to rotate.\n *\n * @return {T[][]} The rotated matrix array. The source matrix should be discard for the returned matrix.\n */\nexport function RotateLeft (matrix: unknown[][]): unknown[][]\n{\n    return RotateMatrix(matrix, 90);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { RotateMatrix } from './RotateMatrix';\n\n/**\n * Rotates the array matrix to the left (or -90 degrees)\n *\n * @function Phaser.Utils.Array.Matrix.RotateRight\n * @since 3.0.0\n *\n * @generic T\n * @genericUse {T[][]} - [matrix,$return]\n *\n * @param {T[][]} [matrix] - The array to rotate.\n *\n * @return {T[][]} The rotated matrix array. The source matrix should be discard for the returned matrix.\n */\nexport function RotateRight (matrix: unknown[][]): unknown[][]\n{\n    return RotateMatrix(matrix, -90);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Create an array representing the range of numbers (usually integers), between, and inclusive of,\n * the given `start` and `end` arguments. For example:\n *\n * `var array = numberArray(2, 4); // array = [2, 3, 4]`\n * `var array = numberArray(0, 9); // array = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]`\n *\n * This is equivalent to `numberArrayStep(start, end, 1)`.\n *\n * You can optionally provide a prefix and / or suffix string. If given the array will contain\n * strings, not integers. For example:\n *\n * `var array = numberArray(1, 4, 'Level '); // array = [\"Level 1\", \"Level 2\", \"Level 3\", \"Level 4\"]`\n * `var array = numberArray(5, 7, 'HD-', '.png'); // array = [\"HD-5.png\", \"HD-6.png\", \"HD-7.png\"]`\n *\n * @param {number} start - The minimum value the array starts with.\n * @param {number} end - The maximum value the array contains.\n * @param {string} [prefix] - Optional prefix to place before the number. If provided the array will contain strings, not integers.\n * @param {string} [suffix] - Optional suffix to place after the number. If provided the array will contain strings, not integers.\n *\n * @return {(number[]|string[])} The array of number values, or strings if a prefix or suffix was provided.\n */\nexport function NumberArray (start: number, end: number, prefix?: string, suffix?: string): (string | number)[]\n{\n    const result: (string | number)[] = [];\n\n    for (let i = start; i <= end; i++)\n    {\n        if (prefix || suffix)\n        {\n            let key = (prefix) ? prefix + i.toString() : i.toString();\n\n            if (suffix)\n            {\n                key = key.concat(suffix);\n            }\n\n            result.push(key);\n        }\n        else\n        {\n            result.push(i);\n        }\n    }\n\n    return result;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Round a given number so it is further away from zero. That is, positive numbers are rounded up, and negative numbers are rounded down.\n *\n * @function Phaser.Math.RoundAwayFromZero\n * @since 3.0.0\n *\n * @param {number} value - The number to round.\n *\n * @return {number} The rounded number, rounded away from zero.\n */\nexport function RoundAwayFromZero (value: number): number\n{\n    // \"Opposite\" of truncate.\n    return (value > 0) ? Math.ceil(value) : Math.floor(value);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { RoundAwayFromZero } from '../../math/RoundAwayFromZero';\n\n/**\n * Create an array of numbers (positive and/or negative) progressing from `start`\n * up to but not including `end` by advancing by `step`.\n *\n * If `start` is less than `end` a zero-length range is created unless a negative `step` is specified.\n *\n * Certain values for `start` and `end` (eg. NaN/undefined/null) are currently coerced to 0;\n * for forward compatibility make sure to pass in actual numbers.\n *\n * @example\n * NumberArrayStep(4);\n * // => [0, 1, 2, 3]\n *\n * NumberArrayStep(1, 5);\n * // => [1, 2, 3, 4]\n *\n * NumberArrayStep(0, 20, 5);\n * // => [0, 5, 10, 15]\n *\n * NumberArrayStep(0, -4, -1);\n * // => [0, -1, -2, -3]\n *\n * NumberArrayStep(1, 4, 0);\n * // => [1, 1, 1]\n *\n * NumberArrayStep(0);\n * // => []\n *\n * @param {number} [start=0] - The start of the range.\n * @param {number} [end=null] - The end of the range.\n * @param {number} [step=1] - The value to increment or decrement by.\n *\n * @return {number[]} The array of number values.\n */\nexport function NumberArrayStep (start: number, end: number, step: number): number[]\n{\n    const result: number[] = [];\n\n    const total = Math.max(RoundAwayFromZero((end - start) / (step || 1)), 0);\n\n    for (let i = 0; i < total; i++)\n    {\n        result.push(start);\n\n        start += step;\n    }\n\n    return result;\n}\n", "/**\n * @author       Niklas von Hertzen (https://github.com/niklasvh/base64-arraybuffer)\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nconst chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\n/**\n * Converts an ArrayBuffer into a base64 string.\n *\n * The resulting string can optionally be a data uri if the `mediaType` argument is provided.\n *\n * See https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs for more details.\n *\n * @function Phaser.Utils.Base64.ArrayBufferToBase64\n * @since 3.18.0\n *\n * @param {ArrayBuffer} arrayBuffer - The Array Buffer to encode.\n * @param {string} [mediaType] - An optional media type, i.e. `audio/ogg` or `image/jpeg`. If included the resulting string will be a data URI.\n *\n * @return {string} The base64 encoded Array Buffer.\n */\nexport function ArrayBufferToBase64 (arrayBuffer: ArrayBuffer, mediaType: string): string\n{\n    const bytes = new Uint8Array(arrayBuffer);\n    const len = bytes.length;\n\n    let base64 = (mediaType) ? 'data:' + mediaType + ';base64,' : '';\n\n    for (let i = 0; i < len; i += 3)\n    {\n        base64 += chars[bytes[i] >> 2];\n        base64 += chars[((bytes[i] & 3) << 4) | (bytes[i + 1] >> 4)];\n        base64 += chars[((bytes[i + 1] & 15) << 2) | (bytes[i + 2] >> 6)];\n        base64 += chars[bytes[i + 2] & 63];\n    }\n\n    if ((len % 3) === 2)\n    {\n        base64 = base64.substring(0, base64.length - 1) + '=';\n    }\n    else if (len % 3 === 1)\n    {\n        base64 = base64.substring(0, base64.length - 2) + '==';\n    }\n\n    return base64;\n}\n", "/**\n * @author       Niklas von Hertzen (https://github.com/niklasvh/base64-arraybuffer)\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nconst chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\n//  Use a lookup table to find the index.\nconst lookup = new Uint8Array(256);\n\nfor (let i = 0; i < chars.length; i++)\n{\n    lookup[chars.charCodeAt(i)] = i;\n}\n\n/**\n * Converts a base64 string, either with or without a data uri, into an Array Buffer.\n *\n * @function Phaser.Utils.Base64.Base64ToArrayBuffer\n * @since 3.18.0\n *\n * @param {string} base64 - The base64 string to be decoded. Can optionally contain a data URI header, which will be stripped out prior to decoding.\n *\n * @return {ArrayBuffer} An ArrayBuffer decoded from the base64 data.\n */\nexport function Base64ToArrayBuffer (base64: string): ArrayBuffer\n{\n    //  Is it a data uri? if so, strip the header away\n    base64 = base64.substr(base64.indexOf(',') + 1);\n\n    const len = base64.length;\n    let bufferLength = len * 0.75;\n    let p = 0;\n    let encoded1;\n    let encoded2;\n    let encoded3;\n    let encoded4;\n\n    if (base64[len - 1] === '=')\n    {\n        bufferLength--;\n\n        if (base64[len - 2] === '=')\n        {\n            bufferLength--;\n        }\n    }\n\n    const arrayBuffer = new ArrayBuffer(bufferLength);\n    const bytes = new Uint8Array(arrayBuffer);\n\n    for (let i = 0; i < len; i += 4)\n    {\n        encoded1 = lookup[base64.charCodeAt(i)];\n        encoded2 = lookup[base64.charCodeAt(i + 1)];\n        encoded3 = lookup[base64.charCodeAt(i + 2)];\n        encoded4 = lookup[base64.charCodeAt(i + 3)];\n\n        bytes[p++] = (encoded1 << 2) | (encoded2 >> 4);\n        bytes[p++] = ((encoded2 & 15) << 4) | (encoded3 >> 2);\n        bytes[p++] = ((encoded3 & 3) << 6) | (encoded4 & 63);\n    }\n\n    return arrayBuffer;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Takes a string and removes the character at the given index.\n *\n * @function Phaser.Utils.String.RemoveAt\n * @since 3.50.0\n *\n * @param {string} string - The string to be worked on.\n * @param {number} index - The index of the character to be removed.\n *\n * @return {string} The modified string.\n */\nexport function RemoveAt (string: string, index: number): string\n{\n    if (index === 0)\n    {\n        return string.slice(1);\n    }\n    else\n    {\n        return string.slice(0, index - 1) + string.slice(index);\n    }\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Takes the given string and reverses it, returning the reversed string.\n * For example if given the string `Atari 520ST` it would return `TS025 iratA`.\n *\n * @function Phaser.Utils.String.Reverse\n * @since 3.0.0\n *\n * @param {string} string - The string to be reversed.\n *\n * @return {string} The reversed string.\n */\nexport function Reverse (string: string): string\n{\n    return string.split('').reverse().join('');\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Capitalizes the first letter of a string if there is one.\n * @example\n * UppercaseFirst('abc');\n * // returns 'Abc'\n * @example\n * UppercaseFirst('the happy family');\n * // returns 'The happy family'\n * @example\n * UppercaseFirst('');\n * // returns ''\n *\n * @function Phaser.Utils.String.UppercaseFirst\n * @since 3.0.0\n *\n * @param {string} str - The string to capitalize.\n *\n * @return {string} A new string, same as the first, but with the first letter capitalized.\n */\nexport function UppercaseFirst (str: string): string\n{\n    return str && str[0].toUpperCase() + str.slice(1);\n}\n", "export function NOOP (): void\n{\n    //  No-op\n}\n", "import { NOOP } from '../../utils';\n\n//  4x4 Matrix in column-major format\n\n/**\n * data[0] = m00\n * data[1] = m01\n * data[2] = m02\n * data[3] = m03\n * data[4] = m10\n * data[5] = m11\n * data[6] = m12\n * data[7] = m13\n * data[8] = m20\n * data[9] = m21\n * data[10] = m22\n * data[11] = m23\n * data[12] = m30\n * data[13] = m31\n * data[14] = m32\n * data[15] = m33\n */\n\nexport class Matrix4\n{\n    data: Float32Array;\n\n    onChange: (mat4: Matrix4) => void;\n\n    constructor (src?: Matrix4 | Float32List)\n    {\n        const data = new Float32Array(16);\n\n        this.data = data;\n        this.onChange = NOOP;\n\n        if (src)\n        {\n            if (Array.isArray(src))\n            {\n                this.fromArray(src);\n            }\n            else\n            {\n                this.fromArray((src as Matrix4).data);\n            }\n        }\n        else\n        {\n            data[0] = 1;\n            data[5] = 1;\n            data[10] = 1;\n            data[15] = 1;\n        }\n    }\n\n    /**\n     * @param m00 - 1st value of 1st row\n     * @param m01 - 2nd value of 1st row\n     * @param m02 - 3rd value of 1st row\n     * @param m03 - 4th value of 1st row\n     * @param m10 - 1st value of 2nd row\n     * @param m11 - 2nd value of 2nd row\n     * @param m12 - 3rd value of 2nd row\n     * @param m13 - 4th value of 2nd row\n     * @param m20 - 1st value of 3rd row\n     * @param m21 - 2nd value of 3rd row\n     * @param m22 - 3rd value of 3rd row\n     * @param m23 - 4th value of 3rd row\n     * @param m30 - 1st value of 4th row\n     * @param m31 - 2nd value of 4th row\n     * @param m32 - 3rd value of 4th row\n     * @param m33 - 4th value of 4th row\n     */\n    set (m00: number, m01: number, m02: number, m03: number, m10: number, m11: number, m12: number, m13: number, m20: number, m21: number, m22: number, m23: number, m30: number, m31: number, m32: number, m33: number): this\n    {\n        const data = this.data;\n\n        data[ 0 ] = m00;\n        data[ 1 ] = m01;\n        data[ 2 ] = m02;\n        data[ 3 ] = m03;\n\n        data[ 4 ] = m10;\n        data[ 5 ] = m11;\n        data[ 6 ] = m12;\n        data[ 7 ] = m13;\n\n        data[ 8 ] = m20;\n        data[ 9 ] = m21;\n        data[ 10 ] = m22;\n        data[ 11 ] = m23;\n\n        data[ 12 ] = m30;\n        data[ 13 ] = m31;\n        data[ 14 ] = m32;\n        data[ 15 ] = m33;\n\n        this.onChange(this);\n\n        return this;\n    }\n\n    toArray (dst: Float32List = [], index: number = 0): Float32List\n    {\n        const data = this.data;\n\n        for (let i = 0; i < 16; i++)\n        {\n            dst[ index + i ] = data[i];\n        }\n\n        return dst;\n    }\n\n    fromArray (src: Float32List, index: number = 0): this\n    {\n        const data = this.data;\n\n        for (let i = 0; i < 16; i++)\n        {\n            data[i] = src[ index + i ];\n        }\n\n        this.onChange(this);\n\n        return this;\n    }\n\n    toString (): string\n    {\n        return '[ mat4=' + this.data.join(', ') + ' ]';\n    }\n\n    destroy (): void\n    {\n        this.onChange = NOOP;\n        this.data = null;\n    }\n}\n", "import { Matrix4 } from './Matrix4';\n\n// Generates a orthogonal projection matrix with the given bounds\n\nexport function Mat4Ortho (left: number, right: number, bottom: number, top: number, near: number, far: number, out: Matrix4 = new Matrix4()): Matrix4\n{\n    const lr = 1 / (left - right);\n    const bt = 1 / (bottom - top);\n    const nf = 1 / (near - far);\n\n    return out.set(\n        -2 * lr,\n        0,\n        0,\n        0,\n        0,\n        -2 * bt,\n        0,\n        0,\n        0,\n        0,\n        2 * nf,\n        0,\n        (left + right) * lr,\n        (top + bottom) * bt,\n        (far + near) * nf,\n        1\n    );\n}\n", "const BYTE                   = 0x1400;\nconst UNSIGNED_BYTE          = 0x1401;\nconst SHORT                  = 0x1402;\nconst UNSIGNED_SHORT         = 0x1403;\nconst INT                    = 0x1404;\nconst UNSIGNED_INT           = 0x1405;\nconst FLOAT                  = 0x1406;\nconst REPEAT                 = 0x2901;  // eslint-disable-line\nconst CLAMP_TO_EDGE          = 0x812F;\nconst MIRRORED_REPEAT        = 0x8370;  // eslint-disable-line\nconst NEAREST                = 0x2600;  // eslint-disable-line\nconst LINEAR                 = 0x2601;\nconst NEAREST_MIPMAP_NEAREST = 0x2700;  // eslint-disable-line\nconst LINEAR_MIPMAP_NEAREST  = 0x2701;  // eslint-disable-line\nconst NEAREST_MIPMAP_LINEAR  = 0x2702;  // eslint-disable-line\nconst LINEAR_MIPMAP_LINEAR   = 0x2703;  // eslint-disable-line\n\nexport {\n    BYTE,\n    UNSIGNED_BYTE,\n    SHORT,\n    UNSIGNED_SHORT,\n    INT,\n    UNSIGNED_INT,\n    FLOAT,\n    REPEAT,\n    CLAMP_TO_EDGE,\n    MIRRORED_REPEAT,\n    NEAREST,\n    LINEAR,\n    NEAREST_MIPMAP_NEAREST,\n    LINEAR_MIPMAP_NEAREST,\n    NEAREST_MIPMAP_LINEAR,\n    LINEAR_MIPMAP_LINEAR\n};\n", "import * as GL_CONST from '../GL_CONST';\n\nimport { IVertexAttribPointer } from './IVertexAttribPointer';\nimport { gl } from '../GL';\n\nexport type ShaderAttributeEntry = {\n    size: number;\n    type?: number;\n    normalized?: boolean;\n    stride?: number;\n};\n\nexport function CreateAttributes (program: WebGLProgram, attribs: Record<string, ShaderAttributeEntry>): Map<string, IVertexAttribPointer>\n{\n    const attributes = new Map();\n\n    const defaultSettings: ShaderAttributeEntry =\n    {\n        size: 1,\n        type: GL_CONST.FLOAT,\n        normalized: false,\n        stride: 0\n    };\n\n    let offset = 0;\n\n    for (const [ name, entry ] of Object.entries(attribs))\n    {\n        const index = gl.getAttribLocation(program, name);\n\n        if (index !== -1)\n        {\n            gl.enableVertexAttribArray(index);\n\n            const {\n\n                size = defaultSettings.size,\n                type = defaultSettings.type,\n                normalized = defaultSettings.normalized,\n                stride = defaultSettings.stride\n\n            } = entry;\n\n            attributes.set(name, { index, size, type, normalized, stride, offset });\n\n            //  Default value as used by FLOAT, UNSIGNED_INT and INT\n            let typeSize = 4;\n\n            if (type === GL_CONST.UNSIGNED_SHORT || type === GL_CONST.SHORT)\n            {\n                typeSize = 2;\n            }\n            else if (type === GL_CONST.UNSIGNED_BYTE || type === GL_CONST.BYTE)\n            {\n                typeSize = 1;\n            }\n\n            offset += size * typeSize;\n        }\n    }\n\n    return attributes;\n}\n", "import { gl } from '../GL';\n\nexport function DeleteShaders (...shaders: WebGLShader[]): void\n{\n    shaders.forEach(shader =>\n    {\n        gl.deleteShader(shader);\n    });\n}\n", "import { DeleteShaders } from './DeleteShaders';\nimport { gl } from '../GL';\n\nexport function CreateProgram (...shaders: WebGLShader[]): WebGLProgram\n{\n    const program = gl.createProgram();\n\n    shaders.forEach(shader =>\n    {\n        gl.attachShader(program, shader);\n    });\n\n    gl.linkProgram(program);\n\n    const status = gl.getProgramParameter(program, gl.LINK_STATUS);\n\n    if (!status)\n    {\n        const info = gl.getProgramInfoLog(program);\n\n        console.error(`Error linking program: ${info}`);\n\n        gl.deleteProgram(program);\n\n        DeleteShaders(...shaders);\n\n        return null;\n    }\n\n    return program;\n}\n", "import { gl } from '../GL';\n\nexport function CreateShader (source: string, type: GLenum): WebGLShader | null\n{\n    const shader = gl.createShader(type);\n\n    gl.shaderSource(shader, source);\n\n    gl.compileShader(shader);\n\n    const status = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n\n    if (!status)\n    {\n        const info = gl.getShaderInfoLog(shader);\n\n        //  Adding line numbers idea borrowed from Gregg Tavares!\n        const sourceLines = source.split('\\n').map((line, index) =>\n        {\n            return `${index}: ${line}`;\n        });\n\n        console.error(`Error compiling shader: ${info}`, sourceLines.join('\\n'));\n\n        gl.deleteShader(shader);\n\n        return null;\n    }\n\n    return shader;\n}\n", "import { gl } from '../GL';\n\nexport type FloatSetter = (v: number) => void;\nexport type F32Setter = (v: Float32List) => void;\nexport type I32Setter = (v: Int32List) => void;\n\nexport function CreateUniformSetter (uniform: WebGLActiveInfo, location: WebGLUniformLocation, isArray: boolean = false): FloatSetter | F32Setter | I32Setter\n{\n    switch (uniform.type)\n    {\n        case gl.INT:\n        case gl.BOOL:\n        {\n            if (isArray)\n            {\n                return (v: Int32List): void =>\n                {\n                    gl.uniform1iv(location, v);\n                };\n            }\n            else\n            {\n                return (v: number): void =>\n                {\n                    gl.uniform1i(location, v);\n                };\n            }\n        }\n\n        case gl.INT_VEC2:\n        case gl.BOOL_VEC2:\n        {\n            return (v: Int32List): void =>\n            {\n                gl.uniform2iv(location, v);\n            };\n        }\n\n        case gl.INT_VEC3:\n        case gl.BOOL_VEC3:\n        {\n            return (v: Int32List): void =>\n            {\n                gl.uniform3iv(location, v);\n            };\n        }\n\n        case gl.INT_VEC4:\n        case gl.BOOL_VEC4:\n        {\n            return (v: Int32List): void =>\n            {\n                gl.uniform4iv(location, v);\n            };\n        }\n\n        case gl.FLOAT:\n        {\n            if (isArray)\n            {\n                return (v: Float32List): void =>\n                {\n                    gl.uniform1fv(location, v);\n                };\n            }\n            else\n            {\n                return (v: number): void =>\n                {\n                    gl.uniform1f(location, v);\n                };\n            }\n        }\n\n        case gl.FLOAT_VEC2:\n        {\n            return (v: Float32List): void =>\n            {\n                gl.uniform2fv(location, v);\n            };\n        }\n\n        case gl.FLOAT_VEC3:\n        {\n            return (v: Float32List): void =>\n            {\n                gl.uniform3fv(location, v);\n            };\n        }\n\n        case gl.FLOAT_VEC4:\n        {\n            return (v: Float32List): void =>\n            {\n                gl.uniform4fv(location, v);\n            };\n        }\n\n        case gl.FLOAT_MAT2:\n        {\n            return (v: Float32List): void =>\n            {\n                gl.uniformMatrix2fv(location, false, v);\n            };\n        }\n\n        case gl.FLOAT_MAT3:\n        {\n            return (v: Float32List): void =>\n            {\n                gl.uniformMatrix3fv(location, false, v);\n            };\n        }\n\n        case gl.FLOAT_MAT4:\n        {\n            return (v: Float32List): void =>\n            {\n                gl.uniformMatrix4fv(location, false, v);\n            };\n        }\n\n        case gl.SAMPLER_2D:\n        case gl.SAMPLER_CUBE:\n        {\n            if (uniform.size > 1)\n            {\n                return (v: Int32List): void =>\n                {\n                    gl.uniform1iv(location, v);\n                };\n            }\n            else\n            {\n                return (v: number): void =>\n                {\n                    gl.uniform1i(location, v);\n                };\n            }\n        }\n    }\n}\n", "import { CreateUniformSetter } from './CreateUniformSetter';\nimport { gl } from '../GL';\n\nexport function CreateUniforms (program: WebGLProgram): Map<string, Function>\n{\n    const uniforms = new Map();\n\n    const total = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);\n\n    for (let i = 0; i < total; i++)\n    {\n        const uniform = gl.getActiveUniform(program, i);\n\n        let name = uniform.name;\n\n        if (name.startsWith('gl_') || name.startsWith('webgl_'))\n        {\n            //  Skip built-in uniforms\n            continue;\n        }\n\n        const location = gl.getUniformLocation(program, uniform.name);\n\n        if (location)\n        {\n            let isArray = false;\n\n            //  If uniform name has [0] at the end, remove it\n            if (name.endsWith('[0]'))\n            {\n                name = name.slice(0, -3);\n\n                isArray = (uniform.size > 1);\n            }\n\n            uniforms.set(name, CreateUniformSetter(uniform, location, isArray));\n        }\n    }\n\n    return uniforms;\n}\n", "import * as GL_CONST from '../GL_CONST';\n\nimport { ShaderAttributeEntry } from './CreateAttributes';\n\nexport const DefaultQuadAttributes: Record<string, ShaderAttributeEntry> =\n{\n    aVertexPosition: { size: 2 },\n    aTextureCoord: { size: 2 },\n    aTextureId: { size: 1 },\n    aTintColor: { size: 4 }\n};\n", "export const DefaultQuadUniforms: Record<string, Number | Float32List> =\n{\n    uProjectionMatrix: new Float32Array(),\n    uCameraMatrix: new Float32Array(),\n    uTexture: 0\n};\n", "import { gl } from '../GL';\n\nexport function CreateDepthBuffer (framebuffer: WebGLFramebuffer, textureWidth: number, textureHeight: number): WebGLRenderbuffer\n{\n    gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n\n    const depthBuffer = gl.createRenderbuffer();\n\n    gl.bindRenderbuffer(gl.RENDERBUFFER, depthBuffer);\n\n    gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, textureWidth, textureHeight);\n\n    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, depthBuffer);\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\n    return depthBuffer;\n}\n", "export const SINGLE_QUAD_FRAG =\n`#define SHADER_NAME SINGLE_QUAD_FRAG\n\nprecision highp float;\n\nvarying vec2 vTextureCoord;\nvarying float vTextureId;\nvarying vec4 vTintColor;\n\nuniform sampler2D uTexture;\n\nvoid main (void)\n{\n    vec4 color = texture2D(uTexture, vTextureCoord);\n\n    gl_FragColor = color * vec4(vTintColor.rgb * vTintColor.a, vTintColor.a);\n}`;\n", "export const SINGLE_QUAD_VERT =\n`#define SHADER_NAME SINGLE_QUAD_VERT\n\nprecision highp float;\n\nattribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\nattribute float aTextureId;\nattribute vec4 aTintColor;\n\nuniform mat4 uProjectionMatrix;\nuniform mat4 uCameraMatrix;\n\nvarying vec2 vTextureCoord;\nvarying float vTextureId;\nvarying vec4 vTintColor;\n\nvoid main (void)\n{\n    vTextureCoord = aTextureCoord;\n    vTextureId = aTextureId;\n    vTintColor = aTintColor;\n\n    gl_Position = uProjectionMatrix * uCameraMatrix * vec4(aVertexPosition, 0.0, 1.0);\n}`;\n", "export const TYPES_ENUM = {\r\n  i8: 'i8',\r\n  ui8: 'ui8',\r\n  ui8c: 'ui8c',\r\n  i16: 'i16',\r\n  ui16: 'ui16',\r\n  i32: 'i32',\r\n  ui32: 'ui32',\r\n  f32: 'f32',\r\n  f64: 'f64'\r\n}\r\n\r\nexport const TYPES_NAMES = {\r\n  i8: 'Int8',\r\n  ui8: 'Uint8',\r\n  ui8c: 'Uint8Clamped',\r\n  i16: 'Int16',\r\n  ui16: 'Uint16',\r\n  i32: 'Int32',\r\n  ui32: 'Uint32',\r\n  f32: 'Float32',\r\n  f64: 'Float64'\r\n}\r\n\r\nexport const TYPES = {\r\n  i8: Int8Array,\r\n  ui8: Uint8Array,\r\n  ui8c: Uint8ClampedArray,\r\n  i16: Int16Array,\r\n  ui16: Uint16Array,\r\n  i32: Int32Array,\r\n  ui32: Uint32Array,\r\n  f32: Float32Array,\r\n  f64: Float64Array\r\n}\r\n\r\nconst UNSIGNED_MAX = {\r\n  uint8: 2**8,\r\n  uint16: 2**16,\r\n  uint32: 2**32\r\n}\r\n\r\nconst roundToMultiple4 = x => Math.ceil(x / 4) * 4\r\n\r\nexport const $storeRef = Symbol('storeRef')\r\nexport const $storeSize = Symbol('storeSize')\r\nexport const $storeMaps = Symbol('storeMaps')\r\nexport const $storeFlattened = Symbol('storeFlattened')\r\nexport const $storeBase = Symbol('storeBase')\r\nexport const $storeType = Symbol('storeType')\r\n\r\nexport const $storeArrayCounts = Symbol('storeArrayCount')\r\nexport const $storeSubarrays = Symbol('storeSubarrays')\r\nexport const $storeCursor = Symbol('storeCursor')\r\nexport const $subarrayCursors = Symbol('subarrayCursors')\r\nexport const $subarray = Symbol('subarray')\r\nexport const $subarrayFrom = Symbol('subarrayFrom')\r\nexport const $subarrayTo = Symbol('subarrayTo')\r\nexport const $parentArray = Symbol('subStore')\r\nexport const $tagStore = Symbol('tagStore')\r\n\r\nexport const $queryShadow = Symbol('queryShadow')\r\nexport const $serializeShadow = Symbol('serializeShadow')\r\n\r\nexport const $indexType = Symbol('indexType')\r\nexport const $indexBytes = Symbol('indexBytes')\r\n\r\nconst stores = {}\r\n\r\nexport const resize = (ta, size) => {\r\n  const newBuffer = new ArrayBuffer(size * ta.BYTES_PER_ELEMENT)\r\n  const newTa = new ta.constructor(newBuffer)\r\n  newTa.set(ta, 0)\r\n  return newTa\r\n}\r\n\r\nexport const createShadow = (store, key) => {\r\n  if (!ArrayBuffer.isView(store)) {\r\n    const shadow = store[$parentArray].slice(0).fill(0)\r\n    for (const k in store[key]) {\r\n      const from = store[key][k][$subarrayFrom]\r\n      const to = store[key][k][$subarrayTo]\r\n      store[key][k] = shadow.subarray(from, to)\r\n    }\r\n  } else {\r\n    store[key] = store.slice(0).fill(0)\r\n  }\r\n}\r\n\r\nconst resizeSubarray = (metadata, store, size) => {\r\n  const cursors = metadata[$subarrayCursors]\r\n  const type = store[$storeType]\r\n  const length = store[0].length\r\n  const indexType =\r\n    length <= UNSIGNED_MAX.uint8\r\n      ? 'ui8'\r\n      : length <= UNSIGNED_MAX.uint16\r\n        ? 'ui16'\r\n        : 'ui32'\r\n        \r\n  const arrayCount = metadata[$storeArrayCounts][type]\r\n  const summedLength = Array(arrayCount).fill(0).reduce((a, p) => a + length, 0)\r\n  \r\n  // for threaded impl\r\n  // const summedBytesPerElement = Array(arrayCount).fill(0).reduce((a, p) => a + TYPES[type].BYTES_PER_ELEMENT, 0)\r\n  // const totalBytes = roundToMultiple4(summedBytesPerElement * summedLength * size)\r\n  // const buffer = new ArrayBuffer(totalBytes)\r\n\r\n  const array = new TYPES[type](summedLength * size)\r\n\r\n  array.set(metadata[$storeSubarrays][type])\r\n  \r\n  metadata[$storeSubarrays][type] = array\r\n  createShadow(metadata[$storeSubarrays][type], $queryShadow)\r\n  createShadow(metadata[$storeSubarrays][type], $serializeShadow)\r\n  \r\n  array[$indexType] = TYPES_NAMES[indexType]\r\n  array[$indexBytes] = TYPES[indexType].BYTES_PER_ELEMENT\r\n\r\n  const start = cursors[type]\r\n  let end = 0\r\n  for (let eid = 0; eid < size; eid++) {\r\n    const from = cursors[type] + (eid * length)\r\n    const to = from + length\r\n\r\n    store[eid] = metadata[$storeSubarrays][type].subarray(from, to)\r\n    \r\n    store[eid][$subarrayFrom] = from\r\n    store[eid][$subarrayTo] = to\r\n    store[eid][$queryShadow] = metadata[$storeSubarrays][type][$queryShadow].subarray(from, to)\r\n    store[eid][$serializeShadow] = metadata[$storeSubarrays][type][$serializeShadow].subarray(from, to)\r\n    store[eid][$subarray] = true\r\n    store[eid][$indexType] = array[$indexType]\r\n    store[eid][$indexBytes] = array[$indexBytes]\r\n    \r\n    end = to\r\n  }\r\n\r\n  cursors[type] = end\r\n\r\n  store[$parentArray] = metadata[$storeSubarrays][type].subarray(start, end)\r\n}\r\n\r\nconst resizeRecursive = (metadata, store, size) => {\r\n  Object.keys(store).forEach(key => {\r\n    const ta = store[key]\r\n    if (Array.isArray(ta)) {\r\n      resizeSubarray(metadata, ta, size)\r\n      store[$storeFlattened].push(ta)\r\n    } else if (ArrayBuffer.isView(ta)) {\r\n      store[key] = resize(ta, size)\r\n      store[$storeFlattened].push(store[key])\r\n      store[key][$queryShadow] = resize(ta[$queryShadow], size)\r\n      store[key][$serializeShadow] = resize(ta[$serializeShadow], size)\r\n    } else if (typeof ta === 'object') {\r\n      resizeRecursive(metadata, store[key], size)\r\n    }\r\n  })\r\n}\r\n\r\nexport const resizeStore = (store, size) => {\r\n  if (store[$tagStore]) return\r\n  store[$storeSize] = size\r\n  store[$storeFlattened].length = 0\r\n  Object.keys(store[$subarrayCursors]).forEach(k => {\r\n    store[$subarrayCursors][k] = 0\r\n  })\r\n  resizeRecursive(store, store, size)\r\n}\r\n\r\nexport const resetStore = store => {\r\n  if (store[$storeFlattened]) {\r\n    store[$storeFlattened].forEach(ta => {\r\n      ta.fill(0)\r\n    })\r\n    Object.keys(store[$storeSubarrays]).forEach(key => {\r\n      store[$storeSubarrays][key].fill(0)\r\n    })\r\n  }\r\n}\r\n\r\nexport const resetStoreFor = (store, eid) => {\r\n  if (store[$storeFlattened]) {\r\n    store[$storeFlattened].forEach(ta => {\r\n      if (ArrayBuffer.isView(ta)) ta[eid] = 0\r\n      else ta[eid].fill(0)\r\n    })\r\n  }\r\n}\r\n\r\nconst createTypeStore = (type, length) => {\r\n  const totalBytes = length * TYPES[type].BYTES_PER_ELEMENT\r\n  const buffer = new ArrayBuffer(totalBytes)\r\n  return new TYPES[type](buffer)\r\n}\r\n\r\nexport const parentArray = store => store[$parentArray]\r\n\r\nconst createArrayStore = (metadata, type, length) => {\r\n  const size = metadata[$storeSize]\r\n  const store = Array(size).fill(0)\r\n  store[$storeType] = type\r\n\r\n  const cursors = metadata[$subarrayCursors]\r\n  const indexType =\r\n    length < UNSIGNED_MAX.uint8\r\n      ? 'ui8'\r\n      : length < UNSIGNED_MAX.uint16\r\n        ? 'ui16'\r\n        : 'ui32'\r\n\r\n  if (!length) throw new Error('\u274C Must define a length for component array.')\r\n  if (!TYPES[type]) throw new Error(`\u274C Invalid component array property type ${type}.`)\r\n\r\n  // create buffer for type if it does not already exist\r\n  if (!metadata[$storeSubarrays][type]) {\r\n    const arrayCount = metadata[$storeArrayCounts][type]\r\n    const summedLength = Array(arrayCount).fill(0).reduce((a, p) => a + length, 0)\r\n    \r\n    // for threaded impl\r\n    // const summedBytesPerElement = Array(arrayCount).fill(0).reduce((a, p) => a + TYPES[type].BYTES_PER_ELEMENT, 0)\r\n    // const totalBytes = roundToMultiple4(summedBytesPerElement * summedLength * size)\r\n    // const buffer = new ArrayBuffer(totalBytes)\r\n\r\n    const array = new TYPES[type](summedLength * size)\r\n\r\n    metadata[$storeSubarrays][type] = array\r\n    createShadow(metadata[$storeSubarrays][type], $queryShadow)\r\n    createShadow(metadata[$storeSubarrays][type], $serializeShadow)\r\n    \r\n    array[$indexType] = TYPES_NAMES[indexType]\r\n    array[$indexBytes] = TYPES[indexType].BYTES_PER_ELEMENT\r\n  }\r\n\r\n  // pre-generate subarrays for each eid\r\n  const start = cursors[type]\r\n  let end = 0\r\n  for (let eid = 0; eid < size; eid++) {\r\n    const from = cursors[type] + (eid * length)\r\n    const to = from + length\r\n\r\n    store[eid] = metadata[$storeSubarrays][type].subarray(from, to)\r\n    \r\n    store[eid][$subarrayFrom] = from\r\n    store[eid][$subarrayTo] = to\r\n    store[eid][$queryShadow] = metadata[$storeSubarrays][type][$queryShadow].subarray(from, to)\r\n    store[eid][$serializeShadow] = metadata[$storeSubarrays][type][$serializeShadow].subarray(from, to)\r\n    store[eid][$subarray] = true\r\n    store[eid][$indexType] = TYPES_NAMES[indexType]\r\n    store[eid][$indexBytes] = TYPES[indexType].BYTES_PER_ELEMENT\r\n    \r\n    end = to\r\n  }\r\n\r\n  cursors[type] = end\r\n\r\n  store[$parentArray] = metadata[$storeSubarrays][type].subarray(start, end)\r\n\r\n  return store\r\n}\r\n\r\nconst isArrayType = x => Array.isArray(x) && typeof x[0] === 'string' && typeof x[1] === 'number'\r\n\r\nexport const createStore = (schema, size) => {\r\n  const $store = Symbol('store')\r\n\r\n  if (!schema || !Object.keys(schema).length) {\r\n    // tag component\r\n    stores[$store] = {\r\n      [$storeSize]: size,\r\n      [$tagStore]: true,\r\n      [$storeBase]: () => stores[$store]\r\n    }\r\n    return stores[$store]\r\n  }\r\n\r\n  schema = JSON.parse(JSON.stringify(schema))\r\n\r\n  const arrayCounts = {}\r\n  const collectArrayCounts = s => {\r\n    const keys = Object.keys(s)\r\n    for (const k of keys) {\r\n      if (isArrayType(s[k])) {\r\n        if (!arrayCounts[s[k][0]]) arrayCounts[s[k][0]] = 0\r\n        arrayCounts[s[k][0]]++\r\n      } else if (s[k] instanceof Object) {\r\n        collectArrayCounts(s[k])\r\n      }\r\n    }\r\n  }\r\n  collectArrayCounts(schema)\r\n\r\n  const metadata = {\r\n    [$storeSize]: size,\r\n    [$storeMaps]: {},\r\n    [$storeSubarrays]: {},\r\n    [$storeRef]: $store,\r\n    [$storeCursor]: 0,\r\n    [$subarrayCursors]: Object.keys(TYPES).reduce((a, type) => ({ ...a, [type]: 0 }), {}),\r\n    [$storeFlattened]: [],\r\n    [$storeArrayCounts]: arrayCounts\r\n  }\r\n\r\n  if (schema instanceof Object && Object.keys(schema).length) {\r\n\r\n    const recursiveTransform = (a, k) => {\r\n\r\n      if (typeof a[k] === 'string') {\r\n\r\n        a[k] = createTypeStore(a[k], size)\r\n        createShadow(a[k], $queryShadow)\r\n        createShadow(a[k], $serializeShadow)\r\n        a[k][$storeBase] = () => stores[$store]\r\n        metadata[$storeFlattened].push(a[k])\r\n\r\n      } else if (isArrayType(a[k])) {\r\n        \r\n        const [type, length] = a[k]\r\n        a[k] = createArrayStore(metadata, type, length)\r\n        a[k][$storeBase] = () => stores[$store]\r\n        metadata[$storeFlattened].push(a[k])\r\n        // Object.seal(a[k])\r\n\r\n      } else if (a[k] instanceof Object) {\r\n        \r\n        a[k] = Object.keys(a[k]).reduce(recursiveTransform, a[k])\r\n        // Object.seal(a[k])\r\n        \r\n      }\r\n\r\n      return a\r\n    }\r\n\r\n    stores[$store] = Object.assign(Object.keys(schema).reduce(recursiveTransform, schema), metadata)\r\n    stores[$store][$storeBase] = () => stores[$store]\r\n\r\n    // Object.seal(stores[$store])\r\n\r\n    return stores[$store]\r\n\r\n  }\r\n}\r\n\r\nexport const free = (store) => {\r\n  delete stores[store[$storeRef]]\r\n}", "export const Uint32SparseSet = (length) => {\r\n  const dense = new Uint32Array(length)\r\n  const sparse = new Uint32Array(length)\r\n\r\n  let cursor = 0\r\n  dense.count = () => cursor + 1\r\n\r\n  const has = val => dense[sparse[val]] === val\r\n\r\n  const add = val => {\r\n    if (has(val)) return\r\n    sparse[val] = cursor\r\n    dense[cursor] = val\r\n\r\n    cursor++\r\n  }\r\n\r\n  const remove = val => {\r\n    if (!has(val)) return\r\n    const index = sparse[val]\r\n    const swapped = dense[cursor]\r\n    if (swapped !== val) {\r\n      dense[index] = swapped\r\n      sparse[swapped] = index\r\n    }\r\n\r\n    cursor--\r\n  }\r\n\r\n  return {\r\n    add,\r\n    remove,\r\n    has,\r\n    sparse,\r\n    dense,\r\n  }\r\n}\r\n\r\nexport const SparseSet = () => {\r\n  const dense = []\r\n  const sparse = []\r\n\r\n  dense.count = () => dense.length\r\n\r\n  const has = val => dense[sparse[val]] === val\r\n\r\n  const add = val => {\r\n    if (has(val)) return\r\n    sparse[val] = dense.push(val) - 1\r\n  }\r\n\r\n  const remove = val => {\r\n    if (!has(val)) return\r\n    const index = sparse[val]\r\n    const swapped = dense.pop()\r\n    if (swapped !== val) {\r\n      dense[index] = swapped\r\n      sparse[swapped] = index\r\n    }\r\n  }\r\n\r\n  return {\r\n    add,\r\n    remove,\r\n    has,\r\n    sparse,\r\n    dense,\r\n  }\r\n}", "import { $indexBytes, $indexType, $serializeShadow, $storeBase, $storeFlattened, $tagStore, createShadow } from \"./Storage.js\"\r\nimport { $componentMap, addComponent, hasComponent } from \"./Component.js\"\r\nimport { $entityArray, $entityEnabled, $entitySparseSet, addEntity, eidToWorld } from \"./Entity.js\"\r\nimport { $localEntities } from \"./World.js\"\r\n\r\nexport const DESERIALIZE_MODE = {\r\n  REPLACE: 0,\r\n  APPEND: 1,\r\n  MAP: 2\r\n}\r\n\r\nlet resized = false\r\n\r\nexport const setSerializationResized = v => { resized = v }\r\n\r\nconst canonicalize = (target) => {\r\n  let componentProps = []\r\n  let changedProps = new Map()\r\n  if (Array.isArray(target)) {\r\n    componentProps = target\r\n      .map(p => {\r\n        if (!p) throw new Error('\uD83D\uDC7E bitECS - undefined component passed into serializer.')\r\n        if (typeof p === 'function' && p.name === 'QueryChanged') {\r\n          p()[$storeFlattened].forEach(prop => {\r\n            const $ = Symbol()\r\n            createShadow(prop, $)\r\n            changedProps.set(prop, $)\r\n          })\r\n          return p()[$storeFlattened]\r\n        }\r\n        if (Object.getOwnPropertySymbols(p).includes($storeFlattened)) {\r\n          return p[$storeFlattened]\r\n        }\r\n        if (Object.getOwnPropertySymbols(p).includes($storeBase)) {\r\n          return p\r\n        }\r\n      })\r\n      .reduce((a,v) => a.concat(v), [])\r\n  }\r\n  return [componentProps, changedProps]\r\n}\r\n\r\nexport const defineSerializer = (target, maxBytes = 20000000) => {\r\n  const isWorld = Object.getOwnPropertySymbols(target).includes($componentMap)\r\n\r\n  let [componentProps, changedProps] = canonicalize(target)\r\n\r\n  // TODO: calculate max bytes based on target & recalc upon resize\r\n\r\n  const buffer = new ArrayBuffer(maxBytes)\r\n  const view = new DataView(buffer)\r\n\r\n  return (ents) => {\r\n\r\n    if (resized) {\r\n      [componentProps, changedProps] = canonicalize(target)\r\n      resized = false\r\n    }\r\n\r\n    if (isWorld) {\r\n      componentProps = []\r\n      target[$componentMap].forEach((c, component) => {\r\n        if (component[$storeFlattened])\r\n          componentProps.push(...component[$storeFlattened])\r\n        else componentProps.push(component)\r\n      })\r\n    }\r\n    \r\n    let world\r\n    if (Object.getOwnPropertySymbols(ents).includes($componentMap)) {\r\n      world = ents\r\n      ents = ents[$entityArray]\r\n    } else {\r\n      world = eidToWorld.get(ents[0])\r\n    }\r\n\r\n    if (!ents.length) return\r\n\r\n    let where = 0\r\n\r\n    // iterate over component props\r\n    for (let pid = 0; pid < componentProps.length; pid++) {\r\n      const prop = componentProps[pid]\r\n      const diff = changedProps.get(prop)\r\n      \r\n      // write pid\r\n      view.setUint8(where, pid)\r\n      where += 1\r\n\r\n      // save space for entity count\r\n      const countWhere = where\r\n      where += 4\r\n      \r\n      let count = 0\r\n      // write eid,val\r\n      for (let i = 0; i < ents.length; i++) {\r\n        const eid = ents[i]\r\n\r\n        // skip if entity doesn't have this component\r\n        if (!hasComponent(world, prop[$storeBase](), eid)) {\r\n          continue\r\n        }\r\n\r\n        // skip if diffing and no change\r\n        // TODO: optimize array diff\r\n        if (diff) {\r\n          if (ArrayBuffer.isView(prop[eid])) {\r\n            let dirty = false\r\n            for (let i = 0; i < prop[eid].length; i++) {\r\n              if(prop[eid][i] !== prop[eid][$serializeShadow][i]) {\r\n                dirty = true\r\n                break\r\n              }\r\n            }\r\n            if (dirty) continue\r\n          } else if (prop[eid] === prop[diff][eid]) continue\r\n        }\r\n\r\n        count++\r\n\r\n        // write eid\r\n        view.setUint32(where, eid)\r\n        where += 4\r\n\r\n        if (prop[$tagStore]) {\r\n          continue\r\n        }\r\n\r\n        // if property is an array\r\n        if (ArrayBuffer.isView(prop[eid])) {\r\n          const type = prop[eid].constructor.name.replace('Array', '')\r\n          const indexType = prop[eid][$indexType]\r\n          const indexBytes = prop[eid][$indexBytes]\r\n\r\n          // add space for count of dirty array elements\r\n          const countWhere2 = where\r\n          where += 1\r\n\r\n          let count2 = 0\r\n\r\n          // write index,value\r\n          for (let i = 0; i < prop[eid].length; i++) {\r\n            const value = prop[eid][i]\r\n\r\n            if (diff && prop[eid][i] === prop[eid][$serializeShadow][i]) {\r\n              continue\r\n            }\r\n\r\n            // write array index\r\n            view[`set${indexType}`](where, i)\r\n            where += indexBytes\r\n\r\n            // write value at that index\r\n            view[`set${type}`](where, value)\r\n            where += prop[eid].BYTES_PER_ELEMENT\r\n            count2++\r\n          }\r\n\r\n          // write total element count\r\n          view[`set${indexType}`](countWhere2, count2)\r\n\r\n        } else {\r\n          // regular property values\r\n          const type = prop.constructor.name.replace('Array', '')\r\n          // set value next [type] bytes\r\n          view[`set${type}`](where, prop[eid])\r\n          where += prop.BYTES_PER_ELEMENT\r\n\r\n          // sync shadow state\r\n          prop[$serializeShadow][eid] = prop[eid]\r\n        }\r\n      }\r\n\r\n      view.setUint32(countWhere, count)\r\n    }\r\n    return buffer.slice(0, where)\r\n  }\r\n}\r\n\r\nconst newEntities = new Map()\r\n\r\nexport const defineDeserializer = (target) => {\r\n  const isWorld = Object.getOwnPropertySymbols(target).includes($componentMap)\r\n  let [componentProps] = canonicalize(target)\r\n\r\n\r\n  return (world, packet, mode=0) => {\r\n\r\n    newEntities.clear()\r\n    \r\n    if (resized) {\r\n      [componentProps] = canonicalize(target)\r\n      resized = false\r\n    }\r\n\r\n    if (isWorld) {\r\n      componentProps = []\r\n      target[$componentMap].forEach((c, component) => {\r\n        if (component[$storeFlattened])\r\n          componentProps.push(...component[$storeFlattened])\r\n        else componentProps.push(component)\r\n      })\r\n    }\r\n\r\n    const localEntities = world[$localEntities]\r\n\r\n    const view = new DataView(packet)\r\n    let where = 0\r\n\r\n    while (where < packet.byteLength) {\r\n\r\n      // pid\r\n      const pid = view.getUint8(where)\r\n      where += 1\r\n\r\n      // entity count\r\n      const entityCount = view.getUint32(where)\r\n      where += 4\r\n\r\n      // component property\r\n      const prop = componentProps[pid]\r\n\r\n      // Get the entities and set their prop values\r\n      for (let i = 0; i < entityCount; i++) {\r\n        let eid = view.getUint32(where)\r\n        where += 4\r\n\r\n        let newEid = newEntities.get(eid)\r\n        if (newEid !== undefined) {\r\n          eid = newEid\r\n        }\r\n\r\n\r\n        if (mode === DESERIALIZE_MODE.MAP) {\r\n          if (localEntities.has(eid)) {\r\n            eid = localEntities.get(eid)\r\n          } else if (newEntities.has(eid)) {\r\n              eid = newEntities.get(eid)\r\n          } else {\r\n            const newEid = addEntity(world)\r\n            localEntities.set(eid, newEid)\r\n            newEntities.set(eid, newEid)\r\n            eid = newEid\r\n          }\r\n        }\r\n\r\n        if (mode === DESERIALIZE_MODE.APPEND ||  \r\n          mode === DESERIALIZE_MODE.REPLACE && !world[$entitySparseSet].has(eid)\r\n        ) {\r\n          const newEid = addEntity(world)\r\n          newEntities.set(eid, newEid)\r\n          eid = newEid\r\n        }\r\n\r\n        const component = prop[$storeBase]()\r\n        if (!hasComponent(world, component, eid)) {\r\n          addComponent(world, component, eid)\r\n        }\r\n\r\n        if (component[$tagStore]) {\r\n          continue\r\n        }\r\n        \r\n        if (ArrayBuffer.isView(prop[eid])) {\r\n          const array = prop[eid]\r\n          const count = view[`get${array[$indexType]}`](where)\r\n          where += array[$indexBytes]\r\n\r\n          // iterate over count\r\n          for (let i = 0; i < count; i++) {\r\n            const index = view[`get${array[$indexType]}`](where)\r\n            where += array[$indexBytes]\r\n\r\n            const value = view[`get${array.constructor.name.replace('Array', '')}`](where)\r\n            where += array.BYTES_PER_ELEMENT\r\n\r\n            prop[eid][index] = value\r\n          }\r\n        } else {\r\n          const value = view[`get${prop.constructor.name.replace('Array', '')}`](where)\r\n          where += prop.BYTES_PER_ELEMENT\r\n\r\n          prop[eid] = value\r\n        }\r\n      }\r\n    }\r\n  }\r\n}", "import { $componentMap, resizeComponents } from './Component.js'\r\nimport { $queries, $queryMap, queryRemoveEntity } from './Query.js'\r\nimport { resize, resizeStore } from './Storage.js'\r\nimport { $size, $resizeThreshold, worlds, resizeWorlds } from './World.js'\r\nimport { setSerializationResized } from './Serialize.js'\r\n\r\nexport const $entityMasks = Symbol('entityMasks')\r\nexport const $entityEnabled = Symbol('entityEnabled')\r\nexport const $entitySparseSet = Symbol('entitySparseSet')\r\nexport const $entityArray = Symbol('entityArray')\r\nexport const $entityIndices = Symbol('entityIndices')\r\nexport const $removedEntities = Symbol('removedEntities')\r\n\r\nlet defaultSize = 100000\r\n\r\n// need a global EID cursor which all worlds and all components know about\r\n// so that world entities can posess entire rows spanning all component tables\r\nlet globalEntityCursor = 0\r\nlet globalSize = defaultSize\r\nconst threshold = globalSize - (globalSize / 5)\r\nlet resizeThreshold = () => threshold\r\n\r\nexport const getGlobalSize = () => globalSize\r\n\r\n// removed eids should also be global to prevent memory leaks\r\nconst removed = []\r\n\r\nexport const resetGlobals = () => {\r\n  globalSize = defaultSize\r\n  globalEntityCursor = 0\r\n  removed.length = 0\r\n}\r\n\r\nexport const getDefaultSize = () => defaultSize\r\nexport const setDefaultSize = x => { \r\n  defaultSize = x\r\n  resetGlobals()\r\n}\r\n\r\nexport const getEntityCursor = () => globalEntityCursor\r\nexport const getRemovedEntities = () => removed\r\n\r\nexport const eidToWorld = new Map()\r\n\r\nexport const addEntity = (world) => {\r\n  \r\n  const eid = removed.length > 0 ? removed.shift() : globalEntityCursor++\r\n  world[$entitySparseSet].add(eid)\r\n  eidToWorld.set(eid, world)\r\n\r\n  // if data stores are 80% full\r\n  if (globalEntityCursor >= resizeThreshold()) {\r\n    // grow by half the original size rounded up to a multiple of 4\r\n    const size = globalSize\r\n    const amount = Math.ceil((size/2) / 4) * 4\r\n    const newSize = size + amount\r\n    globalSize = newSize\r\n    resizeWorlds(newSize)\r\n    resizeComponents(newSize)\r\n    setSerializationResized(true)\r\n    console.info(`\uD83D\uDC7E bitECS - resizing all worlds from ${size} to ${size+amount}`)\r\n  }\r\n\r\n  return eid\r\n}\r\n\r\nexport const removeEntity = (world, eid) => {\r\n  // Check if entity is already removed\r\n  if (!world[$entitySparseSet].has(eid)) return\r\n\r\n  // Remove entity from all queries\r\n  // TODO: archetype graph\r\n  world[$queries].forEach(q => {\r\n    queryRemoveEntity(world, q, eid)\r\n  })\r\n\r\n  // Free the entity\r\n  removed.push(eid)\r\n\r\n  // pop swap\r\n  world[$entitySparseSet].remove(eid)\r\n\r\n  // Clear entity bitmasks\r\n  for (let i = 0; i < world[$entityMasks].length; i++) world[$entityMasks][i][eid] = 0\r\n}", "import { SparseSet, Uint32SparseSet } from './Util.js'\r\nimport { $queryShadow, $storeFlattened, $storeSize, $tagStore, createShadow, parentArray } from './Storage.js'\r\nimport { $componentMap, registerComponent } from './Component.js'\r\nimport { $entityMasks, $entityEnabled, $entityArray, getEntityCursor, getDefaultSize, $entitySparseSet, getGlobalSize } from './Entity.js'\r\nimport { $size } from './World.js'\r\n\r\nexport function Not(c) { return function QueryNot() { return c } }\r\nexport function Or(c) { return function QueryOr() { return c } }\r\nexport function Changed(c) { return function QueryChanged() { return c } }\r\n\r\nexport const $queries = Symbol('queries')\r\nexport const $queryMap = Symbol('queryMap')\r\nexport const $dirtyQueries = Symbol('$dirtyQueries')\r\nexport const $queryComponents = Symbol('queryComponents')\r\nexport const $enterQuery = Symbol('enterQuery')\r\nexport const $exitQuery = Symbol('exitQuery')\r\n\r\nexport const enterQuery = query => world => {\r\n  if (!world[$queryMap].has(query)) registerQuery(world, query)\r\n  const q = world[$queryMap].get(query)\r\n  return q.entered.splice(0)\r\n}\r\n\r\nexport const exitQuery = query => world => {\r\n  if (!world[$queryMap].has(query)) registerQuery(world, query)\r\n  const q = world[$queryMap].get(query)\r\n  return q.exited.splice(0)\r\n}\r\n\r\nexport const registerQuery = (world, query) => {\r\n\r\n  const components = []\r\n  const notComponents = []\r\n  const changedComponents = []\r\n\r\n  query[$queryComponents].forEach(c => {\r\n    if (typeof c === 'function') {\r\n      const comp = c()\r\n      if (!world[$componentMap].has(comp)) registerComponent(world, comp)\r\n      if (c.name === 'QueryNot') {\r\n        notComponents.push(comp)\r\n      }\r\n      if (c.name === 'QueryChanged') {\r\n        changedComponents.push(comp)\r\n        components.push(comp)\r\n      }\r\n    } else {\r\n      if (!world[$componentMap].has(c)) registerComponent(world, c)\r\n      components.push(c)\r\n    }\r\n  })\r\n\r\n  const mapComponents = c => world[$componentMap].get(c)\r\n\r\n  // const sparseSet = Uint32SparseSet(getGlobalSize())\r\n  const sparseSet = SparseSet()\r\n\r\n  const archetypes = []\r\n  const changed = []\r\n  const toRemove = []\r\n  const entered = []\r\n  const exited = []\r\n\r\n  const generations = components\r\n    .concat(notComponents)\r\n    .map(mapComponents)\r\n    .map(c => c.generationId)\r\n    .reduce((a,v) => {\r\n      if (a.includes(v)) return a\r\n      a.push(v)\r\n      return a\r\n    }, [])\r\n\r\n  const reduceBitflags = (a,c) => {\r\n    if (!a[c.generationId]) a[c.generationId] = 0\r\n    a[c.generationId] |= c.bitflag\r\n    return a\r\n  }\r\n  const masks = components\r\n    .map(mapComponents)\r\n    .reduce(reduceBitflags, {})\r\n\r\n  const notMasks = notComponents\r\n    .map(mapComponents)\r\n    .reduce((a,c) => {\r\n      if (!a[c.generationId]) {\r\n        a[c.generationId] = 0\r\n        a[c.generationId] |= c.bitflag\r\n      }\r\n      return a\r\n    }, {})\r\n\r\n  // const orMasks = orComponents\r\n  //   .map(mapComponents)\r\n  //   .reduce(reduceBitmasks, {})\r\n\r\n  const flatProps = components\r\n    .filter(c => !c[$tagStore])\r\n    .map(c => Object.getOwnPropertySymbols(c).includes($storeFlattened) ? c[$storeFlattened] : [c])\r\n    .reduce((a,v) => a.concat(v), [])\r\n\r\n  const shadows = flatProps.map(prop => {\r\n      const $ = Symbol()\r\n      createShadow(prop, $)\r\n      return prop[$]\r\n  }, [])\r\n\r\n  const q = Object.assign(sparseSet, {\r\n    archetypes,\r\n    changed,\r\n    components,\r\n    notComponents,\r\n    changedComponents,\r\n    masks,\r\n    notMasks,\r\n    // orMasks,\r\n    generations,\r\n    flatProps,\r\n    toRemove,\r\n    entered,\r\n    exited,\r\n    shadows,\r\n  })\r\n\r\n  world[$queryMap].set(query, q)\r\n  \r\n  world[$queries].add(q)\r\n\r\n  for (let eid = 0; eid < getEntityCursor(); eid++) {\r\n    if (!world[$entitySparseSet].has(eid)) continue\r\n    if (queryCheckEntity(world, q, eid)) {\r\n      queryAddEntity(q, eid)\r\n    }\r\n  }\r\n}\r\n\r\nconst diff = (q, clearDiff) => {\r\n  if (clearDiff) q.changed.length = 0\r\n  const { flatProps, shadows } = q\r\n  for (let i = 0; i < q.dense.count(); i++) {\r\n    const eid = q.dense[i]\r\n    let dirty = false\r\n    for (let pid = 0; pid < flatProps.length; pid++) {\r\n      const prop = flatProps[pid]\r\n      const shadow = shadows[pid]\r\n      if (ArrayBuffer.isView(prop[eid])) {\r\n        for (let i = 0; i < prop[eid].length; i++) {\r\n          if (prop[eid][i] !== prop[eid][$queryShadow][i]) {\r\n            dirty = true\r\n            prop[eid][$queryShadow][i] = prop[eid][i]\r\n          }\r\n        }\r\n      } else {\r\n        if (prop[eid] !== shadow[eid]) {\r\n          dirty = true\r\n          shadow[eid] = prop[eid]\r\n        }\r\n      }\r\n    }\r\n    if (dirty) q.changed.push(eid)\r\n  }\r\n  return q.changed\r\n}\r\n\r\nexport const defineQuery = (components) => {\r\n  if (components === undefined || components[$componentMap] !== undefined) {\r\n    return world => world ? world[$entityArray] : components[$entityArray]\r\n  }\r\n\r\n  const query = function (world, clearDiff=true) {\r\n    if (!world[$queryMap].has(query)) registerQuery(world, query)\r\n\r\n    const q = world[$queryMap].get(query)\r\n\r\n    queryCommitRemovals(q)\r\n\r\n    if (q.changedComponents.length) return diff(q, clearDiff)\r\n\r\n    return q.dense\r\n  }\r\n  query[$queryComponents] = components\r\n  return query\r\n}\r\n\r\n// TODO: archetype graph\r\nexport const queryCheckEntity = (world, q, eid) => {\r\n  const { masks, notMasks, generations } = q\r\n  // let or = true\r\n  for (let i = 0; i < generations.length; i++) {\r\n    const generationId = generations[i]\r\n    const qMask = masks[generationId]\r\n    const qNotMask = notMasks[generationId]\r\n    // const qOrMask = orMasks[generationId]\r\n    const eMask = world[$entityMasks][generationId][eid]\r\n    \r\n    if (qNotMask && (eMask & qNotMask) !== 0) {\r\n      return false\r\n    }\r\n    // if (qOrMask && (eMask & qOrMask) !== qOrMask) {\r\n    //   continue\r\n    // }\r\n    if (qMask && (eMask & qMask) !== qMask) {\r\n      return false\r\n    }\r\n  }\r\n  return true\r\n}\r\n\r\nexport const queryCheckComponent = (world, q, component) => {\r\n  const { generationId, bitflag } = world[$componentMap].get(component)\r\n  const { masks } = q\r\n  const mask = masks[generationId]\r\n  return (mask & bitflag) === bitflag\r\n}\r\n\r\nexport const queryAddEntity = (q, eid) => {\r\n  if (q.has(eid)) return\r\n  q.add(eid)\r\n  q.entered.push(eid)\r\n}\r\n\r\nconst queryCommitRemovals = (q) => {\r\n  while (q.toRemove.length) {\r\n    q.remove(q.toRemove.pop())\r\n  }\r\n}\r\n\r\nexport const commitRemovals = (world) => {\r\n  world[$dirtyQueries].forEach(queryCommitRemovals)\r\n  world[$dirtyQueries].clear()\r\n}\r\n\r\nexport const queryRemoveEntity = (world, q, eid) => {\r\n  if (!q.has(eid)) return\r\n  q.toRemove.push(eid)\r\n  world[$dirtyQueries].add(q)\r\n  q.exited.push(eid)\r\n}\r\n\r\nexport const resetChangedQuery = (world, query) => {\r\n  const q = world[$queryMap].get(query)\r\n  q.changed.length = 0\r\n}\r\n\r\nexport const removeQuery = (world, query) => {\r\n  const q = world[$queryMap].get(query)\r\n  world[$queries].delete(q)\r\n  world[$queryMap].delete(query)\r\n}", "import { $storeSize, createStore, resetStoreFor, resizeStore } from './Storage.js'\r\nimport { $queries, queryAddEntity, queryRemoveEntity, queryCheckEntity, queryCheckComponent } from './Query.js'\r\nimport { $bitflag, $size } from './World.js'\r\nimport { $entityMasks, getDefaultSize, eidToWorld } from './Entity.js'\r\n\r\nexport const $componentMap = Symbol('componentMap')\r\n\r\nexport const components = []\r\n\r\nexport const resizeComponents = (size) => {\r\n  components.forEach(component => resizeStore(component, size))\r\n}\r\n\r\nexport const defineComponent = (schema) => {\r\n  const component = createStore(schema, getDefaultSize())\r\n  if (schema && Object.keys(schema).length) components.push(component)\r\n  return component\r\n}\r\n\r\nexport const incrementBitflag = (world) => {\r\n  world[$bitflag] *= 2\r\n  if (world[$bitflag] >= 2**32) {\r\n    world[$bitflag] = 1\r\n    world[$entityMasks].push(new Uint32Array(world[$size]))\r\n  }\r\n}\r\n\r\nexport const registerComponent = (world, component) => {\r\n  if (!component) throw new Error(`\uD83D\uDC7E bitECS - cannot register component as it is null or undefined.`)\r\n\r\n  world[$componentMap].set(component, { \r\n    generationId: world[$entityMasks].length - 1,\r\n    bitflag: world[$bitflag],\r\n    store: component\r\n  })\r\n\r\n  if (component[$storeSize] < world[$size]) {\r\n    resizeStore(component, world[$size])\r\n  }\r\n\r\n  incrementBitflag(world)\r\n}\r\n\r\nexport const registerComponents = (world, components) => {\r\n  components.forEach(c => registerComponent(world, c))\r\n}\r\n\r\nexport const hasComponent = (world, component, eid) => {\r\n  const registeredComponent = world[$componentMap].get(component)\r\n  if (!registeredComponent) return\r\n  const { generationId, bitflag } = registeredComponent\r\n  const mask = world[$entityMasks][generationId][eid]\r\n  return (mask & bitflag) === bitflag\r\n}\r\n\r\nexport const addComponent = (world, component, eid, reset=false) => {\r\n  if (!Number.isInteger(eid)) {\r\n    component = world\r\n    world = eidToWorld.get(eid)\r\n    reset = eid || reset\r\n  }\r\n  if (!world[$componentMap].has(component)) registerComponent(world, component)\r\n  if (hasComponent(world, component, eid)) return\r\n  // Add bitflag to entity bitmask\r\n  const { generationId, bitflag } = world[$componentMap].get(component)\r\n  world[$entityMasks][generationId][eid] |= bitflag\r\n\r\n  // todo: archetype graph\r\n  world[$queries].forEach(q => {\r\n    if (!queryCheckComponent(world, q, component)) return\r\n    const match = queryCheckEntity(world, q, eid)\r\n    if (match) queryAddEntity(q, eid)\r\n  })\r\n  \r\n  // Zero out each property value\r\n  if (reset) resetStoreFor(component, eid)\r\n}\r\n\r\nexport const removeComponent = (world, component, eid, reset=true) => {\r\n  if (!Number.isInteger(eid)) {\r\n    component = world\r\n    world = eidToWorld.get(eid)\r\n    reset = eid || reset\r\n  }\r\n  const { generationId, bitflag } = world[$componentMap].get(component)\r\n\r\n  if (!(world[$entityMasks][generationId][eid] & bitflag)) return\r\n\r\n  // todo: archetype graph\r\n  world[$queries].forEach(q => {\r\n    if (!queryCheckComponent(world, q, component)) return\r\n    const match = queryCheckEntity(world, q, eid)\r\n    if (match) queryRemoveEntity(world, q, eid)\r\n  })\r\n\r\n  // Remove flag from entity bitmask\r\n  world[$entityMasks][generationId][eid] &= ~bitflag\r\n  \r\n  // Zero out each property value\r\n  if (reset) resetStoreFor(component, eid)\r\n}\r\n", "import { $componentMap } from './Component.js'\r\nimport { $queryMap, $queries, $dirtyQueries } from './Query.js'\r\nimport { $entityArray, $entityIndices, $entityEnabled, $entityMasks, $entitySparseSet, getGlobalSize, removeEntity } from './Entity.js'\r\nimport { resize } from './Storage.js'\r\nimport { SparseSet, Uint32SparseSet } from './Util.js'\r\n\r\nexport const $size = Symbol('size')\r\nexport const $resizeThreshold = Symbol('resizeThreshold')\r\nexport const $bitflag = Symbol('bitflag')\r\nexport const $archetypes = Symbol('archetypes')\r\nexport const $localEntities = Symbol('localEntities')\r\n\r\nexport const worlds = []\r\n\r\nexport const resizeWorlds = (size) => {\r\n  worlds.forEach(world => {\r\n    world[$size] = size\r\n\r\n    // resize(world[$entitySparseSet].sparse, size)\r\n    // resize(world[$entitySparseSet].dense, size)\r\n    \r\n    for (let i = 0; i < world[$entityMasks].length; i++) {\r\n      const masks = world[$entityMasks][i];\r\n      world[$entityMasks][i] = resize(masks, size)\r\n    }\r\n    \r\n    world[$resizeThreshold] = world[$size] - (world[$size] / 5)\r\n  })\r\n}\r\n\r\nexport const createWorld = () => {\r\n  const world = {}\r\n  resetWorld(world)\r\n  worlds.push(world)\r\n  return world\r\n}\r\n\r\nexport const resetWorld = (world) => {\r\n  const size = getGlobalSize()\r\n  world[$size] = size\r\n\r\n  if (world[$entityArray]) world[$entityArray].forEach(eid => removeEntity(world, eid))\r\n\r\n  world[$entityMasks] = [new Uint32Array(size)]\r\n  world[$archetypes] = []\r\n\r\n  world[$entitySparseSet] = SparseSet()\r\n  // world[$entitySparseSet] = Uint32SparseSet(size)\r\n  world[$entityArray] = world[$entitySparseSet].dense\r\n\r\n  world[$bitflag] = 1\r\n\r\n  world[$componentMap] = new Map()\r\n\r\n  world[$queryMap] = new Map()\r\n  world[$queries] = new Set()\r\n  world[$dirtyQueries] = new Set()\r\n\r\n  world[$localEntities] = new Map()\r\n\r\n  return world\r\n}\r\n\r\nexport const deleteWorld = (world) => {\r\n  delete world[$size]\r\n  delete world[$archetypes]\r\n  delete world[$entityMasks]\r\n  delete world[$entityArray]\r\n  delete world[$entityIndices]\r\n  delete world[$bitflag]\r\n  delete world[$componentMap]\r\n  delete world[$queryMap]\r\n  delete world[$queries]\r\n  delete world[$dirtyQueries]\r\n  Object.keys(world).forEach(key => {\r\n    delete world[key]\r\n  })\r\n  worlds.splice(worlds.indexOf(world), 1)\r\n}\r\n", "import { commitRemovals } from './Query.js'\r\n\r\nexport const defineSystem = (fn1, fn2) => {\r\n  const update = fn2 !== undefined ? fn2 : fn1\r\n  const create = fn2 !== undefined ? fn1 : undefined\r\n  const init = new Set()\r\n  const system = (world, ...args) => {\r\n    if (create && !init.has(world)) {\r\n      create(world, ...args)\r\n      init.add(world)\r\n    }\r\n    update(world, ...args)\r\n    commitRemovals(world)\r\n    return world\r\n  }\r\n\r\n  Object.defineProperty(system, 'name', {\r\n    value: (update.name || \"AnonymousSystem\") + \"_internal\",\r\n    configurable: true,\r\n  })\r\n\r\n  return system\r\n}", "import { createWorld, resetWorld, deleteWorld } from './World.js'\r\nimport { addEntity, removeEntity, setDefaultSize } from './Entity.js'\r\nimport { defineComponent, registerComponent, registerComponents, hasComponent, addComponent, removeComponent } from './Component.js'\r\nimport { defineSystem } from './System.js'\r\nimport { defineQuery, enterQuery, exitQuery, Changed, Not, commitRemovals, resetChangedQuery, removeQuery } from './Query.js'\r\nimport { defineSerializer, defineDeserializer, DESERIALIZE_MODE } from './Serialize.js'\r\nimport { TYPES_ENUM, parentArray } from './Storage.js'\r\n\r\nexport const pipe = (...fns) => (...args) => {\r\n  const input = Array.isArray(args[0]) ? args[0] : args\r\n  if (!input || input.length === 0) return\r\n  fns = Array.isArray(fns[0]) ? fns[0] : fns\r\n  let tmp = input\r\n  for (let i = 0; i < fns.length; i++) {\r\n    const fn = fns[i]\r\n    if (Array.isArray(tmp)) {\r\n      // tmp = tmp.reduce((a,v) => a.concat(fn(v)),[])\r\n      tmp = fn(...tmp)\r\n    } else {\r\n      tmp = fn(tmp)\r\n    }\r\n  }\r\n  return tmp\r\n}\r\n\r\nexport const Types = TYPES_ENUM\r\n\r\nexport {\r\n\r\n  setDefaultSize,\r\n  createWorld,\r\n  resetWorld,\r\n  deleteWorld,\r\n  addEntity,\r\n  removeEntity,\r\n\r\n  registerComponent,\r\n  registerComponents,\r\n  defineComponent,\r\n  addComponent,\r\n  removeComponent,\r\n  hasComponent,\r\n  \r\n  defineQuery,\r\n  Changed,\r\n  Not,\r\n  // Or,\r\n  enterQuery,\r\n  exitQuery,\r\n  commitRemovals,\r\n  resetChangedQuery,\r\n  removeQuery,\r\n\r\n  defineSystem,\r\n  \r\n  defineSerializer,\r\n  defineDeserializer,\r\n  DESERIALIZE_MODE,\r\n\r\n  parentArray,\r\n\r\n}\r\n", "import { Types, defineComponent } from 'bitecs';\n\nconst QuadVertex = defineComponent({\n    tl: Types.ui32,\n    bl: Types.ui32,\n    br: Types.ui32,\n    tr: Types.ui32\n});\n\nexport const QuadVertexComponent = QuadVertex;\n", "import { Types, defineComponent } from 'bitecs';\n\nconst Extent2D = defineComponent({\n    x: Types.f32,\n    y: Types.f32,\n    width: Types.f32,\n    height: Types.f32,\n    right: Types.f32,\n    bottom: Types.f32\n});\n\nexport const Extent2DComponent = Extent2D;\n", "import { Types, defineComponent } from 'bitecs';\n\nconst Dirty = defineComponent({\n    frame: Types.ui32,\n    transform: Types.ui32,\n    update: Types.ui32,\n    childCache: Types.ui32,\n    postRender: Types.ui32,\n    bounds: Types.ui32,\n    texture: Types.ui32,\n    textureFrame: Types.ui32,\n    child: Types.ui32,\n    displayList: Types.ui32\n});\n\nexport const DirtyComponent = Dirty;\n", "import { createWorld } from 'bitecs';\n\nconst world = createWorld();\n\nexport const GameObjectWorld = world;\n", "import { DirtyComponent } from './DirtyComponent';\nimport { GameObjectWorld } from '../../GameObjectWorld';\nimport { addComponent } from 'bitecs';\n\nexport function AddDirtyComponent (id: number): void\n{\n    addComponent(GameObjectWorld, DirtyComponent, id);\n\n    DirtyComponent.frame[id] = 0;\n    DirtyComponent.transform[id] = 1;\n    DirtyComponent.update[id] = 1;\n    DirtyComponent.childCache[id] = 0;\n    DirtyComponent.postRender[id] = 0;\n    DirtyComponent.bounds[id] = 1;\n    DirtyComponent.texture[id] = 0;\n    DirtyComponent.textureFrame[id] = 0;\n    DirtyComponent.child[id] = 0;\n    DirtyComponent.displayList[id] = 0;\n}\n", "import { DirtyComponent } from './DirtyComponent';\n\nexport function ClearDirtyDisplayList (id: number): void\n{\n    DirtyComponent.displayList[id] = 0;\n}\n", "import { DirtyComponent } from './DirtyComponent';\n\nexport function HasDirtyChildCache (id: number): boolean\n{\n    return Boolean(DirtyComponent.childCache[id]);\n}\n", "import { DirtyComponent } from './DirtyComponent';\n\nexport function HasDirtyDisplayList (id: number): boolean\n{\n    return Boolean(DirtyComponent.displayList[id]);\n}\n", "import { DirtyComponent } from './DirtyComponent';\n\nexport function SetDirtyChildCache (id: number): void\n{\n    DirtyComponent.childCache[id] = 1;\n}\n", "import { DirtyComponent } from './DirtyComponent';\n\nexport function SetDirtyDisplayList (id: number): void\n{\n    DirtyComponent.displayList[id] = 1;\n}\n", "import { Game } from './Game';\n\nexport let instance: Game;\nexport let frame: number = 0;\nexport let elapsed: number = 0;\n\nexport const GameInstance =\n{\n    get: (): Game =>\n    {\n        return instance;\n    },\n\n    set: (game: Game | undefined): void =>\n    {\n        instance = game;\n    },\n\n    getFrame: (): number =>\n    {\n        return frame;\n    },\n\n    setFrame: (current: number): void =>\n    {\n        frame = current;\n    },\n\n    getElapsed: (): number =>\n    {\n        return elapsed;\n    },\n\n    setElapsed: (current: number): void =>\n    {\n        elapsed = current;\n    }\n\n};\n", "import { Types, defineComponent } from 'bitecs';\n\nconst Hierarchy = defineComponent({\n    worldID: Types.ui32,\n    parentID: Types.ui32,\n    numChildren: Types.ui32,\n    depth: Types.ui32\n});\n\nexport const HierarchyComponent = Hierarchy;\n", "import { GameObjectWorld } from '../../GameObjectWorld';\nimport { HierarchyComponent } from './HierarchyComponent';\nimport { addComponent } from 'bitecs';\n\nexport function AddHierarchyComponent (id: number): void\n{\n    addComponent(GameObjectWorld, HierarchyComponent, id);\n}\n", "import { IGameObject } from './IGameObject';\n\nexport const GameObjectCache: Map<number, IGameObject> = new Map();\n", "import { GetParentID, GetWorldID, HierarchyComponent, UpdateNumChildren } from './';\nimport { hasComponent, removeComponent } from 'bitecs';\n\nimport { GameObjectCache } from '../../gameobjects/GameObjectCache';\nimport { GameObjectWorld } from '../../GameObjectWorld';\nimport { IBaseWorld } from '../../world/IBaseWorld';\nimport { SetDirtyParents } from '../dirty';\n\nexport function ClearWorldAndParentID (id: number): void\n{\n    const worldID = GetWorldID(id);\n    const parentID = GetParentID(id);\n    const world = GameObjectCache.get(worldID) as IBaseWorld;\n\n    HierarchyComponent.worldID[id] = 0;\n    HierarchyComponent.parentID[id] = 0;\n\n    if (world && hasComponent(GameObjectWorld, world.tag, id))\n    {\n        removeComponent(GameObjectWorld, world.tag, id);\n    }\n\n    UpdateNumChildren(parentID);\n\n    SetDirtyParents(id);\n}\n", "import { Types, defineComponent } from 'bitecs';\n\nconst Bounds = defineComponent({\n    x: Types.f32,\n    y: Types.f32,\n    width: Types.f32,\n    height: Types.f32,\n    right: Types.f32,\n    bottom: Types.f32\n});\n\nexport const BoundsComponent = Bounds;\n", "import { Types, defineComponent } from 'bitecs';\n\nconst Color = defineComponent({\n    alpha: Types.f32,\n    tint: Types.ui32\n});\n\nexport const ColorComponent = Color;\n", "import { Types, defineComponent } from 'bitecs';\n\nconst Vertex = defineComponent({\n    x: Types.f32,\n    y: Types.f32,\n    z: Types.f32,\n    u: Types.f32,\n    v: Types.f32,\n    texture: Types.ui8,\n    tint: Types.ui32,\n    alpha: Types.f32,\n    color: Types.ui32,\n    offset: Types.f32\n});\n\nexport const VertexComponent = Vertex;\n", "import { createWorld } from 'bitecs';\n\nconst world = createWorld();\n\nexport const VertexWorld = world;\n", "import { VertexComponent } from './VertexComponent';\n\nexport function SetUV (id: number, u: number, v: number): void\n{\n    VertexComponent.u[id] = u;\n    VertexComponent.v[id] = v;\n}\n", "import { Types, defineComponent } from 'bitecs';\n\nconst WorldMatrix2D = defineComponent({\n    a: Types.f32,\n    b: Types.f32,\n    c: Types.f32,\n    d: Types.f32,\n    tx: Types.f32,\n    ty: Types.f32\n});\n\nexport const WorldMatrix2DComponent = WorldMatrix2D;\n", "import { Changed, IWorld, defineQuery, defineSystem } from 'bitecs';\n\nimport { BoundsComponent } from '../bounds/BoundsComponent';\nimport { Extent2DComponent } from '../transform/Extent2DComponent';\nimport { QuadVertexComponent } from './QuadVertexComponent';\nimport { VertexComponent } from './VertexComponent';\nimport { WorldMatrix2DComponent } from '../transform/WorldMatrix2DComponent';\n\nconst changedWorldExtentQuery = defineQuery([\n    Changed(WorldMatrix2DComponent),\n    Changed(Extent2DComponent)\n]);\n\nlet entities: number[];\n\nconst updateVertexPositionSystem = defineSystem(world =>\n{\n    for (let i = 0; i < entities.length; i++)\n    {\n        const id = entities[i];\n\n        const a = WorldMatrix2DComponent.a[id];\n        const b = WorldMatrix2DComponent.b[id];\n        const c = WorldMatrix2DComponent.c[id];\n        const d = WorldMatrix2DComponent.d[id];\n        const tx = WorldMatrix2DComponent.tx[id];\n        const ty = WorldMatrix2DComponent.ty[id];\n\n        const x = Extent2DComponent.x[id];\n        const y = Extent2DComponent.y[id];\n        const right = Extent2DComponent.right[id];\n        const bottom = Extent2DComponent.bottom[id];\n\n        const v1 = QuadVertexComponent.tl[id];\n        const v2 = QuadVertexComponent.bl[id];\n        const v3 = QuadVertexComponent.br[id];\n        const v4 = QuadVertexComponent.tr[id];\n\n        const x0 = (x * a) + (y * c) + tx;\n        const y0 = (x * b) + (y * d) + ty;\n\n        const x1 = (x * a) + (bottom * c) + tx;\n        const y1 = (x * b) + (bottom * d) + ty;\n\n        const x2 = (right * a) + (bottom * c) + tx;\n        const y2 = (right * b) + (bottom * d) + ty;\n\n        const x3 = (right * a) + (y * c) + tx;\n        const y3 = (right * b) + (y * d) + ty;\n\n        VertexComponent.x[v1] = x0;\n        VertexComponent.y[v1] = y0;\n\n        VertexComponent.x[v2] = x1;\n        VertexComponent.y[v2] = y1;\n\n        VertexComponent.x[v3] = x2;\n        VertexComponent.y[v3] = y2;\n\n        VertexComponent.x[v4] = x3;\n        VertexComponent.y[v4] = y3;\n\n        BoundsComponent.x[id] = Math.min(x0, x1, x2, x3);\n        BoundsComponent.y[id] = Math.min(y0, y1, y2, y3);\n        BoundsComponent.right[id] = Math.max(x0, x1, x2, x3);\n        BoundsComponent.bottom[id] = Math.max(y0, y1, y2, y3);\n        BoundsComponent.width[id] = BoundsComponent.right[id] - BoundsComponent.x[id];\n        BoundsComponent.height[id] = BoundsComponent.bottom[id] - BoundsComponent.y[id];\n    }\n\n    return world;\n});\n\nexport const UpdateVertexPositionSystem = (world: IWorld): number[] =>\n{\n    entities = changedWorldExtentQuery(world);\n\n    updateVertexPositionSystem(world);\n\n    return entities;\n};\n\n", "export function PackColor (rgb: number, alpha: number): number\n{\n    const ua = ((alpha * 255) | 0) & 0xFF;\n\n    return ((ua << 24) | rgb) >>> 0;\n}\n", "import { Changed, defineQuery, defineSystem } from 'bitecs';\nimport { QuadVertexComponent, VertexComponent } from '../vertices';\n\nimport { ColorComponent } from './ColorComponent';\nimport { PackColor } from '../../renderer/webgl1';\n\nconst changedColorQuery = defineQuery([ Changed(ColorComponent), QuadVertexComponent ]);\n\nconst packQuadColorsSystem = defineSystem(world =>\n{\n    const entities = changedColorQuery(world);\n\n    for (let i = 0; i < entities.length; i++)\n    {\n        const id = entities[i];\n\n        const v1 = QuadVertexComponent.tl[id];\n        const v2 = QuadVertexComponent.bl[id];\n        const v3 = QuadVertexComponent.br[id];\n        const v4 = QuadVertexComponent.tr[id];\n\n        const color = PackColor(ColorComponent.tint[id], ColorComponent.alpha[id]);\n\n        VertexComponent.color[v1] = color;\n        VertexComponent.color[v2] = color;\n        VertexComponent.color[v3] = color;\n        VertexComponent.color[v4] = color;\n    }\n\n    return world;\n});\n\nexport const PackQuadColorsSystem = packQuadColorsSystem;\n", "import { Types, defineComponent } from 'bitecs';\n\nconst Permissions = defineComponent({\n    visible: Types.ui8,\n    visibleChildren: Types.ui8,\n    willUpdate: Types.ui8,\n    willUpdateChildren: Types.ui8,\n    willRender: Types.ui8,\n    willRenderChildren: Types.ui8,\n    willCacheChildren: Types.ui8,\n    willTransformChildren: Types.ui8\n});\n\nexport const PermissionsComponent = Permissions;\n", "import { GameObjectWorld } from '../../GameObjectWorld';\nimport { PermissionsComponent } from './PermissionsComponent';\nimport { addComponent } from 'bitecs';\n\nexport function AddPermissionsComponent (id: number): void\n{\n    addComponent(GameObjectWorld, PermissionsComponent, id);\n\n    PermissionsComponent.visible[id] = 1;\n    PermissionsComponent.visibleChildren[id] = 1;\n    PermissionsComponent.willUpdate[id] = 1;\n    PermissionsComponent.willUpdateChildren[id] = 1;\n    PermissionsComponent.willRender[id] = 1;\n    PermissionsComponent.willRenderChildren[id] = 1;\n    PermissionsComponent.willCacheChildren[id] = 0;\n    PermissionsComponent.willTransformChildren[id] = 1;\n}\n", "import { PermissionsComponent } from './PermissionsComponent';\n\nexport function WillCacheChildren (id: number): boolean\n{\n    return Boolean(PermissionsComponent.willCacheChildren[id]);\n}\n", "import { PermissionsComponent } from './PermissionsComponent';\n\nexport function WillRender (id: number): boolean\n{\n    return Boolean(PermissionsComponent.visible[id]) && Boolean(PermissionsComponent.willRender[id]);\n}\n", "import { PermissionsComponent } from './PermissionsComponent';\n\nexport function WillRenderChildren (id: number): boolean\n{\n    return Boolean(PermissionsComponent.visibleChildren[id]) && Boolean(PermissionsComponent.willRenderChildren[id]);\n}\n", "import { PermissionsComponent } from './PermissionsComponent';\n\nexport function WillUpdate (id: number): boolean\n{\n    return Boolean(PermissionsComponent.willUpdate[id]);\n}\n", "import { PermissionsComponent } from './PermissionsComponent';\n\nexport function WillUpdateChildren (id: number): boolean\n{\n    return Boolean(PermissionsComponent.willUpdateChildren[id]);\n}\n", "import { Types, defineComponent } from 'bitecs';\n\nconst LocalMatrix2D = defineComponent({\n    a: Types.f32,\n    b: Types.f32,\n    c: Types.f32,\n    d: Types.f32,\n    tx: Types.f32,\n    ty: Types.f32,\n    dirty: Types.ui32\n});\n\nexport const LocalMatrix2DComponent = LocalMatrix2D;\n", "import { Types, defineComponent } from 'bitecs';\n\nconst Transform2D = defineComponent({\n    x: Types.f32,\n    y: Types.f32,\n    rotation: Types.f32,\n    scaleX: Types.f32,\n    scaleY: Types.f32,\n    skewX: Types.f32,\n    skewY: Types.f32,\n    originX: Types.f32,\n    originY: Types.f32\n});\n\nexport const Transform2DComponent = Transform2D;\n", "import { IVec2 } from './IVec2';\n\nexport function Vec2FromArray (dst: IVec2, src: Float32List = [], index: number = 0): IVec2\n{\n    return dst.set(\n        src[ index ],\n        src[ index + 1 ]\n    );\n}\n", "import { IVec2Like } from './IVec2Like';\n\nexport function Vec2ToArray (v: IVec2Like, dst: Float32List = [], index: number = 0): Float32List\n{\n    dst[ index ] = v.x;\n    dst[ index + 1 ] = v.y;\n\n    return dst;\n}\n", "import { IVec2 } from './IVec2';\nimport { Vec2FromArray } from './Vec2FromArray';\nimport { Vec2ToArray } from './Vec2ToArray';\n\nexport class Vec2 implements IVec2\n{\n    x: number;\n    y: number;\n\n    constructor (x: number = 0, y: number = 0)\n    {\n        this.set(x, y);\n    }\n\n    set (x: number = 0, y: number = 0): this\n    {\n        this.x = x;\n        this.y = y;\n\n        return this;\n    }\n\n    toArray (dst: Float32List = [], index: number = 0): Float32List\n    {\n        return Vec2ToArray(this, dst, index);\n    }\n\n    fromArray (src: Float32List, index: number = 0): this\n    {\n        Vec2FromArray(this, src, index);\n\n        return this;\n    }\n\n    toString (): string\n    {\n        return `{ x=${this.x}, y=${this.y} }`;\n    }\n}\n", "import { GameObjectWorld } from '../../GameObjectWorld';\nimport { LocalMatrix2DComponent } from './LocalMatrix2DComponent';\nimport { hasComponent } from 'bitecs';\n\nexport function InvalidateLocalMatrix2DComponent (id: number): void\n{\n    if (hasComponent(GameObjectWorld, LocalMatrix2DComponent, id))\n    {\n        LocalMatrix2DComponent.dirty[id]++;\n    }\n}\n", "export const DIRTY_CONST = {\n\n    CLEAR: 0,\n    TRANSFORM: 1,\n    UPDATE: 2,\n    CHILD_CACHE: 4,\n    POST_RENDER: 8,\n    COLORS: 16,\n    BOUNDS: 32,\n    TEXTURE: 64,\n    FRAME: 128,\n    ALPHA: 256,\n    CHILD: 512,\n\n    //  Special combinations\n    DEFAULT: 1 + 2 + 16 + 32,\n\n    //  Reserved for future use:\n    //  1024\n    //  2048\n    //  4096\n    //  8192\n    //  16384\n    //  32768\n    //  65536\n    //  131072\n    //  262144\n    //  524288\n    //  1048576\n    //  2097152\n    //  4194304\n    //  8388608\n    //  16777216\n    //  33554432\n    //  67108864\n    //  134217728\n    //  268435456\n\n    //  Reserved for user use\n    USER1: 536870912,\n    USER2: 1073741824,\n    USER3: 2147483648,\n    USER4: 4294967296\n\n};\n", "import { Changed, IWorld, defineQuery, defineSystem } from 'bitecs';\n\nimport { GetParentID } from '../hierarchy';\nimport { LocalMatrix2DComponent } from './LocalMatrix2DComponent';\nimport { SetDirtyParents } from '../dirty';\nimport { Transform2DComponent } from './Transform2DComponent';\n\nconst changedLocalTransformQuery = defineQuery([ Changed(Transform2DComponent) ]);\n\nlet entities: number[];\n\nconst updateLocalTransformSystem = defineSystem(world =>\n{\n    let prevParent: number = 0;\n\n    for (let i = 0; i < entities.length; i++)\n    {\n        const id = entities[i];\n\n        const x = Transform2DComponent.x[id];\n        const y = Transform2DComponent.y[id];\n        const rotation = Transform2DComponent.rotation[id];\n        const scaleX = Transform2DComponent.scaleX[id];\n        const scaleY = Transform2DComponent.scaleY[id];\n        const skewX = Transform2DComponent.skewX[id];\n        const skewY = Transform2DComponent.skewY[id];\n\n        LocalMatrix2DComponent.a[id] = Math.cos(rotation + skewY) * scaleX;\n        LocalMatrix2DComponent.b[id] = Math.sin(rotation + skewY) * scaleX;\n        LocalMatrix2DComponent.c[id] = -Math.sin(rotation - skewX) * scaleY;\n        LocalMatrix2DComponent.d[id] = Math.cos(rotation - skewX) * scaleY;\n        LocalMatrix2DComponent.tx[id] = x;\n        LocalMatrix2DComponent.ty[id] = y;\n\n        if (GetParentID(id) !== prevParent)\n        {\n            SetDirtyParents(id);\n\n            prevParent = GetParentID(id);\n        }\n    }\n\n    return world;\n});\n\nexport const UpdateLocalTransform2DSystem = (world: IWorld): number[] =>\n{\n    entities = changedLocalTransformQuery(world);\n\n    updateLocalTransformSystem(world);\n\n    return entities;\n};\n", "import { LocalMatrix2DComponent } from './LocalMatrix2DComponent';\nimport { WorldMatrix2DComponent } from './WorldMatrix2DComponent';\n\nexport function CopyLocalToWorld (source: number, target: number): void\n{\n    WorldMatrix2DComponent.a[target] = LocalMatrix2DComponent.a[source];\n    WorldMatrix2DComponent.b[target] = LocalMatrix2DComponent.b[source];\n    WorldMatrix2DComponent.c[target] = LocalMatrix2DComponent.c[source];\n    WorldMatrix2DComponent.d[target] = LocalMatrix2DComponent.d[source];\n    WorldMatrix2DComponent.tx[target] = LocalMatrix2DComponent.tx[source];\n    WorldMatrix2DComponent.ty[target] = LocalMatrix2DComponent.ty[source];\n}\n", "import { WorldMatrix2DComponent } from './WorldMatrix2DComponent';\n\nexport function CopyWorldToWorld (source: number, target: number): void\n{\n    WorldMatrix2DComponent.a[target] = WorldMatrix2DComponent.a[source];\n    WorldMatrix2DComponent.b[target] = WorldMatrix2DComponent.b[source];\n    WorldMatrix2DComponent.c[target] = WorldMatrix2DComponent.c[source];\n    WorldMatrix2DComponent.d[target] = WorldMatrix2DComponent.d[source];\n    WorldMatrix2DComponent.tx[target] = WorldMatrix2DComponent.tx[source];\n    WorldMatrix2DComponent.ty[target] = WorldMatrix2DComponent.ty[source];\n}\n", "import { LocalMatrix2DComponent } from './LocalMatrix2DComponent';\nimport { WorldMatrix2DComponent } from './WorldMatrix2DComponent';\n\nexport function MultiplyLocalWithWorld (parentID: number, id: number): void\n{\n    const pa = WorldMatrix2DComponent.a[parentID];\n    const pb = WorldMatrix2DComponent.b[parentID];\n    const pc = WorldMatrix2DComponent.c[parentID];\n    const pd = WorldMatrix2DComponent.d[parentID];\n    const ptx = WorldMatrix2DComponent.tx[parentID];\n    const pty = WorldMatrix2DComponent.ty[parentID];\n\n    const a = LocalMatrix2DComponent.a[id];\n    const b = LocalMatrix2DComponent.b[id];\n    const c = LocalMatrix2DComponent.c[id];\n    const d = LocalMatrix2DComponent.d[id];\n    const tx = LocalMatrix2DComponent.tx[id];\n    const ty = LocalMatrix2DComponent.ty[id];\n\n    WorldMatrix2DComponent.a[id] = a * pa + b * pc;\n    WorldMatrix2DComponent.b[id] = a * pb + b * pd;\n    WorldMatrix2DComponent.c[id] = c * pa + d * pc;\n    WorldMatrix2DComponent.d[id] = c * pb + d * pd;\n    WorldMatrix2DComponent.tx[id] = tx * pa + ty * pc + ptx;\n    WorldMatrix2DComponent.ty[id] = tx * pb + ty * pd + pty;\n}\n", "import { PermissionsComponent } from './PermissionsComponent';\n\nexport function WillTransformChildren (id: number): boolean\n{\n    return Boolean(PermissionsComponent.willTransformChildren[id]);\n}\n", "import { CopyLocalToWorld } from './CopyLocalToWorld';\nimport { CopyWorldToWorld } from './CopyWorldToWorld';\nimport { GameObjectWorld } from '../../GameObjectWorld';\nimport { GetParentID } from '../hierarchy';\nimport { MultiplyLocalWithWorld } from './MultiplyLocalWithWorld';\nimport { Transform2DComponent } from './Transform2DComponent';\nimport { WillTransformChildren } from '../permissions/WillTransformChildren';\nimport { hasComponent } from 'bitecs';\n\nexport function UpdateWorldTransform (id: number): void\n{\n    const parentID = GetParentID(id);\n\n    if (!hasComponent(GameObjectWorld, Transform2DComponent, parentID))\n    {\n        CopyLocalToWorld(id, id);\n    }\n    else if (!WillTransformChildren(id))\n    {\n        CopyWorldToWorld(parentID, id);\n    }\n    else\n    {\n        MultiplyLocalWithWorld(parentID, id);\n    }\n}\n", "import { Changed, defineQuery, defineSystem } from 'bitecs';\n\nimport { CopyLocalToWorld } from './CopyLocalToWorld';\nimport { CopyWorldToWorld } from './CopyWorldToWorld';\nimport { GameObjectCache } from '../../gameobjects/GameObjectCache';\nimport { LocalMatrix2DComponent } from './LocalMatrix2DComponent';\nimport { MultiplyLocalWithWorld } from './MultiplyLocalWithWorld';\nimport { WillTransformChildren } from '../permissions/WillTransformChildren';\n\nconst changedWorldTransformQuery = defineQuery([ Changed(LocalMatrix2DComponent) ]);\n\nconst updateWorldTransformSystem = defineSystem(world =>\n{\n    const entities = changedWorldTransformQuery(world);\n\n    for (let i = 0; i < entities.length; i++)\n    {\n        const id = entities[i];\n        const gameObject = GameObjectCache.get(id);\n        const parent = gameObject.parent;\n\n        if (!parent)\n        {\n            CopyLocalToWorld(id, id);\n        }\n        else if (!WillTransformChildren(id))\n        {\n            CopyWorldToWorld(parent.id, id);\n        }\n        else\n        {\n            MultiplyLocalWithWorld(parent.id, id);\n        }\n    }\n\n    return world;\n});\n\nexport const UpdateWorldTransform2DSystem = updateWorldTransformSystem;\n", "import { BufferEntry } from '../draw/BufferEntry';\nimport { Flush } from './Flush';\nimport { IRenderPass } from './IRenderPass';\n\nexport function GetVertexBufferEntry (renderPass: IRenderPass, addToCount: number = 0): BufferEntry\n{\n    const buffer = renderPass.vertexbuffer.current;\n\n    //  If batch cannot take the size of this entry, flush it first\n    if (renderPass.count + addToCount >= buffer.batchSize)\n    {\n        Flush(renderPass);\n    }\n\n    const offset = renderPass.count * buffer.entryElementSize;\n\n    renderPass.count += addToCount;\n\n    return {\n        buffer,\n        F32: buffer.vertexViewF32,\n        U32: buffer.vertexViewU32,\n        offset\n    };\n}\n", "import { GameObjectCache, GameObjectTree } from '../gameobjects';\n\nimport { ClearWorldAndParentID } from '../components/hierarchy';\nimport { IGameObject } from '../gameobjects/IGameObject';\n\nexport function RemoveChildrenBetween <P extends IGameObject> (parent: P, beginIndex: number = 0, endIndex?: number): IGameObject[]\n{\n    const children = GameObjectTree.get(parent.id);\n\n    if (endIndex === undefined)\n    {\n        endIndex = children.length;\n    }\n\n    const range = endIndex - beginIndex;\n\n    if (range > 0 && range <= endIndex)\n    {\n        const removed = children.splice(beginIndex, range);\n\n        removed.forEach(childID =>\n        {\n            ClearWorldAndParentID(childID);\n        });\n\n        return removed.map(id => GameObjectCache.get(id));\n    }\n    else\n    {\n        return [];\n    }\n}\n", "import { IGameObject } from '../gameobjects/IGameObject';\nimport { RemoveChildrenBetween } from './RemoveChildrenBetween';\nimport { SetDirtyWorldDisplayList } from '../components/dirty';\n\nexport function DestroyChildren <T extends IGameObject> (parent: T, beginIndex: number = 0, endIndex?: number): void\n{\n    const removed = RemoveChildrenBetween(parent, beginIndex, endIndex);\n\n    removed.forEach(child =>\n    {\n        child.destroy();\n    });\n\n    SetDirtyWorldDisplayList(parent.id);\n}\n", "import { IGameObject } from '../IGameObject';\n\nexport const DestroyEvent: string = 'destroy';\n\nexport type DestroyEventHandler = <T extends IGameObject> (child: T) => void;\n", "import { IEventEmitter } from './IEventEmitter';\nimport { IEventInstance } from './IEventInstance';\n\nexport function Emit (emitter: IEventEmitter, event: string, ...args: unknown[]): boolean\n{\n    if (emitter.events.size === 0 || !emitter.events.has(event))\n    {\n        return false;\n    }\n\n    const listeners: Set<IEventInstance> = emitter.events.get(event);\n\n    //  Convert to an array so the callbacks cannot impact what we're iterating\n    //  It works, but generates gc\n    const handlers = [ ...listeners ];\n\n    for (const ee of handlers)\n    {\n        ee.callback.apply(ee.context, args);\n\n        if (ee.once)\n        {\n            listeners.delete(ee);\n        }\n    }\n\n    if (listeners.size === 0)\n    {\n        emitter.events.delete(event);\n    }\n\n    return true;\n}\n", "export const GameObjectTree: Map<number, number[]> = new Map();\n", "import { HierarchyComponent } from './HierarchyComponent';\n\nexport function GetParentID (id: number): number\n{\n    return HierarchyComponent.parentID[id];\n}\n", "import { GetParentID } from '../components/hierarchy/GetParentID';\nimport { IGameObject } from '../gameobjects/IGameObject';\n\nexport function IsValidParent <P extends IGameObject, C extends IGameObject> (parent: P, child: C): boolean\n{\n    //  It's not a valid parent if the ID matches the parent, or it's already the child's parent\n    return !(child.id === parent.id || parent.id === GetParentID(child.id));\n}\n", "import { GameObjectTree } from '../gameobjects/GameObjectTree';\nimport { GetParentID } from '../components/hierarchy';\nimport { IGameObject } from '../gameobjects/IGameObject';\n\nexport function GetChildIndex <T extends IGameObject> (child: T): number\n{\n    const childID = child.id;\n\n    return GameObjectTree.get(GetParentID(childID)).indexOf(childID);\n}\n", "import { ClearWorldAndParentID } from '../components/hierarchy';\nimport { GameObjectCache } from '../gameobjects/GameObjectCache';\nimport { GameObjectTree } from '../gameobjects/GameObjectTree';\nimport { IGameObject } from '../gameobjects/IGameObject';\n\nexport function RemoveChildAt <T extends IGameObject> (parent: T, index: number): IGameObject | undefined\n{\n    const children = GameObjectTree.get(parent.id);\n\n    if (index >= 0 && index < children.length)\n    {\n        const removedID = children.splice(index, 1)[0];\n\n        if (removedID)\n        {\n            ClearWorldAndParentID(removedID);\n\n            //  Emit remove event?\n\n            return GameObjectCache.get(removedID);\n        }\n    }\n}\n", "import { GetChildIndex } from './GetChildIndex';\nimport { IGameObject } from '../gameobjects/IGameObject';\nimport { RemoveChildAt } from './RemoveChildAt';\n\nexport function RemoveChild <P extends IGameObject, C extends IGameObject> (parent: P, child: C): C\n{\n    if (parent && child.hasParent(parent.id))\n    {\n        RemoveChildAt(parent, GetChildIndex(child));\n    }\n\n    return child;\n}\n", "import { AddedToWorldEvent, RemovedFromWorldEvent } from '../gameobjects/events';\n\nimport { DepthFirstSearchFromParentID } from '../components/hierarchy/DepthFirstSearchFromParentID';\nimport { Emit } from '../events/Emit';\nimport { GameObjectWorld } from '../GameObjectWorld';\nimport { HierarchyComponent } from '../components/hierarchy/HierarchyComponent';\nimport { IBaseWorld } from '../world/IBaseWorld';\nimport { IGameObject } from '../gameobjects/IGameObject';\nimport { SetDirtyDisplayList } from '../components/dirty/SetDirtyDisplayList';\nimport { addComponent } from 'bitecs';\n\nexport function SetWorld <W extends IBaseWorld> (world: W, ...entries: IGameObject[]): IGameObject[]\n{\n    const worldID = world.id;\n    const worldTag = world.tag;\n\n    entries.forEach(entry =>\n    {\n        // if (entry.world)\n        // {\n        //     Emit(entry.world, RemovedFromWorldEvent, entry, entry.world);\n        //     Emit(entry, RemovedFromWorldEvent, entry, entry.world);\n        // }\n\n        addComponent(GameObjectWorld, worldTag, entry.id);\n\n        HierarchyComponent.worldID[entry.id] = worldID;\n\n        // Emit(world, AddedToWorldEvent, entry, world);\n        // Emit(entry, AddedToWorldEvent, entry, world);\n\n        //  Now set the World on any children\n        const children = DepthFirstSearchFromParentID(entry.id);\n\n        children.map(id =>\n        {\n            addComponent(GameObjectWorld, worldTag, id);\n\n            HierarchyComponent.worldID[id] = worldID;\n        });\n    });\n\n    SetDirtyDisplayList(worldID);\n\n    return entries;\n}\n", "import { GetWorldFromParentID, SetParentID } from '../components/hierarchy';\n\nimport { GameObjectTree } from '../gameobjects/GameObjectTree';\nimport { IGameObject } from '../gameobjects/IGameObject';\nimport { InvalidateLocalMatrix2DComponent } from '../components/transform';\nimport { IsValidParent } from './IsValidParent';\nimport { RemoveChild } from './RemoveChild';\nimport { SetDirtyParents } from '../components/dirty';\nimport { SetWorld } from './SetWorld';\n\nexport function AddChildAt <P extends IGameObject, C extends IGameObject> (parent: P, child: C, index: number = -1): C\n{\n    if (IsValidParent(parent, child))\n    {\n        const childID = child.id;\n        const parentID = parent.id;\n        const world = GetWorldFromParentID(parentID);\n\n        const children = GameObjectTree.get(parentID);\n\n        if (index === -1)\n        {\n            index = children.length;\n        }\n\n        if (index >= 0 && index <= children.length)\n        {\n            RemoveChild(child.getParent(), child);\n\n            //  Always modify the array before calling SetParentID\n            children.splice(index, 0, childID);\n\n            InvalidateLocalMatrix2DComponent(child.id);\n\n            if (world)\n            {\n                SetWorld(world, child);\n            }\n\n            SetParentID(childID, parentID);\n\n            SetDirtyParents(childID);\n        }\n    }\n\n    return child;\n}\n", "import { AddChildAt } from './AddChildAt';\nimport { IGameObject } from '../gameobjects/IGameObject';\n\n//  Adds all of the children to the given parent\n//  If already a child of the parent, it is skipped\n//  If already child of another parent, it is removed from it first\n\nexport function SetParent <P extends IGameObject> (parent: P, ...children: IGameObject[]): IGameObject[]\n{\n    children.forEach(child =>\n    {\n        AddChildAt(parent, child);\n    });\n\n    return children;\n}\n", "import { IGameObject } from '../gameobjects/IGameObject';\nimport { RemoveChildrenBetween } from './RemoveChildrenBetween';\nimport { SetParent } from './SetParent';\n\nexport function ReparentChildren <P extends IGameObject, T extends IGameObject> (parent: P, newParent: T, beginIndex: number = 0, endIndex?: number): IGameObject[]\n{\n    const moved = RemoveChildrenBetween(parent, beginIndex, endIndex);\n\n    SetParent(newParent, ...moved);\n\n    return moved;\n}\n", "import { AddHierarchyComponent, GetChildrenFromParentID, GetNumChildren, GetParentGameObject, HierarchyComponent } from '../components/hierarchy';\nimport { AddPermissionsComponent, PermissionsComponent, WillRender, WillUpdate, WillUpdateChildren } from '../components/permissions';\n\nimport { AddDirtyComponent } from '../components/dirty/AddDirtyComponent';\nimport { DestroyChildren } from '../display/DestroyChildren';\nimport { DestroyEvent } from './events/DestroyEvent';\nimport { Emit } from '../events/Emit';\nimport { GameObjectCache } from './GameObjectCache';\nimport { GameObjectTree } from './GameObjectTree';\nimport { GameObjectWorld } from '../GameObjectWorld';\nimport { ICanvasRenderer } from '../renderer/canvas/ICanvasRenderer';\nimport { IEventInstance } from '../events/IEventInstance';\nimport { IGameObject } from './IGameObject';\nimport { IRenderPass } from '../renderer/webgl1/renderpass/IRenderPass';\nimport { ReparentChildren } from '../display/ReparentChildren';\nimport { SetDirtyParents } from '../components/dirty';\nimport { addEntity } from 'bitecs';\n\nexport class GameObject implements IGameObject\n{\n    readonly id: number = addEntity(GameObjectWorld);\n\n    readonly type: string = 'GameObject';\n\n    //  User defined name. Never used internally.\n    name: string = '';\n\n    events: Map<string, Set<IEventInstance>>;\n\n    constructor ()\n    {\n        const id = this.id;\n\n        AddHierarchyComponent(id);\n        AddPermissionsComponent(id);\n        AddDirtyComponent(id);\n\n        GameObjectCache.set(id, this);\n        GameObjectTree.set(id, []);\n\n        this.events = new Map();\n    }\n\n    isRenderable (): boolean\n    {\n        return WillRender(this.id);\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    beforeUpdate (delta: number, time: number): void\n    {\n        //  Empty for parent classes to use.\n        //  Called before this GameObject and all of its children have been updated.\n    }\n\n    update (delta: number, time: number): void\n    {\n        this.beforeUpdate(delta, time);\n\n        if (WillUpdateChildren(this.id))\n        {\n            const children = GameObjectTree.get(this.id);\n\n            for (let i = 0; i < children.length; i++)\n            {\n                const childID = children[i];\n\n                if (WillUpdate(childID))\n                {\n                    GameObjectCache.get(childID).update(delta, time);\n                }\n            }\n        }\n\n        this.afterUpdate(delta, time);\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    afterUpdate (delta: number, time: number): void\n    {\n        //  Empty for parent classes to use.\n        //  Called after this GameObject and all of its children have been updated.\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    renderGL <T extends IRenderPass> (renderPass: T): void\n    {\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    renderCanvas <T extends ICanvasRenderer> (renderer: T): void\n    {\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    postRenderGL <T extends IRenderPass> (renderPass: T): void\n    {\n        //  Called after this GameObject and all of its children have been rendered.\n        //  If it doesn't have any children, this method is never called.\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    postRenderCanvas <T extends ICanvasRenderer> (renderer: T): void\n    {\n        //  Called after this GameObject and all of its children have been rendered.\n        //  If it doesn't have any children, this method is never called.\n    }\n\n    set visible (value: boolean)\n    {\n        PermissionsComponent.visible[this.id] = Number(value);\n\n        SetDirtyParents(this.id);\n    }\n\n    get visible (): boolean\n    {\n        return Boolean(PermissionsComponent.visible[this.id]);\n    }\n\n    set visibleChildren (value: boolean)\n    {\n        PermissionsComponent.visibleChildren[this.id] = Number(value);\n\n        SetDirtyParents(this.id);\n    }\n\n    get visibleChildren (): boolean\n    {\n        return Boolean(PermissionsComponent.visibleChildren[this.id]);\n    }\n\n    set depth (value: number)\n    {\n        HierarchyComponent.depth[this.id] = value;\n    }\n\n    get depth (): number\n    {\n        return HierarchyComponent.depth[this.id];\n    }\n\n    hasParent (id?: number): boolean\n    {\n        if (id)\n        {\n            return (HierarchyComponent.parentID[this.id] === id);\n        }\n        else\n        {\n            return (HierarchyComponent.parentID[this.id] > 0);\n        }\n    }\n\n    getParent (): IGameObject | undefined\n    {\n        return GetParentGameObject(this.id);\n    }\n\n    getChildren (): IGameObject[]\n    {\n        return GetChildrenFromParentID(this.id);\n    }\n\n    getNumChildren (): number\n    {\n        return GetNumChildren(this.id);\n    }\n\n    toString (): string\n    {\n        return `${this.type} id=\"${this.id}\" name=\"${this.name}\"`;\n    }\n\n    destroy <P extends IGameObject> (reparentChildren?: P): void\n    {\n        if (reparentChildren)\n        {\n            ReparentChildren(this, reparentChildren);\n        }\n        else\n        {\n            DestroyChildren(this);\n        }\n\n        Emit(this, DestroyEvent, this);\n\n        this.events.clear();\n\n        this.events = null;\n\n        //  TODO - Destroy process, remove from Cache, Tree, etc.\n    }\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { IRectangle } from './IRectangle';\n\n/**\n * Checks if a given point is inside a Rectangle's bounds.\n */\nexport function RectangleContains (rect: IRectangle, x: number, y: number): boolean\n{\n    if (rect.width <= 0 || rect.height <= 0)\n    {\n        return false;\n    }\n\n    return (rect.x <= x && rect.x + rect.width >= x && rect.y <= y && rect.y + rect.height >= y);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { RectangleContains } from './RectangleContains';\n\nexport class Rectangle\n{\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n\n    constructor (x: number = 0, y: number = 0, width: number = 0, height: number = 0)\n    {\n        this.set(x, y, width, height);\n    }\n\n    set (x: number = 0, y: number = 0, width: number = 0, height: number = 0): this\n    {\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n\n        return this;\n    }\n\n    contains (x: number, y: number): boolean\n    {\n        return RectangleContains(this, x, y);\n    }\n\n    set right (value: number)\n    {\n        if (value <= this.x)\n        {\n            this.width = 0;\n        }\n        else\n        {\n            this.width = value - this.x;\n        }\n    }\n\n    get right (): number\n    {\n        return this.x + this.width;\n    }\n\n    set bottom (value: number)\n    {\n        if (value <= this.y)\n        {\n            this.height = 0;\n        }\n        else\n        {\n            this.height = value - this.y;\n        }\n    }\n\n    get bottom (): number\n    {\n        return this.y + this.height;\n    }\n}\n", "import { TextureManager } from './TextureManager';\n\nlet instance: TextureManager;\n\nexport const TextureManagerInstance =\n{\n    get: (): TextureManager =>\n    {\n        return instance;\n    },\n\n    set: (manager: TextureManager | null): void =>\n    {\n        instance = manager;\n    }\n};\n", "import { Texture } from './Texture';\nimport { TextureManagerInstance } from './TextureManagerInstance';\n\nexport function GetTexture (key: string): Texture\n{\n    return TextureManagerInstance.get().get(key);\n}\n", "import { GetVertexBufferEntry } from '../renderpass/GetVertexBufferEntry';\nimport { IFrame } from '../../../textures/IFrame';\nimport { IRenderPass } from '../renderpass/IRenderPass';\nimport { ITexture } from '../../../textures/ITexture';\nimport { PackColor } from '../colors/PackColor';\n\nexport function DrawFrame (renderPass: IRenderPass, texture: ITexture, frame: string | number | IFrame, x: number, y: number, alpha: number = 1, scaleX: number = 1, scaleY: number = 1): void\n{\n    const { F32, U32, offset } = GetVertexBufferEntry(renderPass, 1);\n\n    const packedColor = PackColor(0xffffff, alpha);\n\n    frame = texture.getFrame(frame);\n\n    const textureIndex = renderPass.textures.set(texture);\n\n    const displayWidth = frame.width * scaleX;\n    const displayHeight = frame.height * scaleY;\n\n    //  top left\n    F32[offset + 0] = x;\n    F32[offset + 1] = y;\n    F32[offset + 2] = frame.u0;\n    F32[offset + 3] = frame.v0;\n    F32[offset + 4] = textureIndex;\n    U32[offset + 5] = packedColor;\n\n    //  bottom left\n    F32[offset + 6] = x;\n    F32[offset + 7] = y + displayHeight;\n    F32[offset + 8] = frame.u0;\n    F32[offset + 9] = frame.v1;\n    F32[offset + 10] = textureIndex;\n    U32[offset + 11] = packedColor;\n\n    //  bottom right\n    F32[offset + 12] = x + displayWidth;\n    F32[offset + 13] = y + displayHeight;\n    F32[offset + 14] = frame.u1;\n    F32[offset + 15] = frame.v1;\n    F32[offset + 16] = textureIndex;\n    U32[offset + 17] = packedColor;\n\n    //  top right\n    F32[offset + 18] = x + displayWidth;\n    F32[offset + 19] = y;\n    F32[offset + 20] = frame.u1;\n    F32[offset + 21] = frame.v0;\n    F32[offset + 22] = textureIndex;\n    U32[offset + 23] = packedColor;\n}\n", "import { GetVertexBufferEntry } from '../renderpass/GetVertexBufferEntry';\nimport { IFrame } from '../../../textures/IFrame';\nimport { IRenderPass } from '../renderpass/IRenderPass';\nimport { ITexture } from '../../../textures/ITexture';\nimport { PackColor } from '../colors/PackColor';\n\nexport function DrawImage (renderPass: IRenderPass, texture: ITexture, x: number, y: number, alpha: number = 1, scaleX: number = 1, scaleY: number = 1): void\n{\n    const { F32, U32, offset } = GetVertexBufferEntry(renderPass, 1);\n\n    const packedColor = PackColor(0xffffff, alpha);\n\n    const frame: IFrame = texture.firstFrame;\n\n    const textureIndex = renderPass.textures.set(texture);\n\n    const displayWidth = frame.width * scaleX;\n    const displayHeight = frame.height * scaleY;\n\n    //  top left\n    F32[offset + 0] = x;\n    F32[offset + 1] = y;\n    F32[offset + 2] = frame.u0;\n    F32[offset + 3] = frame.v0;\n    F32[offset + 4] = textureIndex;\n    U32[offset + 5] = packedColor;\n\n    //  bottom left\n    F32[offset + 6] = x;\n    F32[offset + 7] = y + displayHeight;\n    F32[offset + 8] = frame.u0;\n    F32[offset + 9] = frame.v1;\n    F32[offset + 10] = textureIndex;\n    U32[offset + 11] = packedColor;\n\n    //  bottom right\n    F32[offset + 12] = x + displayWidth;\n    F32[offset + 13] = y + displayHeight;\n    F32[offset + 14] = frame.u1;\n    F32[offset + 15] = frame.v1;\n    F32[offset + 16] = textureIndex;\n    U32[offset + 17] = packedColor;\n\n    //  top right\n    F32[offset + 18] = x + displayWidth;\n    F32[offset + 19] = y;\n    F32[offset + 20] = frame.u1;\n    F32[offset + 21] = frame.v0;\n    F32[offset + 22] = textureIndex;\n    U32[offset + 23] = packedColor;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Find the angle of a segment from (x1, y1) -> (x2, y2).\n *\n * @function Phaser.Math.Angle.Between\n * @since 3.0.0\n *\n * @param {number} x1 - The x coordinate of the first point.\n * @param {number} y1 - The y coordinate of the first point.\n * @param {number} x2 - The x coordinate of the second point.\n * @param {number} y2 - The y coordinate of the second point.\n *\n * @return {number} The angle in radians.\n */\nexport function AngleBetween (x1: number, y1: number, x2: number, y2: number): number\n{\n    return Math.atan2(y2 - y1, x2 - x1);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Find the angle of a segment from (x1, y1) -> (x2, y2).\n *\n * The difference between this method and {@link Phaser.Math.Angle.Between} is that this assumes the y coordinate\n * travels down the screen.\n *\n * @function Phaser.Math.Angle.BetweenY\n * @since 3.0.0\n *\n * @param {number} x1 - The x coordinate of the first point.\n * @param {number} y1 - The y coordinate of the first point.\n * @param {number} x2 - The x coordinate of the second point.\n * @param {number} y2 - The y coordinate of the second point.\n *\n * @return {number} The angle in radians.\n */\nexport function AngleBetweenY (x1: number, y1: number, x2: number, y2: number): number\n{\n    return Math.atan2(x2 - x1, y2 - y1);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nexport const MATH_CONST = {\n\n    /**\n     * The value of PI * 2.\n     *\n     * @name Phaser.Math.PI2\n     * @type {number}\n     * @since 3.0.0\n     */\n    PI2: Math.PI * 2,\n\n    /**\n     * The value of PI * 2.\n     *\n     * @name Phaser.Math.HALF_PI\n     * @type {number}\n     * @since 3.0.0\n     */\n    HALF_PI: Math.PI * 0.5,\n\n    /**\n     * An epsilon value (1.0e-6)\n     *\n     * @name Phaser.Math.EPSILON\n     * @type {number}\n     * @since 3.0.0\n     */\n    EPSILON: 1.0e-6,\n\n    /**\n     * For converting degrees to radians (PI / 180)\n     *\n     * @name Phaser.Math.DEG_TO_RAD\n     * @type {number}\n     * @since 3.0.0\n     */\n    DEG_TO_RAD: Math.PI / 180,\n\n    /**\n     * For converting radians to degrees (180 / PI)\n     *\n     * @name Phaser.Math.RAD_TO_DEG\n     * @type {number}\n     * @since 3.0.0\n     */\n    RAD_TO_DEG: 180 / Math.PI,\n\n    /**\n     * The minimum safe integer this browser supports.\n     * We use a const for backward compatibility with Internet Explorer.\n     *\n     * @name Phaser.Math.MIN_SAFE_INTEGER\n     * @type {number}\n     * @since 3.21.0\n     */\n    MIN_SAFE_INTEGER: Number.MIN_SAFE_INTEGER || -9007199254740991,\n\n    /**\n     * The maximum safe integer this browser supports.\n     * We use a const for backward compatibility with Internet Explorer.\n     *\n     * @name Phaser.Math.MAX_SAFE_INTEGER\n     * @type {number}\n     * @since 3.21.0\n     */\n    MAX_SAFE_INTEGER: Number.MAX_SAFE_INTEGER || 9007199254740991\n\n};\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { MATH_CONST as CONST } from '../const';\n\n/**\n * Takes an angle in Phasers default clockwise format and converts it so that\n * 0 is North, 90 is West, 180 is South and 270 is East,\n * therefore running counter-clockwise instead of clockwise.\n * \n * You can pass in the angle from a Game Object using:\n * \n * ```javascript\n * var converted = CounterClockwise(gameobject.rotation);\n * ```\n * \n * All values for this function are in radians.\n *\n * @function Phaser.Math.Angle.CounterClockwise\n * @since 3.16.0\n *\n * @param {number} angle - The angle to convert, in radians.\n *\n * @return {number} The converted angle, in radians.\n */\nexport function CounterClockwise (angle: number): number\n{\n    if (angle > Math.PI)\n    {\n        angle -= CONST.PI2;\n    }\n\n    return Math.abs((((angle + CONST.HALF_PI) % CONST.PI2) - CONST.PI2) % CONST.PI2);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { MATH_CONST } from '../const';\n\n/**\n * Normalize an angle to the [0, 2pi] range.\n *\n * @function Phaser.Math.Angle.Normalize\n * @since 3.0.0\n *\n * @param {number} angle - The angle to normalize, in radians.\n *\n * @return {number} The normalized angle, in radians.\n */\nexport function NormalizeAngle (angle: number): number\n{\n    angle = angle % MATH_CONST.PI2;\n\n    if (angle >= 0)\n    {\n        return angle;\n    }\n    else\n    {\n        return angle + MATH_CONST.PI2;\n    }\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { NormalizeAngle } from './NormalizeAngle';\n\n/**\n * Reverse the given angle.\n *\n * @function Phaser.Math.Angle.Reverse\n * @since 3.0.0\n *\n * @param {number} angle - The angle to reverse, in radians.\n *\n * @return {number} The reversed angle, in radians.\n */\nexport function ReverseAngle (angle: number): number\n{\n    return NormalizeAngle(angle + Math.PI);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { MATH_CONST } from '../const';\n\n/**\n * Rotates `currentAngle` towards `targetAngle`, taking the shortest rotation distance. The `lerp` argument is the amount to rotate by in this call.\n *\n * @function Phaser.Math.Angle.RotateTo\n * @since 3.0.0\n *\n * @param {number} currentAngle - The current angle, in radians.\n * @param {number} targetAngle - The target angle to rotate to, in radians.\n * @param {number} [lerp=0.05] - The lerp value to add to the current angle.\n *\n * @return {number} The adjusted angle.\n */\nexport function RotateAngleTo (currentAngle: number, targetAngle: number, lerp: number = 0.05): number\n{\n    if (currentAngle === targetAngle)\n    {\n        return currentAngle;\n    }\n\n    if (Math.abs(targetAngle - currentAngle) <= lerp || Math.abs(targetAngle - currentAngle) >= (MATH_CONST.PI2 - lerp))\n    {\n        currentAngle = targetAngle;\n    }\n    else\n    {\n        if (Math.abs(targetAngle - currentAngle) > Math.PI)\n        {\n            if (targetAngle < currentAngle)\n            {\n                targetAngle += MATH_CONST.PI2;\n            }\n            else\n            {\n                targetAngle -= MATH_CONST.PI2;\n            }\n        }\n\n        if (targetAngle > currentAngle)\n        {\n            currentAngle += lerp;\n        }\n        else if (targetAngle < currentAngle)\n        {\n            currentAngle -= lerp;\n        }\n    }\n\n    return currentAngle;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Gets the shortest angle between `angle1` and `angle2`.\n *\n * Both angles must be in the range -180 to 180, which is the same clamped\n * range that `sprite.angle` uses, so you can pass in two sprite angles to\n * this method and get the shortest angle back between the two of them.\n *\n * The angle returned will be in the same range. If the returned angle is\n * greater than 0 then it's a counter-clockwise rotation, if < 0 then it's\n * a clockwise rotation.\n *\n * TODO: Wrap the angles in this function?\n *\n * @function Phaser.Math.Angle.ShortestBetween\n * @since 3.0.0\n *\n * @param {number} angle1 - The first angle in the range -180 to 180.\n * @param {number} angle2 - The second angle in the range -180 to 180.\n *\n * @return {number} The shortest angle, in degrees. If greater than zero it's a counter-clockwise rotation.\n */\nexport function ShortestAngleBetween (angle1: number, angle2: number): number\n{\n    const difference = angle2 - angle1;\n\n    if (difference === 0)\n    {\n        return 0;\n    }\n\n    const times = Math.floor((difference - (-180)) / 360);\n\n    return difference - (times * 360);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Wrap the given `value` between `min` and `max.\n *\n * @function Phaser.Math.Wrap\n * @since 3.0.0\n *\n * @param {number} value - The value to wrap.\n * @param {number} min - The minimum value.\n * @param {number} max - The maximum value.\n *\n * @return {number} The wrapped value.\n */\nexport function Wrap (value: number, min: number, max: number): number\n{\n    const range = max - min;\n\n    return (min + ((((value - min) % range) + range) % range));\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { Wrap } from '../Wrap';\n\n/**\n * Wrap an angle.\n *\n * Wraps the angle to a value in the range of -PI to PI.\n *\n * @function Phaser.Math.Angle.Wrap\n * @since 3.0.0\n *\n * @param {number} angle - The angle to wrap, in radians.\n *\n * @return {number} The wrapped angle, in radians.\n */\nexport function WrapAngle (angle: number): number\n{\n    return Wrap(angle, -Math.PI, Math.PI);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { Wrap } from '../Wrap';\n\n/**\n * Wrap an angle in degrees.\n *\n * Wraps the angle to a value in the range of -180 to 180.\n *\n * @function Phaser.Math.Angle.WrapDegrees\n * @since 3.0.0\n *\n * @param {number} angle - The angle to wrap, in degrees.\n *\n * @return {number} The wrapped angle, in degrees.\n */\nexport function WrapAngleDegrees (angle: number): number\n{\n    return Wrap(angle, -180, 180);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { AngleBetween } from './AngleBetween';\nimport { AngleBetweenY } from './AngleBetweenY';\nimport { CounterClockwise } from './CounterClockwise';\nimport { NormalizeAngle } from './NormalizeAngle';\nimport { ReverseAngle } from './ReverseAngle';\nimport { RotateAngleTo } from './RotateAngleTo';\nimport { ShortestAngleBetween } from './ShortestAngleBetween';\nimport { WrapAngle } from './WrapAngle';\nimport { WrapAngleDegrees } from './WrapAngleDegrees';\n\n/**\n * @namespace Phaser.Math.Angle\n */\n\nexport {\n    AngleBetween,\n    AngleBetweenY,\n    CounterClockwise,\n    NormalizeAngle,\n    ReverseAngle,\n    RotateAngleTo,\n    ShortestAngleBetween,\n    WrapAngle,\n    WrapAngleDegrees\n};\n", "export function In (v: number, overshoot: number = 1.70158): number\n{\n    return v * v * ((overshoot + 1) * v - overshoot);\n}\n", "export function InOut (v: number, overshoot: number = 1.70158): number\n{\n    const s = overshoot * 1.525;\n\n    if ((v *= 2) < 1)\n    {\n        return 0.5 * (v * v * ((s + 1) * v - s));\n    }\n    else\n    {\n        return 0.5 * ((v -= 2) * v * ((s + 1) * v + s) + 2);\n    }\n}\n", "export function Out (v: number, overshoot: number = 1.70158): number\n{\n    return --v * v * ((overshoot + 1) * v + overshoot) + 1;\n}\n", "export function In (v: number): number\n{\n    v = 1 - v;\n\n    if (v < 1 / 2.75)\n    {\n        return 1 - (7.5625 * v * v);\n    }\n    else if (v < 2 / 2.75)\n    {\n        return 1 - (7.5625 * (v -= 1.5 / 2.75) * v + 0.75);\n    }\n    else if (v < 2.5 / 2.75)\n    {\n        return 1 - (7.5625 * (v -= 2.25 / 2.75) * v + 0.9375);\n    }\n    else\n    {\n        return 1 - (7.5625 * (v -= 2.625 / 2.75) * v + 0.984375);\n    }\n}\n", "export function InOut (v: number): number\n{\n    let reverse = false;\n\n    if (v < 0.5)\n    {\n        v = 1 - (v * 2);\n        reverse = true;\n    }\n    else\n    {\n        v = (v * 2) - 1;\n    }\n\n    if (v < 1 / 2.75)\n    {\n        v = 7.5625 * v * v;\n    }\n    else if (v < 2 / 2.75)\n    {\n        v = 7.5625 * (v -= 1.5 / 2.75) * v + 0.75;\n    }\n    else if (v < 2.5 / 2.75)\n    {\n        v = 7.5625 * (v -= 2.25 / 2.75) * v + 0.9375;\n    }\n    else\n    {\n        v = 7.5625 * (v -= 2.625 / 2.75) * v + 0.984375;\n    }\n\n    if (reverse)\n    {\n        return (1 - v) * 0.5;\n    }\n    else\n    {\n        return v * 0.5 + 0.5;\n    }\n}\n", "export function Out (v: number): number\n{\n    if (v < 1 / 2.75)\n    {\n        return 7.5625 * v * v;\n    }\n    else if (v < 2 / 2.75)\n    {\n        return 7.5625 * (v -= 1.5 / 2.75) * v + 0.75;\n    }\n    else if (v < 2.5 / 2.75)\n    {\n        return 7.5625 * (v -= 2.25 / 2.75) * v + 0.9375;\n    }\n    else\n    {\n        return 7.5625 * (v -= 2.625 / 2.75) * v + 0.984375;\n    }\n}\n", "export function In (v: number): number\n{\n    return 1 - Math.sqrt(1 - v * v);\n}\n", "export function InOut (v: number): number\n{\n    if ((v *= 2) < 1)\n    {\n        return -0.5 * (Math.sqrt(1 - v * v) - 1);\n    }\n    else\n    {\n        return 0.5 * (Math.sqrt(1 - (v -= 2) * v) + 1);\n    }\n}\n", "export function Out (v: number): number\n{\n    return Math.sqrt(1 - (--v * v));\n}\n", "export function In (v: number): number\n{\n    return v * v * v;\n}\n", "export function InOut (v: number): number\n{\n    if ((v *= 2) < 1)\n    {\n        return 0.5 * v * v * v;\n    }\n    else\n    {\n        return 0.5 * ((v -= 2) * v * v + 2);\n    }\n}\n", "export function Out (v: number): number\n{\n    return --v * v * v + 1;\n}\n", "export function In (v: number, amplitude: number = 0.1, period: number = 0.1): number\n{\n    if (v === 0)\n    {\n        return 0;\n    }\n    else if (v === 1)\n    {\n        return 1;\n    }\n    else\n    {\n        let s = period / 4;\n\n        if (amplitude < 1)\n        {\n            amplitude = 1;\n        }\n        else\n        {\n            s = period * Math.asin(1 / amplitude) / (2 * Math.PI);\n        }\n\n        return -(amplitude * Math.pow(2, 10 * (v -= 1)) * Math.sin((v - s) * (2 * Math.PI) / period));\n    }\n}\n", "export function InOut (v: number, amplitude: number = 0.1, period: number = 0.1): number\n{\n    if (v === 0)\n    {\n        return 0;\n    }\n    else if (v === 1)\n    {\n        return 1;\n    }\n    else\n    {\n        let s = period / 4;\n\n        if (amplitude < 1)\n        {\n            amplitude = 1;\n        }\n        else\n        {\n            s = period * Math.asin(1 / amplitude) / (2 * Math.PI);\n        }\n\n        if ((v *= 2) < 1)\n        {\n            return -0.5 * (amplitude * Math.pow(2, 10 * (v -= 1)) * Math.sin((v - s) * (2 * Math.PI) / period));\n        }\n        else\n        {\n            return amplitude * Math.pow(2, -10 * (v -= 1)) * Math.sin((v - s) * (2 * Math.PI) / period) * 0.5 + 1;\n        }\n    }\n}\n", "export function Out (v: number, amplitude: number = 0.1, period: number = 0.1): number\n{\n    if (v === 0)\n    {\n        return 0;\n    }\n    else if (v === 1)\n    {\n        return 1;\n    }\n    else\n    {\n        let s = period / 4;\n\n        if (amplitude < 1)\n        {\n            amplitude = 1;\n        }\n        else\n        {\n            s = period * Math.asin(1 / amplitude) / (2 * Math.PI);\n        }\n\n        return (amplitude * Math.pow(2, -10 * v) * Math.sin((v - s) * (2 * Math.PI) / period) + 1);\n    }\n}\n", "export function In (v: number): number\n{\n    return Math.pow(2, 10 * (v - 1)) - 0.001;\n}\n", "export function InOut (v: number): number\n{\n    if (v == 0)\n    {\n        return 0;\n    }\n\n    if (v == 1)\n    {\n        return 1;\n    }\n\n    if ((v *= 2) < 1)\n    {\n        return 0.5 * Math.pow(2, 10 * (v - 1));\n    }\n    else\n    {\n        return 0.5 * (2 - Math.pow(2, -10 * (v - 1)));\n    }\n}\n", "export function Out (v: number): number\n{\n    return 1 - Math.pow(2, -10 * v);\n}\n", "export function In (v: number): number\n{\n    return v * v;\n}\n", "export function InOut (v: number): number\n{\n    if ((v *= 2) < 1)\n    {\n        return 0.5 * v * v;\n    }\n    else\n    {\n        return -0.5 * (--v * (v - 2) - 1);\n    }\n}\n", "export function Out (v: number): number\n{\n    return v * (2 - v);\n}\n", "export function In (v: number): number\n{\n    return v * v * v * v;\n}\n", "export function InOut (v: number): number\n{\n    if ((v *= 2) < 1)\n    {\n        return 0.5 * v * v * v * v;\n    }\n    else\n    {\n        return -0.5 * ((v -= 2) * v * v * v - 2);\n    }\n}\n", "export function Out (v: number): number\n{\n    return -(--v * v * v * v - 1);\n}\n", "export function In (v: number): number\n{\n    return v * v * v * v * v;\n}\n", "export function InOut (v: number): number\n{\n    if ((v *= 2) < 1)\n    {\n        return 0.5 * v * v * v * v * v;\n    }\n    else\n    {\n        return 0.5 * ((v -= 2) * v * v * v * v + 2);\n    }\n}\n", "export function Out (v: number): number\n{\n    return (v = v - 1) * v * v * v * v + 1;\n}\n", "export function In (v: number): number\n{\n    if (v === 0)\n    {\n        return 0;\n    }\n    else if (v === 1)\n    {\n        return 1;\n    }\n    else\n    {\n        return 1 - Math.cos(v * Math.PI / 2);\n    }\n}\n", "export function InOut (v: number): number\n{\n    if (v === 0)\n    {\n        return 0;\n    }\n    else if (v === 1)\n    {\n        return 1;\n    }\n    else\n    {\n        return 0.5 * (1 - Math.cos(Math.PI * v));\n    }\n}\n", "export function Out (v: number): number\n{\n    if (v === 0)\n    {\n        return 0;\n    }\n    else if (v === 1)\n    {\n        return 1;\n    }\n    else\n    {\n        return Math.sin(v * Math.PI / 2);\n    }\n}\n", "export function Linear (v: number): number\n{\n    return v;\n}\n", "export function Stepped (v: number, steps: number = 1): number\n{\n    if (v <= 0)\n    {\n        return 0;\n    }\n    else if (v >= 1)\n    {\n        return 1;\n    }\n    else\n    {\n        return (((steps * v) | 0) + 1) * (1 / steps);\n    }\n}\n", "import * as Back from './back';\nimport * as Bounce from './bounce';\nimport * as Circular from './circular';\nimport * as Cubic from './cubic';\nimport * as Elastic from './elastic';\nimport * as Expo from './expo';\nimport * as Quadratic from './quadratic';\nimport * as Quartic from './quartic';\nimport * as Quintic from './quintic';\nimport * as Sine from './sine';\n\nimport { Linear } from './Linear';\nimport { Stepped } from './Stepped';\n\nconst EaseMap: Map<string, Function> = new Map([\n    [ 'power0', Linear ],\n    [ 'power1', Quadratic.Out ],\n    [ 'power2', Cubic.Out ],\n    [ 'power3', Quartic.Out ],\n    [ 'power4', Quintic.Out ],\n    [ 'linear', Linear ],\n    [ 'quad', Quadratic.Out ],\n    [ 'cubic', Cubic.Out ],\n    [ 'quart', Quartic.Out ],\n    [ 'quint', Quintic.Out ],\n    [ 'sine', Sine.Out ],\n    [ 'expo', Expo.Out ],\n    [ 'circ', Circular.Out ],\n    [ 'elastic', Elastic.Out ],\n    [ 'back', Back.Out ],\n    [ 'bounce', Bounce.Out ],\n    [ 'stepped', Stepped ],\n    [ 'quad.in', Quadratic.In ],\n    [ 'cubic.in', Cubic.In ],\n    [ 'quart.in', Quartic.In ],\n    [ 'quint.in', Quintic.In ],\n    [ 'sine.in', Sine.In ],\n    [ 'expo.in', Expo.In ],\n    [ 'circ.in', Circular.In ],\n    [ 'elastic.in', Elastic.In ],\n    [ 'back.in', Back.In ],\n    [ 'bounce.in', Bounce.In ],\n    [ 'quad.out', Quadratic.Out ],\n    [ 'cubic.out', Cubic.Out ],\n    [ 'quart.out', Quartic.Out ],\n    [ 'quint.out', Quintic.Out ],\n    [ 'sine.out', Sine.Out ],\n    [ 'expo.out', Expo.Out ],\n    [ 'circ.out', Circular.Out ],\n    [ 'elastic.out', Elastic.Out ],\n    [ 'back.out', Back.Out ],\n    [ 'bounce.out', Bounce.Out ],\n    [ 'quad.inout', Quadratic.InOut ],\n    [ 'cubic.inout', Cubic.InOut ],\n    [ 'quart.inout', Quartic.InOut ],\n    [ 'quint.inout', Quintic.InOut ],\n    [ 'sine.inout', Sine.InOut ],\n    [ 'expo.inout', Expo.InOut ],\n    [ 'circ.inout', Circular.InOut ],\n    [ 'elastic.inout', Elastic.InOut ],\n    [ 'back.inout', Back.InOut ],\n    [ 'bounce.inout', Bounce.InOut ]\n]);\n\n//  Allows GetEase('Back'), GetEase('Expo.InOut'), GetEase('Export.easeOut') or lower-case\n\nexport function GetEase (name: string): Function\n{\n    name = name.toLowerCase();\n    name = name.replace('ease', '');\n\n    if (EaseMap.has(name))\n    {\n        return EaseMap.get(name);\n    }\n    else\n    {\n        return Linear;\n    }\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Calculate the fuzzy ceiling of the given value.\n *\n * @function Phaser.Math.Fuzzy.Ceil\n * @since 3.0.0\n *\n * @param {number} value - The value.\n * @param {number} [epsilon=0.0001] - The epsilon.\n *\n * @return {number} The fuzzy ceiling of the value.\n */\nexport function FuzzyCeil (value: number, epsilon: number = 0.0001): number\n{\n    return Math.ceil(value - epsilon);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Check whether the given values are fuzzily equal.\n *\n * Two numbers are fuzzily equal if their difference is less than `epsilon`.\n *\n * @function Phaser.Math.Fuzzy.Equal\n * @since 3.0.0\n *\n * @param {number} a - The first value.\n * @param {number} b - The second value.\n * @param {number} [epsilon=0.0001] - The epsilon.\n *\n * @return {boolean} `true` if the values are fuzzily equal, otherwise `false`.\n */\nexport function FuzzyEqual (a: number, b: number, epsilon: number = 0.0001): boolean\n{\n    return Math.abs(a - b) < epsilon;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Calculate the fuzzy floor of the given value.\n *\n * @function Phaser.Math.Fuzzy.Floor\n * @since 3.0.0\n *\n * @param {number} value - The value.\n * @param {number} [epsilon=0.0001] - The epsilon.\n *\n * @return {number} The floor of the value.\n */\nexport function FuzzyFloor (value: number, epsilon: number = 0.0001): number\n{\n    return Math.floor(value + epsilon);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Check whether `a` is fuzzily greater than `b`.\n *\n * `a` is fuzzily greater than `b` if it is more than `b - epsilon`.\n *\n * @function Phaser.Math.Fuzzy.GreaterThan\n * @since 3.0.0\n *\n * @param {number} a - The first value.\n * @param {number} b - The second value.\n * @param {number} [epsilon=0.0001] - The epsilon.\n *\n * @return {boolean} `true` if `a` is fuzzily greater than than `b`, otherwise `false`.\n */\nexport function FuzzyGreaterThan (a: number, b: number, epsilon: number = 0.0001): boolean\n{\n    return a > b - epsilon;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Check whether `a` is fuzzily less than `b`.\n *\n * `a` is fuzzily less than `b` if it is less than `b + epsilon`.\n *\n * @function Phaser.Math.Fuzzy.LessThan\n * @since 3.0.0\n *\n * @param {number} a - The first value.\n * @param {number} b - The second value.\n * @param {number} [epsilon=0.0001] - The epsilon.\n *\n * @return {boolean} `true` if `a` is fuzzily less than `b`, otherwise `false`.\n */\nexport function FuzzyLessThan (a: number, b: number, epsilon: number = 0.0001): boolean\n{\n    return a < b + epsilon;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { FuzzyCeil } from './FuzzyCeil';\nimport { FuzzyEqual } from './FuzzyEqual';\nimport { FuzzyFloor } from './FuzzyFloor';\nimport { FuzzyGreaterThan } from './FuzzyGreaterThan';\nimport { FuzzyLessThan } from './FuzzyLessThan';\n\n// TODO - The Epsilon values can move to a Config setter\n\nexport {\n    FuzzyCeil,\n    FuzzyEqual,\n    FuzzyFloor,\n    FuzzyGreaterThan,\n    FuzzyLessThan\n};\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Calculates the factorial of a given number for integer values greater than 0.\n *\n * @function Phaser.Math.Factorial\n * @since 3.0.0\n *\n * @param {number} value - A positive integer to calculate the factorial of.\n *\n * @return {number} The factorial of the given number.\n */\nexport function Factorial (value: number): number\n{\n    if (value === 0)\n    {\n        return 1;\n    }\n\n    let res = value;\n\n    while (--value)\n    {\n        res *= value;\n    }\n\n    return res;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { Factorial } from './Factorial';\n\n/**\n * Calculates the Bernstein basis from the three factorial coefficients.\n *\n * @function Phaser.Math.Bernstein\n * @since 3.0.0\n *\n * @param {number} n - The first value.\n * @param {number} i - The second value.\n *\n * @return {number} The Bernstein basis of Factorial(n) / Factorial(i) / Factorial(n - i)\n */\nexport function Bernstein (n: number, i: number): number\n{\n    return Factorial(n) / Factorial(i) / Factorial(n - i);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { Bernstein } from '../Bernstein';\n\n/**\n * A bezier interpolation method.\n *\n * @function Phaser.Math.Interpolation.Bezier\n * @since 3.0.0\n *\n * @param {number[]} v - The input array of values to interpolate between.\n * @param {number} k - The percentage of interpolation, between 0 and 1.\n *\n * @return {number} The interpolated value.\n */\nexport function BezierInterpolation (v: number[], k: number): number\n{\n    let b = 0;\n    const n = v.length - 1;\n\n    for (let i = 0; i <= n; i++)\n    {\n        b += Math.pow(1 - k, n - i) * Math.pow(k, i) * v[i] * Bernstein(n, i);\n    }\n\n    return b;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { CatmullRom } from '../CatmullRom';\n\n/**\n * A Catmull-Rom interpolation method.\n *\n * @function Phaser.Math.Interpolation.CatmullRom\n * @since 3.0.0\n *\n * @param {number[]} v - The input array of values to interpolate between.\n * @param {number} k - The percentage of interpolation, between 0 and 1.\n *\n * @return {number} The interpolated value.\n */\nexport function CatmullRomInterpolation (v: number[], k: number): number\n{\n    const m = v.length - 1;\n    let f = m * k;\n    let i = Math.floor(f);\n\n    if (v[0] === v[m])\n    {\n        if (k < 0)\n        {\n            i = Math.floor(f = m * (1 + k));\n        }\n\n        return CatmullRom(f - i, v[(i - 1 + m) % m], v[i], v[(i + 1) % m], v[(i + 2) % m]);\n    }\n    else\n    {\n        if (k < 0)\n        {\n            return v[0] - (CatmullRom(-f, v[0], v[0], v[1], v[1]) - v[0]);\n        }\n\n        if (k > 1)\n        {\n            return v[m] - (CatmullRom(f - m, v[m], v[m], v[m - 1], v[m - 1]) - v[m]);\n        }\n\n        return CatmullRom(f - i, v[i ? i - 1 : 0], v[i], v[m < i + 1 ? m : i + 1], v[m < i + 2 ? m : i + 2]);\n    }\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * @ignore\n */\nfunction P0 (t: number, p: number): number\n{\n    const k = 1 - t;\n\n    return k * k * k * p;\n}\n\n/**\n * @ignore\n */\nfunction P1 (t: number, p: number): number\n{\n    const k = 1 - t;\n\n    return 3 * k * k * t * p;\n}\n\n/**\n * @ignore\n */\nfunction P2 (t: number, p: number): number\n{\n    return 3 * (1 - t) * t * t * p;\n}\n\n/**\n * @ignore\n */\nfunction P3 (t: number, p: number): number\n{\n    return t * t * t * p;\n}\n\n/**\n * A cubic bezier interpolation method.\n *\n * https://medium.com/@adrian_cooney/bezier-interpolation-13b68563313a\n *\n * @function Phaser.Math.Interpolation.CubicBezier\n * @since 3.0.0\n *\n * @param {number} t - The percentage of interpolation, between 0 and 1.\n * @param {number} p0 - The start point.\n * @param {number} p1 - The first control point.\n * @param {number} p2 - The second control point.\n * @param {number} p3 - The end point.\n *\n * @return {number} The interpolated value.\n */\nexport function CubicBezierInterpolation (t: number, p0: number, p1: number, p2: number, p3: number): number\n{\n    return P0(t, p0) + P1(t, p1) + P2(t, p2) + P3(t, p3);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Calculates a linear (interpolation) value over t.\n *\n * @function Phaser.Math.Linear\n * @since 3.0.0\n *\n * @param {number} p0 - The first point.\n * @param {number} p1 - The second point.\n * @param {number} t - The percentage between p0 and p1 to return, represented as a number between 0 and 1.\n *\n * @return {number} The step t% of the way between p0 and p1.\n */\nexport function Linear (p0: number, p1: number, t: number): number\n{\n    return (p1 - p0) * t + p0;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { Linear } from '../Linear';\n\n/**\n * A linear interpolation method.\n *\n * @function Phaser.Math.Interpolation.Linear\n * @since 3.0.0\n * @see {@link https://en.wikipedia.org/wiki/Linear_interpolation}\n *\n * @param {number[]} v - The input array of values to interpolate between.\n * @param {!number} k - The percentage of interpolation, between 0 and 1.\n *\n * @return {!number} The interpolated value.\n */\nexport function LinearInterpolation (v: number[], k: number): number\n{\n    const m = v.length - 1;\n    const f = m * k;\n    const i = Math.floor(f);\n\n    if (k < 0)\n    {\n        return Linear(v[0], v[1], f);\n    }\n    else if (k > 1)\n    {\n        return Linear(v[m], v[m - 1], m - f);\n    }\n    else\n    {\n        return Linear(v[i], v[(i + 1 > m) ? m : i + 1], f - i);\n    }\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * @ignore\n */\nfunction P0 (t: number, p: number): number\n{\n    const k = 1 - t;\n\n    return k * k * p;\n}\n\n/**\n * @ignore\n */\nfunction P1 (t: number, p: number): number\n{\n    return 2 * (1 - t) * t * p;\n}\n\n/**\n * @ignore\n */\nfunction P2 (t: number, p: number): number\n{\n    return t * t * p;\n}\n\n// https://github.com/mrdoob/three.js/blob/master/src/extras/core/Interpolations.js\n\n/**\n * A quadratic bezier interpolation method.\n *\n * @function Phaser.Math.Interpolation.QuadraticBezier\n * @since 3.2.0\n *\n * @param {number} t - The percentage of interpolation, between 0 and 1.\n * @param {number} p0 - The start point.\n * @param {number} p1 - The control point.\n * @param {number} p2 - The end point.\n *\n * @return {number} The interpolated value.\n */\nexport function QuadraticBezierInterpolation (t: number, p0: number, p1: number, p2: number): number\n{\n    return P0(t, p0) + P1(t, p1) + P2(t, p2);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Calculate a smooth interpolation percentage of `x` between `min` and `max`.\n *\n * The function receives the number `x` as an argument and returns 0 if `x` is less than or equal to the left edge,\n * 1 if `x` is greater than or equal to the right edge, and smoothly interpolates, using a Hermite polynomial,\n * between 0 and 1 otherwise.\n *\n * @function Phaser.Math.SmoothStep\n * @since 3.0.0\n * @see {@link https://en.wikipedia.org/wiki/Smoothstep}\n *\n * @param {number} x - The input value.\n * @param {number} min - The minimum value, also known as the 'left edge', assumed smaller than the 'right edge'.\n * @param {number} max - The maximum value, also known as the 'right edge', assumed greater than the 'left edge'.\n *\n * @return {number} The percentage of interpolation, between 0 and 1.\n */\nexport function SmoothStep (x: number, min: number, max: number): number\n{\n    if (x <= min)\n    {\n        return 0;\n    }\n\n    if (x >= max)\n    {\n        return 1;\n    }\n\n    x = (x - min) / (max - min);\n\n    return x * x * (3 - 2 * x);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { SmoothStep } from '../SmoothStep';\n\n/**\n * A Smooth Step interpolation method.\n *\n * @function Phaser.Math.Interpolation.SmoothStep\n * @since 3.9.0\n * @see {@link https://en.wikipedia.org/wiki/Smoothstep}\n *\n * @param {number} t - The percentage of interpolation, between 0 and 1.\n * @param {number} min - The minimum value, also known as the 'left edge', assumed smaller than the 'right edge'.\n * @param {number} max - The maximum value, also known as the 'right edge', assumed greater than the 'left edge'.\n *\n * @return {number} The interpolated value.\n */\nexport function SmoothStepInterpolation (t: number, min: number, max: number): number\n{\n    return min + (max - min) * SmoothStep(t, 0, 1);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Calculate a smoother interpolation percentage of `x` between `min` and `max`.\n *\n * The function receives the number `x` as an argument and returns 0 if `x` is less than or equal to the left edge,\n * 1 if `x` is greater than or equal to the right edge, and smoothly interpolates, using a Hermite polynomial,\n * between 0 and 1 otherwise.\n *\n * Produces an even smoother interpolation than {@link Phaser.Math.SmoothStep}.\n *\n * @function Phaser.Math.SmootherStep\n * @since 3.0.0\n * @see {@link https://en.wikipedia.org/wiki/Smoothstep#Variations}\n *\n * @param {number} x - The input value.\n * @param {number} min - The minimum value, also known as the 'left edge', assumed smaller than the 'right edge'.\n * @param {number} max - The maximum value, also known as the 'right edge', assumed greater than the 'left edge'.\n *\n * @return {number} The percentage of interpolation, between 0 and 1.\n */\nexport function SmootherStep (x: number, min: number, max: number): number\n{\n    x = Math.max(0, Math.min(1, (x - min) / (max - min)));\n\n    return x * x * x * (x * (x * 6 - 15) + 10);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { SmootherStep } from '../SmootherStep';\n\n/**\n * A Smoother Step interpolation method.\n *\n * @function Phaser.Math.Interpolation.SmootherStep\n * @since 3.9.0\n * @see {@link https://en.wikipedia.org/wiki/Smoothstep#Variations}\n *\n * @param {number} t - The percentage of interpolation, between 0 and 1.\n * @param {number} min - The minimum value, also known as the 'left edge', assumed smaller than the 'right edge'.\n * @param {number} max - The maximum value, also known as the 'right edge', assumed greater than the 'left edge'.\n *\n * @return {number} The interpolated value.\n */\nexport function SmootherStepInterpolation (t: number, min: number, max: number): number\n{\n    return min + (max - min) * SmootherStep(t, 0, 1);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { BezierInterpolation } from './BezierInterpolation';\nimport { CatmullRomInterpolation } from './CatmullRomInterpolation';\nimport { CubicBezierInterpolation } from './CubicBezierInterpolation';\nimport { LinearInterpolation } from './LinearInterpolation';\nimport { QuadraticBezierInterpolation } from './QuadraticBezierInterpolation';\nimport { SmoothStepInterpolation } from './SmoothStepInterpolation';\nimport { SmootherStepInterpolation } from './SmootherStepInterpolation';\n\nexport {\n    BezierInterpolation,\n    CatmullRomInterpolation,\n    CubicBezierInterpolation,\n    LinearInterpolation,\n    QuadraticBezierInterpolation,\n    SmoothStepInterpolation,\n    SmootherStepInterpolation\n};\n", "//  A Matrix2D contains six elements in a short-form of the 3x3 Matrix, with the last column ignored.\n\n//  |----|----|----|\n//  | a  | b  | 0  |\n//  |----|----|----|\n//  | c  | d  | 0  |\n//  |----|----|----|\n//  | tx | ty | 1  |\n//  |----|----|----|\n\nexport class Matrix2D\n{\n    a: number; // element 0\n    b: number; // element 1\n    c: number; // element 2\n    d: number; // element 3\n    tx: number; // element 4\n    ty: number; // element 5\n\n    /**\n     * Creates an instance of Matrix2D.\n     *\n     * @param {number} [a=1] - X scale.\n     * @param {number} [b=0] - X skew.\n     * @param {number} [c=0] - Y skew.\n     * @param {number} [d=1] - Y scale.\n     * @param {number} [tx=0] - X translation\n     * @param {number} [ty=0] - Y translation\n     * @memberof Matrix2D\n     */\n    constructor (a: number = 1, b: number = 0, c: number = 0, d: number = 1, tx: number = 0, ty: number = 0)\n    {\n        this.set(a, b, c, d, tx, ty);\n    }\n\n    set (a: number = 1, b: number = 0, c: number = 0, d: number = 1, tx: number = 0, ty: number = 0): this\n    {\n        this.a = a;\n        this.b = b;\n        this.c = c;\n        this.d = d;\n        this.tx = tx;\n        this.ty = ty;\n\n        return this;\n    }\n\n    identity (): this\n    {\n        return this.set();\n    }\n\n    toArray (): number[]\n    {\n        const  { a, b, c, d, tx, ty } = this;\n\n        return [ a, b, c, d, tx, ty ];\n    }\n\n    fromArray (src: number[]): Matrix2D\n    {\n        return this.set(src[0], src[1], src[2], src[3], src[4], src[5]);\n    }\n}\n", "import { IMatrix2D } from './IMatrix2D';\n\n//  Compares the a and b matrix and returns if they are equal.\n\nexport function Mat2dEquals (a: IMatrix2D, b: IMatrix2D): boolean\n{\n    return (\n        a.a === b.a &&\n        a.b === b.b &&\n        a.c === b.c &&\n        a.d === b.d &&\n        a.tx === b.tx &&\n        a.ty === b.ty\n    );\n}\n", "export class Vec3\n{\n    x: number;\n    y: number;\n    z: number;\n\n    constructor (x: number = 0, y: number = 0, z: number = 0)\n    {\n        this.set(x, y, z);\n    }\n\n    set (x: number = 0, y: number = 0, z: number = 0): this\n    {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n\n        return this;\n    }\n\n    toArray (dst: Float32List = [], index: number = 0): Float32List\n    {\n        const { x, y, z } = this;\n\n        dst[ index ] = x;\n        dst[ index + 1 ] = y;\n        dst[ index + 2 ] = z;\n\n        return dst;\n    }\n\n    fromArray (src: Float32List, index: number = 0): this\n    {\n        return this.set(\n            src[ index ],\n            src[ index + 1 ],\n            src[ index + 2 ]\n        );\n    }\n\n    toString (): string\n    {\n        const { x, y, z } = this;\n\n        return `{ x=${x}, y=${y}, z=${z} }`;\n    }\n}\n", "import { Matrix4 } from './Matrix4';\n\nexport function Mat4Identity (matrix: Matrix4 = new Matrix4()): Matrix4\n{\n    return matrix.set(\n        1, 0, 0, 0,\n        0, 1, 0, 0,\n        0, 0, 1, 0,\n        0, 0, 0, 1\n    );\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Returns the nearest power of 2 to the given `value`.\n *\n * @function Phaser.Math.Pow2.GetNext\n * @since 3.0.0\n *\n * @param {number} value - The value.\n *\n * @return {number} The nearest power of 2 to `value`.\n */\nexport function GetPowerOfTwo (value: number): number\n{\n    const index = Math.log(value) / 0.6931471805599453;\n\n    return (1 << Math.ceil(index));\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Tests the value and returns `true` if it is a power of two.\n *\n * @function Phaser.Math.Pow2.IsValue\n * @since 3.0.0\n *\n * @param {number} value - The value to check if it's a power of two.\n *\n * @return {boolean} Returns `true` if `value` is a power of two, otherwise `false`.\n */\nexport function IsValuePowerOfTwo (value: number): boolean\n{\n    return (value > 0 && (value & (value - 1)) === 0);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Force a value within the boundaries by clamping it to the range `min`, `max`.\n *\n * @function Phaser.Math.Clamp\n * @since 3.0.0\n *\n * @param {number} value - The value to be clamped.\n * @param {number} min - The minimum bounds.\n * @param {number} max - The maximum bounds.\n *\n * @return {number} The clamped value.\n */\nexport function Clamp (value: number, min: number, max: number): number\n{\n    return Math.max(min, Math.min(max, value));\n}\n", "import { Vec3 } from './Vec3';\n\nexport function Vec3Backward (): Vec3\n{\n    return new Vec3(0, 0, -1);\n}\n", "import { Vec3 } from './Vec3';\n\nexport function Vec3Down (): Vec3\n{\n    return new Vec3(0, -1, 0);\n}\n", "import { Vec3 } from './Vec3';\n\nexport function Vec3Forward (): Vec3\n{\n    return new Vec3(0, 0, 1);\n}\n", "import { Vec3 } from './Vec3';\n\nexport function Vec3Left (): Vec3\n{\n    return new Vec3(-1, 0, 0);\n}\n", "import { Vec3 } from './Vec3';\n\nexport function Vec3Right (): Vec3\n{\n    return new Vec3(1, 0, 0);\n}\n", "import { Vec3 } from './Vec3';\n\nexport function Vec3Up (): Vec3\n{\n    return new Vec3(0, 1, 0);\n}\n", "import { Vec3 } from './Vec3';\n\nexport function Vec3Zero (): Vec3\n{\n    return new Vec3(0, 0, 0);\n}\n", "import { Vec3Backward } from './Vec3Backward';\nimport { Vec3Down } from './Vec3Down';\nimport { Vec3Forward } from './Vec3Forward';\nimport { Vec3Left } from './Vec3Left';\nimport { Vec3Right } from './Vec3Right';\nimport { Vec3Up } from './Vec3Up';\nimport { Vec3Zero } from './Vec3Zero';\n\nexport const UP = Vec3Up();\nexport const DOWN = Vec3Down();\nexport const LEFT = Vec3Left();\nexport const RIGHT = Vec3Right();\nexport const FORWARD = Vec3Forward();\nexport const BACKWARD = Vec3Backward();\nexport const ZERO = Vec3Zero();\n", "import { IRectangle } from '../../geom/rectangle/IRectangle';\nimport { Mat4Multiply } from '../mat4/Mat4Multiply';\nimport { Matrix4 } from '../mat4/Matrix4';\nimport { Vec3 } from './Vec3';\nimport { Vec3TransformMat4 } from './Vec3TransformMat4';\n\nconst tempMatrix1 = new Matrix4();\nconst tempMatrix2 = new Matrix4();\n\nexport function Vec3Project (v: Vec3, world: Matrix4, transform: Matrix4, viewport: IRectangle, out: Vec3 = new Vec3()): Vec3\n{\n    const { x, y, width, height } = viewport;\n\n    tempMatrix1.set(\n        width / 2, 0, 0, 0,\n        0, -height / 2, 0, 0,\n        0, 0, 0.5, 0,\n        x + width / 2, height / 2 + y, 0.5, 1\n    );\n\n    Mat4Multiply(world, transform, tempMatrix2);\n    Mat4Multiply(tempMatrix2, tempMatrix1, tempMatrix2);\n\n    return Vec3TransformMat4(v, tempMatrix2, out);\n}\n", "import { Mat4Invert } from '../mat4/Mat4Invert';\nimport { Mat4Multiply } from '../mat4/Mat4Multiply';\nimport { Matrix4 } from '../mat4/Matrix4';\nimport { Vec3 } from './Vec3';\nimport { Vec3Scale } from './Vec3Scale';\nimport { Vec3TransformMat4 } from './Vec3TransformMat4';\n\nconst matrix = new Matrix4();\nconst screenSource = new Vec3();\n\nexport function Vec3Unproject (v: Vec3, viewportWidth: number, viewportHeight: number, world: Matrix4, view: Matrix4, projection: Matrix4, out: Vec3 = new Vec3()): Vec3\n{\n    Mat4Multiply(world, view, matrix);\n    Mat4Multiply(matrix, projection, matrix);\n    Mat4Invert(matrix, matrix);\n\n    const { x, y, z } = v;\n\n    screenSource.set(\n        x / viewportWidth * 2 - 1,\n        -(y / viewportHeight * 2 - 1),\n        2 * z - 1\n    );\n\n    Vec3TransformMat4(screenSource, matrix, out);\n\n    const data = matrix.data;\n\n    const num = screenSource.x * data[3] + screenSource.y * data[7] + screenSource.z * data[11] + data[15];\n\n    //  if within epsilon?\n    return Vec3Scale(out, 1 / num, out);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Snap a value to nearest grid slice, using ceil.\n *\n * Example: if you have an interval gap of `5` and a position of `12`... you will snap to `15`.\n * As will `14` snap to `15`... but `16` will snap to `20`.\n *\n * @function Phaser.Math.Snap.Ceil\n * @since 3.0.0\n *\n * @param {number} value - The value to snap.\n * @param {number} gap - The interval gap of the grid.\n * @param {number} [start=0] - Optional starting offset for gap.\n * @param {boolean} [divide=false] - If `true` it will divide the snapped value by the gap before returning.\n *\n * @return {number} The snapped value.\n */\nexport function SnapCeil (value: number, gap: number, start: number = 0, divide: boolean = false): number\n{\n    if (gap === 0)\n    {\n        return value;\n    }\n\n    value -= start;\n    value = gap * Math.ceil(value / gap);\n\n    return (divide) ? (start + value) / gap : start + value;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Snap a value to nearest grid slice, using floor.\n *\n * Example: if you have an interval gap of `5` and a position of `12`... you will snap to `10`.\n * As will `14` snap to `10`... but `16` will snap to `15`.\n *\n * @function Phaser.Math.Snap.Floor\n * @since 3.0.0\n *\n * @param {number} value - The value to snap.\n * @param {number} gap - The interval gap of the grid.\n * @param {number} [start=0] - Optional starting offset for gap.\n * @param {boolean} [divide=false] - If `true` it will divide the snapped value by the gap before returning.\n *\n * @return {number} The snapped value.\n */\nexport function SnapFloor (value: number, gap: number, start: number = 0, divide: boolean = false): number\n{\n    if (gap === 0)\n    {\n        return value;\n    }\n\n    value -= start;\n    value = gap * Math.floor(value / gap);\n\n    return (divide) ? (start + value) / gap : start + value;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Snap a value to nearest grid slice, using rounding.\n *\n * Example: if you have an interval gap of `5` and a position of `12`... you will snap to `10` whereas `14` will snap to `15`.\n *\n * @function Phaser.Math.Snap.To\n * @since 3.0.0\n *\n * @param {number} value - The value to snap.\n * @param {number} gap - The interval gap of the grid.\n * @param {number} [start=0] - Optional starting offset for gap.\n * @param {boolean} [divide=false] - If `true` it will divide the snapped value by the gap before returning.\n *\n * @return {number} The snapped value.\n */\nexport function SnapTo (value: number, gap: number, start: number = 0, divide: boolean = false): number\n{\n    if (gap === 0)\n    {\n        return value;\n    }\n\n    value -= start;\n    value = gap * Math.round(value / gap);\n\n    return (divide) ? (start + value) / gap : start + value;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { SnapCeil } from './SnapCeil';\nimport { SnapFloor } from './SnapFloor';\nimport { SnapTo } from './SnapTo';\n\nexport {\n    SnapCeil,\n    SnapFloor,\n    SnapTo\n};\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Calculate the mean average of the given values.\n *\n * @function Phaser.Math.Average\n * @since 3.0.0\n *\n * @param {number[]} values - The values to average.\n *\n * @return {number} The average value.\n */\nexport function Average (values: number[]): number\n{\n    let sum = 0;\n\n    for (let i = 0; i < values.length; i++)\n    {\n        sum += (+values[i]);\n    }\n\n    return sum / values.length;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Ceils to some place comparative to a `base`, default is 10 for decimal place.\n *\n * The `place` is represented by the power applied to `base` to get that place.\n *\n * @function Phaser.Math.CeilTo\n * @since 3.0.0\n *\n * @param {number} value - The value to round.\n * @param {number} [place=0] - The place to round to.\n * @param {number} [base=10] - The base to round in. Default is 10 for decimal.\n *\n * @return {number} The rounded value.\n */\nexport function CeilTo (value: number, place: number = 0, base: number = 10): number\n{\n    const p = Math.pow(base, -place);\n\n    return Math.ceil(value * p) / p;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { MATH_CONST } from './const';\n\n/**\n * Convert the given angle from degrees, to the equivalent angle in radians.\n *\n * @function Phaser.Math.DegToRad\n * @since 3.0.0\n *\n * @param {number} degrees - The angle (in degrees) to convert to radians.\n *\n * @return {number} The given angle converted to radians.\n */\nexport function DegToRad (degrees: number): number\n{\n    return degrees * MATH_CONST.DEG_TO_RAD;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Calculates the positive difference of two given numbers.\n *\n * @function Phaser.Math.Difference\n * @since 3.0.0\n *\n * @param {number} a - The first number in the calculation.\n * @param {number} b - The second number in the calculation.\n *\n * @return {number} The positive difference of the two given numbers.\n */\nexport function Difference (a: number, b: number): number\n{\n    return Math.abs(a - b);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Floors to some place comparative to a `base`, default is 10 for decimal place.\n *\n * The `place` is represented by the power applied to `base` to get that place.\n *\n * @function Phaser.Math.FloorTo\n * @since 3.0.0\n *\n * @param {number} value - The value to round.\n * @param {number} [place=0] - The place to round to.\n * @param {number} [base=10] - The base to round in. Default is 10 for decimal.\n *\n * @return {number} The rounded value.\n */\nexport function FloorTo (value: number, place: number = 0, base: number = 10): number\n{\n    const p = Math.pow(base, -place);\n\n    return Math.floor(value * p) / p;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { Clamp } from './Clamp';\n\n/**\n * Return a value based on the range between `min` and `max` and the percentage given.\n *\n * @function Phaser.Math.FromPercent\n * @since 3.0.0\n *\n * @param {number} percent - A value between 0 and 1 representing the percentage.\n * @param {number} min - The minimum value.\n * @param {number} [max] - The maximum value.\n *\n * @return {number} The value that is `percent` percent between `min` and `max`.\n */\nexport function FromPercent (percent: number, min: number, max?: number): number\n{\n    percent = Clamp(percent, 0, 1);\n\n    return (max - min) * percent;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Calculate a per-ms speed from a distance and time (given in seconds).\n *\n * @function Phaser.Math.GetSpeed\n * @since 3.0.0\n *\n * @param {number} distance - The distance.\n * @param {number} time - The time, in seconds.\n *\n * @return {number} The speed, in distance per ms.\n */\nexport function GetSpeed (distance: number, time: number): number\n{\n    return (distance / time) / 1000;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Add an `amount` to a `value`, limiting the maximum result to `max`.\n *\n * @function Phaser.Math.MaxAdd\n * @since 3.0.0\n *\n * @param {number} value - The value to add to.\n * @param {number} amount - The amount to add.\n * @param {number} max - The maximum value to return.\n *\n * @return {number} The resulting value.\n */\nexport function MaxAdd (value: number, amount: number, max: number): number\n{\n    return Math.min(value + amount, max);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Subtract an `amount` from `value`, limiting the minimum result to `min`.\n *\n * @function Phaser.Math.MinSub\n * @since 3.0.0\n *\n * @param {number} value - The value to subtract from.\n * @param {number} amount - The amount to subtract.\n * @param {number} min - The minimum value to return.\n *\n * @return {number} The resulting value.\n */\nexport function MinSub (value: number, amount: number, min: number): number\n{\n    return Math.max(value - amount, min);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Work out what percentage `value` is of the range between `min` and `max`.\n * If `max` isn't given then it will return the percentage of `value` to `min`.\n *\n * You can optionally specify an `upperMax` value, which is a mid-way point in the range that represents 100%, after which the % starts to go down to zero again.\n *\n * @function Phaser.Math.Percent\n * @since 3.0.0\n *\n * @param {number} value - The value to determine the percentage of.\n * @param {number} min - The minimum value.\n * @param {number} [max] - The maximum value.\n * @param {number} [upperMax] - The mid-way point in the range that represents 100%.\n *\n * @return {number} A value between 0 and 1 representing the percentage.\n */\nexport function Percent (value: number, min: number, max?: number, upperMax?: number): number\n{\n    if (max === undefined) { max = min + 1; }\n\n    let percentage = (value - min) / (max - min);\n\n    if (percentage > 1)\n    {\n        if (upperMax !== undefined)\n        {\n            percentage = ((upperMax - value)) / (upperMax - max);\n\n            if (percentage < 0)\n            {\n                percentage = 0;\n            }\n        }\n        else\n        {\n            percentage = 1;\n        }\n    }\n    else if (percentage < 0)\n    {\n        percentage = 0;\n    }\n\n    return percentage;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { MATH_CONST } from './const';\n\n/**\n * Convert the given angle in radians, to the equivalent angle in degrees.\n *\n * @function Phaser.Math.RadToDeg\n * @since 3.0.0\n *\n * @param {number} radians - The angle in radians to convert ot degrees.\n *\n * @return {number} The given angle converted to degrees.\n */\nexport function RadToDeg (radians: number): number\n{\n    return radians * MATH_CONST.RAD_TO_DEG;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Round a value to the given precision.\n * \n * For example:\n * \n * ```javascript\n * RoundTo(123.456, 0) = 123\n * RoundTo(123.456, 1) = 120\n * RoundTo(123.456, 2) = 100\n * ```\n * \n * To round the decimal, i.e. to round to precision, pass in a negative `place`:\n * \n * ```javascript\n * RoundTo(123.456789, 0) = 123\n * RoundTo(123.456789, -1) = 123.5\n * RoundTo(123.456789, -2) = 123.46\n * RoundTo(123.456789, -3) = 123.457\n * ```\n *\n * @function Phaser.Math.RoundTo\n * @since 3.0.0\n *\n * @param {number} value - The value to round.\n * @param {number} [place=0] - The place to round to. Positive to round the units, negative to round the decimal.\n * @param {number} [base=10] - The base to round in. Default is 10 for decimal.\n *\n * @return {number} The rounded value.\n */\nexport function RoundTo (value: number, place: number = 0, base: number = 10): number\n{\n    const p = Math.pow(base, -place);\n\n    return Math.round(value * p) / p;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * @typedef {object} Phaser.Types.Math.SinCosTable\n * @since 3.0.0\n *\n * @property {number[]} sin - The sine values.\n * @property {number[]} cos - The cosine values.\n * @property {number} length - The length.\n */\n\ntype SinCosTable = { sin: number[]; cos: number[]; length: number };\n\n/**\n * Generate a series of sine and cosine values.\n *\n * @function Phaser.Math.SinCosTableGenerator\n * @since 3.0.0\n *\n * @param {number} length - The number of values to generate.\n * @param {number} [sinAmp=1] - The sine value amplitude.\n * @param {number} [cosAmp=1] - The cosine value amplitude.\n * @param {number} [frequency=1] - The frequency of the values.\n *\n * @return {SinCosTable} The generated values.\n */\nexport function SinCosTableGenerator (length: number, sinAmp: number = 1, cosAmp: number = 1, frequency: number = 1): SinCosTable\n{\n    frequency *= Math.PI / length;\n\n    const cos = [];\n    const sin = [];\n\n    for (let c = 0; c < length; c++)\n    {\n        cosAmp -= sinAmp * frequency;\n        sinAmp += cosAmp * frequency;\n\n        cos[c] = cosAmp;\n        sin[c] = sinAmp;\n    }\n\n    return {\n        sin,\n        cos,\n        length\n    };\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Checks if the two values are within the given `tolerance` of each other.\n *\n * @function Phaser.Math.Within\n * @since 3.0.0\n *\n * @param {number} a - The first value to use in the calculation.\n * @param {number} b - The second value to use in the calculation.\n * @param {number} tolerance - The tolerance. Anything equal to or less than this value is considered as being within range.\n *\n * @return {boolean} Returns `true` if `a` is less than or equal to the tolerance of `b`.\n */\nexport function Within (a: number, b: number, tolerance: number): boolean\n{\n    return (Math.abs(a - b) <= tolerance);\n}\n", "import { Clamp } from '../../../math';\nimport { GetVertexBufferEntry } from '../renderpass/GetVertexBufferEntry';\nimport { IFrame } from '../../../textures/IFrame';\nimport { IRenderPass } from '../renderpass/IRenderPass';\nimport { ITexture } from '../../../textures/ITexture';\nimport { PackColor } from '../colors/PackColor';\n\nexport function DrawImagePart (renderPass: IRenderPass, texture: ITexture, x0: number, y0: number, x1: number, y1: number, dx: number, dy: number, dw?: number, dh?: number, alpha: number = 1): void\n{\n    const { F32, U32, offset } = GetVertexBufferEntry(renderPass, 1);\n\n    const packedColor = PackColor(0xffffff, alpha);\n\n    const frame: IFrame = texture.firstFrame;\n\n    const textureIndex = renderPass.textures.set(texture);\n\n    const frameWidth = frame.width;\n    const frameHeight = frame.height;\n\n    //  Keep the coordinates in bounds\n    x0 = Clamp(x0, 0, frameWidth);\n    x1 = Clamp(x1, x0, frameWidth);\n    y0 = Clamp(y0, 0, frameHeight);\n    y1 = Clamp(y1, y0, frameHeight);\n\n    const uRange = frame.u1 - frame.u0;\n    const vRange = frame.v1 - frame.v0;\n\n    const u0 = frame.u0 + (uRange * (x0 / frameWidth));\n    const v0 = frame.v0 + (vRange * (y0 / frameHeight));\n    const u1 = frame.u0 + (uRange * (x1 / frameWidth));\n    const v1 = frame.v0 + (vRange * (y1 / frameHeight));\n\n    if (dw === undefined || dw === null)\n    {\n        dw = x1 - x0;\n    }\n\n    if (dh === undefined || dh === null)\n    {\n        dh = y1 - y0;\n    }\n\n    //  top left\n    F32[offset + 0] = dx;\n    F32[offset + 1] = dy;\n    F32[offset + 2] = u0;\n    F32[offset + 3] = v0;\n    F32[offset + 4] = textureIndex;\n    U32[offset + 5] = packedColor;\n\n    //  bottom left\n    F32[offset + 6] = dx;\n    F32[offset + 7] = dy + dh;\n    F32[offset + 8] = u0;\n    F32[offset + 9] = v1;\n    F32[offset + 10] = textureIndex;\n    U32[offset + 11] = packedColor;\n\n    //  bottom right\n    F32[offset + 12] = dx + dw;\n    F32[offset + 13] = dy + dh;\n    F32[offset + 14] = u1;\n    F32[offset + 15] = v1;\n    F32[offset + 16] = textureIndex;\n    U32[offset + 17] = packedColor;\n\n    //  top right\n    F32[offset + 18] = dx + dw;\n    F32[offset + 19] = dy;\n    F32[offset + 20] = u1;\n    F32[offset + 21] = v0;\n    F32[offset + 22] = textureIndex;\n    U32[offset + 23] = packedColor;\n}\n", "import { GetVertexBufferEntry } from '../renderpass/GetVertexBufferEntry';\nimport { IFrame } from '../../../textures/IFrame';\nimport { IRenderPass } from '../renderpass/IRenderPass';\nimport { ITexture } from '../../../textures/ITexture';\nimport { PackColor } from '../colors/PackColor';\n\nexport function DrawQuad (renderPass: IRenderPass, texture: ITexture, frame: string | number | IFrame, x0: number, y0: number, x1: number, y1: number, x2: number, y2: number, x3: number, y3: number, alpha: number = 1): void\n{\n    const { F32, U32, offset } = GetVertexBufferEntry(renderPass, 1);\n\n    const packedColor = PackColor(0xffffff, alpha);\n\n    frame = texture.getFrame(frame);\n\n    const textureIndex = renderPass.textures.set(texture);\n\n    //  top left\n    F32[offset + 0] = x0;\n    F32[offset + 1] = y0;\n    F32[offset + 2] = frame.u0;\n    F32[offset + 3] = frame.v0;\n    F32[offset + 4] = textureIndex;\n    U32[offset + 5] = packedColor;\n\n    //  bottom left\n    F32[offset + 6] = x1;\n    F32[offset + 7] = y1;\n    F32[offset + 8] = frame.u0;\n    F32[offset + 9] = frame.v1;\n    F32[offset + 10] = textureIndex;\n    U32[offset + 11] = packedColor;\n\n    //  bottom right\n    F32[offset + 12] = x2;\n    F32[offset + 13] = y2;\n    F32[offset + 14] = frame.u1;\n    F32[offset + 15] = frame.v1;\n    F32[offset + 16] = textureIndex;\n    U32[offset + 17] = packedColor;\n\n    //  top right\n    F32[offset + 18] = x3;\n    F32[offset + 19] = y3;\n    F32[offset + 20] = frame.u1;\n    F32[offset + 21] = frame.v0;\n    F32[offset + 22] = textureIndex;\n    U32[offset + 23] = packedColor;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { ICircle } from './ICircle';\n\n/**\n * Check to see if the Circle contains the given x / y coordinates.\n\n */\nexport function CircleContains (circle: ICircle, x: number, y: number): boolean\n{\n    //  Check if x/y are within the bounds first\n    if (circle.radius > 0 && x >= circle.left && x <= circle.right && y >= circle.top && y <= circle.bottom)\n    {\n        const dx = (circle.x - x) * (circle.x - x);\n        const dy = (circle.y - y) * (circle.y - y);\n\n        return (dx + dy) <= (circle.radius * circle.radius);\n    }\n    else\n    {\n        return false;\n    }\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { CircleContains } from './CircleContains';\n\n/**\n * @classdesc\n * A Circle object.\n *\n * This is a geometry object, containing numerical values and related methods to inspect and modify them.\n * It is not a Game Object, in that you cannot add it to the display list, and it has no texture.\n * To render a Circle you should look at the capabilities of the Graphics class.\n *\n * @class Circle\n * @memberof Phaser.Geom\n * @constructor\n * @since 3.0.0\n *\n * @param {number} [x=0] - The x position of the center of the circle.\n * @param {number} [y=0] - The y position of the center of the circle.\n * @param {number} [radius=0] - The radius of the circle.\n */\nexport class Circle\n{\n    x: number;\n    y: number;\n\n    private _radius: number;\n    private _diameter: number;\n\n    constructor (x: number = 0, y: number = 0, radius: number = 0)\n    {\n        this.set(x, y, radius);\n    }\n\n    set (x: number = 0, y: number = 0, radius: number = 0): this\n    {\n        this.x = x;\n        this.y = y;\n        this.radius = radius;\n\n        return this;\n    }\n\n    contains (x: number, y: number): boolean\n    {\n        return CircleContains(this, x, y);\n    }\n\n    get radius (): number\n    {\n        return this._radius;\n    }\n\n    set radius (value: number)\n    {\n        this._radius = value;\n        this._diameter = value * 2;\n    }\n\n    get diameter (): number\n    {\n        return this._diameter;\n    }\n\n    set diameter (value: number)\n    {\n        this._diameter = value;\n        this._radius = value * 0.5;\n    }\n\n    get left (): number\n    {\n        return this.x - this._radius;\n    }\n\n    set left (value: number)\n    {\n        this.x = value + this._radius;\n    }\n\n    get right (): number\n    {\n        return this.x + this._radius;\n    }\n\n    set right (value: number)\n    {\n        this.x = value - this._radius;\n    }\n\n    get top (): number\n    {\n        return this.y - this._radius;\n    }\n\n    set top (value: number)\n    {\n        this.y = value + this._radius;\n    }\n\n    get bottom (): number\n    {\n        return this.y + this._radius;\n    }\n\n    set bottom (value: number)\n    {\n        this.y = value - this._radius;\n    }\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { CircleContains } from './CircleContains';\nimport { ICircle } from './ICircle';\nimport { Vec2 } from '../../math/vec2/Vec2';\n\n/**\n * Check to see if the Circle contains the given Point object.\n */\nexport function CircleContainsPoint (circle: ICircle, point: Vec2): boolean\n{\n    return CircleContains(circle, point.x, point.y);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { CircleContains } from './CircleContains';\nimport { ICircle } from './ICircle';\nimport { IRectangle } from '../rectangle/IRectangle';\n\n/**\n * Check to see if the Circle contains all four points of the given Rectangle object.\n */\nexport function CircleContainsRect (circle: ICircle, rect: IRectangle): boolean\n{\n    return (\n        CircleContains(circle, rect.x, rect.y) &&\n        CircleContains(circle, rect.right, rect.y) &&\n        CircleContains(circle, rect.x, rect.bottom) &&\n        CircleContains(circle, rect.right, rect.bottom)\n    );\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { ICircle } from './ICircle';\n\n/**\n * Compares the `x`, `y` and `radius` properties of the two given Circles.\n * Returns `true` if they all match, otherwise returns `false`.\n */\nexport function CircleEquals (circle: ICircle, toCompare: ICircle): boolean\n{\n    return (\n        circle.x === toCompare.x &&\n        circle.y === toCompare.y &&\n        circle.radius === toCompare.radius\n    );\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { Circle } from './Circle';\nimport { ICircle } from './ICircle';\n\n/**\n * Creates a new Circle instance based on the values contained in the given source.\n */\nexport function CloneCircle (source: ICircle): Circle\n{\n    return new Circle(source.x, source.y, source.radius);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { ICircle } from './ICircle';\n\n/**\n * Copies the `x`, `y` and `radius` properties from the `source` Circle\n * into the given `dest` Circle, then returns the `dest` Circle.\n */\nexport function CopyCircleFrom (source: ICircle, dest: ICircle): ICircle\n{\n    return dest.set(source.x, source.y, source.radius);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { ICircle } from './ICircle';\n\n/**\n * Calculates the area of the circle.\n */\nexport function GetCircleArea (circle: ICircle): number\n{\n    return (circle.radius > 0) ? Math.PI * circle.radius * circle.radius : 0;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { ICircle } from './ICircle';\nimport { Rectangle } from '../rectangle/Rectangle';\n\n/**\n * Returns the bounds of the Circle object.\n */\nexport function GetCircleBounds (circle: ICircle, out: Rectangle = new Rectangle()): Rectangle\n{\n    return out.set(\n        circle.left,\n        circle.top,\n        circle.diameter,\n        circle.diameter\n    );\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { ICircle } from './ICircle';\n\nexport function GetCircleCircumference (circle: ICircle): number\n{\n    return 2 * (Math.PI * circle.radius);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { ICircle } from './ICircle';\nimport { Vec2 } from '../../math/vec2/Vec2';\n\nexport function GetCircleCircumferencePoint (circle: ICircle, angle: number, out: Vec2 = new Vec2()): Vec2\n{\n    return out.set(\n        circle.x + (circle.radius * Math.cos(angle)),\n        circle.y + (circle.radius * Math.sin(angle))\n    );\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { FromPercent } from '../../math/FromPercent';\nimport { GetCircleCircumferencePoint } from './GetCircleCircumferencePoint';\nimport { ICircle } from './ICircle';\nimport { MATH_CONST } from '../../math/const';\nimport { Vec2 } from '../../math/vec2/Vec2';\n\n/**\n * Returns a Point object containing the coordinates of a point on the circumference of the Circle\n * based on the given angle normalized to the range 0 to 1. I.e. a value of 0.5 will give the point\n * at 180 degrees around the circle.\n */\nexport function GetCirclePoint (circle: ICircle, position: number, out: Vec2 = new Vec2()): Vec2\n{\n    const angle = FromPercent(position, 0, MATH_CONST.PI2);\n\n    return GetCircleCircumferencePoint(circle, angle, out);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { FromPercent } from '../../math/FromPercent';\nimport { GetCircleCircumference } from './GetCircleCircumference';\nimport { GetCircleCircumferencePoint } from './GetCircleCircumferencePoint';\nimport { ICircle } from './ICircle';\nimport { MATH_CONST } from '../../math/const';\nimport { Vec2 } from '../../math/vec2/Vec2';\n\n/**\n * Returns an array of Point objects containing the coordinates of the points around the circumference of the Circle,\n * based on the given quantity or stepRate values.\n */\nexport function GetCirclePoints (circle: ICircle, step: number, quantity: number = 0, out: Vec2[] = []): Vec2[]\n{\n    //  If quantity is a falsey value (false, null, 0, undefined, etc) then we calculate it based on the stepRate instead.\n    if (!quantity)\n    {\n        quantity = GetCircleCircumference(circle) / step;\n    }\n\n    for (let i = 0; i < quantity; i++)\n    {\n        const angle = FromPercent(i / quantity, 0, MATH_CONST.PI2);\n\n        out.push(GetCircleCircumferencePoint(circle, angle));\n    }\n\n    return out;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { ICircle } from './ICircle';\nimport { Vec2 } from '../../math/vec2/Vec2';\n\n/**\n * Returns a uniformly distributed random point from anywhere within the given Circle.\n */\nexport function GetCircleRandomPoint (circle: ICircle, out: Vec2 = new Vec2()): Vec2\n{\n    const t = 2 * Math.PI * Math.random();\n    const u = Math.random() + Math.random();\n    const r = (u > 1) ? 2 - u : u;\n    const x = r * Math.cos(t);\n    const y = r * Math.sin(t);\n\n    return out.set(\n        circle.x + (x * circle.radius),\n        circle.y + (y * circle.radius)\n    );\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { ICircle } from './ICircle';\n\n/**\n * Translates the Circle by the values given.\n */\nexport function TranslateCircle (circle: ICircle, x: number, y: number): ICircle\n{\n    circle.x += x;\n    circle.y += y;\n\n    return circle;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { ICircle } from './ICircle';\nimport { Vec2 } from '../../math/vec2/Vec2';\n\n/**\n * Offsets the Circle by the values given in the `x` and `y` properties of the Point object.\n */\nexport function TranslateCirclePoint (circle: ICircle, point: Vec2): ICircle\n{\n    circle.x += point.x;\n    circle.y += point.y;\n\n    return circle;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { Circle } from './Circle';\nimport { CircleContains } from './CircleContains';\nimport { CircleContainsPoint } from './CircleContainsPoint';\nimport { CircleContainsRect } from './CircleContainsRect';\nimport { CircleEquals } from './CircleEquals';\nimport { CloneCircle } from './CloneCircle';\nimport { CopyCircleFrom } from './CopyCircleFrom';\nimport { GetCircleArea } from './GetCircleArea';\nimport { GetCircleBounds } from './GetCircleBounds';\nimport { GetCircleCircumference } from './GetCircleCircumference';\nimport { GetCircleCircumferencePoint } from './GetCircleCircumferencePoint';\nimport { GetCirclePoint } from './GetCirclePoint';\nimport { GetCirclePoints } from './GetCirclePoints';\nimport { GetCircleRandomPoint } from './GetCircleRandomPoint';\nimport { TranslateCircle } from './TranslateCircle';\nimport { TranslateCirclePoint } from './TranslateCirclePoint';\n\nexport {\n    Circle,\n    CircleContains,\n    CircleContainsPoint,\n    CircleContainsRect,\n    CircleEquals,\n    GetCircleRandomPoint,\n    CloneCircle,\n    CopyCircleFrom,\n    GetCircleArea,\n    GetCircleBounds,\n    GetCircleCircumference,\n    GetCircleCircumferencePoint,\n    GetCirclePoint,\n    GetCirclePoints,\n    TranslateCircle,\n    TranslateCirclePoint\n};\n", "/*\n    Based on MIT code by x6ud\n*/\n\ntype Point = { x: number, y: number };\n\n// Counterclockwise for polygon, clockwise for holes.\ntype Contour = Point[];\n\ntype PartitionVertex = {\n    isActive: boolean;\n    isConvex: boolean;\n    isEar: boolean;\n    point: Point;\n    angleCos: number;\n    prev?: PartitionVertex;\n    next?: PartitionVertex;\n    index: number;\n    shouldUpdate: boolean;\n};\n\n// Signed area.\nfunction Area (a: Point, b: Point, c: Point)\n{\n    return (b.y - a.y) * (c.x - b.x) - (b.x - a.x) * (c.y - b.y);\n}\n\n// Whether corner of a counterclockwise polygon is convex.\nfunction IsConvex (p1: Point, p2: Point, p3: Point): boolean\n{\n    return Area(p1, p2, p3) < 0;\n}\n\n// Whether point is inside a corner of a counterclockwise polygon.\nfunction InCone (p1: Point, p2: Point, p3: Point, p: Point): boolean\n{\n    const convex = IsConvex(p1, p2, p3);\n\n    if (convex)\n    {\n        return IsConvex(p1, p2, p) && IsConvex(p2, p3, p);\n    }\n    else\n    {\n        return IsConvex(p1, p2, p) || IsConvex(p2, p3, p);\n    }\n}\n\nfunction Equals (a: Point, b: Point)\n{\n    return a.x === b.x && a.y === b.y;\n}\n\n// Check if two lines intersect.\nfunction Intersects (p11: Point, p12: Point, p21: Point, p22: Point)\n{\n    if (Equals(p11, p21) || Equals(p11, p22) || Equals(p12, p21) || Equals(p12, p22))\n    {\n        return false;\n    }\n\n    const v1ortX = p12.y - p11.y;\n    const v1ortY = p11.x - p12.x;\n    const v2ortX = p22.y - p21.y;\n    const v2ortY = p21.x - p22.x;\n\n    const v21X = p21.x - p11.x;\n    const v21Y = p21.y - p11.y;\n    const dot21 = v21X * v1ortX + v21Y * v1ortY;\n    const v22X = p22.x - p11.x;\n    const v22Y = p22.y - p11.y;\n    const dot22 = v22X * v1ortX + v22Y * v1ortY;\n\n    const v11X = p11.x - p21.x;\n    const v11Y = p11.y - p21.y;\n    const dot11 = v11X * v2ortX + v11Y * v2ortY;\n    const v12X = p12.x - p21.x;\n    const v12Y = p12.y - p21.y;\n    const dot12 = v12X * v2ortX + v12Y * v2ortY;\n\n    return !(dot11 * dot12 > 0 || dot21 * dot22 > 0);\n}\n\nfunction IsClockwise (polygon: Contour)\n{\n    let sum = 0;\n\n    for (let i = 0, len = polygon.length; i < len; ++i)\n    {\n        const p1 = polygon[i];\n        const p2 = polygon[(i + 1) % len];\n\n        sum += (p2.x - p1.x) * (p2.y + p1.y);\n    }\n\n    return sum > 0;\n}\n\n/**\n * Removes holes from polygon by merging them with non-hole.\n */\nexport function RemoveHoles (polygon: Contour, holes: Contour[], doNotCheckOrdering: boolean = false): Contour\n{\n    if (!doNotCheckOrdering)\n    {\n        if (IsClockwise(polygon))\n        {\n            throw new Error('Polygon should be counterclockwise');\n        }\n\n        holes.forEach(hole =>\n        {\n            if (!IsClockwise(hole))\n            {\n                throw new Error('Hole should be clockwise');\n            }\n        });\n    }\n\n    holes = holes.slice();\n\n    while (holes.length)\n    {\n        // find the hole point with the largest x\n        let holeIndex = -1;\n        let holePointIndex = -1;\n        let holeLargestX = -Infinity;\n\n        for (let i = 0, holesLen = holes.length; i < holesLen; ++i)\n        {\n            const hole = holes[i];\n\n            for (let j = 0, holeLen = hole.length; j < holeLen; ++j)\n            {\n                const point = hole[j];\n                const x = point.x;\n\n                if (x > holeLargestX)\n                {\n                    holeLargestX = x;\n                    holeIndex = i;\n                    holePointIndex = j;\n                }\n            }\n        }\n\n        // find the farthest polygon vertex on X axis, without polyPoint-holePoint intersects with any edge\n        const holePoint = holes[holeIndex][holePointIndex];\n        const polyLen = polygon.length;\n        let polyPointIndex = -1;\n\n        for (let i = 0; i < polyLen; ++i)\n        {\n            const p1 = polygon[(i + polyLen - 1) % polyLen];\n            const p2 = polygon[i];\n            const p3 = polygon[(i + 1) % polyLen];\n\n            if (!InCone(p1, p2, p3, holePoint))\n            {\n                continue;\n            }\n\n            const polyPoint = p2;\n\n            if (polyPointIndex >= 0)\n            {\n                const bestPoint = polygon[polyPointIndex];\n                const v1x = polyPoint.x - holePoint.x;\n                const v1y = polyPoint.y - holePoint.y;\n                const v1Len = Math.sqrt(v1x * v1x + v1y * v1y);\n                const v2x = bestPoint.x - holePoint.x;\n                const v2y = bestPoint.y - holePoint.y;\n                const v2Len = Math.sqrt(v2x * v2x + v2y * v2y);\n\n                if (v2x / v2Len > v1x / v1Len)\n                {\n                    continue;\n                }\n            }\n\n            let pointVisible = true;\n\n            for (let j = 0; j < polyLen; ++j)\n            {\n                const lineP1 = polygon[j];\n                const lineP2 = polygon[(j + 1) % polyLen];\n\n                if (Intersects(holePoint, polyPoint, lineP1, lineP2))\n                {\n                    pointVisible = false;\n                    break;\n                }\n            }\n\n            if (pointVisible)\n            {\n                polyPointIndex = i;\n            }\n        }\n\n        if (polyPointIndex < 0)\n        {\n            throw new Error('Failed to find cutting point. There may be self-intersection in the polygon.');\n        }\n\n        const newPoly: Contour = [];\n\n        for (let i = 0; i <= polyPointIndex; ++i)\n        {\n            newPoly.push(polygon[i]);\n        }\n\n        const hole = holes[holeIndex];\n\n        for (let i = 0, len = hole.length; i <= len; ++i)\n        {\n            newPoly.push(hole[(i + holePointIndex) % len]);\n        }\n\n        for (let i = polyPointIndex; i < polyLen; ++i)\n        {\n            newPoly.push(polygon[i]);\n        }\n\n        polygon = newPoly;\n        holes.splice(holeIndex, 1);\n    }\n\n    return polygon;\n}\n\nfunction UpdateVertex (vertex: PartitionVertex, vertices: PartitionVertex[])\n{\n    if (!vertex.shouldUpdate)\n    {\n        return;\n    }\n\n    vertex.shouldUpdate = false;\n\n    const v1 = vertex.prev.point;\n    const v2 = vertex.point;\n    const v3 = vertex.next.point;\n\n    vertex.isConvex = IsConvex(v1, v2, v3);\n\n    let v1x = v1.x - v2.x;\n    let v1y = v1.y - v2.y;\n\n    const v1Len = Math.sqrt(v1x * v1x + v1y * v1y);\n    v1x /= v1Len;\n    v1y /= v1Len;\n\n    let v3x = v3.x - v2.x;\n    let v3y = v3.y - v2.y;\n\n    const v3Len = Math.sqrt(v3x * v3x + v3y * v3y);\n\n    v3x /= v3Len;\n    v3y /= v3Len;\n\n    vertex.angleCos = v1x * v3x + v1y * v3y;\n\n    if (vertex.isConvex)\n    {\n        vertex.isEar = true;\n\n        for (let i = 0, len = vertices.length; i < len; ++i)\n        {\n            const curr = vertices[i];\n\n            if (!curr.isActive || curr === vertex)\n            {\n                continue;\n            }\n\n            if (Equals(v1, curr.point) || Equals(v2, curr.point) || Equals(v3, curr.point))\n            {\n                continue;\n            }\n\n            const areaA = Area(v1, curr.point, v2);\n            const areaB = Area(v2, curr.point, v3);\n            const areaC = Area(v3, curr.point, v1);\n\n            if (areaA > 0 && areaB > 0 && areaC > 0)\n            {\n                vertex.isEar = false;\n                break;\n            }\n\n            if (areaA === 0 && areaB >= 0 && areaC >= 0)\n            {\n                if (Area(v1, curr.prev.point, v2) > 0 || Area(v1, curr.next.point, v2) > 0)\n                {\n                    vertex.isEar = false;\n                    break;\n                }\n            }\n\n            if (areaB === 0 && areaA >= 0 && areaC >= 0)\n            {\n                if (Area(v2, curr.prev.point, v3) > 0 || Area(v2, curr.next.point, v3) > 0)\n                {\n                    vertex.isEar = false;\n                    break;\n                }\n            }\n\n            if (areaC === 0 && areaA >= 0 && areaB >= 0)\n            {\n                if (Area(v3, curr.prev.point, v1) > 0 || Area(v3, curr.next.point, v1) > 0)\n                {\n                    vertex.isEar = false;\n                    break;\n                }\n            }\n        }\n    }\n    else\n    {\n        vertex.isEar = false;\n    }\n}\n\nfunction RemoveCollinearOrDuplicate (start: PartitionVertex): void\n{\n    for (let curr = start, end = start; ;)\n    {\n        if (Equals(curr.point, curr.next.point) || Area(curr.prev.point, curr.point, curr.next.point) === 0)\n        {\n            curr.prev.next = curr.next;\n            curr.next.prev = curr.prev;\n\n            curr.prev.shouldUpdate = true;\n            curr.next.shouldUpdate = true;\n\n            if (curr === curr.next)\n            {\n                break;\n            }\n\n            end = curr.prev!;\n            curr = curr.next!;\n\n            continue;\n        }\n\n        curr = curr.next!;\n\n        if (curr === end)\n        {\n            break;\n        }\n    }\n}\n\n/**\n * Triangulation by ear clipping.\n */\nexport function Triangulate (polygon: Contour, doNotCheckOrdering: boolean = false)\n{\n    if (!doNotCheckOrdering)\n    {\n        if (IsClockwise(polygon))\n        {\n            throw new Error('Polygon should be counterclockwise');\n        }\n    }\n\n    if (polygon.length < 4)\n    {\n        return [ polygon ];\n    }\n\n    const len = polygon.length;\n    const vertices: PartitionVertex[] = [];\n    const triangles: Contour[] = [];\n\n    // init\n    for (let i = 0; i < len; ++i)\n    {\n        vertices.push({\n            isActive: true,\n            isConvex: false,\n            isEar: false,\n            point: polygon[i],\n            angleCos: 0,\n            shouldUpdate: true,\n            index: i\n        });\n    }\n\n    for (let i = 0; i < len; ++i)\n    {\n        const vertex = vertices[i];\n        vertex.prev = vertices[(i + len - 1) % len];\n        vertex.next = vertices[(i + 1) % len];\n    }\n\n    vertices.forEach(vertex => UpdateVertex(vertex, vertices));\n\n    for (let i = 0; i < len - 3; ++i)\n    {\n        let ear: PartitionVertex | null = null;\n\n        // find the most extruded ear\n        for (let j = 0; j < len; ++j)\n        {\n            const vertex = vertices[j];\n\n            if (!vertex.isActive || !vertex.isEar)\n            {\n                continue;\n            }\n\n            if (!ear)\n            {\n                ear = vertex;\n            }\n            else if (vertex.angleCos > ear.angleCos)\n            {\n                ear = vertex;\n            }\n        }\n\n        if (!ear)\n        {\n            for (let i = 0; i < len; ++i)\n            {\n                const vertex = vertices[i];\n\n                if (vertex.isActive)\n                {\n                    const p1 = vertex.prev.point;\n                    const p2 = vertex.point;\n                    const p3 = vertex.next.point;\n\n                    if (Math.abs(Area(p1, p2, p3)) > 1e-5)\n                    {\n                        throw new Error('Failed to find ear. There may be self-intersection in the polygon.');\n                    }\n                }\n            }\n\n            break;\n        }\n\n        triangles.push([ ear.prev.point, ear.point, ear.next.point ]);\n\n        ear.isActive = false;\n\n        ear.prev.next = ear.next;\n        ear.next.prev = ear.prev;\n\n        ear.prev.shouldUpdate = true;\n        ear.next.shouldUpdate = true;\n\n        RemoveCollinearOrDuplicate(ear.next);\n\n        if (i === len - 4)\n        {\n            break;\n        }\n\n        for (let i = 0; i < len; ++i)\n        {\n            UpdateVertex(vertices[i], vertices);\n        }\n    }\n\n    for (let i = 0; i < len; ++i)\n    {\n        const vertex = vertices[i];\n\n        if (vertex.isActive)\n        {\n            vertex.prev.isActive = false;\n            vertex.next.isActive = false;\n\n            const p1 = vertex.prev.point;\n            const p2 = vertex.point;\n            const p3 = vertex.next.point;\n\n            if (Math.abs(Area(p1, p2, p3)) > 1e-5)\n            {\n                triangles.push([ p1, p2, p3 ]);\n            }\n        }\n    }\n\n    return triangles;\n}\n\n/**\n * Convex partition using Hertel-Mehlhorn algorithm.\n */\nexport function ConvexPartition (polygon: Contour, doNotCheckOrdering: boolean = false): Contour[]\n{\n    // check if the poly is already convex\n    let convex = true;\n\n    for (let i = 0, len = polygon.length; i < len; ++i)\n    {\n        if (!IsConvex(\n            polygon[(i + len - 1) % len],\n            polygon[i],\n            polygon[(i + 1) % len]\n        ))\n        {\n            convex = false;\n            break;\n        }\n    }\n\n    if (convex)\n    {\n        return [ polygon ];\n    }\n\n    const ret: Contour[] = [];\n\n    const triangles = Triangulate(polygon, doNotCheckOrdering);\n\n    for (; triangles.length;)\n    {\n        let poly = triangles.splice(0, 1)[0];\n\n        for (let iPoly = 0, polyLen = poly.length; iPoly < polyLen; ++iPoly)\n        {\n            const diag1 = poly[iPoly];\n            const diag2 = poly[(iPoly + 1) % polyLen];\n\n            // find diagonal\n            let tri3: Point | null = null;\n            let iTri2 = 0;\n\n            for (; iTri2 < triangles.length; ++iTri2)\n            {\n                const triangle = triangles[iTri2];\n\n                for (let i = 0; i < 3; ++i)\n                {\n                    const tri1 = triangle[i];\n                    const tri2 = triangle[(i + 1) % 3];\n\n                    if (Equals(diag1, tri2) && Equals(diag2, tri1))\n                    {\n                        tri3 = triangle[(i + 2) % 3];\n                        break;\n                    }\n                }\n\n                if (tri3)\n                {\n                    break;\n                }\n            }\n\n            if (!tri3)\n            {\n                // not a diagonal\n                continue;\n            }\n\n            if (Area(poly[(iPoly + polyLen - 1) % polyLen], diag1, tri3) > 0)\n            {\n                // neither convex nor on the same line\n                continue;\n            }\n\n            if (Area(tri3, diag2, poly[(iPoly + 2) % polyLen]) > 0)\n            {\n                continue;\n            }\n\n            // merge triangle\n            const newPoly: Point[] = [];\n\n            for (let i = (iPoly + 1) % polyLen; i != iPoly; i = (i + 1) % polyLen)\n            {\n                newPoly.push(poly[i]);\n            }\n\n            newPoly.push(diag1, tri3);\n\n            poly = newPoly;\n            polyLen = newPoly.length;\n            iPoly = -1;\n\n            triangles.splice(iTri2, 1);\n        }\n\n        ret.push(poly);\n    }\n\n    return ret;\n}\n", "import { Circle, GetCirclePoints } from '../../../geom/circle';\n\nimport { GetTexture } from '../../../textures/GetTexture';\nimport { GetVertexBufferEntry } from '../renderpass/GetVertexBufferEntry';\nimport { IRenderPass } from '../renderpass/IRenderPass';\nimport { PackColor } from '../colors/PackColor';\nimport { Triangulate } from '../../../geom/PolyPartition';\n\nexport function FillArc (renderPass: IRenderPass, x: number, y: number, radius: number, startAngle: number, endAngle: number, anticlockwise: boolean, color: number, alpha: number = 1): void\n{\n    const packedColor = PackColor(color, alpha);\n\n    const textureIndex = renderPass.textures.set(GetTexture('__WHITE'));\n\n    const points = GetCirclePoints(new Circle(x, y, radius), 8);\n\n    const tris = Triangulate(points);\n\n    const { F32, U32, offset } = GetVertexBufferEntry(renderPass, tris.length);\n\n    let idx = offset;\n\n    tris.forEach(tri =>\n    {\n        //  top left\n        F32[idx + 0] = tri[0].x;\n        F32[idx + 1] = tri[0].y;\n        F32[idx + 2] = 0;\n        F32[idx + 3] = 0;\n        F32[idx + 4] = textureIndex;\n        U32[idx + 5] = packedColor;\n\n        //  bottom left\n        F32[idx + 6] = tri[1].x;\n        F32[idx + 7] = tri[1].y;\n        F32[idx + 8] = 0;\n        F32[idx + 9] = 1;\n        F32[idx + 10] = textureIndex;\n        U32[idx + 11] = packedColor;\n\n        //  bottom right\n        F32[idx + 12] = tri[2].x;\n        F32[idx + 13] = tri[2].y;\n        F32[idx + 14] = 1;\n        F32[idx + 15] = 1;\n        F32[idx + 16] = textureIndex;\n        U32[idx + 17] = packedColor;\n\n        idx += 18;\n    });\n}\n", "import { GetTexture } from '../../../textures/GetTexture';\nimport { GetVertexBufferEntry } from '../renderpass/GetVertexBufferEntry';\nimport { IRenderPass } from '../renderpass/IRenderPass';\nimport { PackColor } from '../colors/PackColor';\n\nexport function FillLine (renderPass: IRenderPass, x0: number, y0: number, x1: number, y1: number, width: number, color: number, alpha: number = 1): void\n{\n    const { F32, U32, offset } = GetVertexBufferEntry(renderPass, 1);\n\n    const packedColor = PackColor(color, alpha);\n\n    const textureIndex = renderPass.textures.set(GetTexture('__WHITE'));\n\n    const dx = x1 - x0;\n    const dy = y1 - y0;\n\n    const len = Math.sqrt(dx * dx + dy * dy);\n\n    const al0 = width * (y1 - y0) / len;\n    const al1 = width * (x0 - x1) / len;\n    const bl0 = width * (y1 - y0) / len;\n    const bl1 = width * (x0 - x1) / len;\n\n    F32[offset + 0] = x0 + al0;\n    F32[offset + 1] = y0 + al1;\n    F32[offset + 2] = 0;\n    F32[offset + 3] = 1;\n    F32[offset + 4] = textureIndex;\n    U32[offset + 5] = packedColor;\n\n    F32[offset + 6] = x0 - al0;\n    F32[offset + 7] = y0 - al1;\n    F32[offset + 8] = 0;\n    F32[offset + 9] = 0;\n    F32[offset + 10] = textureIndex;\n    U32[offset + 11] = packedColor;\n\n    F32[offset + 12] = x1 - bl0;\n    F32[offset + 13] = y1 - bl1;\n    F32[offset + 14] = 1;\n    F32[offset + 15] = 0;\n    F32[offset + 16] = textureIndex;\n    U32[offset + 17] = packedColor;\n\n    F32[offset + 18] = x1 + bl0;\n    F32[offset + 19] = y1 + bl1;\n    F32[offset + 20] = 1;\n    F32[offset + 21] = 1;\n    F32[offset + 22] = textureIndex;\n    U32[offset + 23] = packedColor;\n}\n", "import { GetTexture } from '../../../textures/GetTexture';\nimport { GetVertexBufferEntry } from '../renderpass/GetVertexBufferEntry';\nimport { IRenderPass } from '../renderpass/IRenderPass';\nimport { PackColor } from '../colors/PackColor';\n\nexport function FillRect (renderPass: IRenderPass, x: number, y: number, width: number, height: number, color: number, alpha: number = 1): void\n{\n    const { F32, U32, offset } = GetVertexBufferEntry(renderPass, 1);\n\n    //  TODO - These should only be set if not currently active:\n\n    // SetVertexBuffer(renderPass, renderPass.quadBuffer);\n    // SetShader(renderPass, renderPass.quadShader, 0);\n\n    const packedColor = PackColor(color, alpha);\n\n    const textureIndex = renderPass.textures.set(GetTexture('__WHITE'));\n\n    //  top left\n    F32[offset + 0] = x;\n    F32[offset + 1] = y;\n    F32[offset + 2] = 0;\n    F32[offset + 3] = 1;\n    F32[offset + 4] = textureIndex;\n    U32[offset + 5] = packedColor;\n\n    //  bottom left\n    F32[offset + 6] = x;\n    F32[offset + 7] = y + height;\n    F32[offset + 8] = 0;\n    F32[offset + 9] = 0;\n    F32[offset + 10] = textureIndex;\n    U32[offset + 11] = packedColor;\n\n    //  bottom right\n    F32[offset + 12] = x + width;\n    F32[offset + 13] = y + height;\n    F32[offset + 14] = 1;\n    F32[offset + 15] = 0;\n    F32[offset + 16] = textureIndex;\n    U32[offset + 17] = packedColor;\n\n    //  top right\n    F32[offset + 18] = x + width;\n    F32[offset + 19] = y;\n    F32[offset + 20] = 1;\n    F32[offset + 21] = 1;\n    F32[offset + 22] = textureIndex;\n    U32[offset + 23] = packedColor;\n}\n", "import { GetRGBArray } from '../colors/GetRGBArray';\nimport { GetTexture } from '../../../textures/GetTexture';\nimport { GetVertexBufferEntry } from '../renderpass/GetVertexBufferEntry';\nimport { IRenderPass } from '../renderpass/IRenderPass';\nimport { PackColor } from '../colors/PackColor';\n\nexport function FillTriangle (renderPass: IRenderPass, x1: number, y1: number, x2: number, y2: number, x3: number, y3: number, color: number, alpha: number = 1): void\n{\n    const { F32, U32, offset } = GetVertexBufferEntry(renderPass, 1);\n\n    // const packedColor = PackColor(color, alpha);\n    const packedColor = GetRGBArray(color);\n\n    const textureIndex = renderPass.textures.set(GetTexture('__WHITE'));\n\n    //  top left\n    F32[offset + 0] = x1;\n    F32[offset + 1] = y1;\n    F32[offset + 2] = 0;\n    F32[offset + 3] = 1;\n    F32[offset + 4] = textureIndex;\n    F32[offset + 5] = packedColor[0];\n    F32[offset + 6] = packedColor[1];\n    F32[offset + 7] = packedColor[2];\n    F32[offset + 8] = packedColor[3];\n\n    //  bottom left\n    F32[offset + 9] = x2;\n    F32[offset + 10] = y2;\n    F32[offset + 11] = 0;\n    F32[offset + 12] = 0;\n    F32[offset + 13] = textureIndex;\n    F32[offset + 14] = packedColor[0];\n    F32[offset + 15] = packedColor[1];\n    F32[offset + 16] = packedColor[2];\n    F32[offset + 17] = packedColor[3];\n\n    //  bottom right\n    F32[offset + 18] = x3;\n    F32[offset + 19] = y3;\n    F32[offset + 20] = 1;\n    F32[offset + 21] = 0;\n    F32[offset + 22] = textureIndex;\n    F32[offset + 23] = packedColor[0];\n    F32[offset + 24] = packedColor[1];\n    F32[offset + 25] = packedColor[2];\n    F32[offset + 26] = packedColor[3];\n}\n", "import { DrawFrame } from '../../renderer/webgl1/draw/DrawFrame';\nimport { DrawImage } from '../../renderer/webgl1/draw/DrawImage';\nimport { DrawImagePart } from '../../renderer/webgl1/draw/DrawImagePart';\nimport { DrawQuad } from '../../renderer/webgl1/draw/DrawQuad';\nimport { FillArc } from '../../renderer/webgl1/draw/FillArc';\nimport { FillLine } from '../../renderer/webgl1/draw/FillLine';\nimport { FillRect } from '../../renderer/webgl1/draw/FillRect';\nimport { FillTriangle } from '../../renderer/webgl1/draw/FillTriangle';\nimport { GameObject } from '../GameObject';\nimport { IFrame } from '../../textures/IFrame';\nimport { IRenderPass } from '../../renderer/webgl1/renderpass/IRenderPass';\nimport { ITexture } from '../../textures/ITexture';\n\nexport class DirectDraw extends GameObject\n{\n    readonly type: string = 'DirectDraw';\n\n    alpha: number = 1;\n\n    private renderPass: IRenderPass;\n\n    constructor ()\n    {\n        super();\n    }\n\n    circle (x: number, y: number, radius: number, color: number, alpha: number = 1): this\n    {\n        FillArc(this.renderPass, x, y, radius, 0, 0, false, color, alpha);\n\n        return this;\n    }\n\n    plot (x: number, y: number, color: number, alpha: number = 1): this\n    {\n        FillRect(this.renderPass, x, y, 1, 1, color, this.alpha * alpha);\n\n        return this;\n    }\n\n    box (x: number, y: number, width: number, height: number, color: number, thickness: number = 1, alpha: number = 1): this\n    {\n        //   TODO - The box should be centered on x/y/w/h if thickness > 1\n\n        //  top\n        this.line(x, y, x + width, y, thickness, color, alpha);\n\n        //  bottom\n        this.line(x, y + height - thickness, x + width, y + height - thickness, thickness, color, alpha);\n\n        //  left\n        this.line(x + thickness, y + thickness, x, y + height - thickness - thickness, thickness, color, alpha);\n\n        // right\n        this.line(x + width - thickness, y + thickness, x + width, y + height - thickness - thickness, thickness, color, alpha);\n\n        return this;\n    }\n\n    rect (x: number, y: number, width: number, height: number, color: number, alpha: number = 1): this\n    {\n        FillRect(this.renderPass, x, y, width, height, color, this.alpha * alpha);\n\n        return this;\n    }\n\n    triangle (x1: number, y1: number, x2: number, y2: number, x3: number, y3: number, color: number, alpha: number = 1): this\n    {\n        FillTriangle(this.renderPass, x1, y1, x2, y2, x3, y3, color, this.alpha * alpha);\n\n        return this;\n    }\n\n    line (x0: number, y0: number, x1: number, y1: number, width: number, color: number, alpha: number = 1): this\n    {\n        FillLine(this.renderPass, x0, y0, x1, y1, width, color, this.alpha * alpha);\n\n        return this;\n    }\n\n    image (texture: ITexture, x: number, y: number, alpha: number = 1, scaleX: number = 1, scaleY: number = 1): this\n    {\n        DrawImage(this.renderPass, texture, x, y, this.alpha * alpha, scaleX, scaleY);\n\n        return this;\n    }\n\n    imagePart (texture: ITexture, x0: number, y0: number, x1: number, y1: number, dx: number, dy: number, dw?: number, dh?: number, alpha: number = 1): this\n    {\n        DrawImagePart(this.renderPass, texture, x0, y0, x1, y1, dx, dy, dw, dh, this.alpha * alpha);\n\n        return this;\n    }\n\n    frame (texture: ITexture, frame: string | number | IFrame, x: number, y: number, alpha: number = 1, scaleX: number = 1, scaleY: number = 1): this\n    {\n        DrawFrame(this.renderPass, texture, frame, x, y, this.alpha * alpha, scaleX, scaleY);\n\n        return this;\n    }\n\n    quad (texture: ITexture, frame: string | number | IFrame, x0: number, y0: number, x1: number, y1: number, x2: number, y2: number, x3: number, y3: number, alpha: number = 1): this\n    {\n        DrawQuad(this.renderPass, texture, frame, x0, y0, x1, y1, x2, y2, x3, y3, this.alpha * alpha);\n\n        return this;\n    }\n\n    render (): void\n    {\n    }\n\n    renderGL <T extends IRenderPass> (renderPass: T): void\n    {\n        this.renderPass = renderPass;\n\n        this.render();\n    }\n}\n", "import { IBaseCamera } from '../../../camera/IBaseCamera';\nimport { IRenderPass } from './IRenderPass';\n\n//  Call at the start of each World rendering\n\nexport function Begin (renderPass: IRenderPass, camera2D: IBaseCamera): void\n{\n    renderPass.current2DCamera = camera2D;\n    renderPass.cameraMatrix = camera2D.matrix;\n\n    renderPass.shader.bindDefault();\n}\n", "import { IRenderPass } from './IRenderPass';\n\nexport function Start (renderPass: IRenderPass): void\n{\n    renderPass.current2DCamera = renderPass.quadCamera;\n    renderPass.cameraMatrix = renderPass.quadCamera.matrix;\n\n    renderPass.count = 0;\n    renderPass.flushTotal = 0;\n\n    renderPass.framebuffer.bindDefault();\n    renderPass.blendMode.bindDefault();\n    renderPass.viewport.bindDefault();\n    renderPass.vertexbuffer.bindDefault();\n    renderPass.shader.bindDefault();\n}\n", "export function CreateCanvas (width: number, height: number): CanvasRenderingContext2D\n{\n    const canvas = document.createElement('canvas');\n\n    canvas.width = width;\n    canvas.height = height;\n\n    return canvas.getContext('2d');\n}\n", "import { GameObjectTree } from '../../gameobjects';\n\n//  Returns ALL children IDs based on the given Parent, to any depth\n\nexport function DepthFirstSearchFromParentID (parentID: number): number[]\n{\n    const stack: number[] = [ parentID ];\n    const output: number[] = [];\n\n    while (stack.length > 0)\n    {\n        const node = stack.shift();\n\n        output.push(node);\n\n        const nodeChildren = GameObjectTree.get(node);\n\n        const numChildren = nodeChildren.length;\n\n        if (numChildren > 0)\n        {\n            for (let i = numChildren - 1; i >= 0; i--)\n            {\n                stack.unshift(nodeChildren[i]);\n            }\n        }\n    }\n\n    //  Remove the parent from the results\n    output.shift();\n\n    return output;\n}\n", "import { GameObjectCache } from '../../gameobjects/GameObjectCache';\nimport { GameObjectTree } from '../../gameobjects/GameObjectTree';\nimport { IGameObject } from '../../gameobjects/IGameObject';\n\nexport function GetChildrenFromParentID (id: number): IGameObject[]\n{\n    const out: IGameObject[] = [];\n\n    GameObjectTree.get(id).forEach(childID =>\n    {\n        out.push(GameObjectCache.get(childID));\n    });\n\n    return out;\n}\n", "import { HierarchyComponent } from './HierarchyComponent';\n\nexport function GetNumChildren (id: number): number\n{\n    return HierarchyComponent.numChildren[id];\n}\n", "import { GameObjectCache } from '../../gameobjects/GameObjectCache';\nimport { HierarchyComponent } from './HierarchyComponent';\nimport { IGameObject } from '../../gameobjects/IGameObject';\n\nexport function GetParentGameObject (id: number): IGameObject\n{\n    return GameObjectCache.get(HierarchyComponent.parentID[id]);\n}\n", "import { HierarchyComponent } from './HierarchyComponent';\n\nexport function GetWorldID (id: number): number\n{\n    return HierarchyComponent.worldID[id];\n}\n", "import { GameObjectCache } from '../../gameobjects/GameObjectCache';\nimport { GetWorldID } from './GetWorldID';\nimport { IBaseWorld } from '../../world/IBaseWorld';\n\nexport function GetWorldFromParentID (parentID: number): IBaseWorld | undefined\n{\n    const worldID = GetWorldID(parentID);\n\n    return GameObjectCache.get(worldID) as IBaseWorld;\n}\n", "import { GameObjectTree } from '../../gameobjects/GameObjectTree';\nimport { HierarchyComponent } from './HierarchyComponent';\n\nexport function UpdateNumChildren (id: number): void\n{\n    HierarchyComponent.numChildren[id] = GameObjectTree.get(id).length;\n}\n", "import { HierarchyComponent } from './HierarchyComponent';\nimport { UpdateNumChildren } from './UpdateNumChildren';\n\nexport function SetParentID (childID: number, parentID: number): void\n{\n    HierarchyComponent.parentID[childID] = parentID;\n\n    UpdateNumChildren(parentID);\n}\n", "import { HierarchyComponent } from './HierarchyComponent';\n\nexport function SetWorldID (id: number, worldID: number): void\n{\n    HierarchyComponent.worldID[id] = worldID;\n}\n", "import { GetParentID, GetWorldID } from '../hierarchy';\n\nimport { SetDirtyChildCache } from './SetDirtyChildCache';\nimport { SetDirtyDisplayList } from '.';\nimport { WillCacheChildren } from '../permissions';\n\nexport function SetDirtyParents (childID: number): void\n{\n    let currentParent = GetParentID(childID);\n\n    while (currentParent)\n    {\n        if (WillCacheChildren(currentParent))\n        {\n            SetDirtyChildCache(currentParent);\n        }\n\n        currentParent = GetParentID(currentParent);\n    }\n\n    SetDirtyDisplayList(GetWorldID(childID));\n}\n", "import { DirtyComponent } from './DirtyComponent';\n\nexport function SetDirtyTransform (id: number): void\n{\n    DirtyComponent.transform[id] = 1;\n}\n", "import { DirtyComponent } from './DirtyComponent';\nimport { HierarchyComponent } from '../hierarchy/HierarchyComponent';\n\nexport function SetDirtyWorldDisplayList (id: number): void\n{\n    const worldID = HierarchyComponent.worldID[id];\n\n    DirtyComponent.displayList[worldID] = 1;\n}\n", "import { Extent2DComponent } from './Extent2DComponent';\nimport { SetDirtyTransform } from '../dirty';\n\n//  The area covered by this transform component + origin + size (usually from a Frame)\n\nexport function SetExtent (id: number, x: number, y: number, width: number, height: number): void\n{\n    Extent2DComponent.x[id] = x;\n    Extent2DComponent.y[id] = y;\n    Extent2DComponent.width[id] = width;\n    Extent2DComponent.height[id] = height;\n    Extent2DComponent.right[id] = x + width;\n    Extent2DComponent.bottom[id] = y + height;\n\n    SetDirtyTransform(id);\n}\n", "import { IContainer } from '../gameobjects/container/IContainer';\nimport { IFrame } from './IFrame';\nimport { QuadVertexComponent } from '../components/vertices/QuadVertexComponent';\nimport { SetExtent } from '../components/transform/SetExtent';\nimport { SetUV } from '../components/vertices/SetUV';\nimport { Texture } from './Texture';\nimport { Vertex } from '../components';\n\nexport class Frame implements IFrame\n{\n    texture: Texture;\n    key: string | number;\n\n    //  This is the actual area of the texture to draw to canvas / webgl, including any extruded data.\n    //  This is the same as the 'trimmed' + 'extruded' area from an atlas.\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n\n    trimmed: boolean = false;\n\n    //  Original size of the image before being trimmed or added to an atlas (which can add extrude data to it).\n    sourceSizeWidth: number;\n    sourceSizeHeight: number;\n\n    //  The size of the image having been trimmed, before being added to the atlas (i.e. doesn't have any extrusion values in it)\n    spriteSourceSizeX: number;\n    spriteSourceSizeY: number;\n    spriteSourceSizeWidth: number;\n    spriteSourceSizeHeight: number;\n\n    pivot: { x: number; y: number };\n\n    u0: number;\n    v0: number;\n    u1: number;\n    v1: number;\n\n    constructor (texture: Texture, key: string | number, x: number, y: number, width: number, height: number)\n    {\n        this.texture = texture;\n        this.key = key;\n\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n\n        this.sourceSizeWidth = width;\n        this.sourceSizeHeight = height;\n\n        this.updateUVs();\n    }\n\n    setPivot (x: number, y: number): void\n    {\n        this.pivot = { x, y };\n    }\n\n    setSize (width: number, height: number): void\n    {\n        this.width = width;\n        this.height = height;\n        this.sourceSizeWidth = width;\n        this.sourceSizeHeight = height;\n\n        this.updateUVs();\n    }\n\n    setSourceSize (width: number, height: number): void\n    {\n        this.sourceSizeWidth = width;\n        this.sourceSizeHeight = height;\n    }\n\n    setTrim (width: number, height: number, x: number, y: number, w: number, h: number): void\n    {\n        this.trimmed = true;\n\n        this.sourceSizeWidth = width;\n        this.sourceSizeHeight = height;\n\n        this.spriteSourceSizeX = x;\n        this.spriteSourceSizeY = y;\n        this.spriteSourceSizeWidth = w;\n        this.spriteSourceSizeHeight = h;\n    }\n\n    getExtent (originX: number, originY: number): { left: number; right: number; top: number; bottom: number }\n    {\n        const sourceSizeWidth = this.sourceSizeWidth;\n        const sourceSizeHeight = this.sourceSizeHeight;\n\n        let left: number;\n        let right: number;\n        let top: number;\n        let bottom: number;\n\n        if (this.trimmed)\n        {\n            left = this.spriteSourceSizeX - (originX * sourceSizeWidth);\n            right = left + this.spriteSourceSizeWidth;\n\n            top = this.spriteSourceSizeY - (originY * sourceSizeHeight);\n            bottom = top + this.spriteSourceSizeHeight;\n        }\n        else\n        {\n            left = -originX * sourceSizeWidth;\n            right = left + sourceSizeWidth;\n\n            top = -originY * sourceSizeHeight;\n            bottom = top + sourceSizeHeight;\n        }\n\n        return { left, right, top, bottom };\n    }\n\n    copyToExtent (child: IContainer): this\n    {\n        const originX = child.origin.x;\n        const originY = child.origin.y;\n\n        const sourceSizeWidth = this.sourceSizeWidth;\n        const sourceSizeHeight = this.sourceSizeHeight;\n\n        let x: number;\n        let y: number;\n        let width: number;\n        let height: number;\n\n        if (this.trimmed)\n        {\n            x = this.spriteSourceSizeX - (originX * sourceSizeWidth);\n            y = this.spriteSourceSizeY - (originY * sourceSizeHeight);\n\n            width = this.spriteSourceSizeWidth;\n            height = this.spriteSourceSizeHeight;\n        }\n        else\n        {\n            x = -originX * sourceSizeWidth;\n            y = -originY * sourceSizeHeight;\n\n            width = sourceSizeWidth;\n            height = sourceSizeHeight;\n        }\n\n        SetExtent(child.id, x, y, width, height);\n\n        return this;\n    }\n\n    copyToVertices (id: number): this\n    {\n        const { u0, u1, v0, v1 } = this;\n\n        SetUV(QuadVertexComponent.tl[id], u0, v0);\n        SetUV(QuadVertexComponent.bl[id], u0, v1);\n        SetUV(QuadVertexComponent.br[id], u1, v1);\n        SetUV(QuadVertexComponent.tr[id], u1, v0);\n\n        return this;\n    }\n\n    updateUVs (): void\n    {\n        const { x, y, width, height } = this;\n\n        const baseTextureWidth = this.texture.width;\n        const baseTextureHeight = this.texture.height;\n\n        this.u0 = x / baseTextureWidth;\n        this.v0 = y / baseTextureHeight;\n\n        this.u1 = (x + width) / baseTextureWidth;\n        this.v1 = (y + height) / baseTextureHeight;\n    }\n\n    destroy (): void\n    {\n        this.texture = null;\n    }\n}\n", "import { BindingQueue } from '../renderer/BindingQueue';\nimport { Frame } from './Frame';\nimport { IGLTextureBinding } from '../renderer/webgl1/textures/IGLTextureBinding';\nimport { IGLTextureBindingConfig } from '../renderer/webgl1/textures/IGLTextureBindingConfig';\nimport { ITexture } from './ITexture';\n\nexport class Texture implements ITexture\n{\n    //  Unique identifier of this Texture, if stored in the Texture Manager\n    key: string = '';\n\n    width: number;\n    height: number;\n\n    image: TexImageSource;\n\n    binding: IGLTextureBinding;\n\n    firstFrame: Frame;\n\n    frames: Map<string | number, Frame>;\n\n    data: unknown;\n\n    constructor (image?: TexImageSource, width?: number, height?: number, glConfig?: IGLTextureBindingConfig)\n    {\n        if (image)\n        {\n            width = image.width;\n            height = image.height;\n        }\n\n        this.image = image;\n\n        this.width = width;\n        this.height = height;\n\n        this.frames = new Map();\n\n        this.data = {};\n\n        this.addFrame('__BASE', 0, 0, width, height);\n\n        BindingQueue.add(this, glConfig);\n    }\n\n    addFrame (key: string | number, x: number, y: number, width: number, height: number): Frame\n    {\n        if (this.frames.has(key))\n        {\n            return null;\n        }\n\n        const frame = new Frame(this, key, x, y, width, height);\n\n        this.frames.set(key, frame);\n\n        if (!this.firstFrame || this.firstFrame.key === '__BASE')\n        {\n            this.firstFrame = frame;\n        }\n\n        return frame;\n    }\n\n    getFrame (key?: string | number | Frame): Frame\n    {\n        //  null, undefined, empty string, zero\n        if (!key)\n        {\n            return this.firstFrame;\n        }\n\n        if (key instanceof Frame)\n        {\n            key = key.key;\n        }\n\n        let frame: Frame = this.frames.get(key);\n\n        if (!frame)\n        {\n            console.warn(`Frame missing: ${key}`);\n\n            frame = this.firstFrame;\n        }\n\n        return frame;\n    }\n\n    setSize (width: number, height: number): void\n    {\n        this.width = width;\n        this.height = height;\n\n        const frame = this.frames.get('__BASE');\n\n        frame.setSize(width, height);\n    }\n\n    destroy (): void\n    {\n        if (this.binding)\n        {\n            this.binding.destroy();\n        }\n\n        this.frames.clear();\n\n        this.binding = null;\n        this.data = null;\n        this.image = null;\n        this.firstFrame = null;\n    }\n}\n", "import { GetHeight, GetResolution, GetWidth } from '../../../config/size/';\n\nimport { CreateAttributes } from './CreateAttributes';\nimport { CreateDepthBuffer } from '../fbo/CreateDepthBuffer';\nimport { CreateFramebuffer } from '../fbo/CreateFramebuffer';\nimport { CreateProgram } from './CreateProgram';\nimport { CreateShader } from './CreateShader';\nimport { CreateUniforms } from './CreateUniforms';\nimport { DefaultQuadAttributes } from './DefaultQuadAttributes';\nimport { DefaultQuadUniforms } from './DefaultQuadUniforms';\nimport { DeleteFramebuffer } from '../fbo/DeleteFramebuffer';\nimport { DeleteGLTexture } from '../textures/DeleteGLTexture';\nimport { DeleteShaders } from './DeleteShaders';\nimport { GLTextureBinding } from '../textures/GLTextureBinding';\nimport { IRenderPass } from '../renderpass/IRenderPass';\nimport { IShader } from './IShader';\nimport { IShaderConfig } from './IShaderConfig';\nimport { IVertexAttribPointer } from './IVertexAttribPointer';\nimport { SINGLE_QUAD_FRAG } from '../glsl/SINGLE_QUAD_FRAG';\nimport { SINGLE_QUAD_VERT } from '../glsl/SINGLE_QUAD_VERT';\nimport { Texture } from '../../../textures/Texture';\nimport { gl } from '../GL';\n\nexport class Shader implements IShader\n{\n    program: WebGLProgram;\n\n    attributes: Map<string, IVertexAttribPointer>;\n\n    uniforms: Map<string, unknown>;\n\n    uniformSetters: Map<string, Function>;\n\n    texture: Texture;\n\n    framebuffer: WebGLFramebuffer;\n\n    renderToFramebuffer: boolean = false;\n\n    renderToDepthbuffer: boolean = false;\n\n    isActive: boolean = false;\n\n    constructor (config?: IShaderConfig)\n    {\n        if (config)\n        {\n            this.fromConfig(config);\n        }\n    }\n\n    fromConfig (config: IShaderConfig): void\n    {\n        const {\n            attributes = DefaultQuadAttributes,\n            fragmentShader = SINGLE_QUAD_FRAG,\n            height = GetHeight(),\n            renderToFramebuffer = false,\n            renderToDepthbuffer = false,\n            resolution = GetResolution(),\n            vertexShader = SINGLE_QUAD_VERT,\n            width = GetWidth(),\n            uniforms = DefaultQuadUniforms\n        } = config;\n\n        this.create(fragmentShader, vertexShader, uniforms, attributes);\n\n        if (renderToFramebuffer)\n        {\n            this.renderToFramebuffer = true;\n\n            const texture = new Texture(null, width * resolution, height * resolution);\n            const binding = new GLTextureBinding(texture);\n\n            binding.framebuffer = CreateFramebuffer(binding.texture);\n\n            if (renderToDepthbuffer)\n            {\n                this.renderToDepthbuffer = true;\n\n                binding.depthbuffer = CreateDepthBuffer(binding.framebuffer, texture.width, texture.height);\n            }\n\n            this.texture = texture;\n            this.framebuffer = binding.framebuffer;\n        }\n    }\n\n    create (fragmentShaderSource: string, vertexShaderSource: string, uniforms: {}, attribs: {}): void\n    {\n        const fragmentShader = CreateShader(fragmentShaderSource, gl.FRAGMENT_SHADER);\n        const vertexShader = CreateShader(vertexShaderSource, gl.VERTEX_SHADER);\n\n        if (!fragmentShader || !vertexShader)\n        {\n            return;\n        }\n\n        const program = CreateProgram(fragmentShader, vertexShader);\n\n        if (!program)\n        {\n            return;\n        }\n\n        const currentProgram = gl.getParameter(gl.CURRENT_PROGRAM);\n\n        gl.useProgram(program);\n\n        this.program = program;\n\n        this.uniformSetters = CreateUniforms(program);\n\n        this.uniforms = new Map();\n\n        //  Copy starting values from the config object to the uniforms map\n        for (const [ key, value ] of Object.entries(uniforms))\n        {\n            this.uniforms.set(key, value);\n        }\n\n        this.attributes = CreateAttributes(program, attribs);\n\n        gl.useProgram(currentProgram);\n\n        this.isActive = false;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    updateUniforms (renderPass: IRenderPass): void\n    {\n        //  Use this to set any extra uniform values prior to the bind\n    }\n\n    bind (renderPass: IRenderPass): boolean\n    {\n        const uniforms = this.uniforms;\n\n        uniforms.set('uProjectionMatrix', renderPass.projectionMatrix.data);\n        uniforms.set('uCameraMatrix', renderPass.cameraMatrix.data);\n\n        this.updateUniforms(renderPass);\n\n        return this.setUniforms(renderPass);\n    }\n\n    setUniform (key: string, value: unknown): void\n    {\n        const uniforms = this.uniforms;\n\n        if (uniforms.has(key))\n        {\n            uniforms.set(key, value);\n\n            const setter = this.uniformSetters.get(key);\n\n            setter(value);\n        }\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    setUniforms (renderPass: IRenderPass): boolean\n    {\n        if (!this.program)\n        {\n            return false;\n        }\n\n        gl.useProgram(this.program);\n\n        this.isActive = true;\n\n        const uniforms = this.uniforms;\n\n        for (const [ name, setter ] of this.uniformSetters.entries())\n        {\n            setter(uniforms.get(name));\n        }\n\n        return true;\n    }\n\n    //  stride = vertexByteSize\n    setAttributes (renderPass: IRenderPass): void\n    {\n        if (this.program)\n        {\n            const stride = renderPass.vertexbuffer.current.vertexByteSize;\n\n            this.attributes.forEach(attrib =>\n            {\n                gl.vertexAttribPointer(attrib.index, attrib.size, attrib.type, attrib.normalized, stride, attrib.offset);\n            });\n        }\n    }\n\n    destroy (): void\n    {\n        DeleteShaders(this.program);\n        DeleteGLTexture(this.texture);\n        DeleteFramebuffer(this.framebuffer);\n\n        this.uniforms.clear();\n        this.uniformSetters.clear();\n        this.attributes.clear();\n\n        this.program = null;\n        this.texture = null;\n        this.framebuffer = null;\n    }\n}\n", "import { DefaultQuadAttributes } from './DefaultQuadAttributes';\nimport { IRenderPass } from '../renderpass/IRenderPass';\nimport { IShader } from './IShader';\nimport { IShaderConfig } from './IShaderConfig';\nimport { Shader } from './Shader';\n\n//  Do we even need this class? As Shader defaults to this anyway :)\n\nexport class QuadShader extends Shader implements IShader\n{\n    constructor (config: IShaderConfig = {})\n    {\n        config.attributes = config?.attributes || DefaultQuadAttributes;\n\n        super(config);\n    }\n\n    /*\n    bind (renderPass: IRenderPass): boolean\n    {\n        const uniforms = this.uniforms;\n\n        uniforms.set('uProjectionMatrix', renderPass.projectionMatrix.data);\n        uniforms.set('uCameraMatrix', renderPass.cameraMatrix.data);\n\n        return super.bind(renderPass);\n    }\n    */\n}\n", "export const MULTI_QUAD_FRAG =\n`#define SHADER_NAME MULTI_QUAD_FRAG\n#define numTextures %count%\n\nprecision highp float;\n\nvarying vec2 vTextureCoord;\nvarying float vTextureId;\nvarying vec4 vTintColor;\n\nuniform sampler2D uTexture[%count%];\n\nvec4 getSampler (int index, vec2 uv)\n{\n    for (int i = 0; i < numTextures; ++i)\n    {\n        vec4 color = texture2D(uTexture[i], uv);\n\n        if (i == index)\n        {\n            return color;\n        }\n    }\n\n    //  Return black\n    return vec4(0);\n}\n\nvoid main (void)\n{\n    vec4 color = getSampler(int(vTextureId), vTextureCoord);\n\n    gl_FragColor = color * vec4(vTintColor.rgb * vTintColor.a, vTintColor.a);\n}`;\n", "import { GetMaxTextures } from '../../../config/maxtextures/GetMaxTextures';\nimport { IRenderPass } from '../renderpass/IRenderPass';\nimport { IShaderConfig } from './IShaderConfig';\nimport { MULTI_QUAD_FRAG } from '../glsl/MULTI_QUAD_FRAG';\nimport { QuadShader } from './QuadShader';\n\nexport class MultiTextureQuadShader extends QuadShader\n{\n    constructor (config: IShaderConfig = {})\n    {\n        config.fragmentShader = config?.fragmentShader || MULTI_QUAD_FRAG;\n\n        super(config);\n    }\n\n    create (fragmentShaderSource: string, vertexShaderSource: string, uniforms: {}, attribs: {}): void\n    {\n        const maxTextures = GetMaxTextures();\n\n        fragmentShaderSource = fragmentShaderSource.replace(/%count%/gi, `${maxTextures}`);\n\n        super.create(fragmentShaderSource, vertexShaderSource, uniforms, attribs);\n    }\n\n    bind (renderPass: IRenderPass): boolean\n    {\n        this.uniforms.set('uTexture', renderPass.textures.textureIndex);\n\n        return super.bind(renderPass);\n    }\n}\n", "import { IRenderPass } from './IRenderPass';\nimport { IShader } from '../shaders/IShader';\n\nexport type ShaderStackEntry = {\n    shader: IShader;\n    textureID?: number;\n};\n\nexport class ShaderStack\n{\n    renderPass: IRenderPass;\n\n    stack: ShaderStackEntry[];\n    active: IShader;\n    default: ShaderStackEntry;\n    index: number;\n\n    constructor (renderPass: IRenderPass)\n    {\n        this.renderPass = renderPass;\n        this.stack = [];\n    }\n\n    get current (): ShaderStackEntry\n    {\n        return this.stack[this.index];\n    }\n\n    add (shader: IShader, textureID?: number): ShaderStackEntry\n    {\n        const entry = { shader, textureID };\n\n        this.index++;\n\n        //  cursor already at the end of the stack, so we need to grow it\n        if (this.index === this.stack.length)\n        {\n            this.stack.push(entry);\n        }\n        else\n        {\n            this.stack[this.index] = entry;\n        }\n\n        return entry;\n    }\n\n    bindDefault (): void\n    {\n        this.index = 0;\n\n        this.bind(this.default);\n    }\n\n    bind (entry?: ShaderStackEntry): void\n    {\n        if (!entry)\n        {\n            entry = this.current;\n        }\n\n        if (!entry.shader.isActive)\n        {\n            const success = entry.shader.bind(this.renderPass, entry.textureID);\n\n            if (success)\n            {\n                entry.shader.setAttributes(this.renderPass);\n\n                if (this.active && this.active !== entry.shader)\n                {\n                    this.active.isActive = false;\n                }\n\n                this.active = entry.shader;\n            }\n        }\n    }\n\n    pop (): void\n    {\n        this.index--;\n\n        this.bind();\n    }\n\n    set (shader: IShader, textureID?: number): void\n    {\n        const entry = this.add(shader, textureID);\n\n        this.bind(entry);\n    }\n\n    setDefault (shader: IShader, textureID?: number): void\n    {\n        const entry = { shader, textureID };\n\n        //  The default entry always goes into index zero\n        this.stack[0] = entry;\n\n        this.index = 0;\n\n        this.default = entry;\n    }\n}\n", "import { GameInstance } from '../GameInstance';\nimport { IRenderer } from '../renderer/IRenderer';\nimport { IStaticCamera } from './IStaticCamera';\nimport { IStaticWorld } from '../world/IStaticWorld';\nimport { Mat4Identity } from '../math/mat4';\nimport { Matrix2D } from '../math/mat2d/Matrix2D';\nimport { Matrix4 } from '../math/mat4/Matrix4';\nimport { Rectangle } from '../geom/rectangle/Rectangle';\n\nexport class StaticCamera implements IStaticCamera\n{\n    world: IStaticWorld;\n    matrix: Matrix4;\n    renderer: IRenderer;\n    type: string;\n\n    width: number;\n    height: number;\n    bounds: Rectangle;\n\n    dirtyRender: boolean;\n    worldTransform: Matrix2D;\n\n    constructor ()\n    {\n        this.dirtyRender = true;\n\n        const game = GameInstance.get();\n\n        this.renderer = game.renderer;\n\n        this.matrix = Mat4Identity();\n\n        this.bounds = new Rectangle();\n\n        this.worldTransform = new Matrix2D();\n\n        this.reset();\n    }\n\n    reset (): void\n    {\n        const renderer = this.renderer;\n\n        if (renderer)\n        {\n            const width = renderer.width;\n            const height = renderer.height;\n\n            this.width = width;\n            this.height = height;\n        }\n\n        this.bounds.set(0, 0, this.width, this.height);\n    }\n\n    destroy (): void\n    {\n        this.world = null;\n        this.worldTransform = null;\n        this.renderer = null;\n        this.matrix = null;\n        this.bounds = null;\n    }\n}\n", "import { GetMaxTextures, SetMaxTextures } from '../../../config/maxtextures/';\n\nimport { gl } from '../GL';\n\n//  As per the WebGL spec, the browser should always support at least 8 texture units\n//  However, the user can set this to any value they like (lower than this)\n\nexport function CreateTempTextures (): Array<[ number, WebGLTexture ]>\n{\n    let maxGPUTextures: number = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\n\n    const maxConfigTextures = GetMaxTextures();\n\n    if (maxConfigTextures === 0 || maxConfigTextures > maxGPUTextures)\n    {\n        //  Insert gpu limit into config value\n        SetMaxTextures(maxGPUTextures);\n    }\n    else\n    {\n        maxGPUTextures = maxConfigTextures;\n    }\n\n    const textures: Array<[ number, WebGLTexture ]> = [];\n\n    //  Create temp textures to stop WebGL errors on mac os\n    for (let i: number = 0; i < maxGPUTextures; i++)\n    {\n        const tempTexture = gl.createTexture();\n\n        gl.activeTexture(gl.TEXTURE0 + i);\n\n        gl.bindTexture(gl.TEXTURE_2D, tempTexture);\n\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, new Uint8Array([ 0, 0, 255, 255 ]));\n\n        textures.push([ i, tempTexture ]);\n    }\n\n    return textures;\n}\n", "import { CreateTempTextures } from './CreateTempTextures';\nimport { Flush } from './Flush';\nimport { IRenderPass } from './IRenderPass';\nimport { ITexture } from '../../../textures/ITexture';\nimport { Texture } from '../../../textures';\nimport { gl } from '../GL';\n\nexport class TextureStack\n{\n    renderPass: IRenderPass;\n\n    textures: Map<number, ITexture>;\n    tempTextures: Map<number, WebGLTexture>;\n    textureIndex: number[];\n\n    maxTextures: number;\n\n    constructor (renderPass: IRenderPass)\n    {\n        this.renderPass = renderPass;\n    }\n\n    //  directly bind a texture to an index slot\n    bind (texture: Texture, index: number = 0): void\n    {\n        const binding = texture.binding;\n\n        binding.bind(index);\n\n        gl.activeTexture(gl.TEXTURE0 + index);\n        gl.bindTexture(gl.TEXTURE_2D, binding.texture);\n    }\n\n    unbind (index: number = 0): void\n    {\n        gl.activeTexture(gl.TEXTURE0 + index);\n        gl.bindTexture(gl.TEXTURE_2D, this.tempTextures[ index ]);\n    }\n\n    //  request the next available texture and bind it\n    //  returns the new ID\n    set (texture: ITexture): number\n    {\n        if (!texture.binding)\n        {\n            return -1;\n        }\n\n        const binding = texture.binding;\n        const textures = this.textures;\n\n        //  Make sure texture isn't already bound\n        if (!binding.isBound)\n        {\n            //  Is the current texture Map full? If so, flush it all\n            if (textures.size === this.maxTextures)\n            {\n                Flush(this.renderPass);\n\n                this.clear();\n            }\n\n            // Add texture to the map\n            const textureUnit = textures.size;\n\n            gl.activeTexture(gl.TEXTURE0 + textureUnit);\n            gl.bindTexture(gl.TEXTURE_2D, binding.texture);\n\n            textures.set(textureUnit, texture);\n\n            binding.bind(textureUnit);\n        }\n\n        return binding.textureUnit;\n    }\n\n    setDefault (): void\n    {\n        if (this.textures)\n        {\n            this.reset();\n        }\n\n        const tempTextures = CreateTempTextures();\n\n        this.maxTextures = tempTextures.length;\n\n        this.tempTextures = new Map(tempTextures);\n        this.textures = new Map();\n\n        this.textureIndex = [];\n\n        this.tempTextures.forEach((texture, index) =>\n        {\n            this.textureIndex.push(index);\n        });\n    }\n\n    clear (): void\n    {\n        this.textures.forEach(texture => texture.binding.unbind());\n\n        this.textures.clear();\n    }\n\n    reset (): void\n    {\n        this.tempTextures.forEach((texture, index) =>\n        {\n            gl.activeTexture(gl.TEXTURE0 + index);\n\n            gl.bindTexture(gl.TEXTURE_2D, texture);\n        });\n\n        this.clear();\n    }\n}\n", "import { IRenderPass } from './IRenderPass';\nimport { IVertexBuffer } from '../buffers/IVertexBuffer';\nimport { gl } from '../GL';\n\nexport class VertexBufferStack\n{\n    renderPass: IRenderPass;\n\n    stack: IVertexBuffer[];\n    active: IVertexBuffer;\n    default: IVertexBuffer;\n    index: number;\n\n    constructor (renderPass: IRenderPass)\n    {\n        this.renderPass = renderPass;\n        this.stack = [];\n    }\n\n    get current (): IVertexBuffer\n    {\n        return this.stack[this.index];\n    }\n\n    add (buffer: IVertexBuffer): IVertexBuffer\n    {\n        this.index++;\n\n        //  cursor already at the end of the stack, so we need to grow it\n        if (this.index === this.stack.length)\n        {\n            this.stack.push(buffer);\n        }\n        else\n        {\n            this.stack[this.index] = buffer;\n        }\n\n        return buffer;\n    }\n\n    bindDefault (): void\n    {\n        this.index = 0;\n\n        this.bind(this.default);\n    }\n\n    bind (buffer?: IVertexBuffer): void\n    {\n        if (!buffer)\n        {\n            buffer = this.current;\n        }\n\n        if (!buffer.isBound)\n        {\n            const indexBuffer = (buffer.indexed) ? buffer.indexBuffer : null;\n\n            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);\n\n            gl.bindBuffer(gl.ARRAY_BUFFER, buffer.vertexBuffer);\n\n            buffer.isBound = true;\n\n            if (this.active && this.active !== buffer)\n            {\n                this.active.isBound = false;\n            }\n\n            this.active = buffer;\n        }\n    }\n\n    pop (): void\n    {\n        this.index--;\n\n        this.bind();\n    }\n\n    set (buffer: IVertexBuffer): void\n    {\n        const entry = this.add(buffer);\n\n        this.bind(entry);\n    }\n\n    setDefault (buffer: IVertexBuffer): void\n    {\n        //  The default entry always goes into index zero\n        this.stack[0] = buffer;\n\n        this.index = 0;\n\n        this.default = buffer;\n    }\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { IRectangle } from './IRectangle';\n\n/**\n * Compares the `x`, `y`, `width` and `height` properties of two rectangles.\n */\nexport function RectangleEquals (rect: IRectangle, toCompare: IRectangle): boolean\n{\n    return (\n        rect.x === toCompare.x &&\n        rect.y === toCompare.y &&\n        rect.width === toCompare.width &&\n        rect.height === toCompare.height\n    );\n}\n", "import { IRenderPass } from './IRenderPass';\nimport { Rectangle } from '../../../geom/rectangle/Rectangle';\nimport { RectangleEquals } from '../../../geom/rectangle/RectangleEquals';\nimport { gl } from '../GL';\n\nexport class ViewportStack\n{\n    renderPass: IRenderPass;\n\n    stack: Rectangle[];\n    active: Rectangle;\n    default: Rectangle;\n    index: number;\n\n    constructor (renderPass: IRenderPass)\n    {\n        this.renderPass = renderPass;\n        this.stack = [];\n    }\n\n    get current (): Rectangle\n    {\n        return this.stack[this.index];\n    }\n\n    add (x: number = 0, y: number = 0, width: number = 0, height: number = 0): Rectangle\n    {\n        const entry = new Rectangle(x, y, width, height);\n\n        this.index++;\n\n        //  cursor already at the end of the stack, so we need to grow it\n        if (this.index === this.stack.length)\n        {\n            this.stack.push(entry);\n        }\n        else\n        {\n            this.stack[this.index] = entry;\n        }\n\n        return entry;\n    }\n\n    bindDefault (): void\n    {\n        this.index = 0;\n\n        this.bind(this.default);\n    }\n\n    bind (viewport?: Rectangle): void\n    {\n        if (!viewport)\n        {\n            viewport = this.current;\n        }\n\n        if (!this.active || !RectangleEquals(this.active, viewport))\n        {\n            gl.viewport(viewport.x, viewport.y, viewport.width, viewport.height);\n\n            this.active = viewport;\n        }\n    }\n\n    pop (): void\n    {\n        this.index--;\n\n        this.bind();\n    }\n\n    set (x: number = 0, y: number = 0, width: number = 0, height: number = 0): void\n    {\n        const entry = this.add(x, y, width, height);\n\n        this.bind(entry);\n    }\n\n    setDefault (x: number = 0, y: number = 0, width: number = 0, height: number = 0): void\n    {\n        const entry = new Rectangle(x, y, width, height);\n\n        //  The default entry always goes into index zero\n        this.stack[0] = entry;\n\n        this.index = 0;\n\n        this.default = entry;\n    }\n}\n", "import { BlendModeStack } from './BlendModeStack';\nimport { FramebufferStack } from './FramebufferStack';\nimport { GetBatchSize } from '../../../config/batchsize/GetBatchSize';\nimport { GetMaxTextures } from '../../../config/maxtextures';\nimport { IBaseCamera } from '../../../camera/IBaseCamera';\nimport { IRenderPass } from './IRenderPass';\nimport { IShader } from '../shaders/IShader';\nimport { IVertexBuffer } from '../buffers/IVertexBuffer';\nimport { IWebGLRenderer } from '../IWebGLRenderer';\nimport { IndexedVertexBuffer } from '../buffers/IndexedVertexBuffer';\nimport { Mat4Ortho } from '../../../math/mat4/Mat4Ortho';\nimport { Matrix4 } from '../../../math/mat4/Matrix4';\nimport { MultiTextureQuadShader } from '../shaders';\nimport { QuadShader } from '../shaders/QuadShader';\nimport { ShaderStack } from './ShaderStack';\nimport { StaticCamera } from '../../../camera';\nimport { TextureStack } from './TextureStack';\nimport { VertexBuffer } from '../buffers';\nimport { VertexBufferStack } from './VertexBufferStack';\nimport { ViewportStack } from './ViewportStack';\n\nexport class RenderPass implements IRenderPass\n{\n    renderer: IWebGLRenderer;\n\n    projectionMatrix: Matrix4;\n    cameraMatrix: Matrix4;\n\n    count: number = 0;\n    prevCount: number = 0;\n    flushTotal: number = 0;\n\n    //  Stacks\n    framebuffer: FramebufferStack;\n    vertexbuffer: VertexBufferStack;\n    blendMode: BlendModeStack;\n    shader: ShaderStack;\n    viewport: ViewportStack;\n    textures: TextureStack;\n\n    //  Single Texture Quad Shader + Camera\n    quadShader: IShader;\n    quadBuffer: IVertexBuffer;\n    quadCamera: IBaseCamera;\n\n    //  Current 2D Camera\n    current2DCamera: IBaseCamera;\n\n    constructor (renderer: IWebGLRenderer)\n    {\n        this.renderer = renderer;\n\n        this.projectionMatrix = new Matrix4();\n\n        this.framebuffer = new FramebufferStack(this);\n        this.vertexbuffer = new VertexBufferStack(this);\n        this.blendMode = new BlendModeStack(this);\n        this.shader = new ShaderStack(this);\n        this.viewport = new ViewportStack(this);\n        this.textures = new TextureStack(this);\n\n        this.reset();\n    }\n\n    flush (): void\n    {\n        this.prevCount = this.count;\n\n        this.count = 0;\n\n        this.flushTotal++;\n    }\n\n    //  TODO - Call when context is lost and restored\n    reset (): void\n    {\n        const gl = this.renderer.gl;\n\n        const indexLayout = [ 0, 1, 2, 2, 3, 0 ];\n\n        //  TODO - If already created, delete shaders / buffers first (i.e. during context loss)\n\n        //  Default QuadShader (for FBO drawing)\n\n        this.quadShader = new QuadShader();\n        this.quadBuffer = new IndexedVertexBuffer({ name: 'quad', isDynamic: false, indexLayout });\n        this.quadCamera = new StaticCamera();\n\n        //  Default settings\n\n        this.textures.setDefault();\n        this.framebuffer.setDefault();\n        this.blendMode.setDefault(true, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n\n        // this.vertexbuffer.setDefault(new IndexedVertexBuffer({ name: 'sprite', batchSize: GetBatchSize(), indexLayout }));\n        this.vertexbuffer.setDefault(new VertexBuffer({ batchSize: GetBatchSize(), vertexElementSize: 9 }));\n\n        if (GetMaxTextures() === 1)\n        {\n            this.shader.setDefault(new QuadShader());\n        }\n        else\n        {\n            this.shader.setDefault(new MultiTextureQuadShader());\n        }\n    }\n\n    resize (width: number, height: number): void\n    {\n        //  TODO - -1 to 1?\n        Mat4Ortho(0, width, height, 0, -1000, 1000, this.projectionMatrix);\n\n        this.quadCamera.reset();\n\n        this.viewport.setDefault(0, 0, width, height);\n    }\n}\n", "import { WebGLRenderer } from './WebGLRenderer';\n\nexport let instance: WebGLRenderer;\n\nexport const WebGLRendererInstance =\n{\n    get: (): WebGLRenderer =>\n    {\n        return instance;\n    },\n\n    set: (renderer: WebGLRenderer | undefined): void =>\n    {\n        instance = renderer;\n    }\n};\n", "import { IBaseWorld } from './IBaseWorld';\nimport { IScene } from '../scenes/IScene';\n\nexport const WorldList: Map<IScene, IBaseWorld[]> = new Map();\n", "import { GetHeight, GetResolution, GetWidth } from '../../config/size/';\n\nimport { End } from './renderpass/End';\nimport { GL } from './GL';\nimport { GetBackgroundColor } from '../../config/backgroundcolor/GetBackgroundColor';\nimport { GetCompressedTextures } from './textures/GetCompressedTextures';\nimport { GetRGBArray } from './colors/GetRGBArray';\nimport { GetWebGLContext } from '../../config/webglcontext/GetWebGLContext';\nimport { ICompressedTextures } from './textures/ICompressedTextures';\nimport { IRenderPass } from './renderpass/IRenderPass';\nimport { IScene } from '../../scenes/IScene';\nimport { ProcessBindingQueue } from './renderpass/ProcessBindingQueue';\nimport { RenderPass } from './renderpass/RenderPass';\nimport { Start } from './renderpass';\nimport { WebGLRendererInstance } from './WebGLRendererInstance';\nimport { WorldList } from '../../world/WorldList';\n\nexport class WebGLRenderer\n{\n    canvas: HTMLCanvasElement;\n    gl: WebGLRenderingContext;\n\n    renderPass: IRenderPass;\n\n    clearColor = [ 0, 0, 0, 1 ];\n\n    width: number;\n    height: number;\n    resolution: number;\n\n    clearBeforeRender: boolean = true;\n    optimizeRedraw: boolean = true;\n    autoResize: boolean = true;\n\n    contextLost: boolean = false;\n\n    compression: ICompressedTextures;\n\n    constructor ()\n    {\n        this.width = GetWidth();\n        this.height = GetHeight();\n        this.resolution = GetResolution();\n\n        this.setBackgroundColor(GetBackgroundColor());\n\n        const canvas = document.createElement('canvas');\n\n        canvas.addEventListener('webglcontextlost', (event) => this.onContextLost(event), false);\n        canvas.addEventListener('webglcontextrestored', () => this.onContextRestored(), false);\n\n        this.canvas = canvas;\n\n        this.initContext();\n\n        //  By this stage the context is available\n        WebGLRendererInstance.set(this);\n\n        this.renderPass = new RenderPass(this);\n\n        this.resize(this.width, this.height, this.resolution);\n\n        //  Process default textures from the Texture Manager\n        ProcessBindingQueue();\n    }\n\n    initContext (): void\n    {\n        const gl = this.canvas.getContext('webgl', GetWebGLContext());\n\n        GL.set(gl);\n\n        this.gl = gl;\n\n        this.compression = GetCompressedTextures(gl);\n\n        gl.disable(gl.DEPTH_TEST);\n        gl.disable(gl.CULL_FACE);\n    }\n\n    resize (width: number, height: number, resolution: number = 1): void\n    {\n        const calcWidth = width * resolution;\n        const calcHeight = height * resolution;\n\n        this.width = calcWidth;\n        this.height = calcHeight;\n        this.resolution = resolution;\n\n        const canvas = this.canvas;\n\n        canvas.width = calcWidth;\n        canvas.height = calcHeight;\n\n        if (this.autoResize)\n        {\n            canvas.style.width = width.toString() + 'px';\n            canvas.style.height = height.toString() + 'px';\n        }\n\n        this.renderPass.resize(calcWidth, calcHeight);\n    }\n\n    onContextLost (event: Event): void\n    {\n        event.preventDefault();\n\n        this.contextLost = true;\n    }\n\n    onContextRestored (): void\n    {\n        this.contextLost = false;\n\n        this.initContext();\n    }\n\n    setBackgroundColor (color: number): this\n    {\n        GetRGBArray(color, this.clearColor);\n\n        return this;\n    }\n\n    //  TODO - Remove?\n    reset (): void\n    {\n        // this.renderPass.reset();\n    }\n\n    render (willRedraw: boolean, scenes: Map<string, IScene>): void\n    {\n        if (this.contextLost)\n        {\n            return;\n        }\n\n        const gl = this.gl;\n        const renderPass = this.renderPass;\n\n        //  This is only here because if we don't do _something_ with the context,\n        //  GL Spector can't see it!\n        gl.getContextAttributes();\n\n        ProcessBindingQueue();\n\n        //  Nothing dirty? Display the previous frame\n        if (this.optimizeRedraw && !willRedraw)\n        {\n            // return;\n        }\n\n        if (this.clearBeforeRender)\n        {\n            const cls = this.clearColor;\n\n            gl.clearColor(cls[0], cls[1], cls[2], cls[3]);\n            gl.clear(gl.COLOR_BUFFER_BIT);\n        }\n\n        Start(renderPass);\n\n        for (const scene of scenes.values())\n        {\n            const worlds = WorldList.get(scene);\n\n            for (const world of worlds)\n            {\n                if (world.runRender)\n                {\n                    world.renderGL(renderPass);\n                }\n\n                world.postRenderGL(renderPass);\n            }\n        }\n\n        End(renderPass);\n\n        // eslint-disable-next-line no-debugger\n        // debugger;\n    }\n\n    destroy (): void\n    {\n        WebGLRendererInstance.set(undefined);\n    }\n}\n", "import { SetRenderer } from '../renderer/SetRenderer';\nimport { WebGLRenderer } from '../../renderer/webgl1/WebGLRenderer';\n\nexport function WebGL (): () => void\n{\n    return (): void =>\n    {\n        SetRenderer(WebGLRenderer);\n    };\n}\n", "import { CONFIG_DEFAULTS } from '../const';\nimport { ConfigStore } from '../ConfigStore';\n\nexport function SetWebGLContext (contextAttributes: WebGLContextAttributes): void\n{\n    ConfigStore.set(CONFIG_DEFAULTS.WEBGL_CONTEXT, contextAttributes);\n}\n", "import { CONFIG_DEFAULTS } from '../const';\nimport { ConfigStore } from '../ConfigStore';\n\nexport function SetWorldSize (size: number): void\n{\n    ConfigStore.set(CONFIG_DEFAULTS.WORLD_SIZE, size);\n}\n", "import { AddChildAt } from './AddChildAt';\nimport { IGameObject } from '../gameobjects/IGameObject';\n\nexport function AddChild <P extends IGameObject, C extends IGameObject> (parent: P, child: C): C\n{\n    return AddChildAt(parent, child);\n}\n", "import { IGameObject } from '../gameobjects/IGameObject';\nimport { RemoveChild } from './RemoveChild';\n\nexport function RemoveChildren <P extends IGameObject> (parent: P, ...children: IGameObject[]): IGameObject[]\n{\n    children.forEach(child =>\n    {\n        RemoveChild(parent, child);\n    });\n\n    return children;\n}\n", "import { GetElement } from './GetElement';\n\nexport function AddToDOM (element: HTMLElement, parent?: string | HTMLElement): HTMLElement\n{\n    const target: HTMLElement = GetElement(parent);\n\n    target.appendChild(element);\n\n    return element;\n}\n", "export function DOMContentLoaded (callback: () => void): void\n{\n    const readyState = document.readyState;\n\n    if (readyState === 'complete' || readyState === 'interactive')\n    {\n        callback();\n\n        return;\n    }\n\n    const check = (): void =>\n    {\n        document.removeEventListener('deviceready', check, true);\n        document.removeEventListener('DOMContentLoaded', check, true);\n        window.removeEventListener('load', check, true);\n\n        callback();\n    };\n\n    // TODO - Swap is IsCordova call\n\n    if (!document.body)\n    {\n        window.setTimeout(check, 20);\n    }\n    else if (window.hasOwnProperty('cordova'))\n    {\n        document.addEventListener('deviceready', check, true);\n    }\n    else\n    {\n        document.addEventListener('DOMContentLoaded', check, true);\n        window.addEventListener('load', check, true);\n    }\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Takes the given data string and parses it as XML using the native DOMParser interface.\n * The parsed XML object is returned, or `null` if there was an error while parsing the data.\n *\n * @function Phaser.DOM.ParseXML\n * @since 3.0.0\n *\n * @param {string} data - The XML source stored in a string.\n *\n * @return {?XMLDocument} The parsed XML data, or `null` if the data could not be parsed.\n */\nexport function ParseXML (data: string): XMLDocument | null\n{\n    let xml: XMLDocument;\n\n    try\n    {\n        const parser = new DOMParser();\n\n        xml = parser.parseFromString(data, 'text/xml');\n\n        if (!xml || !xml.documentElement || xml.getElementsByTagName('parsererror').length)\n        {\n            return null;\n        }\n        else\n        {\n            return xml;\n        }\n    }\n    catch (error)\n    {\n        return null;\n    }\n}\n", "import { IEventInstance } from './IEventInstance';\n\nexport class EventEmitter\n{\n    events: Map<string, Set<IEventInstance>>;\n\n    constructor ()\n    {\n        this.events = new Map();\n    }\n}\n", "export class EventInstance\n{\n    callback: Function;\n    context: unknown;\n    once: boolean;\n\n    constructor (callback: Function, context: unknown, once: boolean = false)\n    {\n        this.callback = callback;\n        this.context = context;\n        this.once = once;\n    }\n}\n", "import { EventInstance } from './EventInstance';\nimport { IEventEmitter } from './IEventEmitter';\nimport { IEventInstance } from './IEventInstance';\n\nexport function On (emitter: IEventEmitter, event: string, callback: Function, context: unknown = emitter, once: boolean = false): IEventInstance\n{\n    if (typeof callback !== 'function')\n    {\n        throw new TypeError('Listener not a function');\n    }\n\n    const listener = new EventInstance(callback, context, once);\n    const listeners = emitter.events.get(event);\n\n    if (!listeners)\n    {\n        emitter.events.set(event, new Set([ listener ]));\n    }\n    else\n    {\n        listeners.add(listener);\n    }\n\n    return listener;\n}\n", "import { IEventEmitter } from './IEventEmitter';\nimport { IEventInstance } from './IEventInstance';\nimport { On } from './On';\n\nexport function Once (emitter: IEventEmitter, event: string, callback: Function, context: unknown = emitter): IEventInstance\n{\n    return On(emitter, event, callback, context, true);\n}\n", "import { CONFIG_DEFAULTS } from '../const';\nimport { ConfigStore } from '../ConfigStore';\n\nexport function GetBanner (): void\n{\n    const { title, version, url, color, background } = ConfigStore.get(CONFIG_DEFAULTS.BANNER);\n\n    if (title !== '')\n    {\n        const str = (version !== '') ? title + ' ' + version : title;\n\n        console.log(\n            `%c${str}%c ${url}`,\n            `padding: 4px 16px; color: ${color}; background: ${background}`,\n            ''\n        );\n    }\n}\n", "import { CONFIG_DEFAULTS } from '../const';\nimport { ConfigStore } from '../ConfigStore';\n\nexport function GetGlobalVar (): number\n{\n    return ConfigStore.get(CONFIG_DEFAULTS.GLOBAL_VAR);\n}\n", "import { CONFIG_DEFAULTS } from '../const';\nimport { ConfigStore } from '../ConfigStore';\n\nexport function GetParent (): string | HTMLElement | undefined\n{\n    return ConfigStore.get(CONFIG_DEFAULTS.PARENT);\n}\n", "import { Types, defineComponent } from 'bitecs';\n\nconst RenderStats = defineComponent({\n\n    //  The current Game Frame number\n    gameFrame: Types.ui32,\n\n    //  Total number of Scenes rendered\n    numScenes: Types.ui8,\n\n    //  Total number of Worlds rendered\n    numWorlds: Types.ui8,\n\n    //  Total number of Game Objects (across all worlds)\n    numGameObjects: Types.ui32,\n\n    //  Total number of Game Objects to be rendered (across all worlds)\n    numGameObjectsRendered: Types.ui32,\n\n    //  Total number of Game Objects with dirty local transforms\n    numDirtyLocalTransforms: Types.ui32,\n\n    //  Total number of Game Objects with dirty world transforms\n    numDirtyWorldTransforms: Types.ui32,\n\n    //  Total number of Game Objects with dirty vertices\n    numDirtyVertices: Types.ui32,\n\n    //  Total number of Worlds that had to recalculate their display lists\n    numDirtyWorldLists: Types.ui8,\n\n    //  How many Cameras were made dirty this frame across all Scenes?\n    numDirtyCameras: Types.ui32\n\n});\n\nexport const RenderStatsComponent = RenderStats;\n", "import { GameObjectWorld } from '../GameObjectWorld';\nimport { RenderStatsComponent } from './RenderStatsComponent';\nimport { addComponent } from 'bitecs';\n\nexport function AddRenderStatsComponent (id: number): void\n{\n    addComponent(GameObjectWorld, RenderStatsComponent, id);\n}\n", "import { ISceneConfig } from './ISceneConfig';\n\nexport function GetConfigValue<Property extends keyof ISceneConfig> (config: ISceneConfig, property: Property, defaultValue: ISceneConfig[Property]): ISceneConfig[Property]\n{\n    if (Object.prototype.hasOwnProperty.call(config, property))\n    {\n        return config[property];\n    }\n    else\n    {\n        return defaultValue;\n    }\n}\n", "import { SceneManager } from './SceneManager';\n\nlet instance: SceneManager;\n\nexport const SceneManagerInstance =\n{\n    get: (): SceneManager =>\n    {\n        return instance;\n    },\n\n    set: (manager: SceneManager | null): void =>\n    {\n        if (instance)\n        {\n            throw new Error('SceneManager should not be instantiated more than once');\n        }\n\n        instance = manager;\n    }\n};\n", "import { IRenderStats } from './IRenderStats';\nimport { RenderStatsComponent } from './RenderStatsComponent';\nimport { SceneManagerInstance } from './SceneManagerInstance';\n\nexport function GetRenderStatsAsObject (obj?: IRenderStats): IRenderStats\n{\n    const id = SceneManagerInstance.get().id;\n\n    if (!obj)\n    {\n        obj = { fps: 0, delta: 0, gameFrame: 0, numScenes: 0, numWorlds: 0, numGameObjects: 0, numGameObjectsRendered: 0, numDirtyLocalTransforms: 0, numDirtyWorldTransforms: 0, numDirtyVertices: 0, numDirtyWorldLists: 0, numDirtyCameras: 0 };\n    }\n\n    obj.gameFrame = RenderStatsComponent.gameFrame[id];\n    obj.numScenes = RenderStatsComponent.numScenes[id];\n    obj.numWorlds = RenderStatsComponent.numWorlds[id];\n    obj.numGameObjects = RenderStatsComponent.numGameObjects[id];\n    obj.numGameObjectsRendered = RenderStatsComponent.numGameObjectsRendered[id];\n    obj.numDirtyLocalTransforms = RenderStatsComponent.numDirtyLocalTransforms[id];\n    obj.numDirtyWorldTransforms = RenderStatsComponent.numDirtyWorldTransforms[id];\n    obj.numDirtyVertices = RenderStatsComponent.numDirtyVertices[id];\n    obj.numDirtyWorldLists = RenderStatsComponent.numDirtyWorldLists[id];\n    obj.numDirtyCameras = RenderStatsComponent.numDirtyCameras[id];\n\n    return obj;\n}\n", "import { GetConfigValue } from './GetConfigValue';\nimport { IScene } from './IScene';\nimport { ISceneConfig } from './ISceneConfig';\nimport { SceneManagerInstance } from './SceneManagerInstance';\nimport { WorldList } from '../world/WorldList';\n\nexport function Install (scene: IScene, config: string | ISceneConfig = {}): void\n{\n    const sceneManager = SceneManagerInstance.get();\n\n    const size = sceneManager.scenes.size;\n    const sceneIndex = sceneManager.sceneIndex;\n    const firstScene = (size === 0);\n\n    if (typeof config === 'string')\n    {\n        scene.key = config;\n    }\n    else if (config || (!config && firstScene))\n    {\n        scene.key = GetConfigValue(config, 'key', 'scene' + sceneIndex.toString());\n    }\n\n    if (sceneManager.scenes.has(scene.key))\n    {\n        console.warn('Scene key already in use: ' + scene.key);\n    }\n    else\n    {\n        sceneManager.scenes.set(scene.key, scene);\n\n        sceneManager.flush = true;\n\n        sceneManager.sceneIndex++;\n    }\n\n    WorldList.set(scene, []);\n}\n", "import { RenderStatsComponent } from './RenderStatsComponent';\n\nexport function ResetRenderStats (id: number, gameFrame: number, scenes: number, worlds: number, transforms: number): void\n{\n    RenderStatsComponent.gameFrame[id] = gameFrame;\n    RenderStatsComponent.numScenes[id] = scenes;\n    RenderStatsComponent.numWorlds[id] = worlds;\n    RenderStatsComponent.numGameObjects[id] = 0;\n    RenderStatsComponent.numGameObjectsRendered[id] = 0;\n    RenderStatsComponent.numDirtyWorldLists[id] = 0;\n    RenderStatsComponent.numDirtyVertices[id] = 0;\n    RenderStatsComponent.numDirtyLocalTransforms[id] = transforms;\n    RenderStatsComponent.numDirtyWorldTransforms[id] = 0;\n    RenderStatsComponent.numDirtyCameras[id] = 0;\n}\n", "import { Game } from '../Game';\nimport { GameInstance } from '../GameInstance';\nimport { IEventEmitter } from '../events/IEventEmitter';\nimport { IEventInstance } from '../events/IEventInstance';\nimport { IScene } from './IScene';\nimport { ISceneConfig } from './ISceneConfig';\nimport { Install } from './Install';\n\nexport class Scene implements IScene, IEventEmitter\n{\n    key: string;\n    game: Game;\n    events: Map<string, Set<IEventInstance>>;\n\n    constructor (config?: string | ISceneConfig)\n    {\n        this.game = GameInstance.get();\n        this.events = new Map();\n\n        Install(this, config);\n    }\n}\n", "import { CONFIG_DEFAULTS } from '../const';\nimport { ConfigStore } from '../ConfigStore';\nimport { ISceneConstructor } from '../../scenes/ISceneConstructor';\n\nexport function GetScenes (): ISceneConstructor[]\n{\n    return ConfigStore.get(CONFIG_DEFAULTS.SCENES);\n}\n", "import { Changed, Query, addEntity, defineQuery } from 'bitecs';\n\nimport { AddRenderStatsComponent } from './AddRenderStatsComponent';\nimport { Game } from '../Game';\nimport { GameInstance } from '../GameInstance';\nimport { GameObjectWorld } from '../GameObjectWorld';\nimport { GetScenes } from '../config/scenes';\nimport { IGameObject } from '../gameobjects/IGameObject';\nimport { IScene } from './IScene';\nimport { LocalMatrix2DComponent } from '../components/transform';\nimport { Once } from '../events';\nimport { PackQuadColorsSystem } from '../components/color/PackQuadColorsSystem';\nimport { RenderStatsComponent } from './RenderStatsComponent';\nimport { ResetRenderStats } from './ResetRenderStats';\nimport { SceneManagerInstance } from './SceneManagerInstance';\nimport { UpdateLocalTransform2DSystem } from '../components/transform/UpdateLocalTransform2DSystem';\nimport { UpdateVertexPositionSystem } from '../components/vertices/UpdateVertexPositionSystem';\nimport { WorldList } from '../world/WorldList';\n\nexport class SceneManager\n{\n    readonly id: number = addEntity(GameObjectWorld);\n\n    game: Game;\n\n    scenes: Map<string, IScene> = new Map();\n\n    //  Used by Install to assign default scene keys when not specified\n    sceneIndex: number = 0;\n\n    //  Force the renderer to fully redraw\n    flush: boolean;\n\n    changedMatrixQuery: Query = defineQuery([ Changed(LocalMatrix2DComponent) ]);\n\n    constructor ()\n    {\n        this.game = GameInstance.get();\n\n        SceneManagerInstance.set(this);\n\n        AddRenderStatsComponent(this.id);\n\n        Once(this.game, 'boot', () => this.boot());\n    }\n\n    boot (): void\n    {\n        GetScenes().forEach(scene => new scene());\n    }\n\n    update (delta: number, time: number, gameFrame: number): void\n    {\n        let sceneTotal = 0;\n        let worldTotal = 0;\n\n        for (const scene of this.scenes.values())\n        {\n            const worlds = WorldList.get(scene);\n\n            for (const world of worlds)\n            {\n                world.beforeUpdate(delta, time);\n                world.update(delta, time);\n                world.afterUpdate(delta, time);\n\n                worldTotal++;\n            }\n\n            sceneTotal++;\n        }\n\n        //  Process all dirty 2D transforms and update the local matrix across all Worlds and Scenes\n        const localTransforms = UpdateLocalTransform2DSystem(GameObjectWorld);\n\n        ResetRenderStats(this.id, gameFrame, sceneTotal, worldTotal, localTransforms.length);\n    }\n\n    //  Run through all Scenes and Worlds within them, telling them to prepare to render\n    //  The renderer itself tells them to actually render\n    preRender (gameFrame: number): void\n    {\n        const dirtyTransforms = this.changedMatrixQuery(GameObjectWorld);\n\n        let dirtyWorld = false;\n\n        for (const scene of this.scenes.values())\n        {\n            const worlds = WorldList.get(scene);\n\n            for (const world of worlds)\n            {\n                if (world.preRender(gameFrame, dirtyTransforms))\n                {\n                    dirtyWorld = true;\n                }\n            }\n        }\n\n        //  Repack any changed vertex colors\n        PackQuadColorsSystem(GameObjectWorld);\n\n        //  Update all vertices across the whole game, ready for rendering\n        const updatedEntities = UpdateVertexPositionSystem(GameObjectWorld);\n\n        RenderStatsComponent.numDirtyVertices[this.id] = updatedEntities.length * 4;\n\n        if (dirtyWorld)\n        {\n            this.flush = true;\n        }\n    }\n\n    //  TODO - This isn't used internally - is used by debug panel - move out?\n    getRenderList (): IGameObject[]\n    {\n        let output: IGameObject[] = [];\n\n        for (const scene of this.scenes.values())\n        {\n            const worlds = WorldList.get(scene);\n\n            for (const world of worlds)\n            {\n                output = output.concat(world.getRenderList());\n            }\n        }\n\n        return output;\n    }\n\n    updateWorldStats (numGameObjects: number, numRendered: number, numDisplayLists: number, numWorldTransforms: number): void\n    {\n        const id = this.id;\n\n        RenderStatsComponent.numGameObjects[id] += numGameObjects;\n        RenderStatsComponent.numGameObjectsRendered[id] += numRendered;\n        RenderStatsComponent.numDirtyWorldLists[id] += numDisplayLists;\n        RenderStatsComponent.numDirtyWorldTransforms[id] += numWorldTransforms;\n    }\n}\n", "import { CONFIG_DEFAULTS } from '../const';\nimport { ConfigStore } from '../ConfigStore';\nimport { IRendererConstructor } from '../../renderer/IRendererConstructor';\n\nexport function GetRenderer (): IRendererConstructor\n{\n    return ConfigStore.get(CONFIG_DEFAULTS.RENDERER);\n}\n", "import { SetBackgroundColor } from './backgroundcolor/SetBackgroundColor';\nimport { SetBanner } from './banner/SetBanner';\nimport { SetBatchSize } from './batchsize/SetBatchSize';\nimport { SetDefaultOrigin } from './defaultorigin/SetDefaultOrigin';\nimport { SetMaxTextures } from './maxtextures/SetMaxTextures';\nimport { SetSize } from './size/SetSize';\nimport { SetWebGLContext } from './webglcontext';\nimport { SetWorldSize } from './worldsize/SetWorldSize';\n\n//  Phaser 4 defaults\n\nexport function SetConfigDefaults (): void\n{\n    SetBackgroundColor(0);\n    SetBatchSize(4096);\n    SetBanner('Phaser', '4.0.0', 'https://phaser4.io');\n    SetMaxTextures(0);\n    SetDefaultOrigin(0.5, 0.5);\n    SetSize(800, 600, 1);\n    SetWebGLContext({\n        antialias: true,\n        desynchronized: true,\n        preserveDrawingBuffer: true\n    });\n    SetWorldSize(512);\n}\n", "import { CreateCanvas } from './CreateCanvas';\nimport { IGLTextureBindingConfig } from '../renderer/webgl1/textures/IGLTextureBindingConfig';\nimport { Texture } from './Texture';\nimport { TextureManagerInstance } from './TextureManagerInstance';\n\nexport class TextureManager\n{\n    textures: Map<string, Texture>;\n\n    constructor ()\n    {\n        this.textures = new Map();\n\n        this.createDefaultTextures();\n\n        TextureManagerInstance.set(this);\n    }\n\n    private createDefaultTextures (): void\n    {\n        this.add('__BLANK', new Texture(CreateCanvas(32, 32).canvas));\n\n        const missing = CreateCanvas(32, 32);\n\n        missing.strokeStyle = '#0f0';\n        missing.moveTo(0, 0);\n        missing.lineTo(32, 32);\n        missing.stroke();\n        missing.strokeRect(0.5, 0.5, 31, 31);\n\n        this.add('__MISSING', new Texture(missing.canvas));\n\n        const white = CreateCanvas(32, 32);\n\n        white.fillStyle = '#fff';\n        white.fillRect(0, 0, 32, 32);\n\n        this.add('__WHITE', new Texture(white.canvas));\n    }\n\n    get (key: string): Texture\n    {\n        const textures = this.textures;\n\n        if (textures.has(key))\n        {\n            return textures.get(key);\n        }\n        else\n        {\n            return textures.get('__MISSING');\n        }\n    }\n\n    has (key: string): boolean\n    {\n        return this.textures.has(key);\n    }\n\n    add (key: string, source: Texture | HTMLImageElement, glConfig?: IGLTextureBindingConfig): Texture\n    {\n        let texture: Texture;\n        const textures = this.textures;\n\n        if (!textures.has(key))\n        {\n            if (source instanceof Texture)\n            {\n                texture = source;\n            }\n            else\n            {\n                texture = new Texture(source, 0, 0, glConfig);\n            }\n\n            texture.key = key;\n\n            textures.set(key, texture);\n        }\n\n        return texture;\n    }\n}\n", "import { AddToDOM, DOMContentLoaded } from './dom';\nimport { Emit, EventEmitter } from './events';\n\nimport { GameInstance } from './GameInstance';\nimport { GameObjectWorld } from './GameObjectWorld';\nimport { GetBanner } from './config/banner';\nimport { GetGlobalVar } from './config/globalvar';\nimport { GetParent } from './config/parent';\nimport { GetRenderStatsAsObject } from './scenes';\nimport { GetRenderer } from './config/renderer';\nimport { IRenderStats } from './scenes/IRenderStats';\nimport { IRenderer } from './renderer/IRenderer';\nimport { SceneManager } from './scenes/SceneManager';\nimport { SetConfigDefaults } from './config/SetConfigDefaults';\nimport { TextureManager } from './textures/TextureManager';\nimport { addEntity } from 'bitecs';\n\nexport class Game extends EventEmitter\n{\n    readonly id: number = addEntity(GameObjectWorld);\n\n    readonly VERSION: string = '4.0.0-beta1';\n\n    //  TODO - Consider moving all of these to RenderStats Component\n    isBooted: boolean = false;\n    isPaused: boolean = false;\n\n    //  TODO - Allow update to run on different tick to render\n    //  TODO - Allow update and render to be called directly\n    willUpdate: boolean = true;\n    willRender: boolean = true;\n\n    lastTick: number = 0;\n    elapsed: number = 0;\n    delta: number = 0;\n    fps: number = 0;\n    frame: number = 0;\n    framems: number = 0;\n\n    private frames: number = 0;\n    private prevFrame: number = 0;\n\n    renderStats: IRenderStats;\n\n    renderer: IRenderer;\n    textureManager: TextureManager;\n    sceneManager: SceneManager;\n\n    constructor (...settings: { (): void }[])\n    {\n        super();\n\n        GameInstance.set(this);\n\n        SetConfigDefaults();\n\n        DOMContentLoaded(() => this.boot(settings));\n    }\n\n    boot (settings: { (): void }[]): void\n    {\n        //  Activate the settings post DOM Content Loaded\n        settings.forEach(setting => setting());\n\n        const renderer = GetRenderer();\n\n        this.textureManager = new TextureManager();\n        this.renderer = new renderer();\n        this.sceneManager = new SceneManager();\n\n        //  Only add to the DOM if they either didn't set a Parent, or expressly set it to be non-null\n        //  Otherwise we'll let them add the canvas to the DOM themselves\n        const parent = GetParent();\n\n        if (parent)\n        {\n            AddToDOM(this.renderer.canvas, parent);\n        }\n\n        const globalVar = GetGlobalVar();\n\n        if (globalVar && window)\n        {\n            (window as unknown)[globalVar] = this;\n        }\n\n        this.isBooted = true;\n\n        GetBanner();\n\n        Emit(this, 'boot');\n\n        const now = performance.now();\n\n        this.lastTick = now;\n        this.prevFrame = now;\n\n        this.renderStats = GetRenderStatsAsObject();\n\n        this.step(now);\n    }\n\n    pause (): void\n    {\n        this.isPaused = true;\n    }\n\n    resume (): void\n    {\n        this.isPaused = false;\n\n        this.lastTick = performance.now();\n    }\n\n    step (time: number): void\n    {\n        const renderer = this.renderer;\n        const sceneManager = this.sceneManager;\n\n        this.framems = time - this.lastTick;\n\n        if (!this.isPaused)\n        {\n            if (this.willUpdate)\n            {\n                sceneManager.update(this.delta, time, this.frame);\n            }\n\n            Emit(this, 'update', this.framems, time);\n\n            if (this.willRender)\n            {\n                sceneManager.preRender(this.frame);\n\n                renderer.render(sceneManager.flush, sceneManager.scenes);\n\n                sceneManager.flush = false;\n            }\n        }\n\n        //  Note that privacy.resistFingerprinting can round this value to 100ms or more!\n        const now = performance.now();\n\n        //  How long it took to process this frame\n        const delta = now - time;\n\n        this.frames++;\n\n        if (now >= this.prevFrame + 1000)\n        {\n            this.fps = (this.frames * 1000) / (now - this.prevFrame);\n            this.prevFrame = now;\n            this.frames = 0;\n        }\n\n        this.lastTick = now;\n        this.elapsed += delta;\n        this.delta = delta;\n\n        GetRenderStatsAsObject(this.renderStats);\n\n        this.renderStats.fps = this.fps;\n        this.renderStats.delta = delta;\n\n        Emit(this, 'step');\n\n        //  The frame always advances by 1 each step (even when paused)\n        this.frame++;\n\n        GameInstance.setFrame(this.frame);\n        GameInstance.setElapsed(this.elapsed);\n\n        requestAnimationFrame(now => this.step(now));\n    }\n\n    destroy (): void\n    {\n        //  TODO - Code destroy function\n    }\n}\n", "import { IBaseWorld } from '../IBaseWorld';\n\nexport const WorldAfterUpdateEvent: string = 'afterupdate';\n\nexport type WorldAfterUpdateEventHandler = <T extends IBaseWorld> (delta: number, time: number, world: T) => void;\n", "import { IBaseWorld } from '../IBaseWorld';\n\nexport const WorldBeforeUpdateEvent: string = 'beforeupdate';\n\nexport type WorldBeforeUpdateEventHandler = <T extends IBaseWorld> (delta: number, time: number, world: T) => void;\n", "import { IBaseWorld } from '../IBaseWorld';\nimport { IRenderPass } from '../../renderer/webgl1/renderpass/IRenderPass';\n\nexport const WorldPostRenderEvent: string = 'worldpostrender';\n\nexport type WorldPostRenderEventHandler = (renderPass: IRenderPass, world: IBaseWorld) => void;\n", "import { IBaseWorld } from '../IBaseWorld';\nimport { IWorldRenderData } from '../IWorldRenderData';\n\nexport const WorldRenderEvent: string = 'worldrender';\n\nexport type WorldRenderEventHandler = (renderData: IWorldRenderData, world: IBaseWorld) => void;\n", "import { IBaseWorld } from '../IBaseWorld';\n\nexport const WorldShutdownEvent: string = 'worldshutdown';\n\nexport type WorldShutdownEventHandler = (world: IBaseWorld) => void;\n", "import { IBaseWorld } from '../IBaseWorld';\n\nexport const WorldUpdateEvent: string = 'update';\n\nexport type WorldUpdateEventHandler = <T extends IBaseWorld> (delta: number, time: number, world: T) => void;\n", "import { Types, defineComponent } from 'bitecs';\n\nconst RenderData = defineComponent({\n    gameFrame: Types.ui32,\n    dirtyFrame: Types.ui32,\n    numRendered: Types.ui32,\n    numRenderable: Types.ui32\n});\n\nexport const RenderDataComponent = RenderData;\n", "import { GameObjectWorld } from '../GameObjectWorld';\nimport { RenderDataComponent } from './RenderDataComponent';\nimport { addComponent } from 'bitecs';\n\nexport function AddRenderDataComponent (id: number): void\n{\n    addComponent(GameObjectWorld, RenderDataComponent, id);\n}\n", "import { GetWorldID } from '../components/hierarchy';\n\nexport function CheckDirtyTransforms (worldID: number, list: number[]): boolean\n{\n    for (let i = 0; i < list.length; i++)\n    {\n        if (GetWorldID(list[i]) === worldID)\n        {\n            return true;\n        }\n    }\n\n    return false;\n}\n", "import { CONFIG_DEFAULTS } from '../const';\nimport { ConfigStore } from '../ConfigStore';\n\nexport function GetWorldSize (): number\n{\n    return ConfigStore.get(CONFIG_DEFAULTS.WORLD_SIZE);\n}\n", "import { WillCacheChildren, WillRender, WillRenderChildren } from '../components/permissions';\n\nimport { GameObjectTree } from '../gameobjects';\nimport { GetNumChildren } from '../components/hierarchy';\nimport { HasDirtyChildCache } from '../components/dirty';\nimport { IBaseWorld } from './IBaseWorld';\n\n//  Rebuilds the World.renderList - a list of all entities that need to render.\n\n//  This is only called if the World has a dirty display list, otherwise the results\n//  are cached between frames\n\nexport function RebuildWorldList (world: IBaseWorld, parent: number): void\n{\n    if (WillRender(parent))\n    {\n        if (world.id !== parent)\n        {\n            world.addToRenderList(parent, 0);\n        }\n\n        const children = GameObjectTree.get(parent);\n\n        for (let i = 0; i < children.length; i++)\n        {\n            const nodeID = children[i];\n\n            if (WillRender(nodeID))\n            {\n                if (GetNumChildren(nodeID) > 0 && WillRenderChildren(nodeID))\n                {\n                    //  Is a Child Cache, like a Render Layer, or doesn't cache children, like a Container\n                    if (!WillCacheChildren(nodeID) || HasDirtyChildCache(nodeID))\n                    {\n                        RebuildWorldList(world, nodeID);\n                    }\n                    else\n                    {\n                        world.addToRenderList(nodeID, 0);\n                        world.addToRenderList(nodeID, 1);\n                    }\n                }\n                else if (!WillCacheChildren(nodeID))\n                {\n                    world.addToRenderList(nodeID, 0);\n                    world.addToRenderList(nodeID, 1);\n                }\n            }\n        }\n\n        if (world.id !== parent)\n        {\n            world.addToRenderList(parent, 1);\n        }\n    }\n}\n", "import { Transform2DComponent, UpdateWorldTransform } from '../components/transform';\nimport { WillRender, WillRenderChildren } from '../components/permissions';\n\nimport { GameObjectTree } from '../gameobjects';\nimport { GameObjectWorld } from '../GameObjectWorld';\nimport { GetNumChildren } from '../components/hierarchy';\nimport { IBaseWorld } from './IBaseWorld';\nimport { WillTransformChildren } from '../components/permissions/WillTransformChildren';\nimport { hasComponent } from 'bitecs';\n\nexport function RebuildWorldTransforms (world: IBaseWorld, parent: number, transformList: number[], forceUpdate: boolean): void\n{\n    if (WillRender(parent))\n    {\n        if (!forceUpdate && transformList.indexOf(parent) > -1)\n        {\n            forceUpdate = true;\n        }\n\n        if (forceUpdate && hasComponent(GameObjectWorld, Transform2DComponent, parent))\n        {\n            UpdateWorldTransform(parent);\n        }\n\n        const children = GameObjectTree.get(parent);\n\n        for (let i = 0; i < children.length; i++)\n        {\n            const nodeID = children[i];\n\n            if (WillRender(nodeID))\n            {\n                if (GetNumChildren(nodeID) > 0)\n                {\n                    if (WillRenderChildren(nodeID) && WillTransformChildren(nodeID))\n                    {\n                        RebuildWorldTransforms(world, nodeID, transformList, forceUpdate);\n                    }\n                }\n                else if (forceUpdate || transformList.indexOf(nodeID) > -1)\n                {\n                    UpdateWorldTransform(nodeID);\n                }\n            }\n        }\n    }\n}\n", "import { RenderDataComponent } from './RenderDataComponent';\n\nexport function ResetWorldRenderData (id: number, gameFrame: number): void\n{\n    RenderDataComponent.gameFrame[id] = gameFrame;\n    RenderDataComponent.dirtyFrame[id] = 0;\n    RenderDataComponent.numRendered[id] = 0;\n    RenderDataComponent.numRenderable[id] = 0;\n}\n", "export const SceneDestroyEvent: string = 'destroy';\n\nexport type SceneDestroyEventHandler = () => void;\n", "import * as WorldEvents from './events';\n\nimport { Begin, Flush } from '../renderer/webgl1/renderpass';\nimport { Changed, Query, defineComponent, defineQuery } from 'bitecs';\nimport { ClearDirtyDisplayList, HasDirtyChildCache, HasDirtyDisplayList, SetDirtyParents } from '../components/dirty';\nimport { Emit, Once } from '../events';\nimport { GameObject, GameObjectCache } from '../gameobjects';\n\nimport { AddRenderDataComponent } from './AddRenderDataComponent';\nimport { CheckDirtyTransforms } from './CheckDirtyTransforms';\nimport { GameObjectWorld } from '../GameObjectWorld';\nimport { GetWorldSize } from '../config/worldsize';\nimport { IBaseCamera } from '../camera/IBaseCamera';\nimport { IBaseWorld } from './IBaseWorld';\nimport { IGameObject } from '../gameobjects/IGameObject';\nimport { IRenderPass } from '../renderer/webgl1/renderpass/IRenderPass';\nimport { IScene } from '../scenes/IScene';\nimport { Mat2dEquals } from '../math/mat2d/Mat2dEquals';\nimport { RebuildWorldList } from './RebuildWorldList';\nimport { RebuildWorldTransforms } from './RebuildWorldTransforms';\nimport { RemoveChildren } from '../display';\nimport { ResetWorldRenderData } from './ResetWorldRenderData';\nimport { SceneDestroyEvent } from '../scenes/events';\nimport { SceneManager } from '../scenes/SceneManager';\nimport { SceneManagerInstance } from '../scenes/SceneManagerInstance';\nimport { SetWorldID } from '../components/hierarchy';\nimport { WillUpdate } from '../components/permissions';\nimport { WorldList } from './WorldList';\nimport { WorldMatrix2DComponent } from '../components/transform';\n\nexport class BaseWorld extends GameObject implements IBaseWorld\n{\n    tag = defineComponent();\n\n    scene: IScene;\n\n    sceneManager: SceneManager;\n\n    camera: IBaseCamera;\n\n    forceRefresh: boolean = false;\n\n    is3D: boolean = false;\n\n    runRender: boolean = false;\n\n    private renderList: Uint32Array;\n    private listLength: number;\n\n    private totalChildren: number;\n    private totalChildrenQuery: Query;\n    private dirtyWorldQuery: Query;\n\n    constructor (scene: IScene)\n    {\n        super();\n\n        this.scene = scene;\n        this.sceneManager = SceneManagerInstance.get();\n\n        this.totalChildren = 0;\n        this.totalChildrenQuery = defineQuery([ this.tag ]);\n        this.dirtyWorldQuery = defineQuery([ this.tag, Changed(WorldMatrix2DComponent) ]);\n\n        //  * 4 because each Game Object ID is added twice (render and post render) + each has the render type flag\n        this.renderList = new Uint32Array(GetWorldSize() * 4);\n        this.listLength = 0;\n\n        const id = this.id;\n\n        AddRenderDataComponent(id);\n\n        SetWorldID(id, id);\n\n        WorldList.get(scene).push(this);\n\n        Once(scene, SceneDestroyEvent, () => this.destroy());\n    }\n\n    beforeUpdate (delta: number, time: number): void\n    {\n        Emit(this, WorldEvents.WorldBeforeUpdateEvent, delta, time, this);\n    }\n\n    update (delta: number, time: number): void\n    {\n        if (!WillUpdate(this.id))\n        {\n            return;\n        }\n\n        Emit(this, WorldEvents.WorldUpdateEvent, delta, time, this);\n\n        super.update(delta, time);\n    }\n\n    afterUpdate (delta: number, time: number): void\n    {\n        Emit(this, WorldEvents.WorldAfterUpdateEvent, delta, time, this);\n    }\n\n    //  Called by RebuildWorldList as it sweeps the world children, looking to see what will render or not\n\n    //  renderType:\n\n    //  0 = render\n    //  1 = postRender\n    addToRenderList (id: number, renderType: number): void\n    {\n        let len = this.listLength;\n        const list = this.renderList;\n\n        list[len] = id;\n        list[len + 1] = renderType;\n\n        this.listLength += 2;\n\n        len += 2;\n\n        if (len === list.length)\n        {\n            const newList = new Uint32Array(len + (GetWorldSize() * 4));\n\n            newList.set(list, 0);\n\n            this.renderList = newList;\n        }\n    }\n\n    //  TODO - This isn't used internally - is used by debug panel - move out?\n    getRenderList (): IGameObject[]\n    {\n        const list = this.renderList;\n\n        const output = [];\n\n        for (let i = 0; i < this.listLength; i += 2)\n        {\n            const eid = list[i];\n            const type = list[i + 1];\n\n            if (type === 0)\n            {\n                output.push(GameObjectCache.get(eid));\n            }\n        }\n\n        return output;\n    }\n\n    preRender (gameFrame: number, transformList: number[]): boolean\n    {\n        const sceneManager = this.sceneManager;\n\n        if (!this.isRenderable())\n        {\n            this.runRender = false;\n\n            sceneManager.updateWorldStats(this.totalChildren, 0, 0, 0);\n\n            return false;\n        }\n\n        const id = this.id;\n\n        const dirtyDisplayList = HasDirtyDisplayList(id);\n\n        ResetWorldRenderData(id, gameFrame);\n\n        let isDirty = false;\n\n        if (dirtyDisplayList)\n        {\n            this.listLength = 0;\n\n            RebuildWorldList(this, id);\n\n            ClearDirtyDisplayList(id);\n\n            isDirty = true;\n\n            this.totalChildren = this.totalChildrenQuery(GameObjectWorld).length;\n        }\n\n        if (dirtyDisplayList || CheckDirtyTransforms(id, transformList))\n        {\n            RebuildWorldTransforms(this, id, transformList, false);\n\n            isDirty = true;\n        }\n\n        this.camera.dirtyRender = false;\n\n        this.runRender = (this.listLength > 0);\n\n        const dirtyWorld = this.dirtyWorldQuery(GameObjectWorld).length;\n\n        sceneManager.updateWorldStats(this.totalChildren, this.listLength / 4, Number(dirtyDisplayList), dirtyWorld);\n\n        return isDirty;\n    }\n\n    getTotalChildren (): number\n    {\n        if (HasDirtyDisplayList(this.id))\n        {\n            this.totalChildren = this.totalChildrenQuery(GameObjectWorld).length;\n        }\n\n        return this.totalChildren;\n    }\n\n    renderGL <T extends IRenderPass> (renderPass: T): void\n    {\n        Emit(this, WorldEvents.WorldRenderEvent, this);\n\n        const currentCamera = renderPass.current2DCamera;\n        const camera = this.camera;\n\n        if (!currentCamera || !Mat2dEquals(camera.worldTransform, currentCamera.worldTransform))\n        {\n            Flush(renderPass);\n        }\n\n        Begin(renderPass, camera);\n\n        const list = this.renderList;\n\n        for (let i = 0; i < this.listLength; i += 2)\n        {\n            const eid = list[i];\n            const type = list[i + 1];\n            const entry = GameObjectCache.get(eid);\n\n            if (type === 1)\n            {\n                entry.postRenderGL(renderPass);\n            }\n            else\n            {\n                entry.renderGL(renderPass);\n            }\n        }\n    }\n\n    postRenderGL <T extends IRenderPass> (renderPass: T): void\n    {\n        if (!this.runRender)\n        {\n            Begin(renderPass, this.camera);\n        }\n\n        Emit(this, WorldEvents.WorldPostRenderEvent, renderPass, this);\n    }\n\n    shutdown (): void\n    {\n        //  Clear the display list and reset the camera, but leave\n        //  everything in place so we can return to this World again\n        //  at a later stage\n\n        RemoveChildren(this);\n\n        Emit(this, WorldEvents.WorldShutdownEvent, this);\n\n        ResetWorldRenderData(this.id, 0);\n\n        if (this.camera)\n        {\n            this.camera.reset();\n        }\n    }\n\n    destroy (reparentChildren?: IGameObject): void\n    {\n        super.destroy(reparentChildren);\n\n        this.shutdown();\n\n        if (this.camera)\n        {\n            this.camera.destroy();\n        }\n\n        this.camera = null;\n    }\n}\n", "import { BaseWorld } from './BaseWorld';\nimport { IScene } from '../scenes/IScene';\nimport { IStaticCamera } from '../camera/IStaticCamera';\nimport { IStaticWorld } from './IStaticWorld';\nimport { StaticCamera } from '../camera/StaticCamera';\n\n//  A Static World is designed specifically to have a bounds of a fixed size\n//  and a camera that doesn't move at all (no scrolling, rotation, etc)\n//  Because it has a fixed size, there is no camera culling enabled.\n//  Games that use this kind of world include Pacman, Bejeweled and 2048.\n\nexport class StaticWorld extends BaseWorld implements IStaticWorld\n{\n    declare camera: IStaticCamera;\n\n    constructor (scene: IScene)\n    {\n        super(scene);\n\n        this.camera = new StaticCamera();\n    }\n}\n", "import { BackgroundColor, GlobalVar, Parent, Scenes, WebGL } from '../../../../../phaser-genesis/src/config';\n\nimport { AddChild } from '../../../../../phaser-genesis/src/display';\nimport { DirectDraw } from '../../../../../phaser-genesis/src/gameobjects';\nimport { Game } from '../../../../../phaser-genesis/src/Game';\nimport { ImageFile } from '../../../../../phaser-genesis/src/loader/files';\nimport { Scene } from '../../../../../phaser-genesis/src/scenes/Scene';\nimport { StaticWorld } from '../../../../../phaser-genesis/src/world/StaticWorld';\n\nclass Demo extends Scene\n{\n    constructor ()\n    {\n        super();\n\n        this.create();\n    }\n\n    async create ()\n    {\n        const world = new StaticWorld(this);\n\n        const dd = new DirectDraw();\n\n        dd.render = () =>\n        {\n            // dd.circle(400, 300, 128, 0xff0000);\n\n            dd.triangle(300, 200, 300, 400, 500, 400, 0xffffff00);\n            dd.triangle(100, 100, 300, 330, 500, 60, 0x88ff00ff);\n\n            // dd.rect(0, 0, 128, 128, 0xffffff);\n        };\n\n        AddChild(world, dd);\n    }\n}\n\nnew Game(\n    WebGL(),\n    Parent('gameParent'),\n    GlobalVar('Phaser4'),\n    BackgroundColor(0x2d2d2d),\n    Scenes(Demo)\n);\n"],
  "mappings": "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",
  "names": []
}
