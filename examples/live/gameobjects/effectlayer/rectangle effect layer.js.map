{
  "version": 3,
  "sources": ["../../../../../phaser-genesis/src/config/const.ts", "../../../../../phaser-genesis/src/config/ConfigStore.ts", "../../../../../phaser-genesis/src/config/backgroundcolor/SetBackgroundColor.ts", "../../../../../phaser-genesis/src/config/backgroundcolor/BackgroundColor.ts", "../../../../../phaser-genesis/src/config/banner/SetBanner.ts", "../../../../../phaser-genesis/src/config/batchsize/SetBatchSize.ts", "../../../../../phaser-genesis/src/renderer/BindingQueue.ts", "../../../../../phaser-genesis/src/config/backgroundcolor/GetBackgroundColor.ts", "../../../../../phaser-genesis/src/config/size/GetHeight.ts", "../../../../../phaser-genesis/src/config/size/GetResolution.ts", "../../../../../phaser-genesis/src/config/size/GetWidth.ts", "../../../../../phaser-genesis/src/config/renderer/SetRenderer.ts", "../../../../../phaser-genesis/src/config/defaultorigin/SetDefaultOrigin.ts", "../../../../../phaser-genesis/src/config/globalvar/SetGlobalVar.ts", "../../../../../phaser-genesis/src/config/globalvar/GlobalVar.ts", "../../../../../phaser-genesis/src/config/maxtextures/SetMaxTextures.ts", "../../../../../phaser-genesis/src/dom/GetElement.ts", "../../../../../phaser-genesis/src/config/parent/SetParent.ts", "../../../../../phaser-genesis/src/config/parent/Parent.ts", "../../../../../phaser-genesis/src/config/scenes/SetScenes.ts", "../../../../../phaser-genesis/src/config/scenes/Scenes.ts", "../../../../../phaser-genesis/src/config/size/SetSize.ts", "../../../../../phaser-genesis/src/renderer/webgl1/GL.ts", "../../../../../phaser-genesis/src/renderer/webgl1/renderpass/Draw.ts", "../../../../../phaser-genesis/src/renderer/webgl1/renderpass/Flush.ts", "../../../../../phaser-genesis/node_modules/bitecs/src/Storage.js", "../../../../../phaser-genesis/node_modules/bitecs/src/Util.js", "../../../../../phaser-genesis/node_modules/bitecs/src/Serialize.js", "../../../../../phaser-genesis/node_modules/bitecs/src/Entity.js", "../../../../../phaser-genesis/node_modules/bitecs/src/Query.js", "../../../../../phaser-genesis/node_modules/bitecs/src/Component.js", "../../../../../phaser-genesis/node_modules/bitecs/src/World.js", "../../../../../phaser-genesis/node_modules/bitecs/src/System.js", "../../../../../phaser-genesis/node_modules/bitecs/src/Proxy.js", "../../../../../phaser-genesis/node_modules/bitecs/src/index.js", "../../../../../phaser-genesis/src/GameObjectWorld.ts", "../../../../../phaser-genesis/src/components/color/ColorComponent.ts", "../../../../../phaser-genesis/src/colormatrix/const.ts", "../../../../../phaser-genesis/src/components/color/AddColorComponent.ts", "../../../../../phaser-genesis/src/components/color/CompareColorMatrix.ts", "../../../../../phaser-genesis/src/components/vertices/QuadVertexComponent.ts", "../../../../../phaser-genesis/src/components/vertices/SetQuadColor.ts", "../../../../../phaser-genesis/src/components/color/PackQuadColorsSystem.ts", "../../../../../phaser-genesis/src/components/hierarchy/HierarchyComponent.ts", "../../../../../phaser-genesis/src/components/hierarchy/GetParentID.ts", "../../../../../phaser-genesis/src/components/hierarchy/GetParents.ts", "../../../../../phaser-genesis/src/components/dirty/DirtyComponent.ts", "../../../../../phaser-genesis/src/components/dirty/SetDirtyChild.ts", "../../../../../phaser-genesis/src/components/dirty/SetDirtyChildCache.ts", "../../../../../phaser-genesis/src/components/dirty/SetDirtyTransform.ts", "../../../../../phaser-genesis/src/components/permissions/PermissionsComponent.ts", "../../../../../phaser-genesis/src/components/permissions/WillCacheChildren.ts", "../../../../../phaser-genesis/src/components/permissions/WillTransformChildren.ts", "../../../../../phaser-genesis/src/components/dirty/SetDirtyParents.ts", "../../../../../phaser-genesis/src/renderer/webgl1/renderpass/End.ts", "../../../../../phaser-genesis/src/renderer/webgl1/textures/GetCompressedTextures.ts", "../../../../../phaser-genesis/src/renderer/webgl1/colors/GetRGBArray.ts", "../../../../../phaser-genesis/src/config/webglcontext/GetWebGLContext.ts", "../../../../../phaser-genesis/src/renderer/webgl1/fbo/CreateFramebuffer.ts", "../../../../../phaser-genesis/src/renderer/webgl1/textures/CreateGLTexture.ts", "../../../../../phaser-genesis/src/renderer/webgl1/fbo/DeleteFramebuffer.ts", "../../../../../phaser-genesis/src/renderer/webgl1/textures/DeleteGLTexture.ts", "../../../../../phaser-genesis/src/math/pow2/IsSizePowerOfTwo.ts", "../../../../../phaser-genesis/src/renderer/webgl1/textures/SetGLTextureFilterMode.ts", "../../../../../phaser-genesis/src/renderer/webgl1/textures/UpdateGLTexture.ts", "../../../../../phaser-genesis/src/renderer/webgl1/textures/GLTextureBinding.ts", "../../../../../phaser-genesis/src/renderer/webgl1/renderpass/ProcessBindingQueue.ts", "../../../../../phaser-genesis/src/renderer/webgl1/renderpass/BlendModeStack.ts", "../../../../../phaser-genesis/src/renderer/webgl1/renderpass/ColorMatrixStack.ts", "../../../../../phaser-genesis/src/renderer/webgl1/renderpass/FramebufferStack.ts", "../../../../../phaser-genesis/src/config/batchsize/GetBatchSize.ts", "../../../../../phaser-genesis/src/config/maxtextures/GetMaxTextures.ts", "../../../../../phaser-genesis/src/math/mat4/Mat4Ortho.ts", "../../../../../phaser-genesis/src/renderer/webgl1/glsl/MULTI_QUAD_FRAG.ts", "../../../../../phaser-genesis/src/renderer/webgl1/shaders/DefaultQuadAttributes.ts", "../../../../../phaser-genesis/src/renderer/webgl1/GL_CONST.ts", "../../../../../phaser-genesis/src/renderer/webgl1/shaders/CreateAttributes.ts", "../../../../../phaser-genesis/src/renderer/webgl1/fbo/CreateDepthBuffer.ts", "../../../../../phaser-genesis/src/renderer/webgl1/shaders/DeleteShaders.ts", "../../../../../phaser-genesis/src/renderer/webgl1/shaders/CreateProgram.ts", "../../../../../phaser-genesis/src/renderer/webgl1/shaders/CreateShader.ts", "../../../../../phaser-genesis/src/renderer/webgl1/shaders/CreateUniformSetter.ts", "../../../../../phaser-genesis/src/renderer/webgl1/shaders/CreateUniforms.ts", "../../../../../phaser-genesis/src/renderer/webgl1/shaders/DefaultQuadUniforms.ts", "../../../../../phaser-genesis/src/renderer/webgl1/glsl/SINGLE_QUAD_FRAG.ts", "../../../../../phaser-genesis/src/renderer/webgl1/glsl/SINGLE_QUAD_VERT.ts", "../../../../../phaser-genesis/src/components/transform/Extent2DComponent.ts", "../../../../../phaser-genesis/src/components/transform/SetExtent.ts", "../../../../../phaser-genesis/src/components/vertices/SetUV.ts", "../../../../../phaser-genesis/src/textures/Frame.ts", "../../../../../phaser-genesis/src/textures/Texture.ts", "../../../../../phaser-genesis/src/renderer/webgl1/shaders/Shader.ts", "../../../../../phaser-genesis/src/renderer/webgl1/shaders/QuadShader.ts", "../../../../../phaser-genesis/src/renderer/webgl1/shaders/MultiTextureQuadShader.ts", "../../../../../phaser-genesis/src/renderer/webgl1/renderpass/ShaderStack.ts", "../../../../../phaser-genesis/src/components/bounds/BoundsComponent.ts", "../../../../../phaser-genesis/src/components/bounds/AddBoundsComponent.ts", "../../../../../phaser-genesis/src/math/mat4/Matrix4Component.ts", "../../../../../phaser-genesis/src/math/mat4/AddMatrix4Component.ts", "../../../../../phaser-genesis/src/camera/StaticCamera.ts", "../../../../../phaser-genesis/src/renderer/webgl1/renderpass/CreateTempTextures.ts", "../../../../../phaser-genesis/src/textures/WhiteTexture.ts", "../../../../../phaser-genesis/src/renderer/webgl1/renderpass/TextureStack.ts", "../../../../../phaser-genesis/src/renderer/webgl1/buffers/DeleteGLBuffer.ts", "../../../../../phaser-genesis/src/renderer/webgl1/buffers/VertexBuffer.ts", "../../../../../phaser-genesis/src/renderer/webgl1/renderpass/VertexBufferStack.ts", "../../../../../phaser-genesis/src/geom/rectangle/RectangleContains.ts", "../../../../../phaser-genesis/src/geom/rectangle/Rectangle.ts", "../../../../../phaser-genesis/src/geom/rectangle/RectangleEquals.ts", "../../../../../phaser-genesis/src/renderer/webgl1/renderpass/ViewportStack.ts", "../../../../../phaser-genesis/src/renderer/webgl1/renderpass/RenderPass.ts", "../../../../../phaser-genesis/src/renderer/webgl1/renderpass/Start.ts", "../../../../../phaser-genesis/src/renderer/RendererInstance.ts", "../../../../../phaser-genesis/src/renderer/webgl1/WebGLRendererInstance.ts", "../../../../../phaser-genesis/src/renderer/webgl1/WebGLRenderer.ts", "../../../../../phaser-genesis/src/config/webgl/WebGL.ts", "../../../../../phaser-genesis/src/config/webglcontext/SetWebGLContext.ts", "../../../../../phaser-genesis/src/config/worldsize/SetWorldSize.ts", "../../../../../phaser-genesis/src/components/bounds/BoundsIntersects.ts", "../../../../../phaser-genesis/src/components/dirty/AddDirtyComponent.ts", "../../../../../phaser-genesis/src/components/dirty/ClearDirtyChild.ts", "../../../../../phaser-genesis/src/components/dirty/ClearDirtyChildCache.ts", "../../../../../phaser-genesis/src/components/dirty/ClearDirtyDisplayList.ts", "../../../../../phaser-genesis/src/components/dirty/ClearDirtyTransform.ts", "../../../../../phaser-genesis/src/components/dirty/HasDirtyChild.ts", "../../../../../phaser-genesis/src/components/dirty/HasDirtyChildCache.ts", "../../../../../phaser-genesis/src/components/dirty/HasDirtyDisplayList.ts", "../../../../../phaser-genesis/src/components/dirty/HasDirtyTransform.ts", "../../../../../phaser-genesis/src/components/dirty/SetDirtyDisplayList.ts", "../../../../../phaser-genesis/src/components/dirty/SetDirtyWorldDisplayList.ts", "../../../../../phaser-genesis/src/components/hierarchy/AddHierarchyComponent.ts", "../../../../../phaser-genesis/src/gameobjects/GameObjectCache.ts", "../../../../../phaser-genesis/src/components/hierarchy/GetWorldID.ts", "../../../../../phaser-genesis/src/gameobjects/GameObjectTree.ts", "../../../../../phaser-genesis/src/components/hierarchy/UpdateNumChildren.ts", "../../../../../phaser-genesis/src/components/hierarchy/ClearWorldAndParentID.ts", "../../../../../phaser-genesis/src/components/hierarchy/DepthFirstSearchFromParentID.ts", "../../../../../phaser-genesis/src/components/hierarchy/GetChildrenFromParentID.ts", "../../../../../phaser-genesis/src/components/hierarchy/GetNumChildren.ts", "../../../../../phaser-genesis/src/components/hierarchy/GetParentGameObject.ts", "../../../../../phaser-genesis/src/components/hierarchy/GetWorldFromParentID.ts", "../../../../../phaser-genesis/src/components/hierarchy/SetIndex.ts", "../../../../../phaser-genesis/src/components/hierarchy/SetParentID.ts", "../../../../../phaser-genesis/src/components/hierarchy/SetWorldDepth.ts", "../../../../../phaser-genesis/src/components/hierarchy/SetWorldID.ts", "../../../../../phaser-genesis/src/components/hierarchy/UpdateChildIndexes.ts", "../../../../../phaser-genesis/src/components/hierarchy/UpdateIndexes.ts", "../../../../../phaser-genesis/src/components/permissions/AddPermissionsComponent.ts", "../../../../../phaser-genesis/src/components/permissions/SetWillCacheChildren.ts", "../../../../../phaser-genesis/src/components/permissions/WillRender.ts", "../../../../../phaser-genesis/src/components/permissions/WillRenderChildren.ts", "../../../../../phaser-genesis/src/components/permissions/WillUpdate.ts", "../../../../../phaser-genesis/src/components/permissions/WillUpdateChildren.ts", "../../../../../phaser-genesis/src/components/transform/Transform2DComponent.ts", "../../../../../phaser-genesis/src/components/transform/AddTransform2DComponent.ts", "../../../../../phaser-genesis/src/components/transform/UpdateExtent.ts", "../../../../../phaser-genesis/src/components/transform/Origin.ts", "../../../../../phaser-genesis/src/components/transform/Position.ts", "../../../../../phaser-genesis/src/components/transform/Scale.ts", "../../../../../phaser-genesis/src/components/transform/Size.ts", "../../../../../phaser-genesis/src/components/transform/Skew.ts", "../../../../../phaser-genesis/src/components/vertices/SetQuadPosition.ts", "../../../../../phaser-genesis/src/components/transform/CopyLocalToWorld.ts", "../../../../../phaser-genesis/src/components/transform/CopyWorldToWorld.ts", "../../../../../phaser-genesis/src/components/transform/MultiplyLocalWithWorld.ts", "../../../../../phaser-genesis/src/components/transform/UpdateWorldTransform.ts", "../../../../../phaser-genesis/src/GameInstance.ts", "../../../../../phaser-genesis/src/world/events/WorldAfterUpdateEvent.ts", "../../../../../phaser-genesis/src/world/events/WorldBeforeUpdateEvent.ts", "../../../../../phaser-genesis/src/world/events/WorldPostRenderEvent.ts", "../../../../../phaser-genesis/src/world/events/WorldRenderEvent.ts", "../../../../../phaser-genesis/src/world/events/WorldShutdownEvent.ts", "../../../../../phaser-genesis/src/world/events/WorldUpdateEvent.ts", "../../../../../phaser-genesis/src/world/RenderDataComponent.ts", "../../../../../phaser-genesis/src/world/AddRenderDataComponent.ts", "../../../../../phaser-genesis/src/config/worldsize/GetWorldSize.ts", "../../../../../phaser-genesis/src/world/AddToRenderList.ts", "../../../../../phaser-genesis/src/components/color/Color.ts", "../../../../../phaser-genesis/src/events/Emit.ts", "../../../../../phaser-genesis/src/display/RemoveChildrenBetween.ts", "../../../../../phaser-genesis/src/display/DestroyChildren.ts", "../../../../../phaser-genesis/src/gameobjects/events/DestroyEvent.ts", "../../../../../phaser-genesis/src/components/permissions/GetVisible.ts", "../../../../../phaser-genesis/src/components/permissions/GetVisibleChildren.ts", "../../../../../phaser-genesis/src/display/IsValidParent.ts", "../../../../../phaser-genesis/src/display/GetChildIndex.ts", "../../../../../phaser-genesis/src/display/RemoveChildAt.ts", "../../../../../phaser-genesis/src/display/RemoveChild.ts", "../../../../../phaser-genesis/src/display/SetWorld.ts", "../../../../../phaser-genesis/src/display/AddChildAt.ts", "../../../../../phaser-genesis/src/display/SetParent.ts", "../../../../../phaser-genesis/src/display/ReparentChildren.ts", "../../../../../phaser-genesis/src/components/permissions/SetVisible.ts", "../../../../../phaser-genesis/src/components/permissions/SetVisibleChildren.ts", "../../../../../phaser-genesis/src/gameobjects/GameObject.ts", "../../../../../phaser-genesis/src/events/EventInstance.ts", "../../../../../phaser-genesis/src/events/On.ts", "../../../../../phaser-genesis/src/events/Once.ts", "../../../../../phaser-genesis/src/display/RemoveChildren.ts", "../../../../../phaser-genesis/src/scenes/events/SceneDestroyEvent.ts", "../../../../../phaser-genesis/src/world/WorldList.ts", "../../../../../phaser-genesis/src/world/BaseWorld.ts", "../../../../../phaser-genesis/src/renderer/webgl1/renderpass/SetCamera.ts", "../../../../../phaser-genesis/src/renderer/webgl1/renderpass/Begin.ts", "../../../../../phaser-genesis/src/renderer/webgl1/renderpass/PopColor.ts", "../../../../../phaser-genesis/src/world/ResetWorldRenderData.ts", "../../../../../phaser-genesis/src/renderer/webgl1/renderpass/SetColor.ts", "../../../../../phaser-genesis/src/components/vertices/UpdateVertexPositionSystem.ts", "../../../../../phaser-genesis/src/world/RebuildWorldList.ts", "../../../../../phaser-genesis/src/world/RebuildWorldTransforms.ts", "../../../../../phaser-genesis/src/components/transform/UpdateLocalTransform.ts", "../../../../../phaser-genesis/src/world/StaticWorld.ts", "../../../../../phaser-genesis/src/components/vertices/AddQuadVertex.ts", "../../../../../phaser-genesis/src/renderer/webgl1/renderpass/GetVertexBufferEntry.ts", "../../../../../phaser-genesis/src/components/vertices/SetQuadTextureIndex.ts", "../../../../../phaser-genesis/src/renderer/webgl1/draw/BatchTexturedQuadBuffer.ts", "../../../../../phaser-genesis/src/config/defaultorigin/GetDefaultOriginX.ts", "../../../../../phaser-genesis/src/config/defaultorigin/GetDefaultOriginY.ts", "../../../../../phaser-genesis/src/gameobjects/container/Container.ts", "../../../../../phaser-genesis/src/textures/TextureManagerInstance.ts", "../../../../../phaser-genesis/src/renderer/webgl1/draw/BatchTexturedQuad.ts", "../../../../../phaser-genesis/src/renderer/webgl1/draw/BatchSingleQuad.ts", "../../../../../phaser-genesis/src/renderer/webgl1/draw/DrawTexturedQuad.ts", "../../../../../phaser-genesis/src/components/permissions/SetWillTransformChildren.ts", "../../../../../phaser-genesis/src/gameobjects/layer/Layer.ts", "../../../../../phaser-genesis/src/gameobjects/renderlayer/RenderLayer.ts", "../../../../../phaser-genesis/src/gameobjects/effectlayer/EffectLayer.ts", "../../../../../phaser-genesis/src/textures/CreateCanvas.ts", "../../../../../phaser-genesis/src/textures/TextureManager.ts", "../../../../../phaser-genesis/src/textures/CreateTextureManager.ts", "../../../../../phaser-genesis/src/gameobjects/rectangle/Rectangle.ts", "../../../../../phaser-genesis/src/display/AddChildren.ts", "../../../../../phaser-genesis/src/renderer/webgl1/shaders/FXShader.ts", "../../../../../phaser-genesis/src/config/banner/AddBanner.ts", "../../../../../phaser-genesis/src/config/globalvar/AddGlobalVar.ts", "../../../../../phaser-genesis/src/components/timer/TimeComponent.ts", "../../../../../phaser-genesis/src/components/timer/AddTimeComponent.ts", "../../../../../phaser-genesis/src/dom/AddToDOM.ts", "../../../../../phaser-genesis/src/config/parent/AddToParent.ts", "../../../../../phaser-genesis/src/config/renderer/CreateRenderer.ts", "../../../../../phaser-genesis/src/scenes/RenderStatsComponent.ts", "../../../../../phaser-genesis/src/scenes/AddRenderStatsComponent.ts", "../../../../../phaser-genesis/src/config/scenes/GetScenes.ts", "../../../../../phaser-genesis/src/scenes/ResetRenderStats.ts", "../../../../../phaser-genesis/src/scenes/SceneManagerInstance.ts", "../../../../../phaser-genesis/src/scenes/SceneManager.ts", "../../../../../phaser-genesis/src/scenes/CreateSceneManager.ts", "../../../../../phaser-genesis/src/dom/DOMContentLoaded.ts", "../../../../../phaser-genesis/src/events/EventEmitter.ts", "../../../../../phaser-genesis/src/scenes/GetRenderStatsAsObject.ts", "../../../../../phaser-genesis/src/components/timer/ResetLastTick.ts", "../../../../../phaser-genesis/src/scenes/GetConfigValue.ts", "../../../../../phaser-genesis/src/scenes/Install.ts", "../../../../../phaser-genesis/src/scenes/Scene.ts", "../../../../../phaser-genesis/src/config/SetConfigDefaults.ts", "../../../../../phaser-genesis/src/components/timer/UpdateDelta.ts", "../../../../../phaser-genesis/src/components/timer/UpdateTime.ts", "../../../../../phaser-genesis/src/Game.ts", "../../../src/gameobjects/effectlayer/rectangle effect layer.ts"],
  "sourcesContent": ["export const CONFIG_DEFAULTS = {\r\n    AUTO: 'Auto',\r\n    BACKGROUND_COLOR: 'BackgroundColor',\r\n    BANNER: 'Banner',\r\n    BATCH_SIZE: 'BatchSize',\r\n    CANVAS_CONTEXT: 'CanvasContext',\r\n    CANVAS: 'Canvas',\r\n    DEFAULT_ORIGIN: 'DefaultOrigin',\r\n    GLOBAL_VAR: 'GlobalVar',\r\n    MAX_TEXTURES: 'MaxTextures',\r\n    PARENT: 'Parent',\r\n    RENDERER: 'Renderer',\r\n    SCENES: 'Scenes',\r\n    SIZE: 'Size',\r\n    WEBGL_CONTEXT: 'WebGLContext',\r\n    WEBGL: 'WebGL',\r\n    WORLD_SIZE: 'WorldSize'\r\n};\r\n", "export const ConfigStore = new Map();\r\n", "import { CONFIG_DEFAULTS } from '../const';\r\nimport { ConfigStore } from '../ConfigStore';\r\n\r\nexport function SetBackgroundColor (color: number): void\r\n{\r\n    ConfigStore.set(CONFIG_DEFAULTS.BACKGROUND_COLOR, color);\r\n}\r\n", "import { SetBackgroundColor } from './SetBackgroundColor';\r\n\r\nexport function BackgroundColor (color: number): () => void\r\n{\r\n    return (): void =>\r\n    {\r\n        SetBackgroundColor(color);\r\n    };\r\n}\r\n", "import { CONFIG_DEFAULTS } from '../const';\r\nimport { ConfigStore } from '../ConfigStore';\r\n\r\nexport function SetBanner (title: string = '', version: string = '', url: string = '', color: string = '#fff', background: string = 'linear-gradient(#3e0081 40%, #00bcc3)'): void\r\n{\r\n    ConfigStore.set(CONFIG_DEFAULTS.BANNER, { title, version, url, color, background });\r\n}\r\n", "import { CONFIG_DEFAULTS } from '../const';\r\nimport { ConfigStore } from '../ConfigStore';\r\n\r\nexport function SetBatchSize (size: number): void\r\n{\r\n    ConfigStore.set(CONFIG_DEFAULTS.BATCH_SIZE, size);\r\n}\r\n", "import { IGLTextureBindingConfig } from './webgl1/textures/IGLTextureBindingConfig';\r\nimport { ITexture } from '../textures/ITexture';\r\n\r\nexport type BindingQueueEntry = {\r\n    texture: ITexture,\r\n    glConfig: IGLTextureBindingConfig\r\n};\r\n\r\nconst queue: BindingQueueEntry[] = [];\r\n\r\nexport const BindingQueue =\r\n{\r\n    add: (texture: ITexture, glConfig?: IGLTextureBindingConfig): void =>\r\n    {\r\n        queue.push({ texture, glConfig });\r\n    },\r\n\r\n    get: (): BindingQueueEntry[] =>\r\n    {\r\n        return queue;\r\n    },\r\n\r\n    clear: (): void =>\r\n    {\r\n        queue.length = 0;\r\n    }\r\n};\r\n", "import { CONFIG_DEFAULTS } from '../const';\r\nimport { ConfigStore } from '../ConfigStore';\r\n\r\nexport function GetBackgroundColor (): number\r\n{\r\n    return ConfigStore.get(CONFIG_DEFAULTS.BACKGROUND_COLOR);\r\n}\r\n", "import { CONFIG_DEFAULTS } from '../const';\r\nimport { ConfigStore } from '../ConfigStore';\r\n\r\nexport function GetHeight (): number\r\n{\r\n    return ConfigStore.get(CONFIG_DEFAULTS.SIZE).height;\r\n}\r\n", "import { CONFIG_DEFAULTS } from '../const';\r\nimport { ConfigStore } from '../ConfigStore';\r\n\r\nexport function GetResolution (): number\r\n{\r\n    return ConfigStore.get(CONFIG_DEFAULTS.SIZE).resolution;\r\n}\r\n", "import { CONFIG_DEFAULTS } from '../const';\r\nimport { ConfigStore } from '../ConfigStore';\r\n\r\nexport function GetWidth (): number\r\n{\r\n    return ConfigStore.get(CONFIG_DEFAULTS.SIZE).width;\r\n}\r\n", "import { CONFIG_DEFAULTS } from '../const';\r\nimport { ConfigStore } from '../ConfigStore';\r\nimport { IRendererConstructor } from '../../renderer/IRendererConstructor';\r\n\r\nexport function SetRenderer (renderer: IRendererConstructor): void\r\n{\r\n    ConfigStore.set(CONFIG_DEFAULTS.RENDERER, renderer);\r\n}\r\n", "import { CONFIG_DEFAULTS } from '../const';\r\nimport { ConfigStore } from '../ConfigStore';\r\n\r\nexport function SetDefaultOrigin (x: number = 0.5, y: number = x): void\r\n{\r\n    ConfigStore.set(CONFIG_DEFAULTS.DEFAULT_ORIGIN, { x, y });\r\n}\r\n", "import { CONFIG_DEFAULTS } from '../const';\r\nimport { ConfigStore } from '../ConfigStore';\r\n\r\nexport function SetGlobalVar (name: string): void\r\n{\r\n    ConfigStore.set(CONFIG_DEFAULTS.GLOBAL_VAR, name);\r\n}\r\n", "import { SetGlobalVar } from './SetGlobalVar';\r\n\r\nexport function GlobalVar (name: string): () => void\r\n{\r\n    return (): void =>\r\n    {\r\n        SetGlobalVar(name);\r\n    };\r\n}\r\n", "import { CONFIG_DEFAULTS } from '../const';\r\nimport { ConfigStore } from '../ConfigStore';\r\n\r\nexport function SetMaxTextures (max: number): void\r\n{\r\n    ConfigStore.set(CONFIG_DEFAULTS.MAX_TEXTURES, max);\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Attempts to get the target DOM element based on the given value, which can be either\r\n * a string, in which case it will be looked-up by ID, or an element node. If nothing\r\n * can be found it will return a reference to the document.body.\r\n *\r\n * @function Phaser.DOM.GetElement\r\n * @since 4.0.0\r\n *\r\n * @param {(string | HTMLElement)} [target] - The DOM element to look-up.\r\n * \r\n * @returns {HTMLElement} The HTML Element that was found.\r\n */\r\nexport function GetElement (target?: string | HTMLElement): HTMLElement\r\n{\r\n    let element: HTMLElement;\r\n\r\n    if (target)\r\n    {\r\n        if (typeof target === 'string')\r\n        {\r\n            //  Hopefully an element ID\r\n            element = document.getElementById(target);\r\n        }\r\n        else if (typeof target === 'object' && target.nodeType === 1)\r\n        {\r\n            //  Quick test for a HTMLElement\r\n            element = target;\r\n        }\r\n    }\r\n\r\n    if (!element)\r\n    {\r\n        element = document.body;\r\n    }\r\n\r\n    return element;\r\n}\r\n", "import { CONFIG_DEFAULTS } from '../const';\r\nimport { ConfigStore } from '../ConfigStore';\r\nimport { GetElement } from '../../dom/GetElement';\r\n\r\nexport function SetParent (parentElement?: string | HTMLElement): void\r\n{\r\n    //  If this function was called and `null` *wasn't* given as the parent\r\n    //  then we try to figure it out, or fallback to the document body\r\n    if (parentElement)\r\n    {\r\n        ConfigStore.set(CONFIG_DEFAULTS.PARENT, GetElement(parentElement));\r\n    }\r\n}\r\n", "import { SetParent } from './SetParent';\r\n\r\nexport function Parent (parentElement?: string | HTMLElement): () => void\r\n{\r\n    return (): void =>\r\n    {\r\n        SetParent(parentElement);\r\n    };\r\n}\r\n", "import { CONFIG_DEFAULTS } from '../const';\r\nimport { ConfigStore } from '../ConfigStore';\r\nimport { ISceneConstructor } from '../../scenes/ISceneConstructor';\r\n\r\nexport function SetScenes (scenes?: ISceneConstructor | Array<ISceneConstructor>): void\r\n{\r\n    ConfigStore.set(CONFIG_DEFAULTS.SCENES, [].concat(scenes));\r\n}\r\n", "import { ISceneConstructor } from '../../scenes/ISceneConstructor';\r\nimport { SetScenes } from './SetScenes';\r\n\r\nexport function Scenes (scenes?: ISceneConstructor | Array<ISceneConstructor>): () => void\r\n{\r\n    return (): void =>\r\n    {\r\n        SetScenes(scenes);\r\n    };\r\n}\r\n", "import { CONFIG_DEFAULTS } from '../const';\r\nimport { ConfigStore } from '../ConfigStore';\r\n\r\nexport function SetSize (width: number = 800, height: number = 600, resolution: number = 1): void\r\n{\r\n    if (resolution === 0)\r\n    {\r\n        resolution = window.devicePixelRatio;\r\n    }\r\n\r\n    ConfigStore.set(CONFIG_DEFAULTS.SIZE, { width, height, resolution });\r\n}\r\n", "export let gl: WebGLRenderingContext;\r\n\r\nexport const GL =\r\n{\r\n    get: (): WebGLRenderingContext =>\r\n    {\r\n        return gl;\r\n    },\r\n\r\n    set: (context: WebGLRenderingContext | undefined): void =>\r\n    {\r\n        gl = context;\r\n    }\r\n};\r\n", "import { IRenderPass } from './IRenderPass';\r\nimport { gl } from '../GL';\r\n\r\nexport function Draw (renderPass: IRenderPass): void\r\n{\r\n    const count = renderPass.count;\r\n\r\n    if (count === 0)\r\n    {\r\n        return;\r\n    }\r\n\r\n    const currentBuffer = renderPass.vertexbuffer.current;\r\n    const currentShader = renderPass.shader.current;\r\n\r\n    const renderToFramebuffer = currentShader.shader.renderToFramebuffer;\r\n\r\n    if (renderToFramebuffer)\r\n    {\r\n        renderPass.framebuffer.set(currentShader.shader.framebuffer, true);\r\n    }\r\n\r\n    if (count === currentBuffer.batchSize)\r\n    {\r\n        const type = (currentBuffer.isDynamic) ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW;\r\n\r\n        gl.bufferData(gl.ARRAY_BUFFER, currentBuffer.data, type);\r\n    }\r\n    else\r\n    {\r\n        const subsize = count * currentBuffer.entryElementSize;\r\n\r\n        const view = currentBuffer.vertexViewF32.subarray(0, subsize);\r\n\r\n        gl.bufferSubData(gl.ARRAY_BUFFER, 0, view);\r\n    }\r\n\r\n    if (currentBuffer.indexed)\r\n    {\r\n        gl.drawElements(gl.TRIANGLES, count * currentBuffer.entryIndexSize, gl.UNSIGNED_SHORT, 0);\r\n    }\r\n    else\r\n    {\r\n        gl.drawArrays(gl.TRIANGLES, 0, count * currentBuffer.elementsPerEntry);\r\n    }\r\n\r\n    if (renderToFramebuffer)\r\n    {\r\n        renderPass.framebuffer.pop();\r\n    }\r\n}\r\n", "import { Draw } from './Draw';\r\nimport { IRenderPass } from './IRenderPass';\r\n\r\nexport function Flush (renderPass: IRenderPass, forceCount?: number): boolean\r\n{\r\n    if (forceCount)\r\n    {\r\n        renderPass.count = forceCount;\r\n    }\r\n\r\n    const count = renderPass.count;\r\n\r\n    if (count === 0)\r\n    {\r\n        return false;\r\n    }\r\n\r\n    Draw(renderPass);\r\n\r\n    renderPass.flush();\r\n\r\n    return true;\r\n}\r\n", "export const TYPES_ENUM = {\r\n  i8: 'i8',\r\n  ui8: 'ui8',\r\n  ui8c: 'ui8c',\r\n  i16: 'i16',\r\n  ui16: 'ui16',\r\n  i32: 'i32',\r\n  ui32: 'ui32',\r\n  f32: 'f32',\r\n  f64: 'f64'\r\n}\r\n\r\nexport const TYPES_NAMES = {\r\n  i8: 'Int8',\r\n  ui8: 'Uint8',\r\n  ui8c: 'Uint8Clamped',\r\n  i16: 'Int16',\r\n  ui16: 'Uint16',\r\n  i32: 'Int32',\r\n  ui32: 'Uint32',\r\n  f32: 'Float32',\r\n  f64: 'Float64'\r\n}\r\n\r\nexport const TYPES = {\r\n  i8: Int8Array,\r\n  ui8: Uint8Array,\r\n  ui8c: Uint8ClampedArray,\r\n  i16: Int16Array,\r\n  ui16: Uint16Array,\r\n  i32: Int32Array,\r\n  ui32: Uint32Array,\r\n  f32: Float32Array,\r\n  f64: Float64Array\r\n}\r\n\r\nconst UNSIGNED_MAX = {\r\n  uint8: 2**8,\r\n  uint16: 2**16,\r\n  uint32: 2**32\r\n}\r\n\r\nconst roundToMultiple4 = x => Math.ceil(x / 4) * 4\r\n\r\nexport const $storeRef = Symbol('storeRef')\r\nexport const $storeSize = Symbol('storeSize')\r\nexport const $storeMaps = Symbol('storeMaps')\r\nexport const $storeFlattened = Symbol('storeFlattened')\r\nexport const $storeBase = Symbol('storeBase')\r\nexport const $storeType = Symbol('storeType')\r\n\r\nexport const $storeArrayCounts = Symbol('storeArrayCount')\r\nexport const $storeSubarrays = Symbol('storeSubarrays')\r\nexport const $storeCursor = Symbol('storeCursor')\r\nexport const $subarrayCursors = Symbol('subarrayCursors')\r\nexport const $subarray = Symbol('subarray')\r\nexport const $subarrayFrom = Symbol('subarrayFrom')\r\nexport const $subarrayTo = Symbol('subarrayTo')\r\nexport const $parentArray = Symbol('subStore')\r\nexport const $tagStore = Symbol('tagStore')\r\n\r\nexport const $queryShadow = Symbol('queryShadow')\r\nexport const $serializeShadow = Symbol('serializeShadow')\r\n\r\nexport const $indexType = Symbol('indexType')\r\nexport const $indexBytes = Symbol('indexBytes')\r\n\r\nconst stores = {}\r\n\r\nexport const resize = (ta, size) => {\r\n  const newBuffer = new ArrayBuffer(size * ta.BYTES_PER_ELEMENT)\r\n  const newTa = new ta.constructor(newBuffer)\r\n  newTa.set(ta, 0)\r\n  return newTa\r\n}\r\n\r\nexport const createShadow = (store, key) => {\r\n  if (!ArrayBuffer.isView(store)) {\r\n    const shadow = store[$parentArray].slice(0).fill(0)\r\n    for (const k in store[key]) {\r\n      const from = store[key][k][$subarrayFrom]\r\n      const to = store[key][k][$subarrayTo]\r\n      store[key][k] = shadow.subarray(from, to)\r\n    }\r\n  } else {\r\n    store[key] = store.slice(0).fill(0)\r\n  }\r\n}\r\n\r\nconst resizeSubarray = (metadata, store, size) => {\r\n  const cursors = metadata[$subarrayCursors]\r\n  const type = store[$storeType]\r\n  const length = store[0].length\r\n  const indexType =\r\n    length <= UNSIGNED_MAX.uint8\r\n      ? 'ui8'\r\n      : length <= UNSIGNED_MAX.uint16\r\n        ? 'ui16'\r\n        : 'ui32'\r\n        \r\n  const arrayCount = metadata[$storeArrayCounts][type]\r\n  const summedLength = Array(arrayCount).fill(0).reduce((a, p) => a + length, 0)\r\n  \r\n  // for threaded impl\r\n  // const summedBytesPerElement = Array(arrayCount).fill(0).reduce((a, p) => a + TYPES[type].BYTES_PER_ELEMENT, 0)\r\n  // const totalBytes = roundToMultiple4(summedBytesPerElement * summedLength * size)\r\n  // const buffer = new ArrayBuffer(totalBytes)\r\n\r\n  const array = new TYPES[type](summedLength * size)\r\n\r\n  array.set(metadata[$storeSubarrays][type])\r\n  \r\n  metadata[$storeSubarrays][type] = array\r\n  createShadow(metadata[$storeSubarrays][type], $queryShadow)\r\n  createShadow(metadata[$storeSubarrays][type], $serializeShadow)\r\n  \r\n  array[$indexType] = TYPES_NAMES[indexType]\r\n  array[$indexBytes] = TYPES[indexType].BYTES_PER_ELEMENT\r\n\r\n  const start = cursors[type]\r\n  let end = 0\r\n  for (let eid = 0; eid < size; eid++) {\r\n    const from = cursors[type] + (eid * length)\r\n    const to = from + length\r\n\r\n    store[eid] = metadata[$storeSubarrays][type].subarray(from, to)\r\n    \r\n    store[eid][$subarrayFrom] = from\r\n    store[eid][$subarrayTo] = to\r\n    store[eid][$queryShadow] = metadata[$storeSubarrays][type][$queryShadow].subarray(from, to)\r\n    store[eid][$serializeShadow] = metadata[$storeSubarrays][type][$serializeShadow].subarray(from, to)\r\n    store[eid][$subarray] = true\r\n    store[eid][$indexType] = array[$indexType]\r\n    store[eid][$indexBytes] = array[$indexBytes]\r\n    \r\n    end = to\r\n  }\r\n\r\n  cursors[type] = end\r\n\r\n  store[$parentArray] = metadata[$storeSubarrays][type].subarray(start, end)\r\n}\r\n\r\nconst resizeRecursive = (metadata, store, size) => {\r\n  Object.keys(store).forEach(key => {\r\n    const ta = store[key]\r\n    if (Array.isArray(ta)) {\r\n      resizeSubarray(metadata, ta, size)\r\n      store[$storeFlattened].push(ta)\r\n    } else if (ArrayBuffer.isView(ta)) {\r\n      store[key] = resize(ta, size)\r\n      store[$storeFlattened].push(store[key])\r\n      store[key][$queryShadow] = resize(ta[$queryShadow], size)\r\n      store[key][$serializeShadow] = resize(ta[$serializeShadow], size)\r\n    } else if (typeof ta === 'object') {\r\n      resizeRecursive(metadata, store[key], size)\r\n    }\r\n  })\r\n}\r\n\r\nexport const resizeStore = (store, size) => {\r\n  if (store[$tagStore]) return\r\n  store[$storeSize] = size\r\n  store[$storeFlattened].length = 0\r\n  Object.keys(store[$subarrayCursors]).forEach(k => {\r\n    store[$subarrayCursors][k] = 0\r\n  })\r\n  resizeRecursive(store, store, size)\r\n}\r\n\r\nexport const resetStore = store => {\r\n  if (store[$storeFlattened]) {\r\n    store[$storeFlattened].forEach(ta => {\r\n      ta.fill(0)\r\n    })\r\n    Object.keys(store[$storeSubarrays]).forEach(key => {\r\n      store[$storeSubarrays][key].fill(0)\r\n    })\r\n  }\r\n}\r\n\r\nexport const resetStoreFor = (store, eid) => {\r\n  if (store[$storeFlattened]) {\r\n    store[$storeFlattened].forEach(ta => {\r\n      if (ArrayBuffer.isView(ta)) ta[eid] = 0\r\n      else ta[eid].fill(0)\r\n    })\r\n  }\r\n}\r\n\r\nconst createTypeStore = (type, length) => {\r\n  const totalBytes = length * TYPES[type].BYTES_PER_ELEMENT\r\n  const buffer = new ArrayBuffer(totalBytes)\r\n  return new TYPES[type](buffer)\r\n}\r\n\r\nexport const parentArray = store => store[$parentArray]\r\n\r\nconst createArrayStore = (metadata, type, length) => {\r\n  const size = metadata[$storeSize]\r\n  const store = Array(size).fill(0)\r\n  store[$storeType] = type\r\n\r\n  const cursors = metadata[$subarrayCursors]\r\n  const indexType =\r\n    length < UNSIGNED_MAX.uint8\r\n      ? 'ui8'\r\n      : length < UNSIGNED_MAX.uint16\r\n        ? 'ui16'\r\n        : 'ui32'\r\n\r\n  if (!length) throw new Error('bitECS - Must define component array length')\r\n  if (!TYPES[type]) throw new Error(`bitECS - Invalid component array property type ${type}`)\r\n\r\n  // create buffer for type if it does not already exist\r\n  if (!metadata[$storeSubarrays][type]) {\r\n    const arrayCount = metadata[$storeArrayCounts][type]\r\n    const summedLength = Array(arrayCount).fill(0).reduce((a, p) => a + length, 0)\r\n    \r\n    // for threaded impl\r\n    // const summedBytesPerElement = Array(arrayCount).fill(0).reduce((a, p) => a + TYPES[type].BYTES_PER_ELEMENT, 0)\r\n    // const totalBytes = roundToMultiple4(summedBytesPerElement * summedLength * size)\r\n    // const buffer = new ArrayBuffer(totalBytes)\r\n\r\n    const array = new TYPES[type](summedLength * size)\r\n\r\n    metadata[$storeSubarrays][type] = array\r\n    createShadow(metadata[$storeSubarrays][type], $queryShadow)\r\n    createShadow(metadata[$storeSubarrays][type], $serializeShadow)\r\n    \r\n    array[$indexType] = TYPES_NAMES[indexType]\r\n    array[$indexBytes] = TYPES[indexType].BYTES_PER_ELEMENT\r\n  }\r\n\r\n  // pre-generate subarrays for each eid\r\n  const start = cursors[type]\r\n  let end = 0\r\n  for (let eid = 0; eid < size; eid++) {\r\n    const from = cursors[type] + (eid * length)\r\n    const to = from + length\r\n\r\n    store[eid] = metadata[$storeSubarrays][type].subarray(from, to)\r\n    \r\n    store[eid][$subarrayFrom] = from\r\n    store[eid][$subarrayTo] = to\r\n    store[eid][$queryShadow] = metadata[$storeSubarrays][type][$queryShadow].subarray(from, to)\r\n    store[eid][$serializeShadow] = metadata[$storeSubarrays][type][$serializeShadow].subarray(from, to)\r\n    store[eid][$subarray] = true\r\n    store[eid][$indexType] = TYPES_NAMES[indexType]\r\n    store[eid][$indexBytes] = TYPES[indexType].BYTES_PER_ELEMENT\r\n    \r\n    end = to\r\n  }\r\n\r\n  cursors[type] = end\r\n\r\n  store[$parentArray] = metadata[$storeSubarrays][type].subarray(start, end)\r\n\r\n  return store\r\n}\r\n\r\nconst isArrayType = x => Array.isArray(x) && typeof x[0] === 'string' && typeof x[1] === 'number'\r\n\r\nexport const createStore = (schema, size) => {\r\n  const $store = Symbol('store')\r\n\r\n  if (!schema || !Object.keys(schema).length) {\r\n    // tag component\r\n    stores[$store] = {\r\n      [$storeSize]: size,\r\n      [$tagStore]: true,\r\n      [$storeBase]: () => stores[$store]\r\n    }\r\n    return stores[$store]\r\n  }\r\n\r\n  schema = JSON.parse(JSON.stringify(schema))\r\n\r\n  const arrayCounts = {}\r\n  const collectArrayCounts = s => {\r\n    const keys = Object.keys(s)\r\n    for (const k of keys) {\r\n      if (isArrayType(s[k])) {\r\n        if (!arrayCounts[s[k][0]]) arrayCounts[s[k][0]] = 0\r\n        arrayCounts[s[k][0]]++\r\n      } else if (s[k] instanceof Object) {\r\n        collectArrayCounts(s[k])\r\n      }\r\n    }\r\n  }\r\n  collectArrayCounts(schema)\r\n\r\n  const metadata = {\r\n    [$storeSize]: size,\r\n    [$storeMaps]: {},\r\n    [$storeSubarrays]: {},\r\n    [$storeRef]: $store,\r\n    [$storeCursor]: 0,\r\n    [$subarrayCursors]: Object.keys(TYPES).reduce((a, type) => ({ ...a, [type]: 0 }), {}),\r\n    [$storeFlattened]: [],\r\n    [$storeArrayCounts]: arrayCounts\r\n  }\r\n\r\n  if (schema instanceof Object && Object.keys(schema).length) {\r\n\r\n    const recursiveTransform = (a, k) => {\r\n\r\n      if (typeof a[k] === 'string') {\r\n\r\n        a[k] = createTypeStore(a[k], size)\r\n        createShadow(a[k], $queryShadow)\r\n        createShadow(a[k], $serializeShadow)\r\n        a[k][$storeBase] = () => stores[$store]\r\n        metadata[$storeFlattened].push(a[k])\r\n\r\n      } else if (isArrayType(a[k])) {\r\n        \r\n        const [type, length] = a[k]\r\n        a[k] = createArrayStore(metadata, type, length)\r\n        a[k][$storeBase] = () => stores[$store]\r\n        metadata[$storeFlattened].push(a[k])\r\n        // Object.seal(a[k])\r\n\r\n      } else if (a[k] instanceof Object) {\r\n        \r\n        a[k] = Object.keys(a[k]).reduce(recursiveTransform, a[k])\r\n        // Object.seal(a[k])\r\n        \r\n      }\r\n\r\n      return a\r\n    }\r\n\r\n    stores[$store] = Object.assign(Object.keys(schema).reduce(recursiveTransform, schema), metadata)\r\n    stores[$store][$storeBase] = () => stores[$store]\r\n\r\n    // Object.seal(stores[$store])\r\n\r\n    return stores[$store]\r\n\r\n  }\r\n}\r\n\r\nexport const free = (store) => {\r\n  delete stores[store[$storeRef]]\r\n}", "export const Uint32SparseSet = (length) => {\r\n  const dense = new Uint32Array(length)\r\n  const sparse = new Uint32Array(length)\r\n\r\n  let cursor = 0\r\n  dense.count = () => cursor + 1\r\n\r\n  const has = val => dense[sparse[val]] === val\r\n\r\n  const add = val => {\r\n    if (has(val)) return\r\n    sparse[val] = cursor\r\n    dense[cursor] = val\r\n\r\n    cursor++\r\n  }\r\n\r\n  const remove = val => {\r\n    if (!has(val)) return\r\n    const index = sparse[val]\r\n    const swapped = dense[cursor]\r\n    if (swapped !== val) {\r\n      dense[index] = swapped\r\n      sparse[swapped] = index\r\n    }\r\n\r\n    cursor--\r\n  }\r\n\r\n  return {\r\n    add,\r\n    remove,\r\n    has,\r\n    sparse,\r\n    dense,\r\n  }\r\n}\r\n\r\nexport const SparseSet = () => {\r\n  const dense = []\r\n  const sparse = []\r\n\r\n  // dense.count = () => dense.length\r\n\r\n  const has = val => dense[sparse[val]] === val\r\n\r\n  const add = val => {\r\n    if (has(val)) return\r\n    sparse[val] = dense.push(val) - 1\r\n  }\r\n\r\n  const remove = val => {\r\n    if (!has(val)) return\r\n    const index = sparse[val]\r\n    const swapped = dense.pop()\r\n    if (swapped !== val) {\r\n      dense[index] = swapped\r\n      sparse[swapped] = index\r\n    }\r\n  }\r\n\r\n  return {\r\n    add,\r\n    remove,\r\n    has,\r\n    sparse,\r\n    dense,\r\n  }\r\n}", "import { $indexBytes, $indexType, $serializeShadow, $storeBase, $storeFlattened, $tagStore, createShadow } from \"./Storage.js\"\r\nimport { $componentMap, addComponent, hasComponent } from \"./Component.js\"\r\nimport { $entityArray, $entitySparseSet, addEntity, eidToWorld } from \"./Entity.js\"\r\nimport { $localEntities } from \"./World.js\"\r\n\r\nexport const DESERIALIZE_MODE = {\r\n  REPLACE: 0,\r\n  APPEND: 1,\r\n  MAP: 2\r\n}\r\n\r\nlet resized = false\r\n\r\nexport const setSerializationResized = v => { resized = v }\r\n\r\nconst canonicalize = (target) => {\r\n  let componentProps = []\r\n  let changedProps = new Map()\r\n  if (Array.isArray(target)) {\r\n    componentProps = target\r\n      .map(p => {\r\n        if (!p) throw new Error('bitECS - Cannot serializer undefined component')\r\n        if (typeof p === 'function' && p.name === 'QueryChanged') {\r\n          p()[$storeFlattened].forEach(prop => {\r\n            const $ = Symbol()\r\n            createShadow(prop, $)\r\n            changedProps.set(prop, $)\r\n          })\r\n          return p()[$storeFlattened]\r\n        }\r\n        if (Object.getOwnPropertySymbols(p).includes($storeFlattened)) {\r\n          return p[$storeFlattened]\r\n        }\r\n        if (Object.getOwnPropertySymbols(p).includes($storeBase)) {\r\n          return p\r\n        }\r\n      })\r\n      .reduce((a,v) => a.concat(v), [])\r\n  }\r\n  return [componentProps, changedProps]\r\n}\r\n\r\n/**\r\n * Defines a new serializer which targets the given components to serialize the data of when called on a world or array of EIDs.\r\n *\r\n * @param {object|array} target\r\n * @param {number} [maxBytes=20000000]\r\n * @returns {ArrayBuffer}\r\n */\r\nexport const defineSerializer = (target, maxBytes = 20000000) => {\r\n  const isWorld = Object.getOwnPropertySymbols(target).includes($componentMap)\r\n\r\n  let [componentProps, changedProps] = canonicalize(target)\r\n\r\n  // TODO: calculate max bytes based on target & recalc upon resize\r\n\r\n  const buffer = new ArrayBuffer(maxBytes)\r\n  const view = new DataView(buffer)\r\n\r\n  return (ents) => {\r\n\r\n    if (resized) {\r\n      [componentProps, changedProps] = canonicalize(target)\r\n      resized = false\r\n    }\r\n\r\n    if (isWorld) {\r\n      componentProps = []\r\n      target[$componentMap].forEach((c, component) => {\r\n        if (component[$storeFlattened])\r\n          componentProps.push(...component[$storeFlattened])\r\n        else componentProps.push(component)\r\n      })\r\n    }\r\n    \r\n    let world\r\n    if (Object.getOwnPropertySymbols(ents).includes($componentMap)) {\r\n      world = ents\r\n      ents = ents[$entityArray]\r\n    } else {\r\n      world = eidToWorld.get(ents[0])\r\n    }\r\n\r\n    if (!ents.length) return\r\n\r\n    let where = 0\r\n\r\n    // iterate over component props\r\n    for (let pid = 0; pid < componentProps.length; pid++) {\r\n      const prop = componentProps[pid]\r\n      const diff = changedProps.get(prop)\r\n      \r\n      // write pid\r\n      view.setUint8(where, pid)\r\n      where += 1\r\n\r\n      // save space for entity count\r\n      const countWhere = where\r\n      where += 4\r\n      \r\n      let count = 0\r\n      // write eid,val\r\n      for (let i = 0; i < ents.length; i++) {\r\n        const eid = ents[i]\r\n\r\n        // skip if entity doesn't have this component\r\n        if (!hasComponent(world, prop[$storeBase](), eid)) {\r\n          continue\r\n        }\r\n\r\n        // skip if diffing and no change\r\n        // TODO: optimize array diff\r\n        if (diff) {\r\n          if (ArrayBuffer.isView(prop[eid])) {\r\n            let dirty = false\r\n            for (let i = 0; i < prop[eid].length; i++) {\r\n              if(prop[eid][i] !== prop[eid][$serializeShadow][i]) {\r\n                dirty = true\r\n                break\r\n              }\r\n            }\r\n            if (dirty) continue\r\n          } else if (prop[eid] === prop[diff][eid]) continue\r\n        }\r\n\r\n        count++\r\n\r\n        // write eid\r\n        view.setUint32(where, eid)\r\n        where += 4\r\n\r\n        if (prop[$tagStore]) {\r\n          continue\r\n        }\r\n\r\n        // if property is an array\r\n        if (ArrayBuffer.isView(prop[eid])) {\r\n          const type = prop[eid].constructor.name.replace('Array', '')\r\n          const indexType = prop[eid][$indexType]\r\n          const indexBytes = prop[eid][$indexBytes]\r\n\r\n          // add space for count of dirty array elements\r\n          const countWhere2 = where\r\n          where += 1\r\n\r\n          let count2 = 0\r\n\r\n          // write index,value\r\n          for (let i = 0; i < prop[eid].length; i++) {\r\n            const value = prop[eid][i]\r\n\r\n            if (diff && prop[eid][i] === prop[eid][$serializeShadow][i]) {\r\n              continue\r\n            }\r\n\r\n            // write array index\r\n            view[`set${indexType}`](where, i)\r\n            where += indexBytes\r\n\r\n            // write value at that index\r\n            view[`set${type}`](where, value)\r\n            where += prop[eid].BYTES_PER_ELEMENT\r\n            count2++\r\n          }\r\n\r\n          // write total element count\r\n          view[`set${indexType}`](countWhere2, count2)\r\n\r\n        } else {\r\n          // regular property values\r\n          const type = prop.constructor.name.replace('Array', '')\r\n          // set value next [type] bytes\r\n          view[`set${type}`](where, prop[eid])\r\n          where += prop.BYTES_PER_ELEMENT\r\n\r\n          // sync shadow state\r\n          prop[$serializeShadow][eid] = prop[eid]\r\n        }\r\n      }\r\n\r\n      view.setUint32(countWhere, count)\r\n    }\r\n    return buffer.slice(0, where)\r\n  }\r\n}\r\n\r\nconst newEntities = new Map()\r\n\r\n/**\r\n * Defines a new deserializer which targets the given components to deserialize onto a given world.\r\n *\r\n * @param {object|array} target\r\n */\r\nexport const defineDeserializer = (target) => {\r\n  const isWorld = Object.getOwnPropertySymbols(target).includes($componentMap)\r\n  let [componentProps] = canonicalize(target)\r\n\r\n\r\n  return (world, packet, mode=0) => {\r\n\r\n    newEntities.clear()\r\n    \r\n    if (resized) {\r\n      [componentProps] = canonicalize(target)\r\n      resized = false\r\n    }\r\n\r\n    if (isWorld) {\r\n      componentProps = []\r\n      target[$componentMap].forEach((c, component) => {\r\n        if (component[$storeFlattened])\r\n          componentProps.push(...component[$storeFlattened])\r\n        else componentProps.push(component)\r\n      })\r\n    }\r\n\r\n    const localEntities = world[$localEntities]\r\n\r\n    const view = new DataView(packet)\r\n    let where = 0\r\n\r\n    while (where < packet.byteLength) {\r\n\r\n      // pid\r\n      const pid = view.getUint8(where)\r\n      where += 1\r\n\r\n      // entity count\r\n      const entityCount = view.getUint32(where)\r\n      where += 4\r\n\r\n      // component property\r\n      const prop = componentProps[pid]\r\n\r\n      // Get the entities and set their prop values\r\n      for (let i = 0; i < entityCount; i++) {\r\n        let eid = view.getUint32(where)\r\n        where += 4\r\n\r\n        if (mode === DESERIALIZE_MODE.MAP) {\r\n\r\n          if (localEntities.has(eid)) {\r\n            eid = localEntities.get(eid)\r\n          } else if (newEntities.has(eid)) {\r\n            eid = newEntities.get(eid)\r\n          } else {\r\n            const newEid = addEntity(world)\r\n            localEntities.set(eid, newEid)\r\n            newEntities.set(eid, newEid)\r\n            eid = newEid\r\n          }\r\n        }\r\n\r\n        if (mode === DESERIALIZE_MODE.APPEND ||  \r\n          mode === DESERIALIZE_MODE.REPLACE && !world[$entitySparseSet].has(eid)\r\n        ) {\r\n          const newEid = newEntities.get(eid) || addEntity(world)\r\n          newEntities.set(eid, newEid)\r\n          eid = newEid\r\n        }\r\n\r\n        const component = prop[$storeBase]()\r\n        if (!hasComponent(world, component, eid)) {\r\n          addComponent(world, component, eid)\r\n        }\r\n\r\n        if (component[$tagStore]) {\r\n          continue\r\n        }\r\n        \r\n        if (ArrayBuffer.isView(prop[eid])) {\r\n          const array = prop[eid]\r\n          const count = view[`get${array[$indexType]}`](where)\r\n          where += array[$indexBytes]\r\n\r\n          // iterate over count\r\n          for (let i = 0; i < count; i++) {\r\n            const index = view[`get${array[$indexType]}`](where)\r\n            where += array[$indexBytes]\r\n\r\n            const value = view[`get${array.constructor.name.replace('Array', '')}`](where)\r\n            where += array.BYTES_PER_ELEMENT\r\n\r\n            prop[eid][index] = value\r\n          }\r\n        } else {\r\n          const value = view[`get${prop.constructor.name.replace('Array', '')}`](where)\r\n          where += prop.BYTES_PER_ELEMENT\r\n\r\n          prop[eid] = value\r\n        }\r\n      }\r\n    }\r\n  }\r\n}", "import { resizeComponents } from './Component.js'\r\nimport { $notQueries, $queries, queryAddEntity, queryCheckEntity, queryRemoveEntity } from './Query.js'\r\nimport { resizeWorlds } from './World.js'\r\nimport { setSerializationResized } from './Serialize.js'\r\n\r\nexport const $entityMasks = Symbol('entityMasks')\r\nexport const $entityComponents = Symbol('entityMasks')\r\nexport const $entitySparseSet = Symbol('entitySparseSet')\r\nexport const $entityArray = Symbol('entityArray')\r\nexport const $entityIndices = Symbol('entityIndices')\r\nexport const $removedEntities = Symbol('removedEntities')\r\n\r\nlet defaultSize = 100000\r\n\r\n// need a global EID cursor which all worlds and all components know about\r\n// so that world entities can posess entire rows spanning all component tables\r\nlet globalEntityCursor = 0\r\nlet globalSize = defaultSize\r\nlet resizeThreshold = () => globalSize - (globalSize / 5)\r\n\r\nexport const getGlobalSize = () => globalSize\r\n\r\n// removed eids should also be global to prevent memory leaks\r\nconst removed = []\r\n\r\nexport const resetGlobals = () => {\r\n  globalSize = defaultSize\r\n  globalEntityCursor = 0\r\n  removed.length = 0\r\n}\r\n\r\nexport const getDefaultSize = () => defaultSize\r\n\r\n/**\r\n * Sets the default maximum number of entities for worlds and component stores.\r\n *\r\n * @param {number} size\r\n */\r\nexport const setDefaultSize = size => { \r\n  defaultSize = size\r\n  resetGlobals()\r\n}\r\n\r\nexport const getEntityCursor = () => globalEntityCursor\r\nexport const getRemovedEntities = () => removed\r\n\r\nexport const eidToWorld = new Map()\r\n\r\n/**\r\n * Adds a new entity to the specified world.\r\n *\r\n * @param {World} world\r\n * @returns {number} eid\r\n */\r\nexport const addEntity = (world) => {\r\n  \r\n  const eid = removed.length > 0 ? removed.shift() : globalEntityCursor++\r\n  world[$entitySparseSet].add(eid)\r\n  eidToWorld.set(eid, world)\r\n\r\n  // if data stores are 80% full\r\n  if (globalEntityCursor >= resizeThreshold()) {\r\n    // grow by half the original size rounded up to a multiple of 4\r\n    const size = globalSize\r\n    const amount = Math.ceil((size/2) / 4) * 4\r\n    const newSize = size + amount\r\n    globalSize = newSize\r\n    resizeWorlds(newSize)\r\n    resizeComponents(newSize)\r\n    setSerializationResized(true)\r\n    console.info(`\uD83D\uDC7E bitECS - resizing all worlds from ${size} to ${size+amount}`)\r\n  }\r\n\r\n  world[$notQueries].forEach(q => {\r\n    const match = queryCheckEntity(world, q, eid)\r\n    if (match) queryAddEntity(q, eid)\r\n  })\r\n\r\n  world[$entityComponents].set(eid, new Set())\r\n\r\n  return eid\r\n}\r\n\r\n/**\r\n * Removes an existing entity from the specified world.\r\n *\r\n * @param {World} world\r\n * @param {number} eid\r\n */\r\nexport const removeEntity = (world, eid) => {\r\n  // Check if entity is already removed\r\n  if (!world[$entitySparseSet].has(eid)) return\r\n\r\n  // Remove entity from all queries\r\n  // TODO: archetype graph\r\n  world[$queries].forEach(q => {\r\n    queryRemoveEntity(world, q, eid)\r\n  })\r\n\r\n  // Free the entity\r\n  removed.push(eid)\r\n\r\n  // remove all eid state from world\r\n  world[$entitySparseSet].remove(eid)\r\n  world[$entityComponents].delete(eid)\r\n\r\n  // Clear entity bitmasks\r\n  for (let i = 0; i < world[$entityMasks].length; i++) world[$entityMasks][i][eid] = 0\r\n}\r\n\r\n/**\r\n *  Returns an array of components that an entity possesses.\r\n *\r\n * @param {*} world\r\n * @param {*} eid\r\n */\r\nexport const getEntityComponents = (world, eid) => Array.from(world[$entityComponents].get(eid))", "import { SparseSet } from './Util.js'\r\nimport { $queryShadow, $storeFlattened, $tagStore, createShadow } from './Storage.js'\r\nimport { $componentMap, registerComponent } from './Component.js'\r\nimport { $entityMasks, $entityArray, getEntityCursor, $entitySparseSet } from './Entity.js'\r\n\r\nexport function Not(c) { return function QueryNot() { return c } }\r\nexport function Or(c) { return function QueryOr() { return c } }\r\nexport function Changed(c) { return function QueryChanged() { return c } }\r\n\r\nexport const $queries = Symbol('queries')\r\nexport const $notQueries = Symbol('notQueries')\r\nexport const $queryMap = Symbol('queryMap')\r\nexport const $dirtyQueries = Symbol('$dirtyQueries')\r\nexport const $queryComponents = Symbol('queryComponents')\r\nexport const $enterQuery = Symbol('enterQuery')\r\nexport const $exitQuery = Symbol('exitQuery')\r\n\r\n/**\r\n * Given an existing query, returns a new function which returns entities who have been added to the given query since the last call of the function.\r\n *\r\n * @param {function} query\r\n * @returns {function} enteredQuery\r\n */\r\nexport const enterQuery = query => world => {\r\n  if (!world[$queryMap].has(query)) registerQuery(world, query)\r\n  const q = world[$queryMap].get(query)\r\n  return q.entered.splice(0)\r\n}\r\n\r\n/**\r\n * Given an existing query, returns a new function which returns entities who have been removed from the given query since the last call of the function.\r\n *\r\n * @param {function} query\r\n * @returns {function} enteredQuery\r\n */\r\nexport const exitQuery = query => world => {\r\n  if (!world[$queryMap].has(query)) registerQuery(world, query)\r\n  const q = world[$queryMap].get(query)\r\n  return q.exited.splice(0)\r\n}\r\n\r\nexport const registerQuery = (world, query) => {\r\n\r\n  const components = []\r\n  const notComponents = []\r\n  const changedComponents = []\r\n\r\n  query[$queryComponents].forEach(c => {\r\n    if (typeof c === 'function') {\r\n      const comp = c()\r\n      if (!world[$componentMap].has(comp)) registerComponent(world, comp)\r\n      if (c.name === 'QueryNot') {\r\n        notComponents.push(comp)\r\n      }\r\n      if (c.name === 'QueryChanged') {\r\n        changedComponents.push(comp)\r\n        components.push(comp)\r\n      }\r\n    } else {\r\n      if (!world[$componentMap].has(c)) registerComponent(world, c)\r\n      components.push(c)\r\n    }\r\n  })\r\n\r\n\r\n  const mapComponents = c => world[$componentMap].get(c)\r\n\r\n  const allComponents = components.concat(notComponents).map(mapComponents)\r\n\r\n  // const sparseSet = Uint32SparseSet(getGlobalSize())\r\n  const sparseSet = SparseSet()\r\n\r\n  const archetypes = []\r\n  const changed = SparseSet()\r\n  const toRemove = []\r\n  const entered = []\r\n  const exited = []\r\n\r\n  const generations = allComponents\r\n    .map(c => c.generationId)\r\n    .reduce((a,v) => {\r\n      if (a.includes(v)) return a\r\n      a.push(v)\r\n      return a\r\n    }, [])\r\n\r\n  const reduceBitflags = (a,c) => {\r\n    if (!a[c.generationId]) a[c.generationId] = 0\r\n    a[c.generationId] |= c.bitflag\r\n    return a\r\n  }\r\n  const masks = components\r\n    .map(mapComponents)\r\n    .reduce(reduceBitflags, {})\r\n\r\n  const notMasks = notComponents\r\n    .map(mapComponents)\r\n    .reduce((a,c) => {\r\n      if (!a[c.generationId]) {\r\n        a[c.generationId] = 0\r\n      }\r\n      a[c.generationId] |= c.bitflag\r\n      return a\r\n    }, {})\r\n\r\n  // const orMasks = orComponents\r\n  //   .map(mapComponents)\r\n  //   .reduce(reduceBitmasks, {})\r\n\r\n  const hasMasks = allComponents\r\n    .reduce(reduceBitflags, {})\r\n\r\n  const flatProps = components\r\n    .filter(c => !c[$tagStore])\r\n    .map(c => Object.getOwnPropertySymbols(c).includes($storeFlattened) ? c[$storeFlattened] : [c])\r\n    .reduce((a,v) => a.concat(v), [])\r\n\r\n  const shadows = flatProps.map(prop => {\r\n      const $ = Symbol()\r\n      createShadow(prop, $)\r\n      return prop[$]\r\n  }, [])\r\n\r\n  const q = Object.assign(sparseSet, {\r\n    archetypes,\r\n    changed,\r\n    components,\r\n    notComponents,\r\n    changedComponents,\r\n    masks,\r\n    notMasks,\r\n    // orMasks,\r\n    hasMasks,\r\n    generations,\r\n    flatProps,\r\n    toRemove,\r\n    entered,\r\n    exited,\r\n    shadows,\r\n  })\r\n  \r\n  world[$queryMap].set(query, q)\r\n  world[$queries].add(q)\r\n  \r\n  components.map(mapComponents).forEach(c => {\r\n    c.queries.add(q)\r\n  })\r\n  notComponents.map(mapComponents).forEach(c => {\r\n    c.notQueries.add(q)\r\n  })\r\n  changedComponents.map(mapComponents).forEach(c => {\r\n    c.changedQueries.add(q)\r\n  })\r\n\r\n  if (notComponents.length) world[$notQueries].add(q)\r\n\r\n  for (let eid = 0; eid < getEntityCursor(); eid++) {\r\n    if (!world[$entitySparseSet].has(eid)) continue\r\n    if (queryCheckEntity(world, q, eid)) {\r\n      queryAddEntity(q, eid)\r\n    }\r\n  }\r\n}\r\n\r\nconst diff = (q, clearDiff) => {\r\n  if (clearDiff) q.changed.length = 0\r\n  const { flatProps, shadows } = q\r\n  for (let i = 0; i < q.dense.length; i++) {\r\n    const eid = q.dense[i]\r\n    let dirty = false\r\n    for (let pid = 0; pid < flatProps.length; pid++) {\r\n      const prop = flatProps[pid]\r\n      const shadow = shadows[pid]\r\n      if (ArrayBuffer.isView(prop[eid])) {\r\n        for (let i = 0; i < prop[eid].length; i++) {\r\n          if (prop[eid][i] !== prop[eid][$queryShadow][i]) {\r\n            dirty = true\r\n            prop[eid][$queryShadow][i] = prop[eid][i]\r\n          }\r\n        }\r\n      } else {\r\n        if (prop[eid] !== shadow[eid]) {\r\n          dirty = true\r\n          shadow[eid] = prop[eid]\r\n        }\r\n      }\r\n    }\r\n    if (dirty) q.changed.push(eid)\r\n  }\r\n  return q.changed\r\n}\r\n\r\nconst queryEntityChanged = (q, eid) => {\r\n  if (q.changed.has(eid)) return\r\n  q.changed.add(eid)\r\n}\r\n\r\nexport const entityChanged = (world, component, eid) => {\r\n  const { changedQueries } = world[$componentMap].get(component)\r\n  changedQueries.forEach(q => {\r\n    const match = queryCheckEntity(world, q, eid)\r\n    if (match) queryEntityChanged(q, eid)\r\n  })\r\n}\r\n\r\n\r\n/**\r\n * Defines a query function which returns a matching set of entities when called on a world.\r\n *\r\n * @param {array} components\r\n * @returns {function} query\r\n */\r\n\r\nexport const defineQuery = (components) => {\r\n  if (components === undefined || components[$componentMap] !== undefined) {\r\n    return world => world ? world[$entityArray] : components[$entityArray]\r\n  }\r\n\r\n  const query = function (world, clearDiff=true) {\r\n    if (!world[$queryMap].has(query)) registerQuery(world, query)\r\n\r\n    const q = world[$queryMap].get(query)\r\n\r\n    queryCommitRemovals(q)\r\n\r\n    // if (q.changedComponents.length) return diff(q, clearDiff)\r\n    if (q.changedComponents.length) return q.changed.dense\r\n\r\n    return q.dense\r\n  }\r\n  query[$queryComponents] = components\r\n  return query\r\n}\r\n\r\n// TODO: archetype graph\r\nexport const queryCheckEntity = (world, q, eid) => {\r\n  const { masks, notMasks, generations } = q\r\n  // let or = true\r\n  for (let i = 0; i < generations.length; i++) {\r\n    const generationId = generations[i]\r\n    const qMask = masks[generationId]\r\n    const qNotMask = notMasks[generationId]\r\n    // const qOrMask = orMasks[generationId]\r\n    const eMask = world[$entityMasks][generationId][eid]\r\n    \r\n    // if (qOrMask && (eMask & qOrMask) !== qOrMask) {\r\n    //   continue\r\n    // }\r\n    if (qNotMask && (eMask & qNotMask) !== 0) {\r\n      return false\r\n    }\r\n    if (qMask && (eMask & qMask) !== qMask) {\r\n      return false\r\n    }\r\n  }\r\n  return true\r\n}\r\n\r\nexport const queryCheckComponent = (q, c) => {\r\n  const { generationId, bitflag } = c\r\n  const { hasMasks } = q\r\n  const mask = hasMasks[generationId]\r\n  return (mask & bitflag) === bitflag\r\n}\r\n\r\nexport const queryAddEntity = (q, eid) => {\r\n  if (q.has(eid)) return\r\n  q.add(eid)\r\n  q.entered.push(eid)\r\n}\r\n\r\nconst queryCommitRemovals = (q) => {\r\n  while (q.toRemove.length) {\r\n    q.remove(q.toRemove.pop())\r\n  }\r\n}\r\n\r\nexport const commitRemovals = (world) => {\r\n  world[$dirtyQueries].forEach(queryCommitRemovals)\r\n  world[$dirtyQueries].clear()\r\n}\r\n\r\nexport const queryRemoveEntity = (world, q, eid) => {\r\n  if (!q.has(eid)) return\r\n  q.toRemove.push(eid)\r\n  world[$dirtyQueries].add(q)\r\n  q.exited.push(eid)\r\n}\r\n\r\n\r\n/**\r\n * Resets a Changed-based query, clearing the underlying list of changed entities.\r\n *\r\n * @param {World} world\r\n * @param {function} query\r\n */\r\nexport const resetChangedQuery = (world, query) => {\r\n  const q = world[$queryMap].get(query)\r\n  q.changed = SparseSet()\r\n}\r\n\r\n/**\r\n * Removes a query from a world.\r\n *\r\n * @param {World} world\r\n * @param {function} query\r\n */\r\nexport const removeQuery = (world, query) => {\r\n  const q = world[$queryMap].get(query)\r\n  world[$queries].delete(q)\r\n  world[$queryMap].delete(query)\r\n}", "import { $storeSize, createStore, resetStoreFor, resizeStore } from './Storage.js'\r\nimport { $queries, queryAddEntity, queryRemoveEntity, queryCheckEntity } from './Query.js'\r\nimport { $bitflag, $size } from './World.js'\r\nimport { $entityMasks, getDefaultSize, eidToWorld, $entityComponents } from './Entity.js'\r\n\r\nexport const $componentMap = Symbol('componentMap')\r\n\r\nexport const components = []\r\n\r\nexport const resizeComponents = (size) => {\r\n  components.forEach(component => resizeStore(component, size))\r\n}\r\n\r\n\r\n/**\r\n * Defines a new component store.\r\n *\r\n * @param {object} schema\r\n * @returns {object}\r\n */\r\nexport const defineComponent = (schema) => {\r\n  const component = createStore(schema, getDefaultSize())\r\n  if (schema && Object.keys(schema).length) components.push(component)\r\n  return component\r\n}\r\n\r\nexport const incrementBitflag = (world) => {\r\n  world[$bitflag] *= 2\r\n  if (world[$bitflag] >= 2**32) {\r\n    world[$bitflag] = 1\r\n    world[$entityMasks].push(new Uint32Array(world[$size]))\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * Registers a component with a world.\r\n *\r\n * @param {World} world\r\n * @param {Component} component\r\n */\r\nexport const registerComponent = (world, component) => {\r\n  if (!component) throw new Error(`bitECS - Cannot register null or undefined component`)\r\n\r\n  const queries = new Set()\r\n  const notQueries = new Set()\r\n  const changedQueries = new Set()\r\n\r\n  world[$queries].forEach(q => {\r\n    if (q.notComponents.includes(component)) {\r\n      queries.add(q)\r\n    } else if (q.changedComponents.includes(component)) {\r\n      changedQueries.add(q)\r\n    } else if (q.components.includes(component)) {\r\n      notQueries.add(q)\r\n    }\r\n  })\r\n\r\n  world[$componentMap].set(component, { \r\n    generationId: world[$entityMasks].length - 1,\r\n    bitflag: world[$bitflag],\r\n    store: component,\r\n    queries,\r\n    notQueries,\r\n    changedQueries,\r\n  })\r\n\r\n  if (component[$storeSize] < world[$size]) {\r\n    resizeStore(component, world[$size])\r\n  }\r\n\r\n  incrementBitflag(world)\r\n}\r\n\r\n/**\r\n * Registers multiple components with a world.\r\n *\r\n * @param {World} world\r\n * @param {Component} components\r\n */\r\nexport const registerComponents = (world, components) => {\r\n  components.forEach(c => registerComponent(world, c))\r\n}\r\n\r\n/**\r\n * Checks if an entity has a component.\r\n *\r\n * @param {World} world\r\n * @param {Component} component\r\n * @param {number} eid\r\n * @returns {boolean}\r\n */\r\nexport const hasComponent = (world, component, eid) => {\r\n  const registeredComponent = world[$componentMap].get(component)\r\n  if (!registeredComponent) return\r\n  const { generationId, bitflag } = registeredComponent\r\n  const mask = world[$entityMasks][generationId][eid]\r\n  return (mask & bitflag) === bitflag\r\n}\r\n\r\n/**\r\n * Adds a component to an entity\r\n *\r\n * @param {World} world\r\n * @param {Component} component\r\n * @param {number} eid\r\n * @param {boolean} [reset=false]\r\n */\r\nexport const addComponent = (world, component, eid, reset=false) => {\r\n  if (!Number.isInteger(eid)) {\r\n    component = world\r\n    world = eidToWorld.get(eid)\r\n    reset = eid || reset\r\n  }\r\n  if (!world[$componentMap].has(component)) registerComponent(world, component)\r\n  if (hasComponent(world, component, eid)) return\r\n\r\n  const c = world[$componentMap].get(component)\r\n  const { generationId, bitflag, queries, notQueries } = c\r\n  \r\n  notQueries.forEach(q => {\r\n    const match = queryCheckEntity(world, q, eid)\r\n    if (match) queryRemoveEntity(world, q, eid)\r\n  })\r\n  \r\n  // Add bitflag to entity bitmask\r\n  world[$entityMasks][generationId][eid] |= bitflag\r\n\r\n  // todo: archetype graph\r\n  queries.forEach(q => {\r\n    const match = queryCheckEntity(world, q, eid)\r\n    if (match) queryAddEntity(q, eid)\r\n  })\r\n\r\n  world[$entityComponents].get(eid).add(component)\r\n\r\n  // Zero out each property value\r\n  if (reset) resetStoreFor(component, eid)\r\n}\r\n\r\n/**\r\n * Removes a component from an entity and resets component state unless otherwise specified.\r\n *\r\n * @param {World} world\r\n * @param {Component} component\r\n * @param {number} eid\r\n * @param {boolean} [reset=true]\r\n */\r\nexport const removeComponent = (world, component, eid, reset=true) => {\r\n  if (!Number.isInteger(eid)) {\r\n    component = world\r\n    world = eidToWorld.get(eid)\r\n    reset = eid || reset\r\n  }\r\n  const c = world[$componentMap].get(component)\r\n  const { generationId, bitflag, queries, notQueries } = c\r\n\r\n  if (!(world[$entityMasks][generationId][eid] & bitflag)) return\r\n\r\n  // todo: archetype graph\r\n  queries.forEach(q => {\r\n    const match = queryCheckEntity(world, q, eid)\r\n    if (match) queryRemoveEntity(world, q, eid)\r\n  })\r\n\r\n  // Remove flag from entity bitmask\r\n  world[$entityMasks][generationId][eid] &= ~bitflag\r\n  \r\n  notQueries.forEach(q => {\r\n    const match = queryCheckEntity(world, q, eid)\r\n    if (match) queryAddEntity(q, eid)\r\n  })\r\n  \r\n  world[$entityComponents].get(eid).delete(component)\r\n\r\n  // Zero out each property value\r\n  if (reset) resetStoreFor(component, eid)\r\n}\r\n", "import { $componentMap } from './Component.js'\r\nimport { $queryMap, $queries, $dirtyQueries, $notQueries } from './Query.js'\r\nimport { $entityArray, $entityComponents, $entityMasks, $entitySparseSet, getGlobalSize, removeEntity } from './Entity.js'\r\nimport { resize } from './Storage.js'\r\nimport { SparseSet } from './Util.js'\r\n\r\nexport const $size = Symbol('size')\r\nexport const $resizeThreshold = Symbol('resizeThreshold')\r\nexport const $bitflag = Symbol('bitflag')\r\nexport const $archetypes = Symbol('archetypes')\r\nexport const $localEntities = Symbol('localEntities')\r\n\r\nexport const worlds = []\r\n\r\nexport const resizeWorlds = (size) => {\r\n  worlds.forEach(world => {\r\n    world[$size] = size\r\n\r\n    for (let i = 0; i < world[$entityMasks].length; i++) {\r\n      const masks = world[$entityMasks][i];\r\n      world[$entityMasks][i] = resize(masks, size)\r\n    }\r\n    \r\n    world[$resizeThreshold] = world[$size] - (world[$size] / 5)\r\n  })\r\n}\r\n\r\n/**\r\n * Creates a new world.\r\n *\r\n * @returns {object}\r\n */\r\nexport const createWorld = () => {\r\n  const world = {}\r\n  resetWorld(world)\r\n  worlds.push(world)\r\n  return world\r\n}\r\n\r\n/**\r\n * Resets a world.\r\n *\r\n * @param {World} world\r\n * @returns {object}\r\n */\r\nexport const resetWorld = (world) => {\r\n  const size = getGlobalSize()\r\n  world[$size] = size\r\n\r\n  if (world[$entityArray]) world[$entityArray].forEach(eid => removeEntity(world, eid))\r\n\r\n  world[$entityMasks] = [new Uint32Array(size)]\r\n  world[$entityComponents] = new Map()\r\n  world[$archetypes] = []\r\n\r\n  world[$entitySparseSet] = SparseSet()\r\n  world[$entityArray] = world[$entitySparseSet].dense\r\n\r\n  world[$bitflag] = 1\r\n\r\n  world[$componentMap] = new Map()\r\n\r\n  world[$queryMap] = new Map()\r\n  world[$queries] = new Set()\r\n  world[$notQueries] = new Set()\r\n  world[$dirtyQueries] = new Set()\r\n\r\n  world[$localEntities] = new Map()\r\n\r\n  return world\r\n}\r\n\r\n/**\r\n * Deletes a world.\r\n *\r\n * @param {World} world\r\n */\r\nexport const deleteWorld = (world) => {\r\n  Object.getOwnPropertySymbols(world).forEach($ => { delete world[$] })\r\n  Object.keys(world).forEach(key => { delete world[key] })\r\n  worlds.splice(worlds.indexOf(world), 1)\r\n}\r\n", "import { commitRemovals } from './Query.js'\r\n\r\n/**\r\n * Defines a new system function.\r\n *\r\n * @param {function} update\r\n * @returns {function}\r\n */\r\nexport const defineSystem = (fn1, fn2) => {\r\n  const update = fn2 !== undefined ? fn2 : fn1\r\n  const create = fn2 !== undefined ? fn1 : undefined\r\n  const init = new Set()\r\n  const system = (world, ...args) => {\r\n    if (create && !init.has(world)) {\r\n      create(world, ...args)\r\n      init.add(world)\r\n    }\r\n    update(world, ...args)\r\n    commitRemovals(world)\r\n    return world\r\n  }\r\n\r\n  Object.defineProperty(system, 'name', {\r\n    value: (update.name || \"AnonymousSystem\") + \"_internal\",\r\n    configurable: true,\r\n  })\r\n\r\n  return system\r\n}", "import { $storeFlattened } from \"./Storage.js\";\r\n\r\nconst proxify = (proto, store) => {\r\n  // for (const key in store) {\r\n  const keys = Object.keys(store)\r\n  for (let i = 0; i < keys.length; i++) {\r\n    const key = keys[i]\r\n      \r\n    if (!ArrayBuffer.isView(store[key])) {\r\n      proxify(proto[key], store[key])\r\n    } else {\r\n      const prop = store[key]\r\n      // const get = function() {return prop[this._eid]}\r\n      // const set = function(val) {prop[this._eid] = val}\r\n      Object.defineProperty(proto, key, //{get,set})\r\n        {\r\n        get() {\r\n          return prop[this._eid]\r\n        },\r\n        set(val) {\r\n          prop[this._eid] = val\r\n        }\r\n      })\r\n    }\r\n  }\r\n}\r\n\r\nexport const defineProxy = (store) => {\r\n\r\n  function P (eid) {\r\n    this._eid = eid\r\n    this._store = store\r\n  }\r\n\r\n  // Object.keys(store).forEach((key,i) => {\r\n  //   Object.defineProperty(P.prototype, key, {\r\n  //     get() {\r\n  //       const k = this._keys[i]\r\n  //       return this._store[k][this._eid]\r\n  //     },\r\n  //     set(val) {\r\n  //       const k = this._keys[i]\r\n  //       this._store[k][this._eid] = val\r\n  //     }\r\n  //   })\r\n  // })\r\n\r\n  // P._store = store\r\n\r\n  // P.prototype.proxify = function () {\r\n  //   for (const key in P._store) {\r\n  //     const prop = P._store[key]\r\n  //     Object.defineProperty(proto, key, {\r\n  //       get() {\r\n  //         return prop[this._eid]\r\n  //       },\r\n  //       set(val) {\r\n  //         prop[this._eid] = val\r\n  //       }\r\n  //     });\r\n  //   }\r\n  // }\r\n\r\n  // P.prototype.proxify()\r\n\r\n  proxify(P.prototype, store)\r\n\r\n  // WARNING: cursed code ahead\r\n\r\n  // this eval is to bypass v8 fucking over the performance when referencing things outside of getter/setter scope\r\n  // don't blame me\r\n\r\n  const defineProp = key => `\r\n    Object.defineProperty(P.prototype, '${key}', {\r\n      enumerable: true,\r\n      get() {\r\n        return this._store['${key}'][this._eid]\r\n      },\r\n      set(val) {\r\n        this._store['${key}'][this._eid] = val\r\n      }\r\n    })\r\n  `\r\n\r\n  const defineAllProps = keys => keys.reduce((a,key) => a + defineProp(key), '')\r\n  \r\n  // eval(defineAllProps(Object.keys(store)))\r\n\r\n  return Object.seal(P)\r\n}\r\n\r\nexport const loadProxy = (proxy, eid) => {\r\n  // proxy._eid = eid\r\n  return proxy\r\n}\r\n\r\nexport const defineProxyLoader = (components) => {\r\n  const proxies = components.map((component) => new (defineProxy(component)))\r\n  // return (eid) => proxies.map(proxy => loadProxy(proxy, eid))\r\n  const fn = proxies.reduce((lastFn,proxy) => {\r\n    return eid => {\r\n      loadProxy(proxy, eid)\r\n      lastFn(eid)\r\n      return proxies\r\n    }\r\n  }, () => proxies)\r\n  return fn\r\n}", "import { createWorld, resetWorld, deleteWorld } from './World.js'\r\nimport { addEntity, removeEntity, setDefaultSize, getEntityComponents} from './Entity.js'\r\nimport { defineComponent, registerComponent, registerComponents, hasComponent, addComponent, removeComponent } from './Component.js'\r\nimport { defineSystem } from './System.js'\r\nimport { defineQuery, enterQuery, exitQuery, Changed, Not, commitRemovals, resetChangedQuery, removeQuery, entityChanged } from './Query.js'\r\nimport { defineSerializer, defineDeserializer, DESERIALIZE_MODE } from './Serialize.js'\r\nimport { TYPES_ENUM, parentArray } from './Storage.js'\r\nimport { defineProxy } from './Proxy.js'\r\n\r\nexport const pipe = (...fns) => (...args) => {\r\n  const input = Array.isArray(args[0]) ? args[0] : args\r\n  if (!input || input.length === 0) return\r\n  fns = Array.isArray(fns[0]) ? fns[0] : fns\r\n  let tmp = input\r\n  for (let i = 0; i < fns.length; i++) {\r\n    const fn = fns[i]\r\n    if (Array.isArray(tmp)) {\r\n      // tmp = tmp.reduce((a,v) => a.concat(fn(v)),[])\r\n      tmp = fn(...tmp)\r\n    } else {\r\n      tmp = fn(tmp)\r\n    }\r\n  }\r\n  return tmp\r\n}\r\n\r\nexport const Types = TYPES_ENUM\r\n\r\nexport {\r\n\r\n  setDefaultSize,\r\n  createWorld,\r\n  resetWorld,\r\n  deleteWorld,\r\n  addEntity,\r\n  removeEntity,\r\n\r\n  registerComponent,\r\n  registerComponents,\r\n  defineComponent,\r\n  addComponent,\r\n  removeComponent,\r\n  hasComponent,\r\n  getEntityComponents,\r\n  entityChanged,\r\n\r\n  defineProxy,\r\n\r\n  defineQuery,\r\n  Changed,\r\n  Not,\r\n  // Or,\r\n  enterQuery,\r\n  exitQuery,\r\n  commitRemovals,\r\n  resetChangedQuery,\r\n  removeQuery,\r\n\r\n  defineSystem,\r\n  \r\n  defineSerializer,\r\n  defineDeserializer,\r\n  DESERIALIZE_MODE,\r\n\r\n  parentArray,\r\n\r\n}\r\n", "import { createWorld } from 'bitecs';\r\n\r\nconst world = createWorld();\r\n\r\nexport const GameObjectWorld = world;\r\n", "import { Types, defineComponent } from 'bitecs';\r\n\r\nconst Color = defineComponent({\r\n    r: Types.ui8c,\r\n    g: Types.ui8c,\r\n    b: Types.ui8c,\r\n    a: Types.f32,\r\n    colorMatrix: [ Types.f32, 16 ],\r\n    colorOffset: [ Types.f32, 4 ]\r\n});\r\n\r\nexport const ColorComponent = Color;\r\n", "export const DEFAULT_COLOR_MATRIX = new Float32Array([ 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1 ]);\r\nexport const DEFAULT_COLOR_OFFSET = new Float32Array(4);\r\n", "import { ColorComponent } from './ColorComponent';\r\nimport { DEFAULT_COLOR_MATRIX } from '../../colormatrix/const';\r\nimport { GameObjectWorld } from '../../GameObjectWorld';\r\nimport { addComponent } from 'bitecs';\r\n\r\nexport function AddColorComponent (id: number): void\r\n{\r\n    addComponent(GameObjectWorld, ColorComponent, id);\r\n\r\n    ColorComponent.r[id] = 255;\r\n    ColorComponent.g[id] = 255;\r\n    ColorComponent.b[id] = 255;\r\n    ColorComponent.a[id] = 1;\r\n    ColorComponent.colorMatrix[id].set(DEFAULT_COLOR_MATRIX);\r\n}\r\n", "\r\nexport function CompareColorMatrix (srcMatrix: Float32Array, srcOffset: Float32Array, targetMatrix: Float32Array, targetOffset: Float32Array): boolean\r\n{\r\n    for (let i = 0; i < srcOffset.length; i++)\r\n    {\r\n        if (srcOffset[i] !== targetOffset[i])\r\n        {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    for (let i = 0; i < srcMatrix.length; i++)\r\n    {\r\n        if (srcMatrix[i] !== targetMatrix[i])\r\n        {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    return true;\r\n}\r\n", "import { Types, defineComponent } from 'bitecs';\r\n\r\n/**\r\n * Buffer Structure:\r\n *\r\n * Triangle 1:\r\n *\r\n * Top Left Vert\r\n *\r\n * 0 - x position\r\n * 1 - y position\r\n * 2 - u0\r\n * 3 - v0\r\n * 4 - Texture Index\r\n * 5 - Red Component\r\n * 6 - Green Component\r\n * 7 - Blue Component\r\n * 8 - Alpha Component\r\n *\r\n * Bottom Left Vert\r\n *\r\n * 9 - x position\r\n * 10 - y position\r\n * 11 - u0\r\n * 12 - v1\r\n * 13 - Texture Index\r\n * 14 - Red Component\r\n * 15 - Green Component\r\n * 16 - Blue Component\r\n * 17 - Alpha Component\r\n *\r\n * Bottom Right Vert\r\n *\r\n * 18 - x position\r\n * 19 - y position\r\n * 20 - u1\r\n * 21 - v1\r\n * 22 - Texture Index\r\n * 23 - Red Component\r\n * 24 - Green Component\r\n * 25 - Blue Component\r\n * 26 - Alpha Component\r\n *\r\n * Triangle 2:\r\n *\r\n * Top Left Vert\r\n *\r\n * 27 - x position\r\n * 28 - y position\r\n * 29 - u0\r\n * 30 - v0\r\n * 31 - Texture Index\r\n * 32 - Red Component\r\n * 33 - Green Component\r\n * 34 - Blue Component\r\n * 35 - Alpha Component\r\n *\r\n * Bottom Right Vert\r\n *\r\n * 36 - x position\r\n * 37 - y position\r\n * 38 - u1\r\n * 39 - v1\r\n * 40 - Texture Index\r\n * 41 - Red Component\r\n * 42 - Green Component\r\n * 43 - Blue Component\r\n * 44 - Alpha Component\r\n *\r\n * Top Right Vert\r\n *\r\n * 45 - x position\r\n * 46 - y position\r\n * 47 - u1\r\n * 48 - v0\r\n * 49 - Texture Index\r\n * 50 - Red Component\r\n * 51 - Green Component\r\n * 52 - Blue Component\r\n * 53 - Alpha Component\r\n */\r\n\r\nconst QuadVertex = defineComponent({\r\n    values: [ Types.f32, 54 ]\r\n});\r\n\r\nexport const QuadVertexComponent = QuadVertex;\r\n", "import { QuadVertexComponent } from './QuadVertexComponent';\r\n\r\nexport function SetQuadColor (id: number, red: number, green: number, blue: number, alpha: number): void\r\n{\r\n    const data = QuadVertexComponent.values[id];\r\n\r\n    data[5] = red;\r\n    data[6] = green;\r\n    data[7] = blue;\r\n    data[8] = alpha;\r\n\r\n    data[14] = red;\r\n    data[15] = green;\r\n    data[16] = blue;\r\n    data[17] = alpha;\r\n\r\n    data[23] = red;\r\n    data[24] = green;\r\n    data[25] = blue;\r\n    data[26] = alpha;\r\n\r\n    data[32] = red;\r\n    data[33] = green;\r\n    data[34] = blue;\r\n    data[35] = alpha;\r\n\r\n    data[41] = red;\r\n    data[42] = green;\r\n    data[43] = blue;\r\n    data[44] = alpha;\r\n\r\n    data[50] = red;\r\n    data[51] = green;\r\n    data[52] = blue;\r\n    data[53] = alpha;\r\n}\r\n", "import { Changed, defineQuery, defineSystem } from 'bitecs';\r\n\r\nimport { ColorComponent } from './ColorComponent';\r\nimport { QuadVertexComponent } from '../vertices/QuadVertexComponent';\r\nimport { SetQuadColor } from '../vertices/SetQuadColor';\r\n\r\nconst changedColorQuery = defineQuery([ ColorComponent, QuadVertexComponent ]);\r\n// const changedColorQuery = defineQuery([ Changed(ColorComponent), QuadVertexComponent ]);\r\n\r\nconst packQuadColorsSystem = defineSystem(world =>\r\n{\r\n    const entities = changedColorQuery(world);\r\n\r\n    for (let i = 0; i < entities.length; i++)\r\n    {\r\n        const id = entities[i];\r\n\r\n        const r = ColorComponent.r[id] / 255;\r\n        const g = ColorComponent.g[id] / 255;\r\n        const b = ColorComponent.b[id] / 255;\r\n        const a = ColorComponent.a[id];\r\n\r\n        SetQuadColor(id, r, g, b, a);\r\n    }\r\n\r\n    return world;\r\n});\r\n\r\nexport const PackQuadColorsSystem = packQuadColorsSystem;\r\n", "import { Types, defineComponent } from 'bitecs';\r\n\r\n//  worldID = The ID of the World entity the owner of this component belongs to\r\n//  parentID = The ID of the Parent entity. If it has no parent, will match the worldID\r\n//  numChildren = The number of direct descendants this entity has\r\n//  depth = Reserved to allow for per-child depth sorting outside of the display list index\r\n//  index = The position of this entity compared to its siblings, i.e. index 0 is at the back, index 1 above that, etc\r\n//  worldDepth = The distance of the entity from the world root (up to a maximum depth of 65535)\r\n\r\nconst Hierarchy = defineComponent({\r\n    worldID: Types.ui32,\r\n    parentID: Types.ui32,\r\n    numChildren: Types.ui32,\r\n    depth: Types.ui32,\r\n    index: Types.ui32,\r\n    worldDepth: Types.ui16\r\n});\r\n\r\nexport const HierarchyComponent = Hierarchy;\r\n", "import { HierarchyComponent } from './HierarchyComponent';\r\n\r\nexport function GetParentID (id: number): number\r\n{\r\n    return HierarchyComponent.parentID[id];\r\n}\r\n", "import { GetParentID } from './GetParentID';\r\n\r\nexport function GetParents (id: number): number[]\r\n{\r\n    const results = [];\r\n\r\n    let currentParent = GetParentID(id);\r\n\r\n    while (currentParent)\r\n    {\r\n        results.push(currentParent);\r\n\r\n        currentParent = GetParentID(currentParent);\r\n    }\r\n\r\n    return results;\r\n}\r\n", "import { Types, defineComponent } from 'bitecs';\r\n\r\nconst Dirty = defineComponent({\r\n    child: Types.ui8,\r\n    childCache: Types.ui8,\r\n    displayList: Types.ui8,\r\n    transform: Types.ui8\r\n});\r\n\r\nexport const DirtyComponent = Dirty;\r\n", "import { DirtyComponent } from './DirtyComponent';\r\n\r\nexport function SetDirtyChild (id: number): void\r\n{\r\n    DirtyComponent.child[id] = 1;\r\n}\r\n", "import { DirtyComponent } from './DirtyComponent';\r\n\r\nexport function SetDirtyChildCache (id: number): void\r\n{\r\n    DirtyComponent.childCache[id] = 1;\r\n}\r\n", "import { DirtyComponent } from './DirtyComponent';\r\n\r\nexport function SetDirtyTransform (id: number): void\r\n{\r\n    DirtyComponent.transform[id] = 1;\r\n}\r\n", "import { Types, defineComponent } from 'bitecs';\r\n\r\nconst Permissions = defineComponent({\r\n    visible: Types.ui8,\r\n    visibleChildren: Types.ui8,\r\n    willUpdate: Types.ui8,\r\n    willUpdateChildren: Types.ui8,\r\n    willRender: Types.ui8,\r\n    willRenderChildren: Types.ui8,\r\n    willCacheChildren: Types.ui8,\r\n    willTransformChildren: Types.ui8,\r\n    willColorChildren: Types.ui8\r\n});\r\n\r\nexport const PermissionsComponent = Permissions;\r\n", "import { PermissionsComponent } from './PermissionsComponent';\r\n\r\nexport function WillCacheChildren (id: number): boolean\r\n{\r\n    return Boolean(PermissionsComponent.willCacheChildren[id]);\r\n}\r\n", "import { PermissionsComponent } from './PermissionsComponent';\r\n\r\nexport function WillTransformChildren (id: number): boolean\r\n{\r\n    return Boolean(PermissionsComponent.willTransformChildren[id]);\r\n}\r\n", "import { GetParents } from '../hierarchy/GetParents';\r\nimport { SetDirtyChild } from './SetDirtyChild';\r\nimport { SetDirtyChildCache } from './SetDirtyChildCache';\r\nimport { SetDirtyTransform } from './SetDirtyTransform';\r\nimport { WillCacheChildren } from '../permissions/WillCacheChildren';\r\nimport { WillTransformChildren } from '../permissions/WillTransformChildren';\r\n\r\nexport function SetDirtyParents (childID: number): void\r\n{\r\n    const parents = GetParents(childID);\r\n\r\n    parents.forEach(id =>\r\n    {\r\n        SetDirtyChild(id);\r\n\r\n        if (WillTransformChildren(id))\r\n        {\r\n            SetDirtyTransform(id);\r\n        }\r\n\r\n        if (WillCacheChildren(id))\r\n        {\r\n            SetDirtyChildCache(id);\r\n        }\r\n    });\r\n}\r\n", "import { Flush } from './Flush';\r\nimport { GameObjectWorld } from '../../../GameObjectWorld';\r\nimport { IRenderPass } from './IRenderPass';\r\nimport { PackQuadColorsSystem } from '../../../components/color';\r\n\r\nexport function End (renderPass: IRenderPass): void\r\n{\r\n    PackQuadColorsSystem(GameObjectWorld);\r\n\r\n    Flush(renderPass);\r\n}\r\n", "import { ICompressedTextures } from './ICompressedTextures';\r\n\r\nexport function GetCompressedTextures (gl: WebGLRenderingContext): ICompressedTextures\r\n{\r\n    const extString = 'WEBGL_compressed_texture_';\r\n    const wkExtString = 'WEBKIT_' + extString;\r\n\r\n    const hasExt = (format: string) =>\r\n    {\r\n        const results = gl.getExtension(extString + format) || gl.getExtension(wkExtString + format);\r\n\r\n        if (results)\r\n        {\r\n            const glEnums = {};\r\n\r\n            for (const key in results)\r\n            {\r\n                glEnums[results[key]] = key;\r\n            }\r\n\r\n            return glEnums;\r\n        }\r\n    };\r\n\r\n    return {\r\n        ETC: hasExt('etc'),\r\n        ETC1: hasExt('etc1'),\r\n        ATC: hasExt('atc'),\r\n        ASTC: hasExt('astc'),\r\n        BPTC: hasExt('bptc'),\r\n        RGTC: hasExt('rgtc'),\r\n        PVRTC: hasExt('pvrtc'),\r\n        S3TC: hasExt('s3tc'),\r\n        S3TCSRGB: hasExt('s3tc_srgb'),\r\n        IMG: true\r\n    };\r\n}\r\n", "export function GetRGBArray (color: number, output: number[] = []): number[]\r\n{\r\n    const r: number = color >> 16 & 0xFF;\r\n    const g: number = color >> 8 & 0xFF;\r\n    const b: number = color & 0xFF;\r\n    const a: number = (color > 16777215) ? color >>> 24 : 255;\r\n\r\n    output[0] = r / 255;\r\n    output[1] = g / 255;\r\n    output[2] = b / 255;\r\n    output[3] = a / 255;\r\n\r\n    return output;\r\n}\r\n", "import { CONFIG_DEFAULTS } from '../const';\r\nimport { ConfigStore } from '../ConfigStore';\r\n\r\nexport function GetWebGLContext (): WebGLContextAttributes\r\n{\r\n    return ConfigStore.get(CONFIG_DEFAULTS.WEBGL_CONTEXT);\r\n}\r\n", "import { gl } from '../GL';\r\n\r\nexport function CreateFramebuffer (texture: WebGLTexture, attachment?: GLenum): WebGLFramebuffer\r\n{\r\n    if (!attachment)\r\n    {\r\n        attachment = gl.COLOR_ATTACHMENT0;\r\n    }\r\n\r\n    const framebuffer = gl.createFramebuffer();\r\n\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\r\n\r\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, attachment, gl.TEXTURE_2D, texture, 0);\r\n\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n\r\n    return framebuffer;\r\n}\r\n", "import { IGLMipmapType } from './IGLTextureBindingConfig';\r\nimport { IGLTextureBinding } from './IGLTextureBinding';\r\nimport { gl } from '../GL';\r\n\r\nexport function CreateGLTexture <T extends IGLTextureBinding> (binding: T, mipmaps?: IGLMipmapType[]): WebGLTexture\r\n{\r\n    const { generateMipmap, minFilter, parent, compressed, internalFormat, flipY, unpackPremultiplyAlpha, magFilter, wrapS, wrapT, isPOT } = binding;\r\n\r\n    const source = parent.image;\r\n\r\n    let width = parent.width;\r\n    let height = parent.height;\r\n\r\n    const glTexture: WebGLTexture = gl.createTexture();\r\n\r\n    gl.activeTexture(gl.TEXTURE0);\r\n    gl.bindTexture(gl.TEXTURE_2D, glTexture);\r\n\r\n    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, flipY);\r\n    gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, unpackPremultiplyAlpha);\r\n\r\n    if (source)\r\n    {\r\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, source);\r\n\r\n        width = source.width;\r\n        height = source.height;\r\n    }\r\n    else if (compressed && mipmaps)\r\n    {\r\n        for (let i = 0; i < mipmaps.length; i++)\r\n        {\r\n            gl.compressedTexImage2D(gl.TEXTURE_2D, i, internalFormat, mipmaps[i].width, mipmaps[i].height, 0, mipmaps[i].data);\r\n        }\r\n    }\r\n    else\r\n    {\r\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\r\n    }\r\n\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, minFilter);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, magFilter);\r\n\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, wrapS);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, wrapT);\r\n\r\n    if (generateMipmap && isPOT)\r\n    {\r\n        gl.generateMipmap(gl.TEXTURE_2D);\r\n    }\r\n\r\n    binding.texture = glTexture;\r\n\r\n    return glTexture;\r\n}\r\n", "import { gl } from '../GL';\r\n\r\nexport function DeleteFramebuffer (framebuffer: WebGLFramebuffer): void\r\n{\r\n    if (gl && gl.isFramebuffer(framebuffer))\r\n    {\r\n        gl.deleteFramebuffer(framebuffer);\r\n    }\r\n}\r\n", "import { gl } from '../GL';\r\n\r\nexport function DeleteGLTexture (texture: WebGLTexture): void\r\n{\r\n    if (gl.isTexture(texture))\r\n    {\r\n        gl.deleteTexture(texture);\r\n    }\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Checks if the given `width` and `height` are a power of two.\r\n * Useful for checking texture dimensions.\r\n *\r\n * @function Phaser.Math.Pow2.IsSize\r\n * @since 3.0.0\r\n *\r\n * @param {number} width - The width.\r\n * @param {number} height - The height.\r\n *\r\n * @return {boolean} `true` if `width` and `height` are a power of two, otherwise `false`.\r\n */\r\nexport function IsSizePowerOfTwo (width: number, height: number): boolean\r\n{\r\n    if (width < 1 || height < 1)\r\n    {\r\n        return false;\r\n    }\r\n\r\n    return ((width & (width - 1)) === 0) && ((height & (height - 1)) === 0);\r\n}\r\n", "import { gl } from '../GL';\r\n\r\nexport function SetGLTextureFilterMode (texture: WebGLTexture, linear: boolean = true): void\r\n{\r\n    gl.activeTexture(gl.TEXTURE0);\r\n    gl.bindTexture(gl.TEXTURE_2D, texture);\r\n\r\n    const mode = (linear) ? gl.LINEAR : gl.NEAREST;\r\n\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, mode);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, mode);\r\n}\r\n", "import { IGLTextureBinding } from './IGLTextureBinding';\r\nimport { gl } from '../GL';\r\n\r\nexport function UpdateGLTexture <T extends IGLTextureBinding> (binding: T): WebGLTexture\r\n{\r\n    const source = binding.parent.image;\r\n    const width = source.width;\r\n    const height = source.height;\r\n\r\n    if (width > 0 && height > 0)\r\n    {\r\n        gl.activeTexture(gl.TEXTURE0);\r\n        gl.bindTexture(gl.TEXTURE_2D, binding.texture);\r\n\r\n        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, binding.flipY);\r\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, source);\r\n    }\r\n\r\n    return binding.texture;\r\n}\r\n", "import { IGLMipmapType, IGLTextureBindingConfig } from './IGLTextureBindingConfig';\r\n\r\nimport { CreateFramebuffer } from '../fbo/CreateFramebuffer';\r\nimport { CreateGLTexture } from './CreateGLTexture';\r\nimport { DeleteFramebuffer } from '../fbo/DeleteFramebuffer';\r\nimport { DeleteGLTexture } from './DeleteGLTexture';\r\nimport { IGLTextureBinding } from './IGLTextureBinding';\r\nimport { ITexture } from '../../../textures/ITexture';\r\nimport { IsSizePowerOfTwo } from '../../../math/pow2/IsSizePowerOfTwo';\r\nimport { SetGLTextureFilterMode } from './SetGLTextureFilterMode';\r\nimport { UpdateGLTexture } from './UpdateGLTexture';\r\nimport { gl } from '../GL';\r\n\r\nexport class GLTextureBinding implements IGLTextureBinding\r\n{\r\n    parent: ITexture;\r\n\r\n    texture: WebGLTexture;\r\n    framebuffer: WebGLFramebuffer;\r\n    depthbuffer: WebGLRenderbuffer;\r\n\r\n    format: string;\r\n    internalFormat: GLenum;\r\n    compressed: boolean;\r\n    mipmaps: IGLMipmapType[];\r\n\r\n    isBound: boolean = false;\r\n    textureUnit: number = 0;\r\n\r\n    unpackPremultiplyAlpha: boolean = true;\r\n\r\n    minFilter: GLenum;\r\n    magFilter: GLenum;\r\n    wrapS: GLenum;\r\n    wrapT: GLenum;\r\n\r\n    flipY: boolean = false;\r\n    isPOT: boolean = false;\r\n    generateMipmap: boolean = false;\r\n\r\n    constructor (parent: ITexture, config: IGLTextureBindingConfig = {})\r\n    {\r\n        this.parent = parent;\r\n\r\n        this.isPOT = IsSizePowerOfTwo(parent.width, parent.height);\r\n\r\n        //  Add option to dump the mipmaps arrays after binding - but prevents context loss restoration\r\n\r\n        const {\r\n            mipmaps = null,\r\n            compressed = false,\r\n            format = 'IMG',\r\n            internalFormat = 0,\r\n            texture = null,\r\n            framebuffer = null,\r\n            createFramebuffer = false,\r\n            depthbuffer = null,\r\n            unpackPremultiplyAlpha = true,\r\n            minFilter = (this.isPOT) ? gl.LINEAR_MIPMAP_LINEAR : gl.LINEAR,\r\n            magFilter = gl.LINEAR,\r\n            wrapS = gl.CLAMP_TO_EDGE,\r\n            wrapT = gl.CLAMP_TO_EDGE,\r\n            generateMipmap = this.isPOT,\r\n            flipY = false\r\n        } = config;\r\n\r\n        this.compressed = compressed;\r\n        this.format = format;\r\n        this.internalFormat = internalFormat;\r\n        this.mipmaps = mipmaps;\r\n\r\n        //  If you don't set minFilter to LINEAR then the compressed textures don't work!\r\n        if (compressed)\r\n        {\r\n            this.minFilter = gl.LINEAR;\r\n        }\r\n        else\r\n        {\r\n            this.minFilter = minFilter;\r\n        }\r\n\r\n        this.magFilter = magFilter;\r\n        this.wrapS = wrapS;\r\n        this.wrapT = wrapT;\r\n        this.generateMipmap = generateMipmap;\r\n        this.flipY = flipY;\r\n        this.unpackPremultiplyAlpha = unpackPremultiplyAlpha;\r\n\r\n        if (texture)\r\n        {\r\n            this.texture = texture;\r\n        }\r\n        else\r\n        {\r\n            CreateGLTexture(this, mipmaps);\r\n        }\r\n\r\n        if (framebuffer)\r\n        {\r\n            this.framebuffer = framebuffer;\r\n        }\r\n        else if (createFramebuffer)\r\n        {\r\n            this.framebuffer = CreateFramebuffer(this.texture);\r\n        }\r\n\r\n        if (depthbuffer)\r\n        {\r\n            this.depthbuffer = depthbuffer;\r\n        }\r\n\r\n        parent.binding = this;\r\n    }\r\n\r\n    //  Needed?\r\n    setFilter (linear: boolean): void\r\n    {\r\n        if (this.texture)\r\n        {\r\n            SetGLTextureFilterMode(this.texture, linear);\r\n        }\r\n    }\r\n\r\n    create (): WebGLTexture\r\n    {\r\n        const texture = this.texture;\r\n\r\n        if (texture)\r\n        {\r\n            DeleteGLTexture(texture);\r\n        }\r\n\r\n        return CreateGLTexture(this);\r\n    }\r\n\r\n    update (): WebGLTexture\r\n    {\r\n        const texture = this.texture;\r\n\r\n        if (!texture)\r\n        {\r\n            return CreateGLTexture(this);\r\n        }\r\n        else\r\n        {\r\n            return UpdateGLTexture(this);\r\n        }\r\n    }\r\n\r\n    bind (index: number): void\r\n    {\r\n        this.isBound = true;\r\n        this.textureUnit = index;\r\n    }\r\n\r\n    unbind (): void\r\n    {\r\n        this.isBound = false;\r\n        this.textureUnit = 0;\r\n    }\r\n\r\n    destroy (): void\r\n    {\r\n        this.unbind();\r\n\r\n        DeleteGLTexture(this.texture);\r\n        DeleteFramebuffer(this.framebuffer);\r\n\r\n        this.parent = null;\r\n        this.texture = null;\r\n        this.framebuffer = null;\r\n    }\r\n}\r\n", "import { BindingQueue } from '../../BindingQueue';\r\nimport { GLTextureBinding } from '../textures/GLTextureBinding';\r\n\r\nexport function ProcessBindingQueue (): void\r\n{\r\n    const queue = BindingQueue.get();\r\n\r\n    queue.forEach(entry =>\r\n    {\r\n        const { texture, glConfig } = entry;\r\n\r\n        if (!texture.binding)\r\n        {\r\n            texture.binding = new GLTextureBinding(texture, glConfig);\r\n        }\r\n    });\r\n\r\n    BindingQueue.clear();\r\n}\r\n", "import { IRenderPass } from './IRenderPass';\r\nimport { gl } from '../GL';\r\n\r\nexport type BlendModeStackEntry = {\r\n    enable: boolean;\r\n    sfactor?: number;\r\n    dfactor?: number;\r\n};\r\n\r\nexport class BlendModeStack\r\n{\r\n    renderPass: IRenderPass;\r\n\r\n    stack: BlendModeStackEntry[];\r\n    default: BlendModeStackEntry;\r\n    index: number;\r\n\r\n    constructor (renderPass: IRenderPass)\r\n    {\r\n        this.renderPass = renderPass;\r\n        this.stack = [];\r\n    }\r\n\r\n    get current (): BlendModeStackEntry\r\n    {\r\n        return this.stack[this.index];\r\n    }\r\n\r\n    add (enable: boolean, sfactor?: number, dfactor?: number): BlendModeStackEntry\r\n    {\r\n        const entry = { enable, sfactor, dfactor };\r\n\r\n        this.index++;\r\n\r\n        //  cursor already at the end of the stack, so we need to grow it\r\n        if (this.index === this.stack.length)\r\n        {\r\n            this.stack.push(entry);\r\n        }\r\n        else\r\n        {\r\n            this.stack[this.index] = entry;\r\n        }\r\n\r\n        return entry;\r\n    }\r\n\r\n    bindDefault (): void\r\n    {\r\n        this.index = 0;\r\n\r\n        this.bind(this.default);\r\n    }\r\n\r\n    bind (entry?: BlendModeStackEntry): void\r\n    {\r\n        if (!entry)\r\n        {\r\n            entry = this.current;\r\n        }\r\n\r\n        if (entry.enable)\r\n        {\r\n            if (!gl.isEnabled(gl.BLEND) || (this.current.sfactor !== entry.sfactor || this.current.dfactor !== entry.dfactor))\r\n            {\r\n                gl.enable(gl.BLEND);\r\n                gl.blendFunc(entry.sfactor, entry.dfactor);\r\n            }\r\n        }\r\n        else\r\n        {\r\n            gl.disable(gl.BLEND);\r\n        }\r\n    }\r\n\r\n    pop (): void\r\n    {\r\n        this.index--;\r\n\r\n        this.bind();\r\n    }\r\n\r\n    set (enable: boolean, sfactor?: number, dfactor?: number): void\r\n    {\r\n        const entry = this.add(enable, sfactor, dfactor);\r\n\r\n        this.bind(entry);\r\n    }\r\n\r\n    setDefault (enable: boolean, sfactor?: number, dfactor?: number): void\r\n    {\r\n        const entry = { enable, sfactor, dfactor };\r\n\r\n        //  The default entry always goes into index zero\r\n        this.stack[0] = entry;\r\n\r\n        this.index = 0;\r\n\r\n        this.default = entry;\r\n    }\r\n}\r\n", "import { Color } from '../../../components/color/Color';\r\nimport { CompareColorMatrix } from '../../../components/color/CompareColorMatrix';\r\nimport { Flush } from './Flush';\r\nimport { IRenderPass } from './IRenderPass';\r\n\r\nexport type ColorMatrixStackEntry = {\r\n    colorMatrix: Float32Array;\r\n    colorOffset: Float32Array;\r\n};\r\n\r\nexport class ColorMatrixStack\r\n{\r\n    renderPass: IRenderPass;\r\n\r\n    stack: ColorMatrixStackEntry[];\r\n    default: ColorMatrixStackEntry;\r\n    index: number;\r\n\r\n    constructor (renderPass: IRenderPass)\r\n    {\r\n        this.renderPass = renderPass;\r\n        this.stack = [];\r\n    }\r\n\r\n    get current (): ColorMatrixStackEntry\r\n    {\r\n        return this.stack[this.index];\r\n    }\r\n\r\n    add (colorMatrix: Float32Array, colorOffset: Float32Array): ColorMatrixStackEntry\r\n    {\r\n        const entry = { colorMatrix, colorOffset };\r\n\r\n        this.index++;\r\n\r\n        //  cursor already at the end of the stack, so we need to grow it\r\n        if (this.index === this.stack.length)\r\n        {\r\n            this.stack.push(entry);\r\n        }\r\n        else\r\n        {\r\n            this.stack[this.index] = entry;\r\n        }\r\n\r\n        return entry;\r\n    }\r\n\r\n    bindDefault (): void\r\n    {\r\n        this.index = 0;\r\n\r\n        this.bind(this.default);\r\n    }\r\n\r\n    bind (entry?: ColorMatrixStackEntry): void\r\n    {\r\n        if (!entry)\r\n        {\r\n            entry = this.current;\r\n        }\r\n\r\n        const shader = this.renderPass.getCurrentShader();\r\n\r\n        Flush(this.renderPass);\r\n\r\n        shader.setUniform('uColorMatrix', entry.colorMatrix);\r\n        shader.setUniform('uColorOffset', entry.colorOffset);\r\n    }\r\n\r\n    pop (): void\r\n    {\r\n        this.index--;\r\n\r\n        this.bind();\r\n    }\r\n\r\n    set (color: Color): void\r\n    {\r\n        const current = this.current;\r\n\r\n        const entry = this.add(color.colorMatrix, color.colorOffset);\r\n\r\n        if (!CompareColorMatrix(entry.colorMatrix, entry.colorOffset, current.colorMatrix, current.colorOffset))\r\n        {\r\n            this.bind(entry);\r\n        }\r\n    }\r\n\r\n    setDefault (colorMatrix: Float32Array, colorOffset: Float32Array): void\r\n    {\r\n        const entry = { colorMatrix, colorOffset };\r\n\r\n        //  The default entry always goes into index zero\r\n        this.stack[0] = entry;\r\n\r\n        this.index = 0;\r\n\r\n        this.default = entry;\r\n    }\r\n}\r\n", "import { IRenderPass } from './IRenderPass';\r\nimport { Rectangle } from '../../../geom/rectangle/Rectangle';\r\nimport { gl } from '../GL';\r\n\r\nexport type FramebufferStackEntry = {\r\n    framebuffer: WebGLFramebuffer;\r\n    viewport?: Rectangle;\r\n};\r\n\r\nexport class FramebufferStack\r\n{\r\n    renderPass: IRenderPass;\r\n\r\n    stack: FramebufferStackEntry[];\r\n    active: WebGLFramebuffer;\r\n    default: FramebufferStackEntry;\r\n    index: number;\r\n\r\n    constructor (renderPass: IRenderPass)\r\n    {\r\n        this.renderPass = renderPass;\r\n        this.stack = [];\r\n    }\r\n\r\n    get current (): FramebufferStackEntry\r\n    {\r\n        return this.stack[this.index];\r\n    }\r\n\r\n    add (framebuffer: WebGLFramebuffer, viewport?: Rectangle): FramebufferStackEntry\r\n    {\r\n        const entry = { framebuffer, viewport };\r\n\r\n        this.index++;\r\n\r\n        //  cursor already at the end of the stack, so we need to grow it\r\n        if (this.index === this.stack.length)\r\n        {\r\n            this.stack.push(entry);\r\n        }\r\n        else\r\n        {\r\n            this.stack[this.index] = entry;\r\n        }\r\n\r\n        return entry;\r\n    }\r\n\r\n    bindDefault (): void\r\n    {\r\n        this.index = 0;\r\n\r\n        this.bind(false, this.default);\r\n    }\r\n\r\n    bind (clear: boolean = true, entry?: FramebufferStackEntry): void\r\n    {\r\n        if (!entry)\r\n        {\r\n            entry = this.current;\r\n        }\r\n\r\n        const { framebuffer, viewport } = entry;\r\n\r\n        if (this.active !== framebuffer)\r\n        {\r\n            gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\r\n        }\r\n\r\n        if (clear)\r\n        {\r\n            gl.clearColor(0, 0, 0, 0);\r\n            gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n        }\r\n\r\n        if (viewport)\r\n        {\r\n            this.renderPass.viewport.set(viewport.x, viewport.y, viewport.width, viewport.height);\r\n        }\r\n\r\n        this.active = framebuffer;\r\n    }\r\n\r\n    pop (): void\r\n    {\r\n        if (this.current.viewport)\r\n        {\r\n            this.renderPass.viewport.pop();\r\n        }\r\n\r\n        this.index--;\r\n\r\n        this.bind(false);\r\n    }\r\n\r\n    set (framebuffer: WebGLFramebuffer, clear: boolean = true, viewport?: Rectangle): void\r\n    {\r\n        const entry = this.add(framebuffer, viewport);\r\n\r\n        this.bind(clear, entry);\r\n    }\r\n\r\n    setDefault (framebuffer: WebGLFramebuffer = null, viewport?: Rectangle): void\r\n    {\r\n        const entry = { framebuffer, viewport };\r\n\r\n        //  The default entry always goes into index zero\r\n        this.stack[0] = entry;\r\n\r\n        this.index = 0;\r\n\r\n        this.default = entry;\r\n    }\r\n}\r\n", "import { CONFIG_DEFAULTS } from '../const';\r\nimport { ConfigStore } from '../ConfigStore';\r\n\r\nexport function GetBatchSize (): number\r\n{\r\n    return ConfigStore.get(CONFIG_DEFAULTS.BATCH_SIZE);\r\n}\r\n", "import { CONFIG_DEFAULTS } from '../const';\r\nimport { ConfigStore } from '../ConfigStore';\r\n\r\nexport function GetMaxTextures (): number\r\n{\r\n    return ConfigStore.get(CONFIG_DEFAULTS.MAX_TEXTURES);\r\n}\r\n", "import { Matrix4 } from './Matrix4';\r\n\r\n// Generates an orthogonal projection matrix with the given bounds\r\n\r\nexport function Mat4Ortho (matrix: Float32Array, left: number, right: number, bottom: number, top: number, near: number, far: number): void\r\n{\r\n    const lr = 1 / (left - right);\r\n    const bt = 1 / (bottom - top);\r\n    const nf = 1 / (near - far);\r\n\r\n    matrix.set([\r\n        -2 * lr,\r\n        0,\r\n        0,\r\n        0,\r\n        0,\r\n        -2 * bt,\r\n        0,\r\n        0,\r\n        0,\r\n        0,\r\n        2 * nf,\r\n        0,\r\n        (left + right) * lr,\r\n        (top + bottom) * bt,\r\n        (far + near) * nf,\r\n        1\r\n    ]);\r\n}\r\n", "export const MULTI_QUAD_FRAG =\r\n`#define SHADER_NAME MULTI_QUAD_FRAG\r\n#define numTextures %count%\r\n\r\nprecision highp float;\r\n\r\nvarying vec2 vTextureCoord;\r\nvarying float vTextureId;\r\nvarying vec4 vTintColor;\r\n\r\nuniform sampler2D uTexture[%count%];\r\nuniform mat4 uColorMatrix;\r\nuniform vec4 uColorOffset;\r\n\r\nvec4 getSampler (int index, vec2 uv)\r\n{\r\n    for (int i = 0; i < numTextures; ++i)\r\n    {\r\n        vec4 color = texture2D(uTexture[i], uv);\r\n\r\n        if (i == index)\r\n        {\r\n            return color * vec4(vTintColor.rgb * vTintColor.a, vTintColor.a);\r\n        }\r\n    }\r\n\r\n    //  Return black\r\n    return vec4(0);\r\n}\r\n\r\nvoid main (void)\r\n{\r\n    vec4 color = getSampler(int(vTextureId), vTextureCoord);\r\n\r\n    //  Un pre-mult alpha\r\n    if (color.a > 0.0)\r\n    {\r\n        color.rgb /= color.a;\r\n    }\r\n\r\n    vec4 result = color * uColorMatrix + (uColorOffset / 255.0);\r\n\r\n    //  Pre-mult alpha\r\n    result.rgb *= result.a;\r\n\r\n    gl_FragColor = vec4(result.rgb, result.a);\r\n}`;\r\n", "import * as GL_CONST from '../GL_CONST';\r\n\r\nimport { ShaderAttributeEntry } from './CreateAttributes';\r\n\r\nexport const DefaultQuadAttributes: Record<string, ShaderAttributeEntry> =\r\n{\r\n    aVertexPosition: { size: 2 },\r\n    aTextureCoord: { size: 2 },\r\n    aTextureId: { size: 1 },\r\n    aTintColor: { size: 4 }\r\n};\r\n", "const BYTE                   = 0x1400;\r\nconst UNSIGNED_BYTE          = 0x1401;\r\nconst SHORT                  = 0x1402;\r\nconst UNSIGNED_SHORT         = 0x1403;\r\nconst INT                    = 0x1404;\r\nconst UNSIGNED_INT           = 0x1405;\r\nconst FLOAT                  = 0x1406;\r\nconst REPEAT                 = 0x2901;  // eslint-disable-line\r\nconst CLAMP_TO_EDGE          = 0x812F;\r\nconst MIRRORED_REPEAT        = 0x8370;  // eslint-disable-line\r\nconst NEAREST                = 0x2600;  // eslint-disable-line\r\nconst LINEAR                 = 0x2601;\r\nconst NEAREST_MIPMAP_NEAREST = 0x2700;  // eslint-disable-line\r\nconst LINEAR_MIPMAP_NEAREST  = 0x2701;  // eslint-disable-line\r\nconst NEAREST_MIPMAP_LINEAR  = 0x2702;  // eslint-disable-line\r\nconst LINEAR_MIPMAP_LINEAR   = 0x2703;  // eslint-disable-line\r\n\r\nexport {\r\n    BYTE,\r\n    UNSIGNED_BYTE,\r\n    SHORT,\r\n    UNSIGNED_SHORT,\r\n    INT,\r\n    UNSIGNED_INT,\r\n    FLOAT,\r\n    REPEAT,\r\n    CLAMP_TO_EDGE,\r\n    MIRRORED_REPEAT,\r\n    NEAREST,\r\n    LINEAR,\r\n    NEAREST_MIPMAP_NEAREST,\r\n    LINEAR_MIPMAP_NEAREST,\r\n    NEAREST_MIPMAP_LINEAR,\r\n    LINEAR_MIPMAP_LINEAR\r\n};\r\n", "import * as GL_CONST from '../GL_CONST';\r\n\r\nimport { IVertexAttribPointer } from './IVertexAttribPointer';\r\nimport { gl } from '../GL';\r\n\r\nexport type ShaderAttributeEntry = {\r\n    size: number;\r\n    type?: number;\r\n    normalized?: boolean;\r\n    stride?: number;\r\n};\r\n\r\nexport function CreateAttributes (program: WebGLProgram, attribs: Record<string, ShaderAttributeEntry>): Map<string, IVertexAttribPointer>\r\n{\r\n    const attributes = new Map();\r\n\r\n    const defaultSettings: ShaderAttributeEntry =\r\n    {\r\n        size: 1,\r\n        type: GL_CONST.FLOAT,\r\n        normalized: false,\r\n        stride: 0\r\n    };\r\n\r\n    let offset = 0;\r\n\r\n    for (const [ name, entry ] of Object.entries(attribs))\r\n    {\r\n        const index = gl.getAttribLocation(program, name);\r\n\r\n        if (index !== -1)\r\n        {\r\n            gl.enableVertexAttribArray(index);\r\n\r\n            const {\r\n\r\n                size = defaultSettings.size,\r\n                type = defaultSettings.type,\r\n                normalized = defaultSettings.normalized,\r\n                stride = defaultSettings.stride\r\n\r\n            } = entry;\r\n\r\n            attributes.set(name, { index, size, type, normalized, stride, offset });\r\n\r\n            //  Default value as used by FLOAT, UNSIGNED_INT and INT\r\n            let typeSize = 4;\r\n\r\n            if (type === GL_CONST.UNSIGNED_SHORT || type === GL_CONST.SHORT)\r\n            {\r\n                typeSize = 2;\r\n            }\r\n            else if (type === GL_CONST.UNSIGNED_BYTE || type === GL_CONST.BYTE)\r\n            {\r\n                typeSize = 1;\r\n            }\r\n\r\n            offset += size * typeSize;\r\n        }\r\n    }\r\n\r\n    return attributes;\r\n}\r\n", "import { gl } from '../GL';\r\n\r\nexport function CreateDepthBuffer (framebuffer: WebGLFramebuffer, textureWidth: number, textureHeight: number): WebGLRenderbuffer\r\n{\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\r\n\r\n    const depthBuffer = gl.createRenderbuffer();\r\n\r\n    gl.bindRenderbuffer(gl.RENDERBUFFER, depthBuffer);\r\n\r\n    gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, textureWidth, textureHeight);\r\n\r\n    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, depthBuffer);\r\n\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n\r\n    return depthBuffer;\r\n}\r\n", "import { gl } from '../GL';\r\n\r\nexport function DeleteShaders (...shaders: WebGLShader[]): void\r\n{\r\n    shaders.forEach(shader =>\r\n    {\r\n        gl.deleteShader(shader);\r\n    });\r\n}\r\n", "import { DeleteShaders } from './DeleteShaders';\r\nimport { gl } from '../GL';\r\n\r\nexport function CreateProgram (...shaders: WebGLShader[]): WebGLProgram\r\n{\r\n    const program = gl.createProgram();\r\n\r\n    shaders.forEach(shader =>\r\n    {\r\n        gl.attachShader(program, shader);\r\n    });\r\n\r\n    gl.linkProgram(program);\r\n\r\n    const status = gl.getProgramParameter(program, gl.LINK_STATUS);\r\n\r\n    if (!status)\r\n    {\r\n        const info = gl.getProgramInfoLog(program);\r\n\r\n        console.error(`Error linking program: ${info}`);\r\n\r\n        gl.deleteProgram(program);\r\n\r\n        DeleteShaders(...shaders);\r\n\r\n        return null;\r\n    }\r\n\r\n    return program;\r\n}\r\n", "import { gl } from '../GL';\r\n\r\nexport function CreateShader (source: string, type: GLenum): WebGLShader | null\r\n{\r\n    const shader = gl.createShader(type);\r\n\r\n    gl.shaderSource(shader, source);\r\n\r\n    gl.compileShader(shader);\r\n\r\n    const status = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\r\n\r\n    if (!status)\r\n    {\r\n        const info = gl.getShaderInfoLog(shader);\r\n\r\n        //  Adding line numbers idea borrowed from Gregg Tavares!\r\n        const sourceLines = source.split('\\n').map((line, index) =>\r\n        {\r\n            return `${index}: ${line}`;\r\n        });\r\n\r\n        console.error(`Error compiling shader: ${info}`, sourceLines.join('\\n'));\r\n\r\n        gl.deleteShader(shader);\r\n\r\n        return null;\r\n    }\r\n\r\n    return shader;\r\n}\r\n", "import { gl } from '../GL';\r\n\r\nexport type FloatSetter = (v: number) => void;\r\nexport type F32Setter = (v: Float32List) => void;\r\nexport type I32Setter = (v: Int32List) => void;\r\n\r\nexport function CreateUniformSetter (uniform: WebGLActiveInfo, location: WebGLUniformLocation, isArray: boolean = false): FloatSetter | F32Setter | I32Setter\r\n{\r\n    switch (uniform.type)\r\n    {\r\n        case gl.INT:\r\n        case gl.BOOL:\r\n        {\r\n            if (isArray)\r\n            {\r\n                return (v: Int32List): void =>\r\n                {\r\n                    gl.uniform1iv(location, v);\r\n                };\r\n            }\r\n            else\r\n            {\r\n                return (v: number): void =>\r\n                {\r\n                    gl.uniform1i(location, v);\r\n                };\r\n            }\r\n        }\r\n\r\n        case gl.INT_VEC2:\r\n        case gl.BOOL_VEC2:\r\n        {\r\n            return (v: Int32List): void =>\r\n            {\r\n                gl.uniform2iv(location, v);\r\n            };\r\n        }\r\n\r\n        case gl.INT_VEC3:\r\n        case gl.BOOL_VEC3:\r\n        {\r\n            return (v: Int32List): void =>\r\n            {\r\n                gl.uniform3iv(location, v);\r\n            };\r\n        }\r\n\r\n        case gl.INT_VEC4:\r\n        case gl.BOOL_VEC4:\r\n        {\r\n            return (v: Int32List): void =>\r\n            {\r\n                gl.uniform4iv(location, v);\r\n            };\r\n        }\r\n\r\n        case gl.FLOAT:\r\n        {\r\n            if (isArray)\r\n            {\r\n                return (v: Float32List): void =>\r\n                {\r\n                    gl.uniform1fv(location, v);\r\n                };\r\n            }\r\n            else\r\n            {\r\n                return (v: number): void =>\r\n                {\r\n                    gl.uniform1f(location, v);\r\n                };\r\n            }\r\n        }\r\n\r\n        case gl.FLOAT_VEC2:\r\n        {\r\n            return (v: Float32List): void =>\r\n            {\r\n                gl.uniform2fv(location, v);\r\n            };\r\n        }\r\n\r\n        case gl.FLOAT_VEC3:\r\n        {\r\n            return (v: Float32List): void =>\r\n            {\r\n                gl.uniform3fv(location, v);\r\n            };\r\n        }\r\n\r\n        case gl.FLOAT_VEC4:\r\n        {\r\n            return (v: Float32List): void =>\r\n            {\r\n                gl.uniform4fv(location, v);\r\n            };\r\n        }\r\n\r\n        case gl.FLOAT_MAT2:\r\n        {\r\n            return (v: Float32List): void =>\r\n            {\r\n                gl.uniformMatrix2fv(location, false, v);\r\n            };\r\n        }\r\n\r\n        case gl.FLOAT_MAT3:\r\n        {\r\n            return (v: Float32List): void =>\r\n            {\r\n                gl.uniformMatrix3fv(location, false, v);\r\n            };\r\n        }\r\n\r\n        case gl.FLOAT_MAT4:\r\n        {\r\n            return (v: Float32List): void =>\r\n            {\r\n                gl.uniformMatrix4fv(location, false, v);\r\n            };\r\n        }\r\n\r\n        case gl.SAMPLER_2D:\r\n        case gl.SAMPLER_CUBE:\r\n        {\r\n            if (uniform.size > 1)\r\n            {\r\n                return (v: Int32List): void =>\r\n                {\r\n                    gl.uniform1iv(location, v);\r\n                };\r\n            }\r\n            else\r\n            {\r\n                return (v: number): void =>\r\n                {\r\n                    gl.uniform1i(location, v);\r\n                };\r\n            }\r\n        }\r\n    }\r\n}\r\n", "import { CreateUniformSetter } from './CreateUniformSetter';\r\nimport { gl } from '../GL';\r\n\r\nexport function CreateUniforms (program: WebGLProgram): Map<string, Function>\r\n{\r\n    const uniforms = new Map();\r\n\r\n    const total = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);\r\n\r\n    for (let i = 0; i < total; i++)\r\n    {\r\n        const uniform = gl.getActiveUniform(program, i);\r\n\r\n        let name = uniform.name;\r\n\r\n        if (name.startsWith('gl_') || name.startsWith('webgl_'))\r\n        {\r\n            //  Skip built-in uniforms\r\n            continue;\r\n        }\r\n\r\n        const location = gl.getUniformLocation(program, name);\r\n\r\n        if (location)\r\n        {\r\n            let isArray = false;\r\n\r\n            //  If uniform name has [0] at the end, remove it\r\n            if (name.endsWith('[0]'))\r\n            {\r\n                name = name.slice(0, -3);\r\n\r\n                isArray = (uniform.size > 1);\r\n            }\r\n\r\n            uniforms.set(name, CreateUniformSetter(uniform, location, isArray));\r\n        }\r\n    }\r\n\r\n    return uniforms;\r\n}\r\n", "export const DefaultQuadUniforms: Record<string, Number | Float32List> =\r\n{\r\n    uProjectionMatrix: new Float32Array(16),\r\n    uCameraMatrix: new Float32Array(16),\r\n    uTexture: 0,\r\n    uColorMatrix: new Float32Array([\r\n        1, 0, 0, 0,\r\n        0, 1, 0, 0,\r\n        0, 0, 1, 0,\r\n        0, 0, 0, 1\r\n    ]),\r\n    uColorOffset: new Float32Array(4)\r\n};\r\n", "export const SINGLE_QUAD_FRAG =\r\n`#define SHADER_NAME SINGLE_QUAD_FRAG\r\n\r\nprecision highp float;\r\n\r\nvarying vec2 vTextureCoord;\r\nvarying float vTextureId;\r\nvarying vec4 vTintColor;\r\n\r\nuniform sampler2D uTexture;\r\nuniform mat4 uColorMatrix;\r\nuniform vec4 uColorOffset;\r\n\r\nvoid main (void)\r\n{\r\n    vec4 color = texture2D(uTexture, vTextureCoord);\r\n\r\n    //  Un pre-mult alpha\r\n    if (color.a > 0.0)\r\n    {\r\n        color.rgb /= color.a;\r\n    }\r\n\r\n    vec4 result = color * uColorMatrix + (uColorOffset / 255.0);\r\n\r\n    //  Pre-mult alpha\r\n    result.rgb *= result.a;\r\n\r\n    gl_FragColor = vec4(result.rgb, result.a);\r\n}`;\r\n", "export const SINGLE_QUAD_VERT =\r\n`#define SHADER_NAME SINGLE_QUAD_VERT\r\n\r\nprecision highp float;\r\n\r\nattribute vec2 aVertexPosition;\r\nattribute vec2 aTextureCoord;\r\nattribute float aTextureId;\r\nattribute vec4 aTintColor;\r\n\r\nuniform mat4 uProjectionMatrix;\r\nuniform mat4 uCameraMatrix;\r\n\r\nvarying vec2 vTextureCoord;\r\nvarying float vTextureId;\r\nvarying vec4 vTintColor;\r\n\r\nvoid main (void)\r\n{\r\n    vTextureCoord = aTextureCoord;\r\n    vTextureId = aTextureId;\r\n    vTintColor = aTintColor;\r\n\r\n    gl_Position = uProjectionMatrix * uCameraMatrix * vec4(aVertexPosition, 0.0, 1.0);\r\n}`;\r\n", "import { Types, defineComponent } from 'bitecs';\r\n\r\nconst Extent2D = defineComponent({\r\n    x: Types.f32,\r\n    y: Types.f32,\r\n    width: Types.f32,\r\n    height: Types.f32,\r\n    right: Types.f32,\r\n    bottom: Types.f32\r\n});\r\n\r\nexport const Extent2DComponent = Extent2D;\r\n", "import { Extent2DComponent } from './Extent2DComponent';\r\nimport { SetDirtyTransform } from '../dirty/SetDirtyTransform';\r\n\r\n//  The area covered by this transform component + origin + size (usually from a Frame)\r\n\r\nexport function SetExtent (id: number, x: number, y: number, width: number, height: number): void\r\n{\r\n    Extent2DComponent.x[id] = x;\r\n    Extent2DComponent.y[id] = y;\r\n    Extent2DComponent.width[id] = width;\r\n    Extent2DComponent.height[id] = height;\r\n    Extent2DComponent.right[id] = x + width;\r\n    Extent2DComponent.bottom[id] = y + height;\r\n\r\n    SetDirtyTransform(id);\r\n}\r\n", "import { QuadVertexComponent } from './QuadVertexComponent';\r\n\r\nexport function SetUV (id: number, u0: number, v0: number, u1: number, v1: number): void\r\n{\r\n    const data = QuadVertexComponent.values[id];\r\n\r\n    data[2] = u0;\r\n    data[3] = v0;\r\n\r\n    data[11] = u0;\r\n    data[12] = v1;\r\n\r\n    data[20] = u1;\r\n    data[21] = v1;\r\n\r\n    data[29] = u0;\r\n    data[30] = v0;\r\n\r\n    data[38] = u1;\r\n    data[39] = v1;\r\n\r\n    data[47] = u1;\r\n    data[48] = v0;\r\n}\r\n", "import { IContainer } from '../gameobjects/container/IContainer';\r\nimport { IFrame } from './IFrame';\r\nimport { SetExtent } from '../components/transform/SetExtent';\r\nimport { SetUV } from '../components/vertices/SetUV';\r\nimport { Texture } from './Texture';\r\n\r\nexport class Frame implements IFrame\r\n{\r\n    texture: Texture;\r\n    key: string | number;\r\n\r\n    //  This is the actual area of the texture to draw to canvas / webgl, including any extruded data.\r\n    //  This is the same as the 'trimmed' + 'extruded' area from an atlas.\r\n    x: number;\r\n    y: number;\r\n    width: number;\r\n    height: number;\r\n\r\n    trimmed: boolean = false;\r\n\r\n    //  Original size of the image before being trimmed or added to an atlas (which can add extrude data to it).\r\n    sourceSizeWidth: number;\r\n    sourceSizeHeight: number;\r\n\r\n    //  The size of the image having been trimmed, before being added to the atlas (i.e. doesn't have any extrusion values in it)\r\n    spriteSourceSizeX: number;\r\n    spriteSourceSizeY: number;\r\n    spriteSourceSizeWidth: number;\r\n    spriteSourceSizeHeight: number;\r\n\r\n    pivot: { x: number; y: number };\r\n\r\n    u0: number;\r\n    v0: number;\r\n    u1: number;\r\n    v1: number;\r\n\r\n    constructor (texture: Texture, key: string | number, x: number, y: number, width: number, height: number)\r\n    {\r\n        this.texture = texture;\r\n        this.key = key;\r\n\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = width;\r\n        this.height = height;\r\n\r\n        this.sourceSizeWidth = width;\r\n        this.sourceSizeHeight = height;\r\n\r\n        this.updateUVs();\r\n    }\r\n\r\n    setPivot (x: number, y: number): void\r\n    {\r\n        this.pivot = { x, y };\r\n    }\r\n\r\n    setSize (width: number, height: number): void\r\n    {\r\n        this.width = width;\r\n        this.height = height;\r\n        this.sourceSizeWidth = width;\r\n        this.sourceSizeHeight = height;\r\n\r\n        this.updateUVs();\r\n    }\r\n\r\n    setSourceSize (width: number, height: number): void\r\n    {\r\n        this.sourceSizeWidth = width;\r\n        this.sourceSizeHeight = height;\r\n    }\r\n\r\n    setTrim (width: number, height: number, x: number, y: number, w: number, h: number): void\r\n    {\r\n        this.trimmed = true;\r\n\r\n        this.sourceSizeWidth = width;\r\n        this.sourceSizeHeight = height;\r\n\r\n        this.spriteSourceSizeX = x;\r\n        this.spriteSourceSizeY = y;\r\n        this.spriteSourceSizeWidth = w;\r\n        this.spriteSourceSizeHeight = h;\r\n    }\r\n\r\n    getExtent (originX: number, originY: number): { left: number; right: number; top: number; bottom: number }\r\n    {\r\n        const sourceSizeWidth = this.sourceSizeWidth;\r\n        const sourceSizeHeight = this.sourceSizeHeight;\r\n\r\n        let left: number;\r\n        let right: number;\r\n        let top: number;\r\n        let bottom: number;\r\n\r\n        if (this.trimmed)\r\n        {\r\n            left = this.spriteSourceSizeX - (originX * sourceSizeWidth);\r\n            right = left + this.spriteSourceSizeWidth;\r\n\r\n            top = this.spriteSourceSizeY - (originY * sourceSizeHeight);\r\n            bottom = top + this.spriteSourceSizeHeight;\r\n        }\r\n        else\r\n        {\r\n            left = -originX * sourceSizeWidth;\r\n            right = left + sourceSizeWidth;\r\n\r\n            top = -originY * sourceSizeHeight;\r\n            bottom = top + sourceSizeHeight;\r\n        }\r\n\r\n        return { left, right, top, bottom };\r\n    }\r\n\r\n    copyToExtent (child: IContainer): this\r\n    {\r\n        const originX = child.origin.x;\r\n        const originY = child.origin.y;\r\n\r\n        const sourceSizeWidth = this.sourceSizeWidth;\r\n        const sourceSizeHeight = this.sourceSizeHeight;\r\n\r\n        let x: number;\r\n        let y: number;\r\n        let width: number;\r\n        let height: number;\r\n\r\n        if (this.trimmed)\r\n        {\r\n            x = this.spriteSourceSizeX - (originX * sourceSizeWidth);\r\n            y = this.spriteSourceSizeY - (originY * sourceSizeHeight);\r\n\r\n            width = this.spriteSourceSizeWidth;\r\n            height = this.spriteSourceSizeHeight;\r\n        }\r\n        else\r\n        {\r\n            x = -originX * sourceSizeWidth;\r\n            y = -originY * sourceSizeHeight;\r\n\r\n            width = sourceSizeWidth;\r\n            height = sourceSizeHeight;\r\n        }\r\n\r\n        SetExtent(child.id, x, y, width, height);\r\n\r\n        return this;\r\n    }\r\n\r\n    copyToVertices (id: number): this\r\n    {\r\n        SetUV(id, this.u0, this.v0, this.u1, this.v1);\r\n\r\n        return this;\r\n    }\r\n\r\n    updateUVs (): void\r\n    {\r\n        const { x, y, width, height } = this;\r\n\r\n        const baseTextureWidth = this.texture.width;\r\n        const baseTextureHeight = this.texture.height;\r\n\r\n        this.u0 = x / baseTextureWidth;\r\n        this.v0 = y / baseTextureHeight;\r\n\r\n        this.u1 = (x + width) / baseTextureWidth;\r\n        this.v1 = (y + height) / baseTextureHeight;\r\n    }\r\n\r\n    destroy (): void\r\n    {\r\n        this.texture = null;\r\n    }\r\n}\r\n", "import { BindingQueue } from '../renderer/BindingQueue';\r\nimport { Frame } from './Frame';\r\nimport { IGLTextureBinding } from '../renderer/webgl1/textures/IGLTextureBinding';\r\nimport { IGLTextureBindingConfig } from '../renderer/webgl1/textures/IGLTextureBindingConfig';\r\nimport { ITexture } from './ITexture';\r\n\r\nexport class Texture implements ITexture\r\n{\r\n    //  Unique identifier of this Texture, if stored in the Texture Manager\r\n    key: string = '';\r\n\r\n    locked: boolean = true;\r\n\r\n    width: number;\r\n    height: number;\r\n\r\n    image: TexImageSource;\r\n\r\n    binding: IGLTextureBinding;\r\n\r\n    firstFrame: Frame;\r\n\r\n    frames: Map<string | number, Frame>;\r\n\r\n    data: unknown;\r\n\r\n    constructor (image?: TexImageSource, width?: number, height?: number, glConfig?: IGLTextureBindingConfig)\r\n    {\r\n        if (image)\r\n        {\r\n            width = image.width;\r\n            height = image.height;\r\n        }\r\n\r\n        this.image = image;\r\n\r\n        this.width = width;\r\n        this.height = height;\r\n\r\n        this.frames = new Map();\r\n\r\n        this.data = {};\r\n\r\n        this.addFrame('__BASE', 0, 0, width, height);\r\n\r\n        BindingQueue.add(this, glConfig);\r\n    }\r\n\r\n    addFrame (key: string | number, x: number, y: number, width: number, height: number): Frame\r\n    {\r\n        if (this.frames.has(key))\r\n        {\r\n            return null;\r\n        }\r\n\r\n        const frame = new Frame(this, key, x, y, width, height);\r\n\r\n        this.frames.set(key, frame);\r\n\r\n        if (!this.firstFrame || this.firstFrame.key === '__BASE')\r\n        {\r\n            this.firstFrame = frame;\r\n        }\r\n\r\n        return frame;\r\n    }\r\n\r\n    getFrame (key?: string | number | Frame): Frame\r\n    {\r\n        //  null, undefined, empty string, zero\r\n        if (!key)\r\n        {\r\n            return this.firstFrame;\r\n        }\r\n\r\n        if (key instanceof Frame)\r\n        {\r\n            key = key.key;\r\n        }\r\n\r\n        let frame: Frame = this.frames.get(key);\r\n\r\n        if (!frame)\r\n        {\r\n            console.warn(`Frame missing: ${key}`);\r\n\r\n            frame = this.firstFrame;\r\n        }\r\n\r\n        return frame;\r\n    }\r\n\r\n    setSize (width: number, height: number): void\r\n    {\r\n        this.width = width;\r\n        this.height = height;\r\n\r\n        const frame = this.frames.get('__BASE');\r\n\r\n        frame.setSize(width, height);\r\n    }\r\n\r\n    update (image: TexImageSource, glConfig?: IGLTextureBindingConfig): void\r\n    {\r\n        this.image = image;\r\n\r\n        this.setSize(image.width, image.height);\r\n\r\n        BindingQueue.add(this, glConfig);\r\n    }\r\n\r\n    destroy (): void\r\n    {\r\n        if (this.binding)\r\n        {\r\n            this.binding.destroy();\r\n        }\r\n\r\n        this.frames.clear();\r\n\r\n        this.binding = null;\r\n        this.data = null;\r\n        this.image = null;\r\n        this.firstFrame = null;\r\n    }\r\n}\r\n", "import { CreateAttributes } from './CreateAttributes';\r\nimport { CreateDepthBuffer } from '../fbo/CreateDepthBuffer';\r\nimport { CreateFramebuffer } from '../fbo/CreateFramebuffer';\r\nimport { CreateProgram } from './CreateProgram';\r\nimport { CreateShader } from './CreateShader';\r\nimport { CreateUniforms } from './CreateUniforms';\r\nimport { DefaultQuadAttributes } from './DefaultQuadAttributes';\r\nimport { DefaultQuadUniforms } from './DefaultQuadUniforms';\r\nimport { DeleteFramebuffer } from '../fbo/DeleteFramebuffer';\r\nimport { DeleteGLTexture } from '../textures/DeleteGLTexture';\r\nimport { DeleteShaders } from './DeleteShaders';\r\nimport { GLTextureBinding } from '../textures/GLTextureBinding';\r\nimport { GetHeight } from '../../../config/size/GetHeight';\r\nimport { GetResolution } from '../../../config/size/GetResolution';\r\nimport { GetWidth } from '../../../config/size/GetWidth';\r\nimport { IRenderPass } from '../renderpass/IRenderPass';\r\nimport { IShader } from './IShader';\r\nimport { IShaderConfig } from './IShaderConfig';\r\nimport { IVertexAttribPointer } from './IVertexAttribPointer';\r\nimport { SINGLE_QUAD_FRAG } from '../glsl/SINGLE_QUAD_FRAG';\r\nimport { SINGLE_QUAD_VERT } from '../glsl/SINGLE_QUAD_VERT';\r\nimport { Texture } from '../../../textures/Texture';\r\nimport { gl } from '../GL';\r\n\r\nexport class Shader implements IShader\r\n{\r\n    program: WebGLProgram;\r\n\r\n    attributes: Map<string, IVertexAttribPointer>;\r\n\r\n    uniforms: Map<string, unknown>;\r\n\r\n    uniformSetters: Map<string, Function>;\r\n\r\n    texture: Texture;\r\n\r\n    framebuffer: WebGLFramebuffer;\r\n\r\n    renderToFramebuffer: boolean = false;\r\n\r\n    renderToDepthbuffer: boolean = false;\r\n\r\n    isActive: boolean = false;\r\n\r\n    constructor (config?: IShaderConfig)\r\n    {\r\n        if (config)\r\n        {\r\n            this.fromConfig(config);\r\n        }\r\n    }\r\n\r\n    fromConfig (config: IShaderConfig): void\r\n    {\r\n        const {\r\n            attributes = DefaultQuadAttributes,\r\n            fragmentShader = SINGLE_QUAD_FRAG,\r\n            height = GetHeight(),\r\n            renderToFramebuffer = false,\r\n            renderToDepthbuffer = false,\r\n            resolution = GetResolution(),\r\n            vertexShader = SINGLE_QUAD_VERT,\r\n            width = GetWidth(),\r\n            uniforms = DefaultQuadUniforms\r\n        } = config;\r\n\r\n        this.create(fragmentShader, vertexShader, uniforms, attributes);\r\n\r\n        if (renderToFramebuffer)\r\n        {\r\n            this.renderToFramebuffer = true;\r\n\r\n            const texture = new Texture(null, width * resolution, height * resolution);\r\n            const binding = new GLTextureBinding(texture);\r\n\r\n            binding.framebuffer = CreateFramebuffer(binding.texture);\r\n\r\n            if (renderToDepthbuffer)\r\n            {\r\n                this.renderToDepthbuffer = true;\r\n\r\n                binding.depthbuffer = CreateDepthBuffer(binding.framebuffer, texture.width, texture.height);\r\n            }\r\n\r\n            this.texture = texture;\r\n            this.framebuffer = binding.framebuffer;\r\n        }\r\n    }\r\n\r\n    create (fragmentShaderSource: string, vertexShaderSource: string, uniforms: {}, attribs: {}): void\r\n    {\r\n        const fragmentShader = CreateShader(fragmentShaderSource, gl.FRAGMENT_SHADER);\r\n        const vertexShader = CreateShader(vertexShaderSource, gl.VERTEX_SHADER);\r\n\r\n        if (!fragmentShader || !vertexShader)\r\n        {\r\n            return;\r\n        }\r\n\r\n        const program = CreateProgram(fragmentShader, vertexShader);\r\n\r\n        if (!program)\r\n        {\r\n            return;\r\n        }\r\n\r\n        const currentProgram = gl.getParameter(gl.CURRENT_PROGRAM);\r\n\r\n        gl.useProgram(program);\r\n\r\n        this.program = program;\r\n\r\n        this.uniformSetters = CreateUniforms(program);\r\n\r\n        this.uniforms = new Map();\r\n\r\n        //  Copy starting values from the config object to the uniforms map but only if a setter exists\r\n        for (const [ key, value ] of Object.entries(uniforms))\r\n        {\r\n            if (this.uniformSetters.has(key))\r\n            {\r\n                this.uniforms.set(key, value);\r\n            }\r\n        }\r\n\r\n        this.attributes = CreateAttributes(program, attribs);\r\n\r\n        gl.useProgram(currentProgram);\r\n\r\n        this.isActive = false;\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    updateUniforms (renderPass: IRenderPass): void\r\n    {\r\n        //  Use this to set any extra uniform values prior to the bind\r\n    }\r\n\r\n    bind (renderPass: IRenderPass): boolean\r\n    {\r\n        const uniforms = this.uniforms;\r\n\r\n        uniforms.set('uProjectionMatrix', renderPass.projectionMatrix);\r\n        uniforms.set('uCameraMatrix', renderPass.cameraMatrix);\r\n\r\n        this.updateUniforms(renderPass);\r\n\r\n        return this.setUniforms(renderPass);\r\n    }\r\n\r\n    setUniform (key: string, value: unknown): void\r\n    {\r\n        const uniforms = this.uniforms;\r\n\r\n        if (uniforms.has(key))\r\n        {\r\n            uniforms.set(key, value);\r\n\r\n            const setter = this.uniformSetters.get(key);\r\n\r\n            setter(value);\r\n        }\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    setUniforms (renderPass: IRenderPass): boolean\r\n    {\r\n        if (!this.program)\r\n        {\r\n            return false;\r\n        }\r\n\r\n        gl.useProgram(this.program);\r\n\r\n        this.isActive = true;\r\n\r\n        const uniforms = this.uniforms;\r\n\r\n        for (const [ name, setter ] of this.uniformSetters.entries())\r\n        {\r\n            setter(uniforms.get(name));\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    //  stride = vertexByteSize\r\n    setAttributes (renderPass: IRenderPass): void\r\n    {\r\n        if (this.program)\r\n        {\r\n            const stride = renderPass.vertexbuffer.current.vertexByteSize;\r\n\r\n            this.attributes.forEach(attrib =>\r\n            {\r\n                gl.vertexAttribPointer(attrib.index, attrib.size, attrib.type, attrib.normalized, stride, attrib.offset);\r\n            });\r\n        }\r\n    }\r\n\r\n    destroy (): void\r\n    {\r\n        DeleteShaders(this.program);\r\n        DeleteGLTexture(this.texture);\r\n        DeleteFramebuffer(this.framebuffer);\r\n\r\n        this.uniforms.clear();\r\n        this.uniformSetters.clear();\r\n        this.attributes.clear();\r\n\r\n        this.program = null;\r\n        this.texture = null;\r\n        this.framebuffer = null;\r\n    }\r\n}\r\n", "import { DefaultQuadAttributes } from './DefaultQuadAttributes';\r\nimport { IShader } from './IShader';\r\nimport { IShaderConfig } from './IShaderConfig';\r\nimport { Shader } from './Shader';\r\n\r\n//  Do we even need this class? As Shader defaults to this anyway :)\r\n\r\nexport class QuadShader extends Shader implements IShader\r\n{\r\n    constructor (config: IShaderConfig = {})\r\n    {\r\n        config.attributes = config?.attributes || DefaultQuadAttributes;\r\n\r\n        super(config);\r\n    }\r\n}\r\n", "import { GetMaxTextures } from '../../../config/maxtextures/GetMaxTextures';\r\nimport { IRenderPass } from '../renderpass/IRenderPass';\r\nimport { IShaderConfig } from './IShaderConfig';\r\nimport { MULTI_QUAD_FRAG } from '../glsl/MULTI_QUAD_FRAG';\r\nimport { QuadShader } from './QuadShader';\r\n\r\nexport class MultiTextureQuadShader extends QuadShader\r\n{\r\n    constructor (config: IShaderConfig = {})\r\n    {\r\n        config.fragmentShader = config?.fragmentShader || MULTI_QUAD_FRAG;\r\n\r\n        super(config);\r\n    }\r\n\r\n    create (fragmentShaderSource: string, vertexShaderSource: string, uniforms: {}, attribs: {}): void\r\n    {\r\n        const maxTextures = GetMaxTextures();\r\n\r\n        fragmentShaderSource = fragmentShaderSource.replace(/%count%/gi, `${maxTextures}`);\r\n\r\n        super.create(fragmentShaderSource, vertexShaderSource, uniforms, attribs);\r\n    }\r\n\r\n    bind (renderPass: IRenderPass): boolean\r\n    {\r\n        this.uniforms.set('uTexture', renderPass.textures.textureIndex);\r\n\r\n        return super.bind(renderPass);\r\n    }\r\n}\r\n", "import { IRenderPass } from './IRenderPass';\r\nimport { IShader } from '../shaders/IShader';\r\n\r\nexport type ShaderStackEntry = {\r\n    shader: IShader;\r\n    textureID?: number;\r\n};\r\n\r\nexport class ShaderStack\r\n{\r\n    renderPass: IRenderPass;\r\n\r\n    stack: ShaderStackEntry[];\r\n    active: IShader;\r\n    default: ShaderStackEntry;\r\n    index: number;\r\n\r\n    constructor (renderPass: IRenderPass)\r\n    {\r\n        this.renderPass = renderPass;\r\n        this.stack = [];\r\n    }\r\n\r\n    get current (): ShaderStackEntry\r\n    {\r\n        return this.stack[this.index];\r\n    }\r\n\r\n    add (shader: IShader, textureID?: number): ShaderStackEntry\r\n    {\r\n        const entry = { shader, textureID };\r\n\r\n        this.index++;\r\n\r\n        //  cursor already at the end of the stack, so we need to grow it\r\n        if (this.index === this.stack.length)\r\n        {\r\n            this.stack.push(entry);\r\n        }\r\n        else\r\n        {\r\n            this.stack[this.index] = entry;\r\n        }\r\n\r\n        return entry;\r\n    }\r\n\r\n    bindDefault (): void\r\n    {\r\n        this.index = 0;\r\n\r\n        this.bind(this.default);\r\n    }\r\n\r\n    bind (entry?: ShaderStackEntry): void\r\n    {\r\n        if (!entry)\r\n        {\r\n            entry = this.current;\r\n        }\r\n\r\n        if (!entry.shader.isActive)\r\n        {\r\n            const success = entry.shader.bind(this.renderPass, entry.textureID);\r\n\r\n            if (success)\r\n            {\r\n                entry.shader.setAttributes(this.renderPass);\r\n\r\n                if (this.active && this.active !== entry.shader)\r\n                {\r\n                    this.active.isActive = false;\r\n                }\r\n\r\n                this.active = entry.shader;\r\n            }\r\n        }\r\n    }\r\n\r\n    pop (): void\r\n    {\r\n        this.index--;\r\n\r\n        this.bind();\r\n    }\r\n\r\n    set (shader: IShader, textureID?: number): void\r\n    {\r\n        const entry = this.add(shader, textureID);\r\n\r\n        this.bind(entry);\r\n    }\r\n\r\n    setDefault (shader: IShader, textureID?: number): void\r\n    {\r\n        const entry = { shader, textureID };\r\n\r\n        //  The default entry always goes into index zero\r\n        this.stack[0] = entry;\r\n\r\n        this.index = 0;\r\n\r\n        this.default = entry;\r\n    }\r\n}\r\n", "import { Types, defineComponent } from 'bitecs';\r\n\r\n//  Array structure:\r\n//  x, y, right, bottom\r\n\r\n//  local = bounds of Game Object in local space (calculated dynamically, on request)\r\n//  global = bounds of Game Object in global space (calcuated in UpdatedVertexPositionSystem)\r\n//  world = bounds of Game Object, factoring in all children, in global space (calculated in BaseWorld)\r\n\r\nconst Bounds = defineComponent({\r\n    local: [ Types.f32, 4 ],\r\n    global: [ Types.f32, 4 ],\r\n    world: [ Types.f32, 4 ]\r\n});\r\n\r\nexport const BoundsComponent = Bounds;\r\n", "import { BoundsComponent } from './BoundsComponent';\r\nimport { GameObjectWorld } from '../../GameObjectWorld';\r\nimport { addComponent } from 'bitecs';\r\n\r\nexport function AddBoundsComponent (id: number): void\r\n{\r\n    addComponent(GameObjectWorld, BoundsComponent, id);\r\n}\r\n", "import { Types, defineComponent } from 'bitecs';\r\n\r\nexport const Matrix4Component = defineComponent({\r\n    data: [ Types.f32, 16 ]\r\n});\r\n", "import { GameObjectWorld } from '../../GameObjectWorld';\r\nimport { Matrix4Component } from './Matrix4Component';\r\nimport { addComponent } from 'bitecs';\r\n\r\nexport function AddMatrix4Component (id: number): void\r\n{\r\n    addComponent(GameObjectWorld, Matrix4Component, id);\r\n\r\n    const data = Matrix4Component.data[id];\r\n\r\n    data[0] = 1;\r\n    data[5] = 1;\r\n    data[10] = 1;\r\n    data[15] = 1;\r\n}\r\n", "import { addEntity, removeComponent, removeEntity } from 'bitecs';\r\n\r\nimport { AddBoundsComponent } from '../components/bounds/AddBoundsComponent';\r\nimport { AddMatrix4Component } from '../math/mat4/AddMatrix4Component';\r\nimport { BoundsComponent } from '../components/bounds/BoundsComponent';\r\nimport { GameObjectWorld } from '../GameObjectWorld';\r\nimport { IStaticCamera } from './IStaticCamera';\r\nimport { Matrix4Component } from '../math/mat4/Matrix4Component';\r\n\r\nexport class StaticCamera implements IStaticCamera\r\n{\r\n    readonly id: number = addEntity(GameObjectWorld);\r\n\r\n    readonly type: string = 'StaticCamera';\r\n\r\n    //  User defined name. Never used internally.\r\n    name: string = '';\r\n\r\n    constructor (width: number, height: number)\r\n    {\r\n        const id = this.id;\r\n\r\n        AddMatrix4Component(id);\r\n        AddBoundsComponent(id);\r\n\r\n        this.reset(width, height);\r\n    }\r\n\r\n    getBounds (): Float32Array\r\n    {\r\n        return BoundsComponent.global[this.id];\r\n    }\r\n\r\n    getMatrix (): Float32Array\r\n    {\r\n        return Matrix4Component.data[this.id];\r\n    }\r\n\r\n    update (): boolean\r\n    {\r\n        return false;\r\n    }\r\n\r\n    reset (width: number, height: number): void\r\n    {\r\n        BoundsComponent.global[this.id].set([ 0, 0, width, height ]);\r\n    }\r\n\r\n    destroy (): void\r\n    {\r\n        const id = this.id;\r\n\r\n        removeComponent(GameObjectWorld, Matrix4Component, id);\r\n        removeComponent(GameObjectWorld, BoundsComponent, id);\r\n\r\n        removeEntity(GameObjectWorld, id);\r\n    }\r\n}\r\n", "import { GetMaxTextures } from '../../../config/maxtextures/GetMaxTextures';\r\nimport { SetMaxTextures } from '../../../config/maxtextures/SetMaxTextures';\r\nimport { gl } from '../GL';\r\n\r\n//  As per the WebGL spec, the browser should always support at least 8 texture units\r\n//  However, the user can set this to any value they like (lower than this)\r\n\r\nexport function CreateTempTextures (): Array<[ number, WebGLTexture ]>\r\n{\r\n    let maxGPUTextures: number = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\r\n\r\n    const maxConfigTextures = GetMaxTextures();\r\n\r\n    if (maxConfigTextures === 0 || maxConfigTextures > maxGPUTextures)\r\n    {\r\n        //  Insert gpu limit into config value\r\n        SetMaxTextures(maxGPUTextures);\r\n    }\r\n    else\r\n    {\r\n        maxGPUTextures = maxConfigTextures;\r\n    }\r\n\r\n    const textures: Array<[ number, WebGLTexture ]> = [];\r\n\r\n    //  Create temp textures to stop WebGL errors on mac os\r\n    for (let i: number = 0; i < maxGPUTextures; i++)\r\n    {\r\n        const tempTexture = gl.createTexture();\r\n\r\n        gl.activeTexture(gl.TEXTURE0 + i);\r\n\r\n        gl.bindTexture(gl.TEXTURE_2D, tempTexture);\r\n\r\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, new Uint8Array([ 0, 0, 255, 255 ]));\r\n\r\n        textures.push([ i, tempTexture ]);\r\n    }\r\n\r\n    return textures;\r\n}\r\n", "import { Texture } from './Texture';\r\n\r\nlet instance: Texture;\r\n\r\nexport const WhiteTexture =\r\n{\r\n    get: (): Texture =>\r\n    {\r\n        return instance;\r\n    },\r\n\r\n    set: (texture: Texture): void =>\r\n    {\r\n        instance = texture;\r\n    }\r\n};\r\n", "import { CreateTempTextures } from './CreateTempTextures';\r\nimport { Flush } from './Flush';\r\nimport { IRenderPass } from './IRenderPass';\r\nimport { ITexture } from '../../../textures/ITexture';\r\nimport { Texture } from '../../../textures/Texture';\r\nimport { WhiteTexture } from '../../../textures/WhiteTexture';\r\nimport { gl } from '../GL';\r\n\r\nexport class TextureStack\r\n{\r\n    renderPass: IRenderPass;\r\n\r\n    textures: Map<number, ITexture>;\r\n    tempTextures: Map<number, WebGLTexture>;\r\n    textureIndex: number[];\r\n\r\n    maxTextures: number;\r\n\r\n    constructor (renderPass: IRenderPass)\r\n    {\r\n        this.renderPass = renderPass;\r\n    }\r\n\r\n    //  directly bind a texture to an index slot\r\n    bind (texture: Texture, index: number = 0): void\r\n    {\r\n        const binding = texture.binding;\r\n\r\n        binding.bind(index);\r\n\r\n        gl.activeTexture(gl.TEXTURE0 + index);\r\n        gl.bindTexture(gl.TEXTURE_2D, binding.texture);\r\n    }\r\n\r\n    unbind (index: number = 0): void\r\n    {\r\n        gl.activeTexture(gl.TEXTURE0 + index);\r\n        gl.bindTexture(gl.TEXTURE_2D, this.tempTextures[ index ]);\r\n    }\r\n\r\n    setWhite (): number\r\n    {\r\n        return this.set(WhiteTexture.get());\r\n    }\r\n\r\n    //  request the next available texture and bind it\r\n    //  returns the new ID\r\n    set (texture: ITexture): number\r\n    {\r\n        if (!texture.binding)\r\n        {\r\n            return -1;\r\n        }\r\n\r\n        const binding = texture.binding;\r\n        const textures = this.textures;\r\n\r\n        //  Make sure texture isn't already bound\r\n        if (!binding.isBound)\r\n        {\r\n            //  Is the current texture Map full? If so, flush it all\r\n            if (textures.size === this.maxTextures)\r\n            {\r\n                Flush(this.renderPass);\r\n\r\n                this.clear();\r\n            }\r\n\r\n            // Add texture to the map\r\n            const textureUnit = textures.size;\r\n\r\n            gl.activeTexture(gl.TEXTURE0 + textureUnit);\r\n            gl.bindTexture(gl.TEXTURE_2D, binding.texture);\r\n\r\n            textures.set(textureUnit, texture);\r\n\r\n            binding.bind(textureUnit);\r\n        }\r\n\r\n        return binding.textureUnit;\r\n    }\r\n\r\n    setDefault (): void\r\n    {\r\n        if (this.textures)\r\n        {\r\n            this.reset();\r\n        }\r\n\r\n        const tempTextures = CreateTempTextures();\r\n\r\n        this.maxTextures = tempTextures.length;\r\n\r\n        this.tempTextures = new Map(tempTextures);\r\n        this.textures = new Map();\r\n\r\n        this.textureIndex = [];\r\n\r\n        this.tempTextures.forEach((texture, index) =>\r\n        {\r\n            this.textureIndex.push(index);\r\n        });\r\n    }\r\n\r\n    clear (): void\r\n    {\r\n        this.textures.forEach(texture => texture.binding.unbind());\r\n\r\n        this.textures.clear();\r\n    }\r\n\r\n    reset (): void\r\n    {\r\n        this.tempTextures.forEach((texture, index) =>\r\n        {\r\n            gl.activeTexture(gl.TEXTURE0 + index);\r\n\r\n            gl.bindTexture(gl.TEXTURE_2D, texture);\r\n        });\r\n\r\n        this.clear();\r\n    }\r\n}\r\n", "import { gl } from '../GL';\r\n\r\nexport function DeleteGLBuffer (buffer: WebGLBuffer): void\r\n{\r\n    if (gl.isBuffer(buffer))\r\n    {\r\n        gl.deleteBuffer(buffer);\r\n    }\r\n}\r\n", "import { DeleteGLBuffer } from './DeleteGLBuffer';\r\nimport { IVertexBuffer } from './IVertexBuffer';\r\nimport { IVertexBufferConfig } from './IVertexBufferConfig';\r\nimport { gl } from '../GL';\r\n\r\nexport class VertexBuffer implements IVertexBuffer\r\n{\r\n    //  Handy for debug tracing\r\n    name: string;\r\n\r\n    /**\r\n     * Maximum number of entries per batch before a flush takes place.\r\n     * For a Mesh, this is the number of triangles / faces in the vertex buffer.\r\n     * Typically each face consists of 3 verts.\r\n     *\r\n     * @type {number}\r\n     */\r\n    batchSize: number;\r\n\r\n    /**\r\n     * The size, in bytes, per entry in the array buffer.\r\n     *\r\n     * @type {number}\r\n     */\r\n    dataSize: number;\r\n\r\n    /**\r\n     * The amount of elements / floats a single vertex consists of.\r\n     *\r\n     * The default is 9:\r\n     *\r\n     * position (x,y - 2 floats)\r\n     * texture coord (x,y - 2 floats)\r\n     * texture index (uint)\r\n     * red channel (float)\r\n     * green channel (float)\r\n     * blue channel (float)\r\n     * alpha channel (float)\r\n     *\r\n     * @type {number}\r\n     */\r\n    vertexElementSize: number;\r\n\r\n    /**\r\n     * The size, in bytes, of a single vertex in the array buffer.\r\n     *\r\n     * This is `vertexElementSize * dataSize`.\r\n     *\r\n     * @type {number}\r\n     */\r\n    vertexByteSize: number;\r\n\r\n    /**\r\n     * The size, in bytes, of a single entry in the array buffer.\r\n     *\r\n     * This is `vertexByteSize * elementsPerEntry` for a quad.\r\n     *\r\n     * @type {number}\r\n     */\r\n    entryByteSize: number;\r\n\r\n    /**\r\n     * The size, in bytes, of the Array Buffer.\r\n     *\r\n     * This is `batchSize * entryByteSize`\r\n     *\r\n     * @type {number}\r\n     */\r\n    bufferByteSize: number;\r\n\r\n    /**\r\n     * The Array Buffer.\r\n     *\r\n     * @type {ArrayBuffer}\r\n     */\r\n    data: ArrayBuffer;\r\n\r\n    /**\r\n     * Float32 View of the Array Buffer.\r\n     *\r\n     * @type {Float32Array}\r\n     */\r\n    vertexViewF32: Float32Array;\r\n\r\n    /**\r\n     * The data array buffer.\r\n     *\r\n     * @type {WebGLBuffer}\r\n     */\r\n    vertexBuffer: WebGLBuffer;\r\n\r\n    /**\r\n     * The size, in quantity of elements, of a single entry in the element index array.\r\n     *\r\n     * This is `vertexElementSize * elementsPerEntry`\r\n     *\r\n     * @type {number}\r\n     */\r\n    entryElementSize: number;\r\n\r\n    indexed: boolean = false;\r\n\r\n    isDynamic: boolean = false;\r\n\r\n    /**\r\n     * The total number of entries added to the buffer so far, or reserved to be added.\r\n     *\r\n     * This is the total number of indices / verticies, not faces.\r\n     * Typically there are 3 verts per face, so this value is usually batchSize x 3 for a Mesh.\r\n     *\r\n     * @type {number}\r\n     */\r\n    count: number = 0;\r\n\r\n    /**\r\n     * The current buffer offset.\r\n     *\r\n     * @type {number}\r\n     */\r\n    offset: number = 0;\r\n\r\n    /**\r\n     * The number of elements per entry in the buffer.\r\n     *\r\n     * This is 3 for a tri and 4 for a quad in an indexed buffer.\r\n     *\r\n     * @type {number}\r\n     */\r\n    elementsPerEntry: number;\r\n\r\n    isBound: boolean = false;\r\n\r\n    constructor (config: IVertexBufferConfig = {})\r\n    {\r\n        const {\r\n            name = 'VBO',\r\n            batchSize = 1,\r\n            dataSize = 4,\r\n            isDynamic = true,\r\n            elementsPerEntry = 3,\r\n            vertexElementSize = 9\r\n        } = config;\r\n\r\n        this.name = name;\r\n        this.batchSize = batchSize;\r\n        this.dataSize = dataSize;\r\n        this.vertexElementSize = vertexElementSize;\r\n        this.isDynamic = isDynamic;\r\n        this.elementsPerEntry = elementsPerEntry;\r\n\r\n        //  Derive the remaining values\r\n        this.vertexByteSize = vertexElementSize * dataSize;\r\n        this.entryByteSize = this.vertexByteSize * elementsPerEntry;\r\n        this.bufferByteSize = batchSize * this.entryByteSize;\r\n        this.entryElementSize = this.vertexElementSize * this.elementsPerEntry;\r\n\r\n        this.create();\r\n    }\r\n\r\n    resize (batchSize: number): void\r\n    {\r\n        this.batchSize = batchSize;\r\n        this.bufferByteSize = batchSize * this.entryByteSize;\r\n\r\n        if (this.vertexBuffer)\r\n        {\r\n            DeleteGLBuffer(this.vertexBuffer);\r\n        }\r\n\r\n        this.create();\r\n    }\r\n\r\n    create (): void\r\n    {\r\n        const data = new ArrayBuffer(this.bufferByteSize);\r\n\r\n        this.data = data;\r\n\r\n        this.vertexViewF32 = new Float32Array(data);\r\n\r\n        this.vertexBuffer = gl.createBuffer();\r\n\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);\r\n\r\n        const type = (this.isDynamic) ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW;\r\n\r\n        gl.bufferData(gl.ARRAY_BUFFER, data, type);\r\n\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, null);\r\n\r\n        this.isBound = false;\r\n    }\r\n\r\n    add (count: number): void\r\n    {\r\n        this.count += count;\r\n        this.offset += (this.vertexElementSize * count);\r\n    }\r\n\r\n    reset (): void\r\n    {\r\n        this.count = 0;\r\n        this.offset = 0;\r\n    }\r\n\r\n    canContain (count: number): boolean\r\n    {\r\n        return ((this.count + count) <= this.batchSize);\r\n    }\r\n\r\n    free (): number\r\n    {\r\n        return Math.max(0, 1 - (this.count / this.batchSize));\r\n    }\r\n\r\n    bind (): void\r\n    {\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);\r\n    }\r\n\r\n    destroy (): void\r\n    {\r\n        DeleteGLBuffer(this.vertexBuffer);\r\n\r\n        this.data = null;\r\n        this.vertexViewF32 = null;\r\n        this.vertexBuffer = null;\r\n    }\r\n}\r\n", "import { IRenderPass } from './IRenderPass';\r\nimport { IVertexBuffer } from '../buffers/IVertexBuffer';\r\nimport { gl } from '../GL';\r\n\r\nexport class VertexBufferStack\r\n{\r\n    renderPass: IRenderPass;\r\n\r\n    stack: IVertexBuffer[];\r\n    active: IVertexBuffer;\r\n    default: IVertexBuffer;\r\n    index: number;\r\n\r\n    constructor (renderPass: IRenderPass)\r\n    {\r\n        this.renderPass = renderPass;\r\n        this.stack = [];\r\n    }\r\n\r\n    get current (): IVertexBuffer\r\n    {\r\n        return this.stack[this.index];\r\n    }\r\n\r\n    add (buffer: IVertexBuffer): IVertexBuffer\r\n    {\r\n        this.index++;\r\n\r\n        //  cursor already at the end of the stack, so we need to grow it\r\n        if (this.index === this.stack.length)\r\n        {\r\n            this.stack.push(buffer);\r\n        }\r\n        else\r\n        {\r\n            this.stack[this.index] = buffer;\r\n        }\r\n\r\n        return buffer;\r\n    }\r\n\r\n    bindDefault (): void\r\n    {\r\n        this.index = 0;\r\n\r\n        this.bind(this.default);\r\n    }\r\n\r\n    bind (buffer?: IVertexBuffer): void\r\n    {\r\n        if (!buffer)\r\n        {\r\n            buffer = this.current;\r\n        }\r\n\r\n        if (!buffer.isBound)\r\n        {\r\n            const indexBuffer = (buffer.indexed) ? buffer.indexBuffer : null;\r\n\r\n            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);\r\n\r\n            gl.bindBuffer(gl.ARRAY_BUFFER, buffer.vertexBuffer);\r\n\r\n            buffer.isBound = true;\r\n\r\n            if (this.active && this.active !== buffer)\r\n            {\r\n                this.active.isBound = false;\r\n            }\r\n\r\n            this.active = buffer;\r\n        }\r\n    }\r\n\r\n    pop (): void\r\n    {\r\n        this.index--;\r\n\r\n        this.bind();\r\n    }\r\n\r\n    set (buffer: IVertexBuffer): void\r\n    {\r\n        const entry = this.add(buffer);\r\n\r\n        this.bind(entry);\r\n    }\r\n\r\n    setDefault (buffer: IVertexBuffer): void\r\n    {\r\n        //  The default entry always goes into index zero\r\n        this.stack[0] = buffer;\r\n\r\n        this.index = 0;\r\n\r\n        this.default = buffer;\r\n    }\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nimport { IRectangle } from './IRectangle';\r\n\r\n/**\r\n * Checks if a given point is inside a Rectangle's bounds.\r\n */\r\nexport function RectangleContains (rect: IRectangle, x: number, y: number): boolean\r\n{\r\n    if (rect.width <= 0 || rect.height <= 0)\r\n    {\r\n        return false;\r\n    }\r\n\r\n    return (rect.x <= x && rect.x + rect.width >= x && rect.y <= y && rect.y + rect.height >= y);\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nimport { RectangleContains } from './RectangleContains';\r\n\r\nexport class Rectangle\r\n{\r\n    x: number;\r\n    y: number;\r\n    width: number;\r\n    height: number;\r\n\r\n    constructor (x: number = 0, y: number = 0, width: number = 0, height: number = 0)\r\n    {\r\n        this.set(x, y, width, height);\r\n    }\r\n\r\n    set (x: number = 0, y: number = 0, width: number = 0, height: number = 0): this\r\n    {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = width;\r\n        this.height = height;\r\n\r\n        return this;\r\n    }\r\n\r\n    contains (x: number, y: number): boolean\r\n    {\r\n        return RectangleContains(this, x, y);\r\n    }\r\n\r\n    set right (value: number)\r\n    {\r\n        if (value <= this.x)\r\n        {\r\n            this.width = 0;\r\n        }\r\n        else\r\n        {\r\n            this.width = value - this.x;\r\n        }\r\n    }\r\n\r\n    get right (): number\r\n    {\r\n        return this.x + this.width;\r\n    }\r\n\r\n    set bottom (value: number)\r\n    {\r\n        if (value <= this.y)\r\n        {\r\n            this.height = 0;\r\n        }\r\n        else\r\n        {\r\n            this.height = value - this.y;\r\n        }\r\n    }\r\n\r\n    get bottom (): number\r\n    {\r\n        return this.y + this.height;\r\n    }\r\n}\r\n", "/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nimport { IRectangle } from './IRectangle';\r\n\r\n/**\r\n * Compares the `x`, `y`, `width` and `height` properties of two rectangles.\r\n */\r\nexport function RectangleEquals (rect: IRectangle, toCompare: IRectangle): boolean\r\n{\r\n    return (\r\n        rect.x === toCompare.x &&\r\n        rect.y === toCompare.y &&\r\n        rect.width === toCompare.width &&\r\n        rect.height === toCompare.height\r\n    );\r\n}\r\n", "import { IRenderPass } from './IRenderPass';\r\nimport { Rectangle } from '../../../geom/rectangle/Rectangle';\r\nimport { RectangleEquals } from '../../../geom/rectangle/RectangleEquals';\r\nimport { gl } from '../GL';\r\n\r\nexport class ViewportStack\r\n{\r\n    renderPass: IRenderPass;\r\n\r\n    stack: Rectangle[];\r\n    active: Rectangle;\r\n    default: Rectangle;\r\n    index: number;\r\n\r\n    constructor (renderPass: IRenderPass)\r\n    {\r\n        this.renderPass = renderPass;\r\n        this.stack = [];\r\n    }\r\n\r\n    get current (): Rectangle\r\n    {\r\n        return this.stack[this.index];\r\n    }\r\n\r\n    add (x: number = 0, y: number = 0, width: number = 0, height: number = 0): Rectangle\r\n    {\r\n        const entry = new Rectangle(x, y, width, height);\r\n\r\n        this.index++;\r\n\r\n        //  cursor already at the end of the stack, so we need to grow it\r\n        if (this.index === this.stack.length)\r\n        {\r\n            this.stack.push(entry);\r\n        }\r\n        else\r\n        {\r\n            this.stack[this.index] = entry;\r\n        }\r\n\r\n        return entry;\r\n    }\r\n\r\n    bindDefault (): void\r\n    {\r\n        this.index = 0;\r\n\r\n        this.bind(this.default);\r\n    }\r\n\r\n    bind (viewport?: Rectangle): void\r\n    {\r\n        if (!viewport)\r\n        {\r\n            viewport = this.current;\r\n        }\r\n\r\n        if (!this.active || !RectangleEquals(this.active, viewport))\r\n        {\r\n            gl.viewport(viewport.x, viewport.y, viewport.width, viewport.height);\r\n\r\n            this.active = viewport;\r\n        }\r\n    }\r\n\r\n    pop (): void\r\n    {\r\n        this.index--;\r\n\r\n        this.bind();\r\n    }\r\n\r\n    set (x: number = 0, y: number = 0, width: number = 0, height: number = 0): void\r\n    {\r\n        const entry = this.add(x, y, width, height);\r\n\r\n        this.bind(entry);\r\n    }\r\n\r\n    setDefault (x: number = 0, y: number = 0, width: number = 0, height: number = 0): void\r\n    {\r\n        const entry = new Rectangle(x, y, width, height);\r\n\r\n        //  The default entry always goes into index zero\r\n        this.stack[0] = entry;\r\n\r\n        this.index = 0;\r\n\r\n        this.default = entry;\r\n    }\r\n}\r\n", "import { DEFAULT_COLOR_MATRIX, DEFAULT_COLOR_OFFSET } from '../../../colormatrix/const';\r\n\r\nimport { BlendModeStack } from './BlendModeStack';\r\nimport { ColorMatrixStack } from './ColorMatrixStack';\r\nimport { FramebufferStack } from './FramebufferStack';\r\nimport { GetBatchSize } from '../../../config/batchsize/GetBatchSize';\r\nimport { GetMaxTextures } from '../../../config/maxtextures/GetMaxTextures';\r\nimport { IBaseCamera } from '../../../camera/IBaseCamera';\r\nimport { IRenderPass } from './IRenderPass';\r\nimport { IShader } from '../shaders/IShader';\r\nimport { IWebGLRenderer } from '../IWebGLRenderer';\r\nimport { Mat4Ortho } from '../../../math/mat4/Mat4Ortho';\r\nimport { MultiTextureQuadShader } from '../shaders/MultiTextureQuadShader';\r\nimport { QuadShader } from '../shaders/QuadShader';\r\nimport { ShaderStack } from './ShaderStack';\r\nimport { StaticCamera } from '../../../camera/StaticCamera';\r\nimport { TextureStack } from './TextureStack';\r\nimport { VertexBuffer } from '../buffers/VertexBuffer';\r\nimport { VertexBufferStack } from './VertexBufferStack';\r\nimport { ViewportStack } from './ViewportStack';\r\n\r\nexport class RenderPass implements IRenderPass\r\n{\r\n    renderer: IWebGLRenderer;\r\n\r\n    projectionMatrix: Float32Array;\r\n    cameraMatrix: Float32Array;\r\n\r\n    count: number = 0;\r\n    prevCount: number = 0;\r\n    flushTotal: number = 0;\r\n\r\n    //  Stacks\r\n    framebuffer: FramebufferStack;\r\n    vertexbuffer: VertexBufferStack;\r\n    blendMode: BlendModeStack;\r\n    shader: ShaderStack;\r\n    viewport: ViewportStack;\r\n    textures: TextureStack;\r\n    colorMatrix: ColorMatrixStack;\r\n\r\n    //  Single Texture Quad Shader + Camera\r\n    quadShader: IShader;\r\n    quadCamera: IBaseCamera;\r\n\r\n    //  Current 2D Camera\r\n    current2DCamera: IBaseCamera;\r\n\r\n    constructor (renderer: IWebGLRenderer)\r\n    {\r\n        this.renderer = renderer;\r\n\r\n        this.projectionMatrix = new Float32Array(16);\r\n\r\n        this.framebuffer = new FramebufferStack(this);\r\n        this.vertexbuffer = new VertexBufferStack(this);\r\n        this.blendMode = new BlendModeStack(this);\r\n        this.shader = new ShaderStack(this);\r\n        this.viewport = new ViewportStack(this);\r\n        this.textures = new TextureStack(this);\r\n        this.colorMatrix = new ColorMatrixStack(this);\r\n\r\n        this.reset();\r\n    }\r\n\r\n    getCurrentShader (): IShader\r\n    {\r\n        return this.shader.current.shader;\r\n    }\r\n\r\n    flush (): void\r\n    {\r\n        this.prevCount = this.count;\r\n\r\n        this.count = 0;\r\n\r\n        this.flushTotal++;\r\n    }\r\n\r\n    //  TODO - Call when context is lost and restored\r\n    //  TODO - If already created, delete shaders / buffers first (i.e. during context loss)\r\n    reset (): void\r\n    {\r\n        const gl = this.renderer.gl;\r\n\r\n        //  Default QuadShader (for FBO drawing)\r\n\r\n        this.quadShader = new QuadShader();\r\n        this.quadCamera = new StaticCamera(this.renderer.width, this.renderer.height);\r\n\r\n        //  Default settings\r\n\r\n        this.textures.setDefault();\r\n        this.framebuffer.setDefault();\r\n        this.blendMode.setDefault(true, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\r\n        this.colorMatrix.setDefault(DEFAULT_COLOR_MATRIX, DEFAULT_COLOR_OFFSET);\r\n        this.vertexbuffer.setDefault(new VertexBuffer({ batchSize: GetBatchSize() }));\r\n        this.shader.setDefault((GetMaxTextures() === 1) ? new QuadShader() : new MultiTextureQuadShader());\r\n    }\r\n\r\n    resize (width: number, height: number): void\r\n    {\r\n        //  TODO - -1 to 1?\r\n        Mat4Ortho(this.projectionMatrix, 0, width, height, 0, -1000, 1000);\r\n\r\n        this.quadCamera.reset(width, height);\r\n\r\n        this.viewport.setDefault(0, 0, width, height);\r\n    }\r\n}\r\n", "import { IRenderPass } from './IRenderPass';\r\n\r\nexport function Start (renderPass: IRenderPass): IRenderPass\r\n{\r\n    if (!renderPass.current2DCamera)\r\n    {\r\n        renderPass.current2DCamera = renderPass.quadCamera;\r\n        renderPass.cameraMatrix = renderPass.quadCamera.getMatrix();\r\n    }\r\n\r\n    renderPass.count = 0;\r\n    renderPass.flushTotal = 0;\r\n\r\n    renderPass.framebuffer.bindDefault();\r\n    renderPass.blendMode.bindDefault();\r\n    renderPass.viewport.bindDefault();\r\n    renderPass.vertexbuffer.bindDefault();\r\n    renderPass.shader.bindDefault();\r\n    renderPass.colorMatrix.bindDefault();\r\n\r\n    return renderPass;\r\n}\r\n", "import { IRenderer } from './IRenderer';\r\n\r\nexport let instance: IRenderer;\r\n\r\nexport const RendererInstance =\r\n{\r\n    get: (): IRenderer =>\r\n    {\r\n        return instance;\r\n    },\r\n\r\n    set: (renderer: IRenderer | undefined): void =>\r\n    {\r\n        instance = renderer;\r\n    }\r\n};\r\n", "import { RendererInstance } from '../RendererInstance';\r\nimport { WebGLRenderer } from './WebGLRenderer';\r\n\r\nexport let instance: WebGLRenderer;\r\n\r\nexport const WebGLRendererInstance =\r\n{\r\n    get: (): WebGLRenderer =>\r\n    {\r\n        return instance;\r\n    },\r\n\r\n    set: (renderer: WebGLRenderer | undefined): void =>\r\n    {\r\n        instance = renderer;\r\n        RendererInstance.set(renderer);\r\n    }\r\n};\r\n", "import { End } from './renderpass/End';\r\nimport { GL } from './GL';\r\nimport { GetBackgroundColor } from '../../config/backgroundcolor/GetBackgroundColor';\r\nimport { GetCompressedTextures } from './textures/GetCompressedTextures';\r\nimport { GetHeight } from '../../config/size/GetHeight';\r\nimport { GetRGBArray } from './colors/GetRGBArray';\r\nimport { GetResolution } from '../../config/size/GetResolution';\r\nimport { GetWebGLContext } from '../../config/webglcontext/GetWebGLContext';\r\nimport { GetWidth } from '../../config/size/GetWidth';\r\nimport { ICompressedTextures } from './textures/ICompressedTextures';\r\nimport { IRenderPass } from './renderpass/IRenderPass';\r\nimport { ProcessBindingQueue } from './renderpass/ProcessBindingQueue';\r\nimport { RenderPass } from './renderpass/RenderPass';\r\nimport { Start } from './renderpass/Start';\r\nimport { WebGLRendererInstance } from './WebGLRendererInstance';\r\n\r\nexport class WebGLRenderer\r\n{\r\n    canvas: HTMLCanvasElement;\r\n    gl: WebGLRenderingContext;\r\n\r\n    renderPass: IRenderPass;\r\n\r\n    clearColor = [ 0, 0, 0, 1 ];\r\n\r\n    width: number;\r\n    height: number;\r\n    resolution: number;\r\n\r\n    clearBeforeRender: boolean = true;\r\n    optimizeRedraw: boolean = true;\r\n    autoResize: boolean = true;\r\n\r\n    contextLost: boolean = false;\r\n\r\n    compression: ICompressedTextures;\r\n\r\n    constructor ()\r\n    {\r\n        this.width = GetWidth();\r\n        this.height = GetHeight();\r\n        this.resolution = GetResolution();\r\n\r\n        this.setBackgroundColor(GetBackgroundColor());\r\n\r\n        const canvas = document.createElement('canvas');\r\n\r\n        canvas.addEventListener('webglcontextlost', (event) => this.onContextLost(event), false);\r\n        canvas.addEventListener('webglcontextrestored', () => this.onContextRestored(), false);\r\n\r\n        this.canvas = canvas;\r\n\r\n        this.initContext();\r\n\r\n        //  By this stage the context is available\r\n        WebGLRendererInstance.set(this);\r\n\r\n        this.renderPass = new RenderPass(this);\r\n\r\n        this.resize(this.width, this.height, this.resolution);\r\n\r\n        //  Process default textures from the Texture Manager\r\n        ProcessBindingQueue();\r\n    }\r\n\r\n    initContext (): void\r\n    {\r\n        const gl = this.canvas.getContext('webgl', GetWebGLContext());\r\n\r\n        GL.set(gl);\r\n\r\n        this.gl = gl;\r\n\r\n        this.compression = GetCompressedTextures(gl);\r\n\r\n        gl.disable(gl.DEPTH_TEST);\r\n        gl.disable(gl.CULL_FACE);\r\n    }\r\n\r\n    resize (width: number, height: number, resolution: number = 1): void\r\n    {\r\n        const calcWidth = width * resolution;\r\n        const calcHeight = height * resolution;\r\n\r\n        this.width = calcWidth;\r\n        this.height = calcHeight;\r\n        this.resolution = resolution;\r\n\r\n        const canvas = this.canvas;\r\n\r\n        canvas.width = calcWidth;\r\n        canvas.height = calcHeight;\r\n\r\n        if (this.autoResize)\r\n        {\r\n            canvas.style.width = width.toString() + 'px';\r\n            canvas.style.height = height.toString() + 'px';\r\n        }\r\n\r\n        this.renderPass.resize(calcWidth, calcHeight);\r\n    }\r\n\r\n    onContextLost (event: Event): void\r\n    {\r\n        event.preventDefault();\r\n\r\n        this.contextLost = true;\r\n    }\r\n\r\n    onContextRestored (): void\r\n    {\r\n        this.contextLost = false;\r\n\r\n        this.initContext();\r\n    }\r\n\r\n    setBackgroundColor (color: number): this\r\n    {\r\n        GetRGBArray(color, this.clearColor);\r\n\r\n        return this;\r\n    }\r\n\r\n    //  TODO - Remove?\r\n    reset (): void\r\n    {\r\n        // this.renderPass.reset();\r\n    }\r\n\r\n    begin (willRedraw: boolean): IRenderPass\r\n    {\r\n        if (this.contextLost)\r\n        {\r\n            return;\r\n        }\r\n\r\n        const gl = this.gl;\r\n\r\n        //  This is only here because if we don't do _something_ with the context,\r\n        //  GL Spector can't see it!\r\n        gl.getContextAttributes();\r\n\r\n        ProcessBindingQueue();\r\n\r\n        //  Nothing dirty? Display the previous frame\r\n        if (this.optimizeRedraw && !willRedraw)\r\n        {\r\n            // return;\r\n        }\r\n\r\n        if (this.clearBeforeRender)\r\n        {\r\n            const cls = this.clearColor;\r\n\r\n            gl.clearColor(cls[0], cls[1], cls[2], cls[3]);\r\n            gl.clear(gl.COLOR_BUFFER_BIT);\r\n        }\r\n\r\n        return Start(this.renderPass);\r\n    }\r\n\r\n    end (): void\r\n    {\r\n        End(this.renderPass);\r\n\r\n        // eslint-disable-next-line no-debugger\r\n        // debugger;\r\n    }\r\n\r\n    destroy (): void\r\n    {\r\n        WebGLRendererInstance.set(undefined);\r\n    }\r\n}\r\n", "import { SetRenderer } from '../renderer/SetRenderer';\r\nimport { WebGLRenderer } from '../../renderer/webgl1/WebGLRenderer';\r\n\r\nexport function WebGL (): () => void\r\n{\r\n    return (): void =>\r\n    {\r\n        SetRenderer(WebGLRenderer);\r\n    };\r\n}\r\n", "import { CONFIG_DEFAULTS } from '../const';\r\nimport { ConfigStore } from '../ConfigStore';\r\n\r\nexport function SetWebGLContext (contextAttributes: WebGLContextAttributes): void\r\n{\r\n    ConfigStore.set(CONFIG_DEFAULTS.WEBGL_CONTEXT, contextAttributes);\r\n}\r\n", "import { CONFIG_DEFAULTS } from '../const';\r\nimport { ConfigStore } from '../ConfigStore';\r\n\r\nexport function SetWorldSize (size: number): void\r\n{\r\n    ConfigStore.set(CONFIG_DEFAULTS.WORLD_SIZE, size);\r\n}\r\n", "import { BoundsComponent } from './BoundsComponent';\r\nimport { GameObjectWorld } from '../../GameObjectWorld';\r\nimport { hasComponent } from 'bitecs';\r\n\r\nexport function BoundsIntersects (id: number, x: number, y: number, right: number, bottom: number): boolean\r\n{\r\n    if (hasComponent(GameObjectWorld, BoundsComponent, id))\r\n    {\r\n        const [ bx, by, br, bb ] = BoundsComponent.global[id];\r\n\r\n        return !(right < bx || bottom < by || x > br || y > bb);\r\n    }\r\n\r\n    //  No bounds component? Always return true then\r\n    return true;\r\n}\r\n", "import { DirtyComponent } from './DirtyComponent';\r\nimport { GameObjectWorld } from '../../GameObjectWorld';\r\nimport { addComponent } from 'bitecs';\r\n\r\nexport function AddDirtyComponent (id: number): void\r\n{\r\n    addComponent(GameObjectWorld, DirtyComponent, id);\r\n\r\n    DirtyComponent.transform[id] = 1;\r\n}\r\n", "import { DirtyComponent } from './DirtyComponent';\r\n\r\nexport function ClearDirtyChild (id: number): void\r\n{\r\n    DirtyComponent.child[id] = 0;\r\n}\r\n", "import { DirtyComponent } from './DirtyComponent';\r\n\r\nexport function ClearDirtyChildCache (id: number): void\r\n{\r\n    DirtyComponent.childCache[id] = 0;\r\n}\r\n", "import { DirtyComponent } from './DirtyComponent';\r\n\r\nexport function ClearDirtyDisplayList (id: number): void\r\n{\r\n    DirtyComponent.displayList[id] = 0;\r\n}\r\n", "import { DirtyComponent } from './DirtyComponent';\r\n\r\nexport function ClearDirtyTransform (id: number): void\r\n{\r\n    DirtyComponent.transform[id] = 0;\r\n}\r\n", "import { DirtyComponent } from './DirtyComponent';\r\n\r\nexport function HasDirtyChild (id: number): boolean\r\n{\r\n    return Boolean(DirtyComponent.child[id]);\r\n}\r\n", "import { DirtyComponent } from './DirtyComponent';\r\n\r\nexport function HasDirtyChildCache (id: number): boolean\r\n{\r\n    return Boolean(DirtyComponent.childCache[id]);\r\n}\r\n", "import { DirtyComponent } from './DirtyComponent';\r\n\r\nexport function HasDirtyDisplayList (id: number): boolean\r\n{\r\n    return Boolean(DirtyComponent.displayList[id]);\r\n}\r\n", "import { DirtyComponent } from './DirtyComponent';\r\n\r\nexport function HasDirtyTransform (id: number): boolean\r\n{\r\n    return Boolean(DirtyComponent.transform[id]);\r\n}\r\n", "import { DirtyComponent } from './DirtyComponent';\r\n\r\nexport function SetDirtyDisplayList (id: number): void\r\n{\r\n    DirtyComponent.displayList[id] = 1;\r\n}\r\n", "import { DirtyComponent } from './DirtyComponent';\r\nimport { HierarchyComponent } from '../hierarchy/HierarchyComponent';\r\n\r\nexport function SetDirtyWorldDisplayList (id: number): void\r\n{\r\n    const worldID = HierarchyComponent.worldID[id];\r\n\r\n    DirtyComponent.displayList[worldID] = 1;\r\n}\r\n", "import { GameObjectWorld } from '../../GameObjectWorld';\r\nimport { HierarchyComponent } from './HierarchyComponent';\r\nimport { addComponent } from 'bitecs';\r\n\r\nexport function AddHierarchyComponent (id: number): void\r\n{\r\n    addComponent(GameObjectWorld, HierarchyComponent, id);\r\n}\r\n", "import { IGameObject } from './IGameObject';\r\n\r\nexport const GameObjectCache: Map<number, IGameObject> = new Map();\r\n", "import { HierarchyComponent } from './HierarchyComponent';\r\n\r\nexport function GetWorldID (id: number): number\r\n{\r\n    return HierarchyComponent.worldID[id];\r\n}\r\n", "export const GameObjectTree: Map<number, number[]> = new Map();\r\n", "import { GameObjectTree } from '../../gameobjects/GameObjectTree';\r\nimport { HierarchyComponent } from './HierarchyComponent';\r\n\r\nexport function UpdateNumChildren (id: number): void\r\n{\r\n    HierarchyComponent.numChildren[id] = GameObjectTree.get(id).length;\r\n}\r\n", "import { hasComponent, removeComponent } from 'bitecs';\r\n\r\nimport { GameObjectCache } from '../../gameobjects/GameObjectCache';\r\nimport { GameObjectWorld } from '../../GameObjectWorld';\r\nimport { GetParentID } from './GetParentID';\r\nimport { GetWorldID } from './GetWorldID';\r\nimport { HierarchyComponent } from './HierarchyComponent';\r\nimport { IBaseWorld } from '../../world/IBaseWorld';\r\nimport { SetDirtyParents } from '../dirty/SetDirtyParents';\r\nimport { UpdateNumChildren } from './UpdateNumChildren';\r\n\r\nexport function ClearWorldAndParentID (id: number): void\r\n{\r\n    const worldID = GetWorldID(id);\r\n    const parentID = GetParentID(id);\r\n    const world = GameObjectCache.get(worldID) as IBaseWorld;\r\n\r\n    HierarchyComponent.worldID[id] = 0;\r\n    HierarchyComponent.parentID[id] = 0;\r\n\r\n    if (world && hasComponent(GameObjectWorld, world.tag, id))\r\n    {\r\n        removeComponent(GameObjectWorld, world.tag, id);\r\n    }\r\n\r\n    UpdateNumChildren(parentID);\r\n\r\n    SetDirtyParents(id);\r\n}\r\n", "import { GameObjectTree } from '../../gameobjects/GameObjectTree';\r\n\r\n//  Returns ALL children IDs based on the given Parent, to any depth\r\n\r\nexport function DepthFirstSearchFromParentID (parentID: number): number[]\r\n{\r\n    const stack: number[] = [ parentID ];\r\n    const output: number[] = [];\r\n\r\n    while (stack.length > 0)\r\n    {\r\n        const node = stack.shift();\r\n\r\n        output.push(node);\r\n\r\n        const nodeChildren = GameObjectTree.get(node);\r\n\r\n        const numChildren = nodeChildren.length;\r\n\r\n        if (numChildren > 0)\r\n        {\r\n            for (let i = numChildren - 1; i >= 0; i--)\r\n            {\r\n                stack.unshift(nodeChildren[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    //  Remove the parent from the results\r\n    output.shift();\r\n\r\n    return output;\r\n}\r\n", "import { GameObjectCache } from '../../gameobjects/GameObjectCache';\r\nimport { GameObjectTree } from '../../gameobjects/GameObjectTree';\r\nimport { IGameObject } from '../../gameobjects/IGameObject';\r\n\r\nexport function GetChildrenFromParentID (id: number): IGameObject[]\r\n{\r\n    const out: IGameObject[] = [];\r\n\r\n    GameObjectTree.get(id).forEach(childID =>\r\n    {\r\n        out.push(GameObjectCache.get(childID));\r\n    });\r\n\r\n    return out;\r\n}\r\n", "import { HierarchyComponent } from './HierarchyComponent';\r\n\r\nexport function GetNumChildren (id: number): number\r\n{\r\n    return HierarchyComponent.numChildren[id];\r\n}\r\n", "import { GameObjectCache } from '../../gameobjects/GameObjectCache';\r\nimport { HierarchyComponent } from './HierarchyComponent';\r\nimport { IGameObject } from '../../gameobjects/IGameObject';\r\n\r\nexport function GetParentGameObject (id: number): IGameObject\r\n{\r\n    return GameObjectCache.get(HierarchyComponent.parentID[id]);\r\n}\r\n", "import { GameObjectCache } from '../../gameobjects/GameObjectCache';\r\nimport { GetWorldID } from './GetWorldID';\r\nimport { IBaseWorld } from '../../world/IBaseWorld';\r\n\r\nexport function GetWorldFromParentID (parentID: number): IBaseWorld | undefined\r\n{\r\n    const worldID = GetWorldID(parentID);\r\n\r\n    return GameObjectCache.get(worldID) as IBaseWorld;\r\n}\r\n", "import { HierarchyComponent } from './HierarchyComponent';\r\n\r\nexport function SetIndex (id: number, index: number): void\r\n{\r\n    HierarchyComponent.index[id] = index;\r\n}\r\n", "import { HierarchyComponent } from './HierarchyComponent';\r\nimport { SetDirtyTransform } from '../dirty';\r\nimport { UpdateNumChildren } from './UpdateNumChildren';\r\n\r\nexport function SetParentID (childID: number, parentID: number): void\r\n{\r\n    HierarchyComponent.parentID[childID] = parentID;\r\n\r\n    SetDirtyTransform(childID);\r\n\r\n    UpdateNumChildren(parentID);\r\n}\r\n", "import { HierarchyComponent } from './HierarchyComponent';\r\n\r\nexport function SetWorldDepth (id: number, worldDepth: number): void\r\n{\r\n    HierarchyComponent.worldDepth[id] = worldDepth;\r\n}\r\n", "import { HierarchyComponent } from './HierarchyComponent';\r\n\r\nexport function SetWorldID (id: number, worldID: number): void\r\n{\r\n    HierarchyComponent.worldID[id] = worldID;\r\n}\r\n", "import { GameObjectTree } from '../../gameobjects/GameObjectTree';\r\nimport { SetIndex } from './SetIndex';\r\n\r\nexport function UpdateChildIndexes (parentID: number): void\r\n{\r\n    const children = GameObjectTree.get(parentID);\r\n\r\n    for (let i = 0; i < children.length; i++)\r\n    {\r\n        SetIndex(children[i], i);\r\n    }\r\n}\r\n", "import { GameObjectTree } from '../../gameobjects/GameObjectTree';\r\nimport { GetParentID } from './GetParentID';\r\nimport { SetIndex } from './SetIndex';\r\n\r\nexport function UpdateIndexes (id: number): void\r\n{\r\n    const parentID = GetParentID(id);\r\n\r\n    const children = GameObjectTree.get(parentID);\r\n\r\n    for (let i = 0; i < children.length; i++)\r\n    {\r\n        SetIndex(children[i], i);\r\n    }\r\n}\r\n", "import { GameObjectWorld } from '../../GameObjectWorld';\r\nimport { PermissionsComponent } from './PermissionsComponent';\r\nimport { addComponent } from 'bitecs';\r\n\r\nexport function AddPermissionsComponent (id: number): void\r\n{\r\n    addComponent(GameObjectWorld, PermissionsComponent, id);\r\n\r\n    PermissionsComponent.visible[id] = 1;\r\n    PermissionsComponent.visibleChildren[id] = 1;\r\n    PermissionsComponent.willUpdate[id] = 1;\r\n    PermissionsComponent.willUpdateChildren[id] = 1;\r\n    PermissionsComponent.willRender[id] = 1;\r\n    PermissionsComponent.willRenderChildren[id] = 1;\r\n    PermissionsComponent.willCacheChildren[id] = 0;\r\n    PermissionsComponent.willTransformChildren[id] = 1;\r\n    PermissionsComponent.willColorChildren[id] = 1;\r\n}\r\n", "import { IGameObject } from '../../gameobjects/IGameObject';\r\nimport { PermissionsComponent } from './PermissionsComponent';\r\n\r\nexport function SetWillCacheChildren (value: boolean, ...children: IGameObject[]): IGameObject[]\r\n{\r\n    children.forEach(child =>\r\n    {\r\n        PermissionsComponent.willCacheChildren[child.id] = Number(value);\r\n    });\r\n\r\n    return children;\r\n}\r\n", "import { PermissionsComponent } from './PermissionsComponent';\r\n\r\nexport function WillRender (id: number): boolean\r\n{\r\n    return Boolean(PermissionsComponent.visible[id]) && Boolean(PermissionsComponent.willRender[id]);\r\n}\r\n", "import { PermissionsComponent } from './PermissionsComponent';\r\n\r\nexport function WillRenderChildren (id: number): boolean\r\n{\r\n    return Boolean(PermissionsComponent.visibleChildren[id]) && Boolean(PermissionsComponent.willRenderChildren[id]);\r\n}\r\n", "import { PermissionsComponent } from './PermissionsComponent';\r\n\r\nexport function WillUpdate (id: number): boolean\r\n{\r\n    return Boolean(PermissionsComponent.willUpdate[id]);\r\n}\r\n", "import { PermissionsComponent } from './PermissionsComponent';\r\n\r\nexport function WillUpdateChildren (id: number): boolean\r\n{\r\n    return Boolean(PermissionsComponent.willUpdateChildren[id]);\r\n}\r\n", "import { Types, defineComponent } from 'bitecs';\r\n\r\nexport const Transform2DComponent = defineComponent({\r\n    x: Types.f32,\r\n    y: Types.f32,\r\n    rotation: Types.f32,\r\n    scaleX: Types.f32,\r\n    scaleY: Types.f32,\r\n    skewX: Types.f32,\r\n    skewY: Types.f32,\r\n    originX: Types.f32,\r\n    originY: Types.f32,\r\n    local: [ Types.f32, 6 ],\r\n    world: [ Types.f32, 6 ]\r\n});\r\n", "import { Extent2DComponent } from './Extent2DComponent';\r\nimport { GameObjectWorld } from '../../GameObjectWorld';\r\nimport { Transform2DComponent } from './Transform2DComponent';\r\nimport { addComponent } from 'bitecs';\r\n\r\n//  The 'local' and 'world' arrays are Matrix2Ds and contains\r\n//  six elements in a short-form of the 3x3 Matrix, with the last column ignored:\r\n\r\n//  |----|----|----|\r\n//  | a  | b  | 0  |\r\n//  |----|----|----|\r\n//  | c  | d  | 0  |\r\n//  |----|----|----|\r\n//  | tx | ty | 1  |\r\n//  |----|----|----|\r\n\r\n//  [0] = a - X scale\r\n//  [1] = b - X skew\r\n//  [2] = c - Y skew\r\n//  [3] = d - Y scale\r\n//  [4] = tx - X translation\r\n//  [5] = ty - Y translation\r\n\r\nexport function AddTransform2DComponent (id: number, x: number = 0, y: number = 0, originX: number = 0, originY: number = 0): void\r\n{\r\n    addComponent(GameObjectWorld, Transform2DComponent, id);\r\n    addComponent(GameObjectWorld, Extent2DComponent, id);\r\n\r\n    //  Component defaults to zero, so we only need to set the other values\r\n\r\n    Transform2DComponent.x[id] = x;\r\n    Transform2DComponent.y[id] = y;\r\n    Transform2DComponent.scaleX[id] = 1;\r\n    Transform2DComponent.scaleY[id] = 1;\r\n    Transform2DComponent.originX[id] = originX;\r\n    Transform2DComponent.originY[id] = originY;\r\n\r\n    Transform2DComponent.local[id].set([ 1, 0, 0, 1, x, y ]);\r\n    Transform2DComponent.world[id].set([ 1, 0, 0, 1, x, y ]);\r\n}\r\n", "import { Extent2DComponent } from './Extent2DComponent';\r\nimport { SetDirtyTransform } from '../dirty/SetDirtyTransform';\r\nimport { Transform2DComponent } from './Transform2DComponent';\r\n\r\nexport function UpdateExtent (id: number, width: number, height: number): void\r\n{\r\n    const x = -(Transform2DComponent.originX[id]) * width;\r\n    const y = -(Transform2DComponent.originY[id]) * height;\r\n\r\n    Extent2DComponent.x[id] = x;\r\n    Extent2DComponent.y[id] = y;\r\n    Extent2DComponent.width[id] = width;\r\n    Extent2DComponent.height[id] = height;\r\n    Extent2DComponent.right[id] = x + width;\r\n    Extent2DComponent.bottom[id] = y + height;\r\n\r\n    SetDirtyTransform(id);\r\n}\r\n", "import { Extent2DComponent } from './Extent2DComponent';\r\nimport { IVec2 } from '../../math/vec2/IVec2';\r\nimport { Transform2DComponent } from './Transform2DComponent';\r\nimport { UpdateExtent } from './UpdateExtent';\r\n\r\nexport class Origin implements IVec2\r\n{\r\n    private id: number;\r\n\r\n    constructor (id: number, x: number = 0, y: number = 0)\r\n    {\r\n        this.id = id;\r\n\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n\r\n    set (x: number, y: number = x): this\r\n    {\r\n        const id = this.id;\r\n\r\n        Transform2DComponent.originX[id] = x;\r\n        Transform2DComponent.originY[id] = y;\r\n\r\n        UpdateExtent(id, Extent2DComponent.width[id], Extent2DComponent.height[id]);\r\n\r\n        return this;\r\n    }\r\n\r\n    set x (value: number)\r\n    {\r\n        const id = this.id;\r\n\r\n        Transform2DComponent.originX[id] = value;\r\n\r\n        UpdateExtent(id, Extent2DComponent.width[id], Extent2DComponent.height[id]);\r\n    }\r\n\r\n    get x (): number\r\n    {\r\n        return Transform2DComponent.originX[this.id];\r\n    }\r\n\r\n    set y (value: number)\r\n    {\r\n        const id = this.id;\r\n\r\n        Transform2DComponent.originY[id] = value;\r\n\r\n        UpdateExtent(id, Extent2DComponent.width[id], Extent2DComponent.height[id]);\r\n    }\r\n\r\n    get y (): number\r\n    {\r\n        return Transform2DComponent.originY[this.id];\r\n    }\r\n}\r\n", "import { IVec2 } from '../../math/vec2/IVec2';\r\nimport { SetDirtyTransform } from '../dirty';\r\nimport { Transform2DComponent } from './Transform2DComponent';\r\n\r\nexport class Position implements IVec2\r\n{\r\n    private id: number;\r\n\r\n    constructor (id: number, x: number = 0, y: number = 0)\r\n    {\r\n        this.id = id;\r\n\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n\r\n    set (x: number, y: number = x): this\r\n    {\r\n        this.x = x;\r\n        this.y = y;\r\n\r\n        return this;\r\n    }\r\n\r\n    set x (value: number)\r\n    {\r\n        Transform2DComponent.x[this.id] = value;\r\n        SetDirtyTransform(this.id);\r\n    }\r\n\r\n    get x (): number\r\n    {\r\n        return Transform2DComponent.x[this.id];\r\n    }\r\n\r\n    set y (value: number)\r\n    {\r\n        Transform2DComponent.y[this.id] = value;\r\n        SetDirtyTransform(this.id);\r\n    }\r\n\r\n    get y (): number\r\n    {\r\n        return Transform2DComponent.y[this.id];\r\n    }\r\n}\r\n", "import { IVec2 } from '../../math/vec2/IVec2';\r\nimport { SetDirtyTransform } from '../dirty';\r\nimport { Transform2DComponent } from './Transform2DComponent';\r\n\r\nexport class Scale implements IVec2\r\n{\r\n    private id: number;\r\n\r\n    constructor (id: number, x: number = 1, y: number = 1)\r\n    {\r\n        this.id = id;\r\n\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n\r\n    set (x: number, y: number = x): this\r\n    {\r\n        this.x = x;\r\n        this.y = y;\r\n\r\n        return this;\r\n    }\r\n\r\n    set x (value: number)\r\n    {\r\n        Transform2DComponent.scaleX[this.id] = value;\r\n        SetDirtyTransform(this.id);\r\n    }\r\n\r\n    get x (): number\r\n    {\r\n        return Transform2DComponent.scaleX[this.id];\r\n    }\r\n\r\n    set y (value: number)\r\n    {\r\n        Transform2DComponent.scaleY[this.id] = value;\r\n        SetDirtyTransform(this.id);\r\n    }\r\n\r\n    get y (): number\r\n    {\r\n        return Transform2DComponent.scaleY[this.id];\r\n    }\r\n}\r\n", "import { Extent2DComponent } from './Extent2DComponent';\r\nimport { IVec2 } from '../../math/vec2/IVec2';\r\nimport { UpdateExtent } from './UpdateExtent';\r\n\r\nexport class Size implements IVec2\r\n{\r\n    private id: number;\r\n\r\n    constructor (id: number, width: number = 0, height: number = 0)\r\n    {\r\n        this.id = id;\r\n\r\n        this.set(width, height);\r\n    }\r\n\r\n    set (width: number, height: number = width): this\r\n    {\r\n        this.width = width;\r\n        this.height = height;\r\n\r\n        return this;\r\n    }\r\n\r\n    set width (value: number)\r\n    {\r\n        UpdateExtent(this.id, value, this.height);\r\n    }\r\n\r\n    get width (): number\r\n    {\r\n        return Extent2DComponent.width[this.id];\r\n    }\r\n\r\n    set height (value: number)\r\n    {\r\n        UpdateExtent(this.id, this.width, value);\r\n    }\r\n\r\n    get height (): number\r\n    {\r\n        return Extent2DComponent.height[this.id];\r\n    }\r\n\r\n    set x (value: number)\r\n    {\r\n        this.width = value;\r\n    }\r\n\r\n    get x (): number\r\n    {\r\n        return this.width;\r\n    }\r\n\r\n    set y (value: number)\r\n    {\r\n        this.height = value;\r\n    }\r\n\r\n    get y (): number\r\n    {\r\n        return this.height;\r\n    }\r\n}\r\n", "import { IVec2 } from '../../math/vec2/IVec2';\r\nimport { SetDirtyTransform } from '../dirty';\r\nimport { Transform2DComponent } from './Transform2DComponent';\r\n\r\nexport class Skew implements IVec2\r\n{\r\n    private id: number;\r\n\r\n    constructor (id: number, x: number = 0, y: number = 0)\r\n    {\r\n        this.id = id;\r\n\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n\r\n    set (x: number, y: number = x): this\r\n    {\r\n        this.x = x;\r\n        this.y = y;\r\n\r\n        return this;\r\n    }\r\n\r\n    set x (value: number)\r\n    {\r\n        Transform2DComponent.skewX[this.id] = value;\r\n        SetDirtyTransform(this.id);\r\n    }\r\n\r\n    get x (): number\r\n    {\r\n        return Transform2DComponent.skewX[this.id];\r\n    }\r\n\r\n    set y (value: number)\r\n    {\r\n        Transform2DComponent.skewY[this.id] = value;\r\n        SetDirtyTransform(this.id);\r\n    }\r\n\r\n    get y (): number\r\n    {\r\n        return Transform2DComponent.skewY[this.id];\r\n    }\r\n}\r\n", "import { QuadVertexComponent } from './QuadVertexComponent';\r\n\r\nexport function SetQuadPosition (id: number, x0: number, y0: number, x1: number, y1: number, x2: number, y2: number, x3: number, y3: number): void\r\n{\r\n    const data = QuadVertexComponent.values[id];\r\n\r\n    data[0] = x0;\r\n    data[1] = y0;\r\n\r\n    data[9] = x1;\r\n    data[10] = y1;\r\n\r\n    data[18] = x2;\r\n    data[19] = y2;\r\n\r\n    data[27] = x0;\r\n    data[28] = y0;\r\n\r\n    data[36] = x2;\r\n    data[37] = y2;\r\n\r\n    data[45] = x3;\r\n    data[46] = y3;\r\n}\r\n", "import { Transform2DComponent } from './Transform2DComponent';\r\n\r\nexport function CopyLocalToWorld (source: number, target: number): void\r\n{\r\n    Transform2DComponent.world[target].set(Transform2DComponent.local[source]);\r\n}\r\n", "import { Transform2DComponent } from './Transform2DComponent';\r\n\r\nexport function CopyWorldToWorld (source: number, target: number): void\r\n{\r\n    Transform2DComponent.world[target].set(Transform2DComponent.world[source]);\r\n}\r\n", "import { SetDirtyTransform } from '../dirty';\r\nimport { Transform2DComponent } from './Transform2DComponent';\r\n\r\nexport function MultiplyLocalWithWorld (parentID: number, childID: number): void\r\n{\r\n    const world = Transform2DComponent.world[childID];\r\n    const local = Transform2DComponent.local[childID];\r\n\r\n    const [ pa, pb, pc, pd, ptx, pty ] = Transform2DComponent.world[parentID];\r\n    const [ a, b, c, d, tx, ty ] = local;\r\n\r\n    world[0] = a * pa + b * pc;\r\n    world[1] = a * pb + b * pd;\r\n    world[2] = c * pa + d * pc;\r\n    world[3] = c * pb + d * pd;\r\n    world[4] = tx * pa + ty * pc + ptx;\r\n    world[5] = tx * pb + ty * pd + pty;\r\n\r\n    SetDirtyTransform(childID);\r\n}\r\n", "import { CopyLocalToWorld } from './CopyLocalToWorld';\r\nimport { CopyWorldToWorld } from './CopyWorldToWorld';\r\nimport { GameObjectWorld } from '../../GameObjectWorld';\r\nimport { GetParentID } from '../hierarchy/GetParentID';\r\nimport { MultiplyLocalWithWorld } from './MultiplyLocalWithWorld';\r\nimport { Transform2DComponent } from './Transform2DComponent';\r\nimport { WillTransformChildren } from '../permissions/WillTransformChildren';\r\nimport { hasComponent } from 'bitecs';\r\n\r\nexport function UpdateWorldTransform (id: number): void\r\n{\r\n    const parentID = GetParentID(id);\r\n\r\n    if (!hasComponent(GameObjectWorld, Transform2DComponent, parentID))\r\n    {\r\n        CopyLocalToWorld(id, id);\r\n    }\r\n    else if (!WillTransformChildren(id))\r\n    {\r\n        CopyWorldToWorld(parentID, id);\r\n    }\r\n    else\r\n    {\r\n        MultiplyLocalWithWorld(parentID, id);\r\n    }\r\n}\r\n", "import { Game } from './Game';\r\n\r\nexport let instance: Game;\r\nexport let frame: number = 0;\r\nexport let elapsed: number = 0;\r\n\r\nexport const GameInstance =\r\n{\r\n    get: (): Game =>\r\n    {\r\n        return instance;\r\n    },\r\n\r\n    set: (game: Game | undefined): void =>\r\n    {\r\n        instance = game;\r\n    },\r\n\r\n    getFrame: (): number =>\r\n    {\r\n        return frame;\r\n    },\r\n\r\n    setFrame: (current: number): void =>\r\n    {\r\n        frame = current;\r\n    },\r\n\r\n    getElapsed: (): number =>\r\n    {\r\n        return elapsed;\r\n    },\r\n\r\n    setElapsed: (current: number): void =>\r\n    {\r\n        elapsed = current;\r\n    }\r\n\r\n};\r\n", "import { IBaseWorld } from '../IBaseWorld';\r\n\r\nexport const WorldAfterUpdateEvent: string = 'afterupdate';\r\n\r\nexport type WorldAfterUpdateEventHandler = <T extends IBaseWorld> (delta: number, time: number, world: T) => void;\r\n", "import { IBaseWorld } from '../IBaseWorld';\r\n\r\nexport const WorldBeforeUpdateEvent: string = 'beforeupdate';\r\n\r\nexport type WorldBeforeUpdateEventHandler = <T extends IBaseWorld> (delta: number, time: number, world: T) => void;\r\n", "import { IBaseWorld } from '../IBaseWorld';\r\nimport { IRenderPass } from '../../renderer/webgl1/renderpass/IRenderPass';\r\n\r\nexport const WorldPostRenderEvent: string = 'worldpostrender';\r\n\r\nexport type WorldPostRenderEventHandler = (renderPass: IRenderPass, world: IBaseWorld) => void;\r\n", "import { IBaseWorld } from '../IBaseWorld';\r\nimport { IWorldRenderData } from '../IWorldRenderData';\r\n\r\nexport const WorldRenderEvent: string = 'worldrender';\r\n\r\nexport type WorldRenderEventHandler = (renderData: IWorldRenderData, world: IBaseWorld) => void;\r\n", "import { IBaseWorld } from '../IBaseWorld';\r\n\r\nexport const WorldShutdownEvent: string = 'worldshutdown';\r\n\r\nexport type WorldShutdownEventHandler = (world: IBaseWorld) => void;\r\n", "import { IBaseWorld } from '../IBaseWorld';\r\n\r\nexport const WorldUpdateEvent: string = 'update';\r\n\r\nexport type WorldUpdateEventHandler = <T extends IBaseWorld> (delta: number, time: number, world: T) => void;\r\n", "import { Types, defineComponent } from 'bitecs';\r\n\r\nconst RenderData = defineComponent({\r\n    gameFrame: Types.ui32,\r\n    dirtyLocal: Types.ui32,\r\n    dirtyVertices: Types.ui32,\r\n    numChildren: Types.ui32,\r\n    numRendered: Types.ui32,\r\n    numRenderable: Types.ui32,\r\n    rebuiltList: Types.ui8,\r\n    rebuiltWorld: Types.ui8\r\n});\r\n\r\nexport const RenderDataComponent = RenderData;\r\n", "import { GameObjectWorld } from '../GameObjectWorld';\r\nimport { RenderDataComponent } from './RenderDataComponent';\r\nimport { addComponent } from 'bitecs';\r\n\r\nexport function AddRenderDataComponent (id: number): void\r\n{\r\n    addComponent(GameObjectWorld, RenderDataComponent, id);\r\n}\r\n", "import { CONFIG_DEFAULTS } from '../const';\r\nimport { ConfigStore } from '../ConfigStore';\r\n\r\nexport function GetWorldSize (): number\r\n{\r\n    return ConfigStore.get(CONFIG_DEFAULTS.WORLD_SIZE);\r\n}\r\n", "import { GetWorldSize } from '../config/worldsize/GetWorldSize';\r\nimport { IBaseWorld } from './IBaseWorld';\r\n\r\n//  Called by RebuildWorldList as it sweeps the world children, looking to see what will render or not\r\n\r\n//  renderType:\r\n\r\n//  0 = render\r\n//  1 = postRender\r\n//  2 = render + immediate postRender\r\nexport function AddToRenderList (world: IBaseWorld, id: number, renderType: number): void\r\n{\r\n    let len: number = world.listLength;\r\n    const list = world.renderList;\r\n\r\n    if (len > 0)\r\n    {\r\n        //  Get the previous entity in the list, if this is the same one\r\n        //  we can merge it into a renderType 2.\r\n        //  This cuts down on the list size and iterations.\r\n\r\n        const prevEntity = list[len - 1];\r\n        const prevType = list[len];\r\n\r\n        if (prevEntity === id && prevType === 0 && renderType === 1)\r\n        {\r\n            //  Update the previous entry to use renderType 2\r\n            list[len - 1] = 2;\r\n\r\n            //  We didn't change the list size, so we can just return\r\n            return;\r\n        }\r\n    }\r\n\r\n    list[len] = id;\r\n    list[len + 1] = renderType;\r\n\r\n    world.listLength += 2;\r\n\r\n    len += 2;\r\n\r\n    if (len === list.length)\r\n    {\r\n        //  Resize the render list\r\n        const newList = new Uint32Array(len + (GetWorldSize() * 4));\r\n\r\n        newList.set(list, 0);\r\n\r\n        world.renderList = newList;\r\n    }\r\n}\r\n", "import { AddColorComponent } from './AddColorComponent';\r\nimport { ColorComponent } from './ColorComponent';\r\nimport { PermissionsComponent } from '../permissions/PermissionsComponent';\r\n\r\n//  red, green, blue in the range 0-255\r\n//  alpha in the range 0-1\r\n//  colorMatrix Float32Array of length 16, values are 0 to 1\r\n//  colorOffset Float32Array of length 4, values are integer\r\n\r\nexport class Color\r\n{\r\n    private id: number;\r\n\r\n    colorMatrixEnabled: boolean = false;\r\n\r\n    constructor (id: number, red: number = 255, green: number = 255, blue: number = 255, alpha: number = 1)\r\n    {\r\n        AddColorComponent(id);\r\n\r\n        this.id = id;\r\n\r\n        this.set(red, green, blue, alpha);\r\n    }\r\n\r\n    set (red: number, green: number, blue: number, alpha: number): void\r\n    {\r\n        this.red = red;\r\n        this.green = green;\r\n        this.blue = blue;\r\n        this.alpha = alpha;\r\n    }\r\n\r\n    //  In the range 0x000000 to 0xffffff (alpha is ignored)\r\n    set tint (value: number)\r\n    {\r\n        this.red = (value >> 16) & 0xff;\r\n        this.green = (value >> 8) & 0xff;\r\n        this.blue = value & 0xff;\r\n    }\r\n\r\n    get tint (): number\r\n    {\r\n        return this.red << 16 | this.green << 8 | this.blue;\r\n    }\r\n\r\n    set willColorChildren (value: boolean)\r\n    {\r\n        PermissionsComponent.willColorChildren[this.id] = Number(value);\r\n    }\r\n\r\n    get willColorChildren (): boolean\r\n    {\r\n        return Boolean(PermissionsComponent.willColorChildren[this.id]);\r\n    }\r\n\r\n    //  16 element array (4x4)\r\n    set colorMatrix (value: Float32List)\r\n    {\r\n        ColorComponent.colorMatrix[this.id].set(value);\r\n\r\n        this.colorMatrixEnabled = true;\r\n    }\r\n\r\n    get colorMatrix (): Float32Array\r\n    {\r\n        return ColorComponent.colorMatrix[this.id];\r\n    }\r\n\r\n    //  4 element array (vec4)\r\n    set colorOffset (value: Float32List)\r\n    {\r\n        ColorComponent.colorOffset[this.id].set(value);\r\n    }\r\n\r\n    get colorOffset (): Float32Array\r\n    {\r\n        return ColorComponent.colorOffset[this.id];\r\n    }\r\n\r\n    //  All in the range 0-255 or 0x00-0xFF\r\n    set red (value: number)\r\n    {\r\n        ColorComponent.r[this.id] = value;\r\n    }\r\n\r\n    get red (): number\r\n    {\r\n        return ColorComponent.r[this.id];\r\n    }\r\n\r\n    set green (value: number)\r\n    {\r\n        ColorComponent.g[this.id] = value;\r\n    }\r\n\r\n    get green (): number\r\n    {\r\n        return ColorComponent.g[this.id];\r\n    }\r\n\r\n    set blue (value: number)\r\n    {\r\n        ColorComponent.b[this.id] = value;\r\n    }\r\n\r\n    get blue (): number\r\n    {\r\n        return ColorComponent.b[this.id];\r\n    }\r\n\r\n    set alpha (value: number)\r\n    {\r\n        ColorComponent.a[this.id] = value;\r\n    }\r\n\r\n    get alpha (): number\r\n    {\r\n        return ColorComponent.a[this.id];\r\n    }\r\n}\r\n", "import { IEventEmitter } from './IEventEmitter';\r\nimport { IEventInstance } from './IEventInstance';\r\n\r\nexport function Emit (emitter: IEventEmitter, event: string, ...args: unknown[]): boolean\r\n{\r\n    if (emitter.events.size === 0 || !emitter.events.has(event))\r\n    {\r\n        return false;\r\n    }\r\n\r\n    const listeners: Set<IEventInstance> = emitter.events.get(event);\r\n\r\n    //  Convert to an array so the callbacks cannot impact what we're iterating\r\n    //  It works, but generates gc\r\n    const handlers = [ ...listeners ];\r\n\r\n    for (const ee of handlers)\r\n    {\r\n        ee.callback.apply(ee.context, args);\r\n\r\n        if (ee.once)\r\n        {\r\n            listeners.delete(ee);\r\n        }\r\n    }\r\n\r\n    if (listeners.size === 0)\r\n    {\r\n        emitter.events.delete(event);\r\n    }\r\n\r\n    return true;\r\n}\r\n", "import { ClearWorldAndParentID } from '../components/hierarchy/ClearWorldAndParentID';\r\nimport { GameObjectCache } from '../gameobjects/GameObjectCache';\r\nimport { GameObjectTree } from '../gameobjects/GameObjectTree';\r\nimport { IGameObject } from '../gameobjects/IGameObject';\r\nimport { UpdateChildIndexes } from '../components/hierarchy/UpdateChildIndexes';\r\n\r\nexport function RemoveChildrenBetween <P extends IGameObject> (parent: P, beginIndex: number = 0, endIndex?: number): IGameObject[]\r\n{\r\n    const parentID = parent.id;\r\n\r\n    const children = GameObjectTree.get(parentID);\r\n\r\n    if (endIndex === undefined)\r\n    {\r\n        endIndex = children.length;\r\n    }\r\n\r\n    const range = endIndex - beginIndex;\r\n\r\n    if (range > 0 && range <= endIndex)\r\n    {\r\n        const removed = children.splice(beginIndex, range);\r\n\r\n        removed.forEach(childID =>\r\n        {\r\n            ClearWorldAndParentID(childID);\r\n        });\r\n\r\n        UpdateChildIndexes(parentID);\r\n\r\n        return removed.map(id => GameObjectCache.get(id));\r\n    }\r\n    else\r\n    {\r\n        return [];\r\n    }\r\n}\r\n", "import { IGameObject } from '../gameobjects/IGameObject';\r\nimport { RemoveChildrenBetween } from './RemoveChildrenBetween';\r\nimport { SetDirtyWorldDisplayList } from '../components/dirty/SetDirtyWorldDisplayList';\r\nimport { UpdateChildIndexes } from '../components/hierarchy/UpdateChildIndexes';\r\n\r\nexport function DestroyChildren <T extends IGameObject> (parent: T, beginIndex: number = 0, endIndex?: number): void\r\n{\r\n    const removed = RemoveChildrenBetween(parent, beginIndex, endIndex);\r\n\r\n    removed.forEach(child =>\r\n    {\r\n        child.destroy();\r\n    });\r\n\r\n    UpdateChildIndexes(parent.id);\r\n\r\n    SetDirtyWorldDisplayList(parent.id);\r\n}\r\n", "import { IGameObject } from '../IGameObject';\r\n\r\nexport const DestroyEvent: string = 'destroy';\r\n\r\nexport type DestroyEventHandler = <T extends IGameObject> (child: T) => void;\r\n", "import { PermissionsComponent } from './PermissionsComponent';\r\n\r\nexport function GetVisible (id: number): boolean\r\n{\r\n    return Boolean(PermissionsComponent.visible[id]);\r\n}\r\n", "import { PermissionsComponent } from './PermissionsComponent';\r\n\r\nexport function GetVisibleChildren (id: number): boolean\r\n{\r\n    return Boolean(PermissionsComponent.visibleChildren[id]);\r\n}\r\n", "import { GetParentID } from '../components/hierarchy/GetParentID';\r\nimport { IGameObject } from '../gameobjects/IGameObject';\r\n\r\nexport function IsValidParent <P extends IGameObject, C extends IGameObject> (parent: P, child: C): boolean\r\n{\r\n    //  It's not a valid parent if the ID matches the parent, or it's already the child's parent\r\n    return !(child.id === parent.id || parent.id === GetParentID(child.id));\r\n}\r\n", "import { HierarchyComponent } from '../components/hierarchy/HierarchyComponent';\r\nimport { IGameObject } from '../gameobjects/IGameObject';\r\n\r\nexport function GetChildIndex <T extends IGameObject> (child: T): number\r\n{\r\n    return HierarchyComponent.index[child.id];\r\n}\r\n", "import { ClearWorldAndParentID } from '../components/hierarchy/ClearWorldAndParentID';\r\nimport { GameObjectCache } from '../gameobjects/GameObjectCache';\r\nimport { GameObjectTree } from '../gameobjects/GameObjectTree';\r\nimport { IGameObject } from '../gameobjects/IGameObject';\r\nimport { UpdateChildIndexes } from '../components/hierarchy/UpdateChildIndexes';\r\n\r\nexport function RemoveChildAt <T extends IGameObject> (parent: T, index: number): IGameObject | undefined\r\n{\r\n    const parentID = parent.id;\r\n\r\n    const children = GameObjectTree.get(parentID);\r\n\r\n    if (index >= 0 && index < children.length)\r\n    {\r\n        const removedID = children.splice(index, 1)[0];\r\n\r\n        if (removedID)\r\n        {\r\n            ClearWorldAndParentID(removedID);\r\n\r\n            UpdateChildIndexes(parentID);\r\n\r\n            //  Emit remove event?\r\n\r\n            return GameObjectCache.get(removedID);\r\n        }\r\n    }\r\n}\r\n", "import { GetChildIndex } from './GetChildIndex';\r\nimport { IGameObject } from '../gameobjects/IGameObject';\r\nimport { RemoveChildAt } from './RemoveChildAt';\r\n\r\nexport function RemoveChild <P extends IGameObject, C extends IGameObject> (parent: P, child: C): C\r\n{\r\n    if (parent && child.hasParent(parent.id))\r\n    {\r\n        RemoveChildAt(parent, GetChildIndex(child));\r\n    }\r\n\r\n    return child;\r\n}\r\n", "import { AddedToWorldEvent } from '../gameobjects/events/AddedToWorldEvent';\r\nimport { DepthFirstSearchFromParentID } from '../components/hierarchy/DepthFirstSearchFromParentID';\r\nimport { Emit } from '../events/Emit';\r\nimport { GameObjectWorld } from '../GameObjectWorld';\r\nimport { HierarchyComponent } from '../components/hierarchy/HierarchyComponent';\r\nimport { IBaseWorld } from '../world/IBaseWorld';\r\nimport { IGameObject } from '../gameobjects/IGameObject';\r\nimport { RemovedFromWorldEvent } from '../gameobjects/events/RemovedFromWorldEvent';\r\nimport { SetDirtyDisplayList } from '../components/dirty/SetDirtyDisplayList';\r\nimport { addComponent } from 'bitecs';\r\n\r\nexport function SetWorld <W extends IBaseWorld> (world: W, ...entries: IGameObject[]): IGameObject[]\r\n{\r\n    const worldID = world.id;\r\n    const worldTag = world.tag;\r\n\r\n    entries.forEach(entry =>\r\n    {\r\n        // if (entry.world)\r\n        // {\r\n        //     Emit(entry.world, RemovedFromWorldEvent, entry, entry.world);\r\n        //     Emit(entry, RemovedFromWorldEvent, entry, entry.world);\r\n        // }\r\n\r\n        addComponent(GameObjectWorld, worldTag, entry.id);\r\n\r\n        HierarchyComponent.worldID[entry.id] = worldID;\r\n\r\n        // Emit(world, AddedToWorldEvent, entry, world);\r\n        // Emit(entry, AddedToWorldEvent, entry, world);\r\n\r\n        //  Now set the World on any children\r\n        const children = DepthFirstSearchFromParentID(entry.id);\r\n\r\n        children.map(id =>\r\n        {\r\n            addComponent(GameObjectWorld, worldTag, id);\r\n\r\n            HierarchyComponent.worldID[id] = worldID;\r\n        });\r\n    });\r\n\r\n    SetDirtyDisplayList(worldID);\r\n\r\n    return entries;\r\n}\r\n", "import { GameObjectTree } from '../gameobjects/GameObjectTree';\r\nimport { GetWorldFromParentID } from '../components/hierarchy/GetWorldFromParentID';\r\nimport { IGameObject } from '../gameobjects/IGameObject';\r\nimport { IsValidParent } from './IsValidParent';\r\nimport { RemoveChild } from './RemoveChild';\r\nimport { SetDirtyParents } from '../components/dirty/SetDirtyParents';\r\nimport { SetParentID } from '../components/hierarchy/SetParentID';\r\nimport { SetWorld } from './SetWorld';\r\nimport { UpdateIndexes } from '../components/hierarchy/UpdateIndexes';\r\n\r\nexport function AddChildAt <P extends IGameObject, C extends IGameObject> (parent: P, child: C, index: number = -1): C\r\n{\r\n    if (IsValidParent(parent, child))\r\n    {\r\n        const childID = child.id;\r\n        const parentID = parent.id;\r\n        const world = GetWorldFromParentID(parentID);\r\n\r\n        const children = GameObjectTree.get(parentID);\r\n\r\n        if (index === -1)\r\n        {\r\n            index = children.length;\r\n        }\r\n\r\n        if (index >= 0 && index <= children.length)\r\n        {\r\n            RemoveChild(child.getParent(), child);\r\n\r\n            //  Always modify the array before calling SetParentID\r\n            children.splice(index, 0, childID);\r\n\r\n            if (world)\r\n            {\r\n                SetWorld(world, child);\r\n            }\r\n\r\n            SetParentID(childID, parentID);\r\n\r\n            UpdateIndexes(childID);\r\n\r\n            SetDirtyParents(childID);\r\n        }\r\n    }\r\n\r\n    return child;\r\n}\r\n", "import { AddChildAt } from './AddChildAt';\r\nimport { IGameObject } from '../gameobjects/IGameObject';\r\n\r\n//  Adds all of the children to the given parent\r\n//  If already a child of the parent, it is skipped\r\n//  If already child of another parent, it is removed from it first\r\n\r\nexport function SetParent <P extends IGameObject> (parent: P, ...children: IGameObject[]): IGameObject[]\r\n{\r\n    children.forEach(child =>\r\n    {\r\n        AddChildAt(parent, child);\r\n    });\r\n\r\n    return children;\r\n}\r\n", "import { IGameObject } from '../gameobjects/IGameObject';\r\nimport { RemoveChildrenBetween } from './RemoveChildrenBetween';\r\nimport { SetParent } from './SetParent';\r\n\r\nexport function ReparentChildren <P extends IGameObject, T extends IGameObject> (parent: P, newParent: T, beginIndex: number = 0, endIndex?: number): IGameObject[]\r\n{\r\n    const moved = RemoveChildrenBetween(parent, beginIndex, endIndex);\r\n\r\n    SetParent(newParent, ...moved);\r\n\r\n    return moved;\r\n}\r\n", "import { GetWorldID } from '../hierarchy/GetWorldID';\r\nimport { PermissionsComponent } from './PermissionsComponent';\r\nimport { SetDirtyDisplayList } from '../dirty/SetDirtyDisplayList';\r\nimport { SetDirtyParents } from '../dirty/SetDirtyParents';\r\n\r\nexport function SetVisible (value: boolean, id: number): void\r\n{\r\n    PermissionsComponent.visible[id] = Number(value);\r\n\r\n    SetDirtyParents(id);\r\n    SetDirtyDisplayList(GetWorldID(id));\r\n}\r\n", "import { GetWorldID } from '../hierarchy/GetWorldID';\r\nimport { PermissionsComponent } from './PermissionsComponent';\r\nimport { SetDirtyDisplayList } from '../dirty/SetDirtyDisplayList';\r\nimport { SetDirtyParents } from '../dirty/SetDirtyParents';\r\n\r\nexport function SetVisibleChildren (value: boolean, id: number): void\r\n{\r\n    PermissionsComponent.visibleChildren[id] = Number(value);\r\n\r\n    SetDirtyParents(id);\r\n    SetDirtyDisplayList(GetWorldID(id));\r\n}\r\n", "import { AddDirtyComponent } from '../components/dirty/AddDirtyComponent';\r\nimport { AddHierarchyComponent } from '../components/hierarchy/AddHierarchyComponent';\r\nimport { AddPermissionsComponent } from '../components/permissions/AddPermissionsComponent';\r\nimport { DestroyChildren } from '../display/DestroyChildren';\r\nimport { DestroyEvent } from './events/DestroyEvent';\r\nimport { Emit } from '../events/Emit';\r\nimport { GameObjectCache } from './GameObjectCache';\r\nimport { GameObjectTree } from './GameObjectTree';\r\nimport { GameObjectWorld } from '../GameObjectWorld';\r\nimport { GetChildrenFromParentID } from '../components/hierarchy/GetChildrenFromParentID';\r\nimport { GetNumChildren } from '../components/hierarchy/GetNumChildren';\r\nimport { GetParentGameObject } from '../components/hierarchy/GetParentGameObject';\r\nimport { GetVisible } from '../components/permissions/GetVisible';\r\nimport { GetVisibleChildren } from '../components/permissions/GetVisibleChildren';\r\nimport { HierarchyComponent } from '../components/hierarchy/HierarchyComponent';\r\nimport { ICanvasRenderer } from '../renderer/canvas/ICanvasRenderer';\r\nimport { IEventInstance } from '../events/IEventInstance';\r\nimport { IGameObject } from './IGameObject';\r\nimport { IRenderPass } from '../renderer/webgl1/renderpass/IRenderPass';\r\nimport { ReparentChildren } from '../display/ReparentChildren';\r\nimport { SetVisible } from '../components/permissions/SetVisible';\r\nimport { SetVisibleChildren } from '../components/permissions/SetVisibleChildren';\r\nimport { WillRender } from '../components/permissions/WillRender';\r\nimport { WillUpdate } from '../components/permissions/WillUpdate';\r\nimport { WillUpdateChildren } from '../components/permissions/WillUpdateChildren';\r\nimport { addEntity } from 'bitecs';\r\n\r\nexport class GameObject implements IGameObject\r\n{\r\n    readonly id: number = addEntity(GameObjectWorld);\r\n\r\n    readonly type: string = 'GameObject';\r\n\r\n    //  User defined name. Never used internally.\r\n    name: string = '';\r\n\r\n    events: Map<string, Set<IEventInstance>>;\r\n\r\n    constructor ()\r\n    {\r\n        const id = this.id;\r\n\r\n        AddHierarchyComponent(id);\r\n        AddPermissionsComponent(id);\r\n        AddDirtyComponent(id);\r\n\r\n        GameObjectCache.set(id, this);\r\n        GameObjectTree.set(id, []);\r\n\r\n        this.events = new Map();\r\n    }\r\n\r\n    isRenderable (): boolean\r\n    {\r\n        return WillRender(this.id);\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    beforeUpdate (delta: number, time: number): void\r\n    {\r\n        //  Empty for parent classes to use.\r\n        //  Called before this GameObject and all of its children have been updated.\r\n    }\r\n\r\n    update (delta: number, time: number): void\r\n    {\r\n        this.beforeUpdate(delta, time);\r\n\r\n        if (WillUpdateChildren(this.id))\r\n        {\r\n            const children = GameObjectTree.get(this.id);\r\n\r\n            for (let i = 0; i < children.length; i++)\r\n            {\r\n                const childID = children[i];\r\n\r\n                if (WillUpdate(childID))\r\n                {\r\n                    GameObjectCache.get(childID).update(delta, time);\r\n                }\r\n            }\r\n        }\r\n\r\n        this.afterUpdate(delta, time);\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    afterUpdate (delta: number, time: number): void\r\n    {\r\n        //  Empty for parent classes to use.\r\n        //  Called after this GameObject and all of its children have been updated.\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    preRenderGL <T extends IRenderPass> (renderPass: T): void\r\n    {\r\n        //  Called before this GameObject and all of its children have been rendered.\r\n        //  If this Game Object won't render, this method is never called.\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    renderGL <T extends IRenderPass> (renderPass: T): void\r\n    {\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    renderCanvas <T extends ICanvasRenderer> (renderer: T): void\r\n    {\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    postRenderGL <T extends IRenderPass> (renderPass: T): void\r\n    {\r\n        //  Called after this GameObject and all of its children have been rendered.\r\n        //  If this Game Object won't render, this method is never called.\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    postRenderCanvas <T extends ICanvasRenderer> (renderer: T): void\r\n    {\r\n        //  Called after this GameObject and all of its children have been rendered.\r\n        //  If this Game Object won't render, this method is never called.\r\n    }\r\n\r\n    set visible (value: boolean)\r\n    {\r\n        SetVisible(value, this.id);\r\n    }\r\n\r\n    get visible (): boolean\r\n    {\r\n        return GetVisible(this.id);\r\n    }\r\n\r\n    set visibleChildren (value: boolean)\r\n    {\r\n        SetVisibleChildren(value, this.id);\r\n    }\r\n\r\n    get visibleChildren (): boolean\r\n    {\r\n        return GetVisibleChildren(this.id);\r\n    }\r\n\r\n    set depth (value: number)\r\n    {\r\n        HierarchyComponent.depth[this.id] = value;\r\n    }\r\n\r\n    get depth (): number\r\n    {\r\n        return HierarchyComponent.depth[this.id];\r\n    }\r\n\r\n    hasParent (id?: number): boolean\r\n    {\r\n        if (id)\r\n        {\r\n            return (HierarchyComponent.parentID[this.id] === id);\r\n        }\r\n        else\r\n        {\r\n            return (HierarchyComponent.parentID[this.id] > 0);\r\n        }\r\n    }\r\n\r\n    getParent (): IGameObject | undefined\r\n    {\r\n        return GetParentGameObject(this.id);\r\n    }\r\n\r\n    getChildren (): IGameObject[]\r\n    {\r\n        return GetChildrenFromParentID(this.id);\r\n    }\r\n\r\n    getNumChildren (): number\r\n    {\r\n        return GetNumChildren(this.id);\r\n    }\r\n\r\n    //#ifdef GET_DISPLAY_DATA\r\n    getDisplayData (): { id: number, index: number, parent: number, world: number, worldDepth: number, numChildren: number, children: number[] }\r\n    {\r\n        const id = this.id;\r\n\r\n        return {\r\n            id,\r\n            index: HierarchyComponent.index[id],\r\n            parent: HierarchyComponent.parentID[id],\r\n            world: HierarchyComponent.worldID[id],\r\n            worldDepth: HierarchyComponent.worldDepth[id],\r\n            numChildren: HierarchyComponent.numChildren[id],\r\n            children: GameObjectTree.get(id)\r\n        };\r\n    }\r\n    //#endif\r\n\r\n    toString (): string\r\n    {\r\n        return `${this.type} id=\"${this.id}\" name=\"${this.name}\"`;\r\n    }\r\n\r\n    destroy <P extends IGameObject> (reparentChildren?: P): void\r\n    {\r\n        if (reparentChildren)\r\n        {\r\n            ReparentChildren(this, reparentChildren);\r\n        }\r\n        else\r\n        {\r\n            DestroyChildren(this);\r\n        }\r\n\r\n        Emit(this, DestroyEvent, this);\r\n\r\n        this.events.clear();\r\n\r\n        this.events = null;\r\n\r\n        //  TODO - Destroy process, remove from Cache, Tree, etc.\r\n    }\r\n}\r\n", "export class EventInstance\r\n{\r\n    callback: Function;\r\n    context: unknown;\r\n    once: boolean;\r\n\r\n    constructor (callback: Function, context: unknown, once: boolean = false)\r\n    {\r\n        this.callback = callback;\r\n        this.context = context;\r\n        this.once = once;\r\n    }\r\n}\r\n", "import { EventInstance } from './EventInstance';\r\nimport { IEventEmitter } from './IEventEmitter';\r\nimport { IEventInstance } from './IEventInstance';\r\n\r\nexport function On (emitter: IEventEmitter, event: string, callback: Function, context: unknown = emitter, once: boolean = false): IEventInstance\r\n{\r\n    if (typeof callback !== 'function')\r\n    {\r\n        throw new TypeError('Listener not a function');\r\n    }\r\n\r\n    const listener = new EventInstance(callback, context, once);\r\n    const listeners = emitter.events.get(event);\r\n\r\n    if (!listeners)\r\n    {\r\n        emitter.events.set(event, new Set([ listener ]));\r\n    }\r\n    else\r\n    {\r\n        listeners.add(listener);\r\n    }\r\n\r\n    return listener;\r\n}\r\n", "import { IEventEmitter } from './IEventEmitter';\r\nimport { IEventInstance } from './IEventInstance';\r\nimport { On } from './On';\r\n\r\nexport function Once (emitter: IEventEmitter, event: string, callback: Function, context: unknown = emitter): IEventInstance\r\n{\r\n    return On(emitter, event, callback, context, true);\r\n}\r\n", "import { IGameObject } from '../gameobjects/IGameObject';\r\nimport { RemoveChild } from './RemoveChild';\r\n\r\nexport function RemoveChildren <P extends IGameObject> (parent: P, ...children: IGameObject[]): IGameObject[]\r\n{\r\n    children.forEach(child =>\r\n    {\r\n        RemoveChild(parent, child);\r\n    });\r\n\r\n    return children;\r\n}\r\n", "export const SceneDestroyEvent: string = 'destroy';\r\n\r\nexport type SceneDestroyEventHandler = () => void;\r\n", "import { IBaseWorld } from './IBaseWorld';\r\nimport { IScene } from '../scenes/IScene';\r\n\r\nexport const WorldList: Map<IScene, IBaseWorld[]> = new Map();\r\n", "import * as WorldEvents from './events';\r\n\r\nimport { Query, defineComponent, defineQuery } from 'bitecs';\r\n\r\nimport { AddRenderDataComponent } from './AddRenderDataComponent';\r\nimport { Color } from '../components/color/Color';\r\nimport { Emit } from '../events/Emit';\r\nimport { GameObject } from '../gameobjects/GameObject';\r\nimport { GameObjectWorld } from '../GameObjectWorld';\r\nimport { GetWorldSize } from '../config/worldsize/GetWorldSize';\r\nimport { HasDirtyDisplayList } from '../components/dirty/HasDirtyDisplayList';\r\nimport { IBaseCamera } from '../camera/IBaseCamera';\r\nimport { IBaseWorld } from './IBaseWorld';\r\nimport { IGameObject } from '../gameobjects/IGameObject';\r\nimport { IRenderPass } from '../renderer/webgl1/renderpass/IRenderPass';\r\nimport { IScene } from '../scenes/IScene';\r\nimport { Once } from '../events/Once';\r\nimport { RemoveChildren } from '../display/RemoveChildren';\r\nimport { SceneDestroyEvent } from '../scenes/events/SceneDestroyEvent';\r\nimport { SetWorldID } from '../components/hierarchy/SetWorldID';\r\nimport { WillUpdate } from '../components/permissions/WillUpdate';\r\nimport { WorldList } from './WorldList';\r\n\r\nexport class BaseWorld extends GameObject implements IBaseWorld\r\n{\r\n    readonly type: string = 'BaseWorld';\r\n\r\n    tag = defineComponent();\r\n\r\n    scene: IScene;\r\n\r\n    camera: IBaseCamera;\r\n\r\n    is3D: boolean = false;\r\n\r\n    color: Color;\r\n\r\n    renderList: Uint32Array;\r\n    listLength: number = 0;\r\n\r\n    private totalChildren: number = 0;\r\n\r\n    private totalChildrenQuery: Query;\r\n\r\n    constructor (scene: IScene)\r\n    {\r\n        super();\r\n\r\n        const id = this.id;\r\n        const tag = this.tag;\r\n\r\n        this.scene = scene;\r\n\r\n        this.totalChildrenQuery = defineQuery([ tag ]);\r\n\r\n        //  * 4 because each Game Object ID is added twice (render and post render) + each has the render type flag\r\n        this.renderList = new Uint32Array(GetWorldSize() * 4);\r\n\r\n        AddRenderDataComponent(id);\r\n\r\n        SetWorldID(id, id);\r\n\r\n        WorldList.get(scene).push(this);\r\n\r\n        this.color = new Color(id);\r\n\r\n        Once(scene, SceneDestroyEvent, () => this.destroy());\r\n    }\r\n\r\n    getNumChildren (): number\r\n    {\r\n        if (HasDirtyDisplayList(this.id))\r\n        {\r\n            this.totalChildren = this.totalChildrenQuery(GameObjectWorld).length;\r\n        }\r\n\r\n        return this.totalChildren;\r\n    }\r\n\r\n    beforeUpdate (delta: number, time: number): void\r\n    {\r\n        Emit(this, WorldEvents.WorldBeforeUpdateEvent, delta, time, this);\r\n    }\r\n\r\n    update (delta: number, time: number): void\r\n    {\r\n        if (!WillUpdate(this.id))\r\n        {\r\n            return;\r\n        }\r\n\r\n        Emit(this, WorldEvents.WorldUpdateEvent, delta, time, this);\r\n\r\n        super.update(delta, time);\r\n    }\r\n\r\n    afterUpdate (delta: number, time: number): void\r\n    {\r\n        Emit(this, WorldEvents.WorldAfterUpdateEvent, delta, time, this);\r\n    }\r\n\r\n    preRender (gameFrame: number): boolean\r\n    {\r\n        return true;\r\n    }\r\n\r\n    renderGL <T extends IRenderPass> (renderPass: T): void\r\n    {\r\n    }\r\n\r\n    shutdown (): void\r\n    {\r\n        RemoveChildren(this);\r\n\r\n        Emit(this, WorldEvents.WorldShutdownEvent, this);\r\n    }\r\n\r\n    destroy (reparentChildren?: IGameObject): void\r\n    {\r\n        super.destroy(reparentChildren);\r\n\r\n        this.shutdown();\r\n\r\n        if (this.camera)\r\n        {\r\n            this.camera.destroy();\r\n        }\r\n\r\n        this.camera = null;\r\n    }\r\n}\r\n", "import { Flush } from './Flush';\r\nimport { IBaseCamera } from '../../../camera/IBaseCamera';\r\nimport { IRenderPass } from './IRenderPass';\r\n\r\nexport function SetCamera (renderPass: IRenderPass, camera: IBaseCamera): void\r\n{\r\n    if (renderPass.current2DCamera !== camera)\r\n    {\r\n        Flush(renderPass);\r\n\r\n        renderPass.current2DCamera = camera;\r\n        renderPass.cameraMatrix = camera.getMatrix();\r\n    }\r\n\r\n    if (camera.update())\r\n    {\r\n        renderPass.getCurrentShader().bind(renderPass);\r\n    }\r\n}\r\n", "import { IBaseCamera } from '../../../camera/IBaseCamera';\r\nimport { IRenderPass } from './IRenderPass';\r\nimport { SetCamera } from './SetCamera';\r\n\r\n//  Call at the start of each World rendering\r\n\r\nexport function Begin (renderPass: IRenderPass, camera: IBaseCamera): void\r\n{\r\n    renderPass.shader.bindDefault();\r\n\r\n    SetCamera(renderPass, camera);\r\n}\r\n", "import { Color } from '../../../components/color/Color';\r\nimport { IRenderPass } from './IRenderPass';\r\n\r\nexport function PopColor <T extends IRenderPass> (renderPass: T, color: Color): void\r\n{\r\n    if (color.colorMatrixEnabled && color.willColorChildren)\r\n    {\r\n        renderPass.colorMatrix.pop();\r\n    }\r\n}\r\n", "import { RenderDataComponent } from './RenderDataComponent';\r\n\r\nexport function ResetWorldRenderData (id: number, gameFrame: number): void\r\n{\r\n    RenderDataComponent.gameFrame[id] = gameFrame;\r\n    RenderDataComponent.dirtyLocal[id] = 0;\r\n    RenderDataComponent.dirtyVertices[id] = 0;\r\n    RenderDataComponent.numRendered[id] = 0;\r\n}\r\n", "import { Color } from '../../../components/color/Color';\r\nimport { IRenderPass } from './IRenderPass';\r\n\r\nexport function SetColor <T extends IRenderPass> (renderPass: T, color: Color): void\r\n{\r\n    if (color.colorMatrixEnabled && color.willColorChildren)\r\n    {\r\n        renderPass.colorMatrix.set(color);\r\n    }\r\n}\r\n", "import { ClearDirtyTransform, HasDirtyTransform } from '../dirty';\r\nimport { IWorld, Query, defineSystem } from 'bitecs';\r\n\r\nimport { BoundsComponent } from '../bounds/BoundsComponent';\r\nimport { Extent2DComponent } from '../transform/Extent2DComponent';\r\nimport { RenderDataComponent } from '../../world';\r\nimport { SetQuadPosition } from './SetQuadPosition';\r\nimport { Transform2DComponent } from '../transform';\r\n\r\nlet entities: number[];\r\nlet total: number = 0;\r\n\r\nconst updateVertexPositionSystem = defineSystem(world =>\r\n{\r\n    for (let i = 0; i < entities.length; i++)\r\n    {\r\n        const id = entities[i];\r\n\r\n        if (!HasDirtyTransform(id))\r\n        {\r\n            continue;\r\n        }\r\n\r\n        const [ a, b, c, d, tx, ty ] = Transform2DComponent.world[id];\r\n\r\n        const x = Extent2DComponent.x[id];\r\n        const y = Extent2DComponent.y[id];\r\n        const right = Extent2DComponent.right[id];\r\n        const bottom = Extent2DComponent.bottom[id];\r\n\r\n        const x0 = (x * a) + (y * c) + tx;\r\n        const y0 = (x * b) + (y * d) + ty;\r\n\r\n        const x1 = (x * a) + (bottom * c) + tx;\r\n        const y1 = (x * b) + (bottom * d) + ty;\r\n\r\n        const x2 = (right * a) + (bottom * c) + tx;\r\n        const y2 = (right * b) + (bottom * d) + ty;\r\n\r\n        const x3 = (right * a) + (y * c) + tx;\r\n        const y3 = (right * b) + (y * d) + ty;\r\n\r\n        SetQuadPosition(id, x0, y0, x1, y1, x2, y2, x3, y3);\r\n\r\n        //  x, y, right, bottom:\r\n        const bx = Math.min(x0, x1, x2, x3);\r\n        const by = Math.min(y0, y1, y2, y3);\r\n        const br = Math.max(x0, x1, x2, x3);\r\n        const bb = Math.max(y0, y1, y2, y3);\r\n\r\n        const bounds = BoundsComponent.global[id];\r\n\r\n        bounds[0] = bx;\r\n        bounds[1] = by;\r\n        bounds[2] = br;\r\n        bounds[3] = bb;\r\n\r\n        ClearDirtyTransform(id);\r\n\r\n        total++;\r\n    }\r\n\r\n    return world;\r\n});\r\n\r\n//  Update all vertices and bounds across the World.\r\n//  This updates the QuadVertexComponent and BoundsComponent (per Game Object)\r\n\r\n//  This will only update entities that had their WorldTransform changed this frame.\r\n\r\n//  We cannot control the order of these entities, children may be updated before parents, etc.\r\n\r\nexport const UpdateVertexPositionSystem = (id: number, world: IWorld, query: Query): void =>\r\n{\r\n    total = 0;\r\n    entities = query(world);\r\n\r\n    if (entities.length > 0)\r\n    {\r\n        updateVertexPositionSystem(world);\r\n    }\r\n\r\n    ClearDirtyTransform(id);\r\n\r\n    RenderDataComponent.dirtyVertices[id] = total;\r\n};\r\n", "import { AddToRenderList } from './AddToRenderList';\r\nimport { GameObjectTree } from '../gameobjects/GameObjectTree';\r\nimport { GetNumChildren } from '../components/hierarchy/GetNumChildren';\r\nimport { HasDirtyChildCache } from '../components/dirty/HasDirtyChildCache';\r\nimport { IBaseWorld } from './IBaseWorld';\r\nimport { SetWorldDepth } from '../components/hierarchy/SetWorldDepth';\r\nimport { WillCacheChildren } from '../components/permissions/WillCacheChildren';\r\nimport { WillRender } from '../components/permissions/WillRender';\r\nimport { WillRenderChildren } from '../components/permissions/WillRenderChildren';\r\n\r\n//  Rebuilds the World.renderList - a list of all entities that could potentially render.\r\n\r\n//  This is only called if the World has a dirty display list, otherwise the results\r\n//  are cached between frames.\r\n\r\n//  This will rebuild the render list for the whole world by calling AddToRenderList\r\n//  for all game objects that will render (not invisible, etc)\r\n\r\nexport function RebuildWorldList (world: IBaseWorld, parent: number, worldDepth: number): void\r\n{\r\n    if (WillRender(parent))\r\n    {\r\n        if (world.id !== parent)\r\n        {\r\n            AddToRenderList(world, parent, 0);\r\n        }\r\n\r\n        const children = GameObjectTree.get(parent);\r\n\r\n        for (let i = 0; i < children.length; i++)\r\n        {\r\n            const nodeID = children[i];\r\n\r\n            if (WillRender(nodeID))\r\n            {\r\n                if (GetNumChildren(nodeID) > 0 && WillRenderChildren(nodeID))\r\n                {\r\n                    //  Is a Child Cache, like a Render Layer, or doesn't cache children, like a Container\r\n                    if (!WillCacheChildren(nodeID) || HasDirtyChildCache(nodeID))\r\n                    {\r\n                        SetWorldDepth(nodeID, worldDepth);\r\n\r\n                        RebuildWorldList(world, nodeID, worldDepth + 1);\r\n                    }\r\n                    else\r\n                    {\r\n                        SetWorldDepth(nodeID, worldDepth);\r\n\r\n                        AddToRenderList(world, nodeID, 0);\r\n                        AddToRenderList(world, nodeID, 1);\r\n                    }\r\n                }\r\n                else if (!WillCacheChildren(nodeID))\r\n                {\r\n                    SetWorldDepth(nodeID, worldDepth);\r\n\r\n                    AddToRenderList(world, nodeID, 0);\r\n                    AddToRenderList(world, nodeID, 1);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (children.length === 0)\r\n        {\r\n            SetWorldDepth(parent, worldDepth);\r\n        }\r\n\r\n        if (world.id !== parent)\r\n        {\r\n            AddToRenderList(world, parent, 1);\r\n        }\r\n    }\r\n}\r\n", "import { GameObjectTree } from '../gameobjects/GameObjectTree';\r\nimport { GameObjectWorld } from '../GameObjectWorld';\r\nimport { GetNumChildren } from '../components/hierarchy/GetNumChildren';\r\nimport { HasDirtyTransform } from '../components/dirty/HasDirtyTransform';\r\nimport { IBaseWorld } from './IBaseWorld';\r\nimport { Transform2DComponent } from '../components/transform/Transform2DComponent';\r\nimport { UpdateWorldTransform } from '../components/transform/UpdateWorldTransform';\r\nimport { WillRender } from '../components/permissions/WillRender';\r\nimport { WillRenderChildren } from '../components/permissions/WillRenderChildren';\r\nimport { WillTransformChildren } from '../components/permissions/WillTransformChildren';\r\nimport { hasComponent } from 'bitecs';\r\n\r\nexport function RebuildWorldTransforms (world: IBaseWorld, parent: number, forceUpdate: boolean): void\r\n{\r\n    if (WillRender(parent))\r\n    {\r\n        if (!forceUpdate && HasDirtyTransform(parent))\r\n        {\r\n            forceUpdate = true;\r\n        }\r\n\r\n        if (forceUpdate && hasComponent(GameObjectWorld, Transform2DComponent, parent))\r\n        {\r\n            UpdateWorldTransform(parent);\r\n        }\r\n\r\n        const children = GameObjectTree.get(parent);\r\n\r\n        for (let i = 0; i < children.length; i++)\r\n        {\r\n            const nodeID = children[i];\r\n\r\n            if (WillRender(nodeID))\r\n            {\r\n                if (GetNumChildren(nodeID) > 0)\r\n                {\r\n                    if (WillRenderChildren(nodeID) && WillTransformChildren(nodeID))\r\n                    {\r\n                        RebuildWorldTransforms(world, nodeID, forceUpdate);\r\n                    }\r\n                }\r\n                else if (forceUpdate || HasDirtyTransform(nodeID))\r\n                {\r\n                    UpdateWorldTransform(nodeID);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n", "import { IWorld, Query, defineSystem } from 'bitecs';\r\n\r\nimport { GetParentID } from '../hierarchy/GetParentID';\r\nimport { HasDirtyTransform } from '../dirty';\r\nimport { RenderDataComponent } from '../../world';\r\nimport { SetDirtyChild } from '../dirty/SetDirtyChild';\r\nimport { SetDirtyParents } from '../dirty/SetDirtyParents';\r\nimport { SetDirtyTransform } from '../dirty/SetDirtyTransform';\r\nimport { Transform2DComponent } from './Transform2DComponent';\r\n\r\nlet entities: number[];\r\nlet total: number = 0;\r\n\r\nconst system = defineSystem(world =>\r\n{\r\n    let prevParent: number = 0;\r\n\r\n    for (let i = 0; i < entities.length; i++)\r\n    {\r\n        const id = entities[i];\r\n\r\n        if (!HasDirtyTransform(id))\r\n        {\r\n            continue;\r\n        }\r\n\r\n        const x = Transform2DComponent.x[id];\r\n        const y = Transform2DComponent.y[id];\r\n        const rotation = Transform2DComponent.rotation[id];\r\n        const scaleX = Transform2DComponent.scaleX[id];\r\n        const scaleY = Transform2DComponent.scaleY[id];\r\n        const skewX = Transform2DComponent.skewX[id];\r\n        const skewY = Transform2DComponent.skewY[id];\r\n\r\n        const local = Transform2DComponent.local[id];\r\n\r\n        local[0] = Math.cos(rotation + skewY) * scaleX;\r\n        local[1] = Math.sin(rotation + skewY) * scaleX;\r\n        local[2] = -Math.sin(rotation - skewX) * scaleY;\r\n        local[3] = Math.cos(rotation - skewX) * scaleY;\r\n        local[4] = x;\r\n        local[5] = y;\r\n\r\n        SetDirtyTransform(id);\r\n\r\n        if (GetParentID(id) !== prevParent)\r\n        {\r\n            SetDirtyParents(id);\r\n\r\n            prevParent = GetParentID(id);\r\n        }\r\n\r\n        total++;\r\n    }\r\n\r\n    return world;\r\n});\r\n\r\n//  All children of a World that have a dirty Transform2DComponent\r\n//  are passed through this system and have their LocalMatrix2DComponent values set +\r\n//  SetDirtyTransform + SetDirtyParents (which includes SetDirtyDisplayList for the World)\r\n\r\nexport const UpdateLocalTransform = (id: number, world: IWorld, query: Query): boolean =>\r\n{\r\n    total = 0;\r\n    entities = query(world);\r\n\r\n    if (entities.length > 0)\r\n    {\r\n        system(world);\r\n    }\r\n\r\n    if (total > 0)\r\n    {\r\n        SetDirtyChild(id);\r\n    }\r\n\r\n    //  TODO - Move this to the World instance, so other entities can use this system\r\n    RenderDataComponent.dirtyLocal[id] = total;\r\n\r\n    return total > 0;\r\n};\r\n", "import * as WorldEvents from './events';\r\n\r\nimport { Query, defineQuery } from 'bitecs';\r\n\r\nimport { BaseWorld } from './BaseWorld';\r\nimport { Begin } from '../renderer/webgl1/renderpass/Begin';\r\nimport { BoundsIntersects } from '../components/bounds/BoundsIntersects';\r\nimport { ClearDirtyChild } from '../components/dirty/ClearDirtyChild';\r\nimport { ClearDirtyDisplayList } from '../components/dirty/ClearDirtyDisplayList';\r\nimport { Emit } from '../events/Emit';\r\nimport { GameObjectCache } from '../gameobjects/GameObjectCache';\r\nimport { GameObjectWorld } from '../GameObjectWorld';\r\nimport { HasDirtyChild } from '../components/dirty/HasDirtyChild';\r\nimport { HasDirtyDisplayList } from '../components/dirty/HasDirtyDisplayList';\r\nimport { IRenderPass } from '../renderer/webgl1/renderpass/IRenderPass';\r\nimport { IScene } from '../scenes/IScene';\r\nimport { IStaticCamera } from '../camera/IStaticCamera';\r\nimport { IStaticWorld } from './IStaticWorld';\r\nimport { PopColor } from '../renderer/webgl1/renderpass/PopColor';\r\nimport { RebuildWorldList } from './RebuildWorldList';\r\nimport { RebuildWorldTransforms } from './RebuildWorldTransforms';\r\nimport { RenderDataComponent } from './RenderDataComponent';\r\nimport { RendererInstance } from '../renderer/RendererInstance';\r\nimport { ResetWorldRenderData } from './ResetWorldRenderData';\r\nimport { SetColor } from '../renderer/webgl1/renderpass/SetColor';\r\nimport { StaticCamera } from '../camera/StaticCamera';\r\nimport { Transform2DComponent } from '../components/transform/Transform2DComponent';\r\nimport { UpdateLocalTransform } from '../components/transform/UpdateLocalTransform';\r\nimport { UpdateVertexPositionSystem } from '../components/vertices/UpdateVertexPositionSystem';\r\n\r\n//  A Static World is designed specifically to have a bounds of a fixed size\r\n//  and a camera that doesn't move at all (no scrolling, rotation, etc)\r\n//  Because it has a fixed size, there is no camera culling enabled.\r\n//  Games that use this kind of world include Pacman, Bejeweled and 2048.\r\n\r\nexport class StaticWorld extends BaseWorld implements IStaticWorld\r\n{\r\n    readonly type: string = 'StaticWorld';\r\n\r\n    declare camera: IStaticCamera;\r\n\r\n    private transformQuery: Query;\r\n\r\n    constructor (scene: IScene)\r\n    {\r\n        super(scene);\r\n\r\n        const tag = this.tag;\r\n\r\n        this.transformQuery = defineQuery([ tag, Transform2DComponent ]);\r\n\r\n        const renderer = RendererInstance.get();\r\n\r\n        this.camera = new StaticCamera(renderer.width, renderer.height);\r\n    }\r\n\r\n    //  We should update the display list and world transforms regardless of\r\n    //  if this World will render or not (i.e. all children are outside viewport)\r\n    preRender (gameFrame: number): boolean\r\n    {\r\n        const id = this.id;\r\n\r\n        ResetWorldRenderData(id, gameFrame);\r\n\r\n        RenderDataComponent.rebuiltList[id] = 0;\r\n        RenderDataComponent.rebuiltWorld[id] = 0;\r\n\r\n        ClearDirtyChild(id);\r\n\r\n        let isDirty = UpdateLocalTransform(id, GameObjectWorld, this.transformQuery);\r\n\r\n        const dirtyDisplayList = HasDirtyDisplayList(id);\r\n\r\n        if (dirtyDisplayList || HasDirtyChild(id))\r\n        {\r\n            //  TODO - This should only run over the branches that are dirty, not the whole World.\r\n\r\n            //  This will update the Transform2DComponent.world values.\r\n            RebuildWorldTransforms(this, id, false);\r\n\r\n            RenderDataComponent.rebuiltWorld[id] = 1;\r\n\r\n            isDirty = true;\r\n        }\r\n\r\n        UpdateVertexPositionSystem(id, GameObjectWorld, this.transformQuery);\r\n\r\n        if (dirtyDisplayList)\r\n        {\r\n            this.listLength = 0;\r\n\r\n            RebuildWorldList(this, id, 0);\r\n\r\n            RenderDataComponent.numChildren[id] = this.getNumChildren();\r\n            RenderDataComponent.numRenderable[id] = this.listLength / 4;\r\n            RenderDataComponent.rebuiltList[id] = 1;\r\n\r\n            ClearDirtyDisplayList(id);\r\n\r\n            isDirty = true;\r\n        }\r\n\r\n        //  By this point we've got a fully rebuilt World, where all dirty Game Objects have been\r\n        //  refreshed and had their coordinates moved to their quad vertices.\r\n\r\n        //  We've also got a complete local render list, in display order, that can be processed further\r\n        //  before rendering (i.e. spatial tree, bounds, etc)\r\n\r\n        return isDirty;\r\n    }\r\n\r\n    renderGL <T extends IRenderPass> (renderPass: T): void\r\n    {\r\n        SetColor(renderPass, this.color);\r\n\r\n        Emit(this, WorldEvents.WorldRenderEvent, this);\r\n\r\n        const camera = this.camera;\r\n\r\n        Begin(renderPass, camera);\r\n\r\n        const list = this.renderList;\r\n\r\n        const [ x, y, right, bottom ] = camera.getBounds();\r\n\r\n        let rendered = 0;\r\n\r\n        for (let i = 0; i < this.listLength; i += 2)\r\n        {\r\n            const eid = list[i];\r\n            const type = list[i + 1];\r\n            const entry = GameObjectCache.get(eid);\r\n\r\n            if (type === 1)\r\n            {\r\n                //  We've already rendered this Game Object, so skip bounds checking\r\n                entry.postRenderGL(renderPass);\r\n            }\r\n            else if (BoundsIntersects(eid, x, y, right, bottom))\r\n            {\r\n                entry.renderGL(renderPass);\r\n\r\n                if (type === 2)\r\n                {\r\n                    entry.postRenderGL(renderPass);\r\n                }\r\n\r\n                rendered++;\r\n            }\r\n        }\r\n\r\n        PopColor(renderPass, this.color);\r\n\r\n        const id = this.id;\r\n\r\n        //#ifdef RENDER_STATS\r\n        window['renderStats'] = {\r\n            gameFrame: RenderDataComponent.gameFrame[id],\r\n            numChildren: RenderDataComponent.numChildren[id],\r\n            numRendererd: rendered,\r\n            numRenderable: RenderDataComponent.numRenderable[id],\r\n            dirtyLocal: RenderDataComponent.dirtyLocal[id],\r\n            dirtyVertices: RenderDataComponent.dirtyVertices[id],\r\n            rebuiltList: RenderDataComponent.rebuiltList[id],\r\n            rebuiltWorld: RenderDataComponent.rebuiltWorld[id]\r\n        };\r\n        //#endif\r\n\r\n        Emit(this, WorldEvents.WorldPostRenderEvent, renderPass, this);\r\n    }\r\n}\r\n", "import { GameObjectWorld } from '../../GameObjectWorld';\r\nimport { QuadVertexComponent } from './QuadVertexComponent';\r\nimport { addComponent } from 'bitecs';\r\n\r\nexport function AddQuadVertex (id: number, width: number = 0, height: number = 0, flipY: boolean = true): void\r\n{\r\n    addComponent(GameObjectWorld, QuadVertexComponent, id);\r\n\r\n    /*\r\n    if (width || height)\r\n    {\r\n        QuadVertexComponent.tl[id] = AddVertex(0, 0, 0, 0, 1);\r\n        QuadVertexComponent.bl[id] = AddVertex(0, height, 0, 0, 0);\r\n        QuadVertexComponent.br[id] = AddVertex(width, height, 0, 1, 0);\r\n        QuadVertexComponent.tr[id] = AddVertex(width, 0, 0, 1, 1);\r\n    }\r\n    else\r\n    {\r\n        QuadVertexComponent.tl[id] = AddVertex();\r\n        QuadVertexComponent.bl[id] = AddVertex();\r\n        QuadVertexComponent.br[id] = AddVertex();\r\n        QuadVertexComponent.tr[id] = AddVertex();\r\n    }\r\n    */\r\n}\r\n", "import { BufferEntry } from '../draw/BufferEntry';\r\nimport { Flush } from './Flush';\r\nimport { IRenderPass } from './IRenderPass';\r\n\r\nconst bufferEntry: BufferEntry = {\r\n    buffer: null,\r\n    F32: null,\r\n    offset: 0\r\n};\r\n\r\nexport function GetVertexBufferEntry (renderPass: IRenderPass, addToCount: number = 0): BufferEntry\r\n{\r\n    const buffer = renderPass.vertexbuffer.current;\r\n\r\n    //  If batch cannot take the size of this entry, flush it first\r\n    if (renderPass.count + addToCount >= buffer.batchSize)\r\n    {\r\n        Flush(renderPass);\r\n    }\r\n\r\n    bufferEntry.buffer = buffer;\r\n    bufferEntry.F32 = buffer.vertexViewF32;\r\n    bufferEntry.offset = renderPass.count * buffer.entryElementSize;\r\n\r\n    renderPass.count += addToCount;\r\n\r\n    return bufferEntry;\r\n}\r\n", "import { QuadVertexComponent } from './QuadVertexComponent';\r\n\r\nexport function SetQuadTextureIndex (id: number, textureIndex: number): void\r\n{\r\n    const data = QuadVertexComponent.values[id];\r\n\r\n    if (data[4] !== textureIndex)\r\n    {\r\n        data[4] = textureIndex;\r\n        data[13] = textureIndex;\r\n        data[22] = textureIndex;\r\n        data[31] = textureIndex;\r\n        data[40] = textureIndex;\r\n        data[49] = textureIndex;\r\n    }\r\n}\r\n", "import { GetVertexBufferEntry } from '../renderpass/GetVertexBufferEntry';\r\nimport { IRenderPass } from '../renderpass/IRenderPass';\r\nimport { ITexture } from '../../../textures/ITexture';\r\nimport { QuadVertexComponent } from '../../../components/vertices/QuadVertexComponent';\r\nimport { SetQuadTextureIndex } from '../../../components/vertices/SetQuadTextureIndex';\r\n\r\nexport function BatchTexturedQuadBuffer <T extends ITexture> (texture: T, id: number, renderPass: IRenderPass): void\r\n{\r\n    const { F32, offset } = GetVertexBufferEntry(renderPass, 2);\r\n\r\n    const textureIndex = renderPass.textures.set(texture);\r\n\r\n    SetQuadTextureIndex(id, textureIndex);\r\n\r\n    F32.set(QuadVertexComponent.values[id], offset);\r\n}\r\n", "import { CONFIG_DEFAULTS } from '../const';\r\nimport { ConfigStore } from '../ConfigStore';\r\n\r\nexport function GetDefaultOriginX (): number\r\n{\r\n    return ConfigStore.get(CONFIG_DEFAULTS.DEFAULT_ORIGIN).x;\r\n}\r\n", "import { CONFIG_DEFAULTS } from '../const';\r\nimport { ConfigStore } from '../ConfigStore';\r\n\r\nexport function GetDefaultOriginY (): number\r\n{\r\n    return ConfigStore.get(CONFIG_DEFAULTS.DEFAULT_ORIGIN).y;\r\n}\r\n", "import { AddBoundsComponent } from '../../components/bounds/AddBoundsComponent';\r\nimport { AddTransform2DComponent } from '../../components/transform/AddTransform2DComponent';\r\nimport { Color } from '../../components/color/Color';\r\nimport { Flush } from '../../renderer/webgl1/renderpass/Flush';\r\nimport { GameObject } from '../GameObject';\r\nimport { GetDefaultOriginX } from '../../config/defaultorigin/GetDefaultOriginX';\r\nimport { GetDefaultOriginY } from '../../config/defaultorigin/GetDefaultOriginY';\r\nimport { IContainer } from './IContainer';\r\nimport { IGameObject } from '../IGameObject';\r\nimport { IRenderPass } from '../../renderer/webgl1/renderpass/IRenderPass';\r\nimport { IShader } from '../../renderer/webgl1/shaders/IShader';\r\nimport { Origin } from '../../components/transform/Origin';\r\nimport { PopColor } from '../../renderer/webgl1/renderpass/PopColor';\r\nimport { Position } from '../../components/transform/Position';\r\nimport { Scale } from '../../components/transform/Scale';\r\nimport { SetColor } from '../../renderer/webgl1/renderpass/SetColor';\r\nimport { SetDirtyTransform } from '../../components/dirty';\r\nimport { Size } from '../../components/transform/Size';\r\nimport { Skew } from '../../components/transform/Skew';\r\nimport { Transform2DComponent } from '../../components/transform/Transform2DComponent';\r\n\r\nexport class Container extends GameObject implements IContainer\r\n{\r\n    readonly type: string = 'Container';\r\n\r\n    position: Position;\r\n    scale: Scale;\r\n    skew: Skew;\r\n    origin: Origin;\r\n    size: Size;\r\n    color: Color;\r\n\r\n    shader: IShader;\r\n\r\n    constructor (x: number = 0, y: number = 0)\r\n    {\r\n        super();\r\n\r\n        const id = this.id;\r\n\r\n        AddTransform2DComponent(id, x, y, GetDefaultOriginX(), GetDefaultOriginY());\r\n        AddBoundsComponent(id);\r\n\r\n        this.position = new Position(id, x, y);\r\n        this.scale = new Scale(id);\r\n        this.skew = new Skew(id);\r\n        this.size = new Size(id);\r\n        this.origin = new Origin(id, GetDefaultOriginX(), GetDefaultOriginY());\r\n        this.color = new Color(id);\r\n    }\r\n\r\n    renderGL <T extends IRenderPass> (renderPass: T): void\r\n    {\r\n        if (this.shader)\r\n        {\r\n            Flush(renderPass);\r\n\r\n            renderPass.shader.set(this.shader, 0);\r\n        }\r\n\r\n        SetColor(renderPass, this.color);\r\n\r\n        this.preRenderGL(renderPass);\r\n    }\r\n\r\n    postRenderGL <T extends IRenderPass> (renderPass: T): void\r\n    {\r\n        if (this.shader)\r\n        {\r\n            Flush(renderPass);\r\n\r\n            renderPass.shader.pop();\r\n        }\r\n\r\n        PopColor(renderPass, this.color);\r\n    }\r\n\r\n    set x (value: number)\r\n    {\r\n        this.position.x = value;\r\n    }\r\n\r\n    get x (): number\r\n    {\r\n        return this.position.x;\r\n    }\r\n\r\n    set y (value: number)\r\n    {\r\n        this.position.y = value;\r\n    }\r\n\r\n    get y (): number\r\n    {\r\n        return this.position.y;\r\n    }\r\n\r\n    set rotation (value: number)\r\n    {\r\n        Transform2DComponent.rotation[this.id] = value;\r\n        SetDirtyTransform(this.id);\r\n    }\r\n\r\n    get rotation (): number\r\n    {\r\n        return Transform2DComponent.rotation[this.id];\r\n    }\r\n\r\n    get alpha (): number\r\n    {\r\n        return this.color.alpha;\r\n    }\r\n\r\n    set alpha (value: number)\r\n    {\r\n        this.color.alpha = value;\r\n    }\r\n\r\n    setAlpha (value: number): this\r\n    {\r\n        this.alpha = value;\r\n\r\n        return this;\r\n    }\r\n\r\n    setPosition (x: number, y?: number): this\r\n    {\r\n        this.position.set(x, y);\r\n\r\n        return this;\r\n    }\r\n\r\n    setScale (x: number, y?: number): this\r\n    {\r\n        this.scale.set(x, y);\r\n\r\n        return this;\r\n    }\r\n\r\n    setRotation (value: number): this\r\n    {\r\n        this.rotation = value;\r\n\r\n        return this;\r\n    }\r\n\r\n    setSkew (x: number, y?: number): this\r\n    {\r\n        this.skew.set(x, y);\r\n\r\n        return this;\r\n    }\r\n\r\n    setOrigin (x: number, y?: number): this\r\n    {\r\n        this.origin.set(x, y);\r\n\r\n        return this;\r\n    }\r\n\r\n    destroy (reparentChildren?: IGameObject): void\r\n    {\r\n        super.destroy(reparentChildren);\r\n    }\r\n}\r\n", "import { TextureManager } from './TextureManager';\r\n\r\nlet instance: TextureManager;\r\n\r\nexport const TextureManagerInstance =\r\n{\r\n    get: (): TextureManager =>\r\n    {\r\n        return instance;\r\n    },\r\n\r\n    set: (manager: TextureManager | null): void =>\r\n    {\r\n        if (instance)\r\n        {\r\n            throw new Error('Cannot instantiate TextureManager more than once');\r\n        }\r\n\r\n        instance = manager;\r\n    }\r\n};\r\n", "export function BatchTexturedQuad (\r\n    F32: Float32Array,\r\n    offset: number,\r\n    textureIndex: number,\r\n    x1: number, y1: number,\r\n    x2: number, y2: number,\r\n    x3: number, y3: number,\r\n    x4: number, y4: number,\r\n    u0: number, v0: number, u1: number, v1: number,\r\n    r: number, g: number, b: number, a: number): number\r\n{\r\n    F32.set([\r\n        //  top left\r\n        x1,\r\n        y1,\r\n        u0,\r\n        v0,\r\n        textureIndex,\r\n        r,\r\n        g,\r\n        b,\r\n        a,\r\n\r\n        //  bottom left\r\n        x2,\r\n        y2,\r\n        u0,\r\n        v1,\r\n        textureIndex,\r\n        r,\r\n        g,\r\n        b,\r\n        a,\r\n\r\n        //  bottom right\r\n        x3,\r\n        y3,\r\n        u1,\r\n        v1,\r\n        textureIndex,\r\n        r,\r\n        g,\r\n        b,\r\n        a,\r\n\r\n        //  top left\r\n        x1,\r\n        y1,\r\n        u0,\r\n        v0,\r\n        textureIndex,\r\n        r,\r\n        g,\r\n        b,\r\n        a,\r\n\r\n        //  bottom right\r\n        x3,\r\n        y3,\r\n        u1,\r\n        v1,\r\n        textureIndex,\r\n        r,\r\n        g,\r\n        b,\r\n        a,\r\n\r\n        //  top right\r\n        x4,\r\n        y4,\r\n        u1,\r\n        v0,\r\n        textureIndex,\r\n        r,\r\n        g,\r\n        b,\r\n        a\r\n    ], offset);\r\n\r\n    return offset + 54;\r\n}\r\n", "import { BatchTexturedQuad } from './BatchTexturedQuad';\r\nimport { GetVertexBufferEntry } from '../renderpass/GetVertexBufferEntry';\r\nimport { IRenderPass } from '../renderpass/IRenderPass';\r\n\r\nexport function BatchSingleQuad (renderPass: IRenderPass, x: number, y: number, width: number, height: number, u0: number, v0: number, u1: number, v1: number, textureIndex: number = 0): void\r\n{\r\n    const { F32, offset } = GetVertexBufferEntry(renderPass, 2);\r\n\r\n    BatchTexturedQuad(\r\n        F32, offset, textureIndex,\r\n        x, y,\r\n        x, y + height,\r\n        x + width, y + height,\r\n        x + width, y,\r\n        u0, v0, u1, v1,\r\n        1, 1, 1, 1\r\n    );\r\n}\r\n", "import { BatchSingleQuad } from './BatchSingleQuad';\r\nimport { Flush } from '../renderpass/Flush';\r\nimport { IRenderPass } from '../renderpass/IRenderPass';\r\nimport { IShader } from '../shaders/IShader';\r\nimport { Texture } from '../../../textures/Texture';\r\n\r\nexport function DrawTexturedQuad (renderPass: IRenderPass, texture: Texture, shader?: IShader): void\r\n{\r\n    if (!shader)\r\n    {\r\n        shader = renderPass.quadShader;\r\n    }\r\n\r\n    const { u0, v0, u1, v1 } = texture.firstFrame;\r\n\r\n    //  Clear out anything already in the batch\r\n    Flush(renderPass);\r\n\r\n    renderPass.textures.bind(texture, 0);\r\n\r\n    renderPass.shader.set(shader, 0);\r\n\r\n    BatchSingleQuad(renderPass, 0, 0, texture.width, texture.height, u0, v0, u1, v1, 0);\r\n\r\n    //  Flush our single quad\r\n    Flush(renderPass);\r\n\r\n    renderPass.shader.pop();\r\n\r\n    renderPass.textures.unbind();\r\n}\r\n", "import { IGameObject } from '../../gameobjects/IGameObject';\r\nimport { PermissionsComponent } from './PermissionsComponent';\r\n\r\nexport function SetWillTransformChildren (value: boolean, ...children: IGameObject[]): IGameObject[]\r\n{\r\n    children.forEach(child =>\r\n    {\r\n        PermissionsComponent.willTransformChildren[child.id] = Number(value);\r\n    });\r\n\r\n    return children;\r\n}\r\n", "import { GameObject } from '../GameObject';\r\nimport { SetWillTransformChildren } from '../../components/permissions/SetWillTransformChildren';\r\n\r\n//  A Layer is a way of grouping Game Objects together, without impacting their\r\n//  transforms. Children of a Layer do not inherit the layers transform (as it\r\n//  doesn't have one), however you are able to control the visibility of the layers children in a single pass.\r\n\r\nexport class Layer extends GameObject\r\n{\r\n    constructor ()\r\n    {\r\n        super();\r\n\r\n        SetWillTransformChildren(false, this);\r\n    }\r\n}\r\n", "import { AddQuadVertex } from '../../components/vertices/AddQuadVertex';\r\nimport { BatchTexturedQuad } from '../../renderer/webgl1/draw/BatchTexturedQuad';\r\nimport { ClearDirtyChildCache } from '../../components/dirty/ClearDirtyChildCache';\r\nimport { DrawTexturedQuad } from '../../renderer/webgl1/draw';\r\nimport { Flush } from '../../renderer/webgl1/renderpass/Flush';\r\nimport { GLTextureBinding } from '../../renderer/webgl1/textures/GLTextureBinding';\r\nimport { GameObjectWorld } from '../../GameObjectWorld';\r\nimport { GetHeight } from '../../config/size/GetHeight';\r\nimport { GetResolution } from '../../config/size/GetResolution';\r\nimport { GetWidth } from '../../config/size/GetWidth';\r\nimport { HasDirtyChildCache } from '../../components/dirty/HasDirtyChildCache';\r\nimport { IRenderLayer } from './IRenderLayer';\r\nimport { IRenderPass } from '../../renderer/webgl1/renderpass/IRenderPass';\r\nimport { Layer } from '../layer/Layer';\r\nimport { SetDirtyParents } from '../../components/dirty/SetDirtyParents';\r\nimport { SetWillCacheChildren } from '../../components/permissions/SetWillCacheChildren';\r\nimport { Texture } from '../../textures/Texture';\r\nimport { WillCacheChildren } from '../../components/permissions/WillCacheChildren';\r\nimport { addComponent } from 'bitecs';\r\n\r\n//  The RenderLayer works like a normal Layer, except it automatically caches\r\n//  all of its renderable children to its own texture. The children are drawn\r\n//  to the RenderLayers texture and then the RenderLayer texture is drawn to\r\n//  the WebGL Renderer. You should use a RenderLayer if you've got a complex or\r\n//  large set of Game Objects that don't update very often, where you would\r\n//  benefit from not having to re-render every single child, every frame.\r\n\r\nexport class RenderLayer extends Layer implements IRenderLayer\r\n{\r\n    readonly type: string = 'RenderLayer';\r\n\r\n    texture: Texture;\r\n    framebuffer: WebGLFramebuffer;\r\n\r\n    constructor ()\r\n    {\r\n        super();\r\n\r\n        SetWillCacheChildren(true, this);\r\n\r\n        const width = GetWidth();\r\n        const height = GetHeight();\r\n        const resolution = GetResolution();\r\n\r\n        const id = this.id;\r\n\r\n        //  TODO: Allow them to set this via a filterArea\r\n        const texture = new Texture(null, width * resolution, height * resolution);\r\n\r\n        texture.key = this.type + id.toString();\r\n\r\n        const binding = new GLTextureBinding(texture, {\r\n            createFramebuffer: true,\r\n            flipY: true\r\n        });\r\n\r\n        AddQuadVertex(id, width, height, true);\r\n\r\n        this.texture = texture;\r\n        this.framebuffer = binding.framebuffer;\r\n    }\r\n\r\n    renderGL <T extends IRenderPass> (renderPass: T): void\r\n    {\r\n        const id = this.id;\r\n\r\n        // if (this.getNumChildren() && (!WillCacheChildren(id) || HasDirtyChildCache(id)))\r\n        // {\r\n            Flush(renderPass);\r\n\r\n            renderPass.framebuffer.set(this.framebuffer, true);\r\n        // }\r\n    }\r\n\r\n    postRenderGL <T extends IRenderPass> (renderPass: T): void\r\n    {\r\n        const id = this.id;\r\n\r\n        if (!WillCacheChildren(id) || HasDirtyChildCache(id))\r\n        {\r\n            Flush(renderPass);\r\n\r\n            renderPass.framebuffer.pop();\r\n\r\n            ClearDirtyChildCache(id);\r\n\r\n            SetDirtyParents(id);\r\n        }\r\n\r\n        DrawTexturedQuad(renderPass, this.texture);\r\n\r\n        // BatchTexturedQuad(this.texture, id, renderPass);\r\n    }\r\n}\r\n", "import { BatchTexturedQuadBuffer } from '../../renderer/webgl1/draw/BatchTexturedQuadBuffer';\r\nimport { DrawTexturedQuad } from '../../renderer/webgl1/draw/DrawTexturedQuad';\r\nimport { Flush } from '../../renderer/webgl1/renderpass/Flush';\r\nimport { IEffectLayer } from './IEffectLayer';\r\nimport { IRectangle } from '../../geom/rectangle/IRectangle';\r\nimport { IRenderPass } from '../../renderer/webgl1/renderpass/IRenderPass';\r\nimport { IShader } from '../../renderer/webgl1/shaders/IShader';\r\nimport { RenderLayer } from '../renderlayer/RenderLayer';\r\n\r\n//  A WebGL specific EffectLayer\r\n//  EffectLayerCanvas is a canvas alternative\r\n\r\nexport class EffectLayer extends RenderLayer implements IEffectLayer\r\n{\r\n    readonly type: string = 'EffectLayer';\r\n\r\n    filterArea: IRectangle;\r\n\r\n    shaders: IShader[] = [];\r\n\r\n    constructor (...shaders: IShader[])\r\n    {\r\n        super();\r\n\r\n        if (Array.isArray(shaders))\r\n        {\r\n            this.shaders = shaders;\r\n        }\r\n    }\r\n\r\n    postRenderGL <T extends IRenderPass> (renderPass: T): void\r\n    {\r\n        const id = this.id;\r\n        const shaders = this.shaders;\r\n        const texture = this.texture;\r\n\r\n        Flush(renderPass);\r\n\r\n        renderPass.framebuffer.pop();\r\n\r\n        //  this.framebuffer contains a texture with all of this layers sprites drawn to it\r\n\r\n        if (shaders.length === 0)\r\n        {\r\n            renderPass.textures.clear();\r\n\r\n            DrawTexturedQuad(renderPass, texture);\r\n\r\n            // BatchTexturedQuadBuffer(texture, id, renderPass);\r\n        }\r\n        else\r\n        {\r\n            renderPass.textures.clear();\r\n\r\n            // renderPass.viewport.set(0, 0, 400, 600);\r\n\r\n            let prevTexture = texture;\r\n\r\n            for (let i: number = 0; i < shaders.length; i++)\r\n            {\r\n                const shader = shaders[i];\r\n\r\n                DrawTexturedQuad(renderPass, prevTexture, shader);\r\n\r\n                prevTexture = shader.texture;\r\n            }\r\n\r\n            DrawTexturedQuad(renderPass, prevTexture);\r\n\r\n            // renderPass.viewport.pop();\r\n        }\r\n    }\r\n}\r\n", "export function CreateCanvas (width: number, height: number): CanvasRenderingContext2D\r\n{\r\n    const canvas = document.createElement('canvas');\r\n\r\n    canvas.width = width;\r\n    canvas.height = height;\r\n\r\n    return canvas.getContext('2d');\r\n}\r\n", "import { CreateCanvas } from './CreateCanvas';\r\nimport { IGLTextureBindingConfig } from '../renderer/webgl1/textures/IGLTextureBindingConfig';\r\nimport { Texture } from './Texture';\r\nimport { TextureManagerInstance } from './TextureManagerInstance';\r\nimport { WhiteTexture } from './WhiteTexture';\r\n\r\nexport class TextureManager\r\n{\r\n    textures: Map<string, Texture>;\r\n\r\n    constructor ()\r\n    {\r\n        TextureManagerInstance.set(this);\r\n\r\n        this.textures = new Map();\r\n\r\n        this.createDefaultTextures();\r\n    }\r\n\r\n    private createDefaultTextures (): void\r\n    {\r\n        this.add('__BLANK', new Texture(CreateCanvas(2, 2).canvas));\r\n\r\n        const missing = CreateCanvas(32, 32);\r\n\r\n        missing.strokeStyle = '#0f0';\r\n        missing.moveTo(0, 0);\r\n        missing.lineTo(32, 32);\r\n        missing.stroke();\r\n        missing.strokeRect(0.5, 0.5, 31, 31);\r\n\r\n        this.add('__MISSING', new Texture(missing.canvas));\r\n\r\n        const white = CreateCanvas(2, 2);\r\n\r\n        white.fillStyle = '#fff';\r\n        white.fillRect(0, 0, 2, 2);\r\n\r\n        const whiteTexture = this.add('__WHITE', new Texture(white.canvas));\r\n\r\n        //  Because this is used frequently by Graphics and Shapes\r\n        WhiteTexture.set(whiteTexture);\r\n    }\r\n\r\n    get (key: string): Texture\r\n    {\r\n        const textures = this.textures;\r\n\r\n        if (textures.has(key))\r\n        {\r\n            return textures.get(key);\r\n        }\r\n        else\r\n        {\r\n            return textures.get('__MISSING');\r\n        }\r\n    }\r\n\r\n    has (key: string): boolean\r\n    {\r\n        return this.textures.has(key);\r\n    }\r\n\r\n    add (key: string, source: Texture | TexImageSource, glConfig?: IGLTextureBindingConfig): Texture\r\n    {\r\n        let texture: Texture;\r\n\r\n        if (!this.textures.has(key))\r\n        {\r\n            if (source instanceof Texture)\r\n            {\r\n                texture = source;\r\n            }\r\n            else\r\n            {\r\n                texture = new Texture(source, 0, 0, glConfig);\r\n            }\r\n\r\n            texture.key = key;\r\n\r\n            this.textures.set(key, texture);\r\n        }\r\n\r\n        return texture;\r\n    }\r\n\r\n    update (key: string, source: TexImageSource, glConfig?: IGLTextureBindingConfig): Texture\r\n    {\r\n        const texture = this.textures.get(key);\r\n\r\n        if (texture)\r\n        {\r\n            texture.update(source, glConfig);\r\n        }\r\n\r\n        return texture;\r\n    }\r\n}\r\n", "import { TextureManager } from './TextureManager';\r\n\r\nexport function CreateTextureManager (): void\r\n{\r\n    new TextureManager();\r\n}\r\n", "import { AddQuadVertex } from '../../components/vertices/AddQuadVertex';\r\nimport { BatchTexturedQuadBuffer } from '../../renderer/webgl1/draw/BatchTexturedQuadBuffer';\r\nimport { Container } from '../container/Container';\r\nimport { Flush } from '../../renderer/webgl1/renderpass/Flush';\r\nimport { Frame } from '../../textures/Frame';\r\nimport { ICanvasRenderer } from '../../renderer/canvas/ICanvasRenderer';\r\nimport { IGameObject } from '../IGameObject';\r\nimport { IRenderPass } from '../../renderer/webgl1/renderpass/IRenderPass';\r\nimport { Texture } from '../../textures/Texture';\r\nimport { WhiteTexture } from '../../textures';\r\nimport { WillRender } from '../../components/permissions/WillRender';\r\n\r\nexport class Rectangle extends Container\r\n{\r\n    readonly type: string = 'Rectangle';\r\n\r\n    private texture: Texture;\r\n    private frame: Frame;\r\n\r\n    constructor (x: number, y: number, width: number = 64, height: number = 64, color: number = 0xffffff)\r\n    {\r\n        super(x, y);\r\n\r\n        const id = this.id;\r\n\r\n        AddQuadVertex(id);\r\n\r\n        this.texture = WhiteTexture.get();\r\n\r\n        this.frame = this.texture.getFrame();\r\n\r\n        this.frame.copyToExtent(this);\r\n        this.frame.copyToVertices(id);\r\n\r\n        this.size.set(width, height);\r\n\r\n        this.color.tint = color;\r\n    }\r\n\r\n    isRenderable (): boolean\r\n    {\r\n        return (this.visible && WillRender(this.id) && this.alpha > 0);\r\n    }\r\n\r\n    renderGL <T extends IRenderPass> (renderPass: T): void\r\n    {\r\n        const color = this.color;\r\n\r\n        if (this.shader)\r\n        {\r\n            Flush(renderPass);\r\n\r\n            renderPass.shader.set(this.shader, 0);\r\n        }\r\n\r\n        if (color.colorMatrixEnabled)\r\n        {\r\n            renderPass.colorMatrix.set(color);\r\n        }\r\n\r\n        this.preRenderGL(renderPass);\r\n\r\n        BatchTexturedQuadBuffer(this.texture, this.id, renderPass);\r\n\r\n        if (color.colorMatrixEnabled && !color.willColorChildren)\r\n        {\r\n            Flush(renderPass);\r\n\r\n            renderPass.colorMatrix.pop();\r\n        }\r\n    }\r\n\r\n    renderCanvas <T extends ICanvasRenderer> (renderer: T): void\r\n    {\r\n        // PreRenderVertices(this);\r\n\r\n        // DrawImage(this.frame, this.alpha, this.worldTransform, this.transformExtent, renderer);\r\n    }\r\n\r\n    destroy (reparentChildren?: IGameObject): void\r\n    {\r\n        super.destroy(reparentChildren);\r\n\r\n        this.texture = null;\r\n        this.frame = null;\r\n    }\r\n}\r\n", "import { AddChildAt } from './AddChildAt';\r\nimport { IGameObject } from '../gameobjects/IGameObject';\r\n\r\nexport function AddChildren <P extends IGameObject> (parent: P, ...children: IGameObject[]): IGameObject[]\r\n{\r\n    children.forEach(child =>\r\n    {\r\n        AddChildAt(parent, child);\r\n    });\r\n\r\n    return children;\r\n}\r\n", "import { DefaultQuadAttributes } from './DefaultQuadAttributes';\r\nimport { IFXShaderConfig } from './IFXShaderConfig';\r\nimport { IRenderPass } from '../renderpass/IRenderPass';\r\nimport { IShader } from './IShader';\r\nimport { QuadShader } from './QuadShader';\r\n\r\n//  A Quad Shader with built in time and resolution uniforms.\r\n//  It will automatically look for uniforms called \"Uime\" and \"uResolution\"\r\n//  and if it doesn't find those, it will look for \"time\" and \"resolution\".\r\n//  If you use other uniform names then pass them in the config object.\r\n\r\nexport class FXShader extends QuadShader implements IShader\r\n{\r\n    private timeVar: string;\r\n    private resolutionVar: string;\r\n\r\n    timeScale: number;\r\n\r\n    constructor (config: IFXShaderConfig = {})\r\n    {\r\n        config.attributes = config?.attributes || DefaultQuadAttributes;\r\n\r\n        config.renderToFramebuffer = true;\r\n\r\n        super(config);\r\n\r\n        const {\r\n            timeUniform = 'uTime',\r\n            resolutionUniform = 'uResolution',\r\n            timeScale = 1\r\n        } = config;\r\n\r\n        const uniforms = [ ... this.uniformSetters.keys() ];\r\n\r\n        this.timeVar = uniforms.includes(timeUniform) ? timeUniform : 'time';\r\n        this.resolutionVar = uniforms.includes(resolutionUniform) ? resolutionUniform : 'resolution';\r\n\r\n        if (!uniforms.includes(this.timeVar))\r\n        {\r\n            this.timeVar = undefined;\r\n        }\r\n\r\n        if (!uniforms.includes(this.resolutionVar))\r\n        {\r\n            this.resolutionVar = undefined;\r\n        }\r\n\r\n        this.timeScale = timeScale;\r\n    }\r\n\r\n    bind (renderPass: IRenderPass): boolean\r\n    {\r\n        const renderer = renderPass.renderer;\r\n\r\n        if (this.timeVar)\r\n        {\r\n            this.uniforms.set(this.timeVar, performance.now() * this.timeScale);\r\n        }\r\n\r\n        if (this.resolutionVar)\r\n        {\r\n            this.uniforms.set(this.resolutionVar, [ renderer.width, renderer.height ]);\r\n        }\r\n\r\n        return super.bind(renderPass);\r\n    }\r\n}\r\n", "/* eslint-disable @typescript-eslint/restrict-template-expressions */\r\n\r\nimport { CONFIG_DEFAULTS } from '../const';\r\nimport { ConfigStore } from '../ConfigStore';\r\n\r\nexport function AddBanner (): void\r\n{\r\n    const { title, version, url, color, background } = ConfigStore.get(CONFIG_DEFAULTS.BANNER);\r\n\r\n    if (title !== '')\r\n    {\r\n        const str = `${title} ${version}`.trimEnd();\r\n\r\n        console.log(\r\n            `%c${str}%c ${url}`,\r\n            `padding: 4px 16px; color: ${color}; background: ${background}`,\r\n            ''\r\n        );\r\n    }\r\n}\r\n", "import { CONFIG_DEFAULTS } from '../const';\r\nimport { ConfigStore } from '../ConfigStore';\r\nimport { Game } from '../../Game';\r\n\r\nexport function AddGlobalVar (game: Game): void\r\n{\r\n    const globalVar = ConfigStore.get(CONFIG_DEFAULTS.GLOBAL_VAR);\r\n\r\n    if (globalVar && window)\r\n    {\r\n        (window as unknown)[globalVar] = game;\r\n    }\r\n}\r\n", "import { Types, defineComponent } from 'bitecs';\r\n\r\nexport const TimeComponent = defineComponent({\r\n    lastTick: Types.ui32,\r\n    elapsed: Types.ui32,\r\n    delta: Types.f32,\r\n    fps: Types.f32,\r\n    fpsCount: Types.ui16,\r\n    frame: Types.ui32,\r\n    ms: Types.ui32,\r\n    prevFrame: Types.ui32\r\n});\r\n", "import { GameObjectWorld } from '../../GameObjectWorld';\r\nimport { TimeComponent } from './TimeComponent';\r\nimport { addComponent } from 'bitecs';\r\n\r\nexport function AddTimeComponent (id: number): void\r\n{\r\n    addComponent(GameObjectWorld, TimeComponent, id);\r\n\r\n    const now = performance.now();\r\n\r\n    TimeComponent.lastTick[id] = now;\r\n    TimeComponent.prevFrame[id] = now;\r\n}\r\n", "import { GetElement } from './GetElement';\r\n\r\nexport function AddToDOM (element: HTMLElement, parent?: string | HTMLElement): HTMLElement\r\n{\r\n    const target: HTMLElement = GetElement(parent);\r\n\r\n    target.appendChild(element);\r\n\r\n    return element;\r\n}\r\n", "import { AddToDOM } from '../../dom/AddToDOM';\r\nimport { CONFIG_DEFAULTS } from '../const';\r\nimport { ConfigStore } from '../ConfigStore';\r\nimport { RendererInstance } from '../../renderer/RendererInstance';\r\n\r\nexport function AddToParent (): void\r\n{\r\n    const parent = ConfigStore.get(CONFIG_DEFAULTS.PARENT);\r\n    const canvas = RendererInstance.get().canvas;\r\n\r\n    //  Only add to the DOM if they either didn't set a Parent, or expressly set it to be non-null\r\n    //  Otherwise we'll let them add the canvas to the DOM themselves\r\n\r\n    if (parent && canvas)\r\n    {\r\n        AddToDOM(canvas, parent);\r\n    }\r\n}\r\n", "import { CONFIG_DEFAULTS } from '../const';\r\nimport { ConfigStore } from '../ConfigStore';\r\n\r\nexport function CreateRenderer (): void\r\n{\r\n    const renderer = ConfigStore.get(CONFIG_DEFAULTS.RENDERER);\r\n\r\n    if (renderer)\r\n    {\r\n        new renderer();\r\n    }\r\n}\r\n", "import { Types, defineComponent } from 'bitecs';\r\n\r\nconst RenderStats = defineComponent({\r\n\r\n    //  The current Game Frame number\r\n    gameFrame: Types.ui32,\r\n\r\n    //  Total number of Scenes rendered\r\n    numScenes: Types.ui8,\r\n\r\n    //  Total number of Worlds rendered\r\n    numWorlds: Types.ui8,\r\n\r\n    //  Total number of Game Objects (across all worlds)\r\n    numGameObjects: Types.ui32,\r\n\r\n    //  Total number of Game Objects to be rendered (across all worlds)\r\n    numGameObjectsRendered: Types.ui32,\r\n\r\n    //  Total number of Game Objects with dirty local transforms\r\n    numDirtyLocalTransforms: Types.ui32,\r\n\r\n    //  Total number of Game Objects with dirty world transforms\r\n    numDirtyWorldTransforms: Types.ui32,\r\n\r\n    //  Total number of Game Objects with dirty vertices\r\n    numDirtyVertices: Types.ui32,\r\n\r\n    //  Total number of Worlds that had to recalculate their display lists\r\n    numDirtyWorldLists: Types.ui8,\r\n\r\n    //  How many Cameras were made dirty this frame across all Scenes?\r\n    numDirtyCameras: Types.ui32\r\n\r\n});\r\n\r\nexport const RenderStatsComponent = RenderStats;\r\n", "import { GameObjectWorld } from '../GameObjectWorld';\r\nimport { RenderStatsComponent } from './RenderStatsComponent';\r\nimport { addComponent } from 'bitecs';\r\n\r\nexport function AddRenderStatsComponent (id: number): void\r\n{\r\n    addComponent(GameObjectWorld, RenderStatsComponent, id);\r\n}\r\n", "import { CONFIG_DEFAULTS } from '../const';\r\nimport { ConfigStore } from '../ConfigStore';\r\nimport { ISceneConstructor } from '../../scenes/ISceneConstructor';\r\n\r\nexport function GetScenes (): ISceneConstructor[]\r\n{\r\n    return ConfigStore.get(CONFIG_DEFAULTS.SCENES);\r\n}\r\n", "import { RenderStatsComponent } from './RenderStatsComponent';\r\n\r\nexport function ResetRenderStats (id: number, gameFrame: number, scenes: number): void\r\n{\r\n    RenderStatsComponent.gameFrame[id] = gameFrame;\r\n    RenderStatsComponent.numScenes[id] = scenes;\r\n    RenderStatsComponent.numWorlds[id] = 0;\r\n    RenderStatsComponent.numGameObjects[id] = 0;\r\n    RenderStatsComponent.numGameObjectsRendered[id] = 0;\r\n    RenderStatsComponent.numDirtyWorldLists[id] = 0;\r\n    RenderStatsComponent.numDirtyVertices[id] = 0;\r\n    RenderStatsComponent.numDirtyLocalTransforms[id] = 0;\r\n    RenderStatsComponent.numDirtyWorldTransforms[id] = 0;\r\n    RenderStatsComponent.numDirtyCameras[id] = 0;\r\n}\r\n", "import { SceneManager } from './SceneManager';\r\n\r\nlet instance: SceneManager;\r\n\r\nexport const SceneManagerInstance =\r\n{\r\n    get: (): SceneManager =>\r\n    {\r\n        return instance;\r\n    },\r\n\r\n    set: (manager: SceneManager | null): void =>\r\n    {\r\n        if (instance)\r\n        {\r\n            throw new Error('Cannot instantiate SceneManager more than once');\r\n        }\r\n\r\n        instance = manager;\r\n    }\r\n};\r\n", "import { AddRenderStatsComponent } from './AddRenderStatsComponent';\r\nimport { Game } from '../Game';\r\nimport { GameInstance } from '../GameInstance';\r\nimport { GameObjectWorld } from '../GameObjectWorld';\r\nimport { GetScenes } from '../config/scenes/GetScenes';\r\nimport { IGameObject } from '../gameobjects/IGameObject';\r\nimport { IRenderPass } from '../renderer/webgl1/renderpass/IRenderPass';\r\nimport { IScene } from './IScene';\r\nimport { Once } from '../events/Once';\r\nimport { RenderStatsComponent } from './RenderStatsComponent';\r\nimport { ResetRenderStats } from './ResetRenderStats';\r\nimport { SceneManagerInstance } from './SceneManagerInstance';\r\nimport { TimeComponent } from '../components/timer/TimeComponent';\r\nimport { WorldList } from '../world/WorldList';\r\nimport { addEntity } from 'bitecs';\r\n\r\nexport class SceneManager\r\n{\r\n    readonly id: number = addEntity(GameObjectWorld);\r\n\r\n    game: Game;\r\n\r\n    scenes: Map<string, IScene> = new Map();\r\n\r\n    //  Used by Install to assign default scene keys when not specified\r\n    sceneIndex: number = 0;\r\n\r\n    //  Force the renderer to fully redraw\r\n    flush: boolean;\r\n\r\n    constructor ()\r\n    {\r\n        SceneManagerInstance.set(this);\r\n\r\n        this.game = GameInstance.get();\r\n\r\n        AddRenderStatsComponent(this.id);\r\n\r\n        Once(this.game, 'boot', () => this.boot());\r\n    }\r\n\r\n    boot (): void\r\n    {\r\n        const scenes = GetScenes();\r\n\r\n        if (scenes)\r\n        {\r\n            scenes.forEach(scene => new scene());\r\n        }\r\n    }\r\n\r\n    update (): void\r\n    {\r\n        const id = this.game.id;\r\n\r\n        const delta = TimeComponent.delta[id];\r\n        const time = TimeComponent.lastTick[id];\r\n        const gameFrame = TimeComponent.frame[id];\r\n\r\n        ResetRenderStats(this.id, gameFrame, this.scenes.size);\r\n\r\n        for (const scene of this.scenes.values())\r\n        {\r\n            const worlds = WorldList.get(scene);\r\n\r\n            for (const world of worlds)\r\n            {\r\n                world.beforeUpdate(delta, time);\r\n            }\r\n\r\n            if (scene.update)\r\n            {\r\n                scene.update(delta, time);\r\n            }\r\n\r\n            for (const world of worlds)\r\n            {\r\n                world.update(delta, time);\r\n            }\r\n\r\n            for (const world of worlds)\r\n            {\r\n                world.afterUpdate(delta, time);\r\n            }\r\n        }\r\n    }\r\n\r\n    //  Run through all Scenes and Worlds within them, telling them to prepare to render\r\n    preRender (): void\r\n    {\r\n        const id = this.game.id;\r\n\r\n        const gameFrame = TimeComponent.frame[id];\r\n\r\n        for (const scene of this.scenes.values())\r\n        {\r\n            const worlds = WorldList.get(scene);\r\n\r\n            for (const world of worlds)\r\n            {\r\n                if (world.preRender(gameFrame))\r\n                {\r\n                    this.flush = true;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    render (renderPass: IRenderPass): void\r\n    {\r\n        for (const scene of this.scenes.values())\r\n        {\r\n            const worlds = WorldList.get(scene);\r\n\r\n            for (const world of worlds)\r\n            {\r\n                world.renderGL(renderPass);\r\n            }\r\n        }\r\n\r\n        this.flush = false;\r\n    }\r\n\r\n    //  TODO - This isn't used internally - is used by debug panel - move out?\r\n    /*\r\n    getRenderList (): IGameObject[]\r\n    {\r\n        let output: IGameObject[] = [];\r\n\r\n        for (const scene of this.scenes.values())\r\n        {\r\n            const worlds = WorldList.get(scene);\r\n\r\n            for (const world of worlds)\r\n            {\r\n                output = output.concat(world.getRenderList());\r\n            }\r\n        }\r\n\r\n        return output;\r\n    }\r\n\r\n    updateWorldStats (numGameObjects: number, numRendered: number, numDisplayLists: number, numWorldTransforms: number): void\r\n    {\r\n        const id = this.id;\r\n\r\n        RenderStatsComponent.numGameObjects[id] += numGameObjects;\r\n        RenderStatsComponent.numGameObjectsRendered[id] += numRendered;\r\n        RenderStatsComponent.numDirtyWorldLists[id] += numDisplayLists;\r\n        RenderStatsComponent.numDirtyWorldTransforms[id] += numWorldTransforms;\r\n    }\r\n    */\r\n}\r\n", "import { SceneManager } from './SceneManager';\r\n\r\nexport function CreateSceneManager (): void\r\n{\r\n    new SceneManager();\r\n}\r\n", "export function DOMContentLoaded (callback: () => void): void\r\n{\r\n    const readyState = document.readyState;\r\n\r\n    if (readyState === 'complete' || readyState === 'interactive')\r\n    {\r\n        callback();\r\n\r\n        return;\r\n    }\r\n\r\n    const check = (): void =>\r\n    {\r\n        document.removeEventListener('deviceready', check, true);\r\n        document.removeEventListener('DOMContentLoaded', check, true);\r\n        window.removeEventListener('load', check, true);\r\n\r\n        callback();\r\n    };\r\n\r\n    // TODO - Swap is IsCordova call\r\n\r\n    if (!document.body)\r\n    {\r\n        window.setTimeout(check, 20);\r\n    }\r\n    else if (window.hasOwnProperty('cordova'))\r\n    {\r\n        document.addEventListener('deviceready', check, true);\r\n    }\r\n    else\r\n    {\r\n        document.addEventListener('DOMContentLoaded', check, true);\r\n        window.addEventListener('load', check, true);\r\n    }\r\n}\r\n", "import { IEventInstance } from './IEventInstance';\r\n\r\nexport class EventEmitter\r\n{\r\n    events: Map<string, Set<IEventInstance>>;\r\n\r\n    constructor ()\r\n    {\r\n        this.events = new Map();\r\n    }\r\n}\r\n", "import { IRenderStats } from './IRenderStats';\r\nimport { RenderStatsComponent } from './RenderStatsComponent';\r\nimport { SceneManagerInstance } from './SceneManagerInstance';\r\n\r\nexport function GetRenderStatsAsObject (obj?: IRenderStats): IRenderStats\r\n{\r\n    const id = SceneManagerInstance.get().id;\r\n\r\n    if (!obj)\r\n    {\r\n        obj = { fps: 0, delta: 0, gameFrame: 0, numScenes: 0, numWorlds: 0, numGameObjects: 0, numGameObjectsRendered: 0, numDirtyLocalTransforms: 0, numDirtyWorldTransforms: 0, numDirtyVertices: 0, numDirtyWorldLists: 0, numDirtyCameras: 0 };\r\n    }\r\n\r\n    obj.gameFrame = RenderStatsComponent.gameFrame[id];\r\n    obj.numScenes = RenderStatsComponent.numScenes[id];\r\n    obj.numWorlds = RenderStatsComponent.numWorlds[id];\r\n    obj.numGameObjects = RenderStatsComponent.numGameObjects[id];\r\n    obj.numGameObjectsRendered = RenderStatsComponent.numGameObjectsRendered[id];\r\n    obj.numDirtyLocalTransforms = RenderStatsComponent.numDirtyLocalTransforms[id];\r\n    obj.numDirtyWorldTransforms = RenderStatsComponent.numDirtyWorldTransforms[id];\r\n    obj.numDirtyVertices = RenderStatsComponent.numDirtyVertices[id];\r\n    obj.numDirtyWorldLists = RenderStatsComponent.numDirtyWorldLists[id];\r\n    obj.numDirtyCameras = RenderStatsComponent.numDirtyCameras[id];\r\n\r\n    return obj;\r\n}\r\n", "import { TimeComponent } from './TimeComponent';\r\n\r\nexport function ResetLastTick (id: number): void\r\n{\r\n    TimeComponent.lastTick[id] = performance.now();\r\n}\r\n", "import { ISceneConfig } from './ISceneConfig';\r\n\r\nexport function GetConfigValue<Property extends keyof ISceneConfig> (config: ISceneConfig, property: Property, defaultValue: ISceneConfig[Property]): ISceneConfig[Property]\r\n{\r\n    if (Object.prototype.hasOwnProperty.call(config, property))\r\n    {\r\n        return config[property];\r\n    }\r\n    else\r\n    {\r\n        return defaultValue;\r\n    }\r\n}\r\n", "import { GetConfigValue } from './GetConfigValue';\r\nimport { IScene } from './IScene';\r\nimport { ISceneConfig } from './ISceneConfig';\r\nimport { SceneManagerInstance } from './SceneManagerInstance';\r\nimport { WorldList } from '../world/WorldList';\r\n\r\nexport function Install (scene: IScene, config: string | ISceneConfig = {}): void\r\n{\r\n    const sceneManager = SceneManagerInstance.get();\r\n\r\n    const size = sceneManager.scenes.size;\r\n    const sceneIndex = sceneManager.sceneIndex;\r\n    const firstScene = (size === 0);\r\n\r\n    if (typeof config === 'string')\r\n    {\r\n        scene.key = config;\r\n    }\r\n    else if (config || (!config && firstScene))\r\n    {\r\n        scene.key = GetConfigValue(config, 'key', 'scene' + sceneIndex.toString());\r\n    }\r\n\r\n    if (sceneManager.scenes.has(scene.key))\r\n    {\r\n        console.warn('Scene key already in use: ' + scene.key);\r\n    }\r\n    else\r\n    {\r\n        sceneManager.scenes.set(scene.key, scene);\r\n\r\n        sceneManager.flush = true;\r\n\r\n        sceneManager.sceneIndex++;\r\n    }\r\n\r\n    WorldList.set(scene, []);\r\n}\r\n", "import { Game } from '../Game';\r\nimport { GameInstance } from '../GameInstance';\r\nimport { IEventEmitter } from '../events/IEventEmitter';\r\nimport { IEventInstance } from '../events/IEventInstance';\r\nimport { IScene } from './IScene';\r\nimport { ISceneConfig } from './ISceneConfig';\r\nimport { Install } from './Install';\r\n\r\nexport class Scene implements IScene, IEventEmitter\r\n{\r\n    key: string;\r\n    game: Game;\r\n    events: Map<string, Set<IEventInstance>>;\r\n\r\n    constructor (config?: string | ISceneConfig)\r\n    {\r\n        this.game = GameInstance.get();\r\n        this.events = new Map();\r\n\r\n        Install(this, config);\r\n    }\r\n}\r\n", "import { SetBackgroundColor } from './backgroundcolor/SetBackgroundColor';\r\nimport { SetBanner } from './banner/SetBanner';\r\nimport { SetBatchSize } from './batchsize/SetBatchSize';\r\nimport { SetDefaultOrigin } from './defaultorigin/SetDefaultOrigin';\r\nimport { SetMaxTextures } from './maxtextures/SetMaxTextures';\r\nimport { SetSize } from './size/SetSize';\r\nimport { SetWebGLContext } from './webglcontext/SetWebGLContext';\r\nimport { SetWorldSize } from './worldsize/SetWorldSize';\r\n\r\n//  Phaser 4 defaults\r\n\r\nexport function SetConfigDefaults (): void\r\n{\r\n    SetBackgroundColor(0);\r\n    SetBatchSize(4096);\r\n    SetBanner('Phaser', '4.0.0', 'https://phaser4.io');\r\n    SetMaxTextures(0);\r\n    SetDefaultOrigin(0.5, 0.5);\r\n    SetSize(800, 600, 1);\r\n    SetWebGLContext({\r\n        antialias: true,\r\n        desynchronized: true,\r\n        preserveDrawingBuffer: true\r\n    });\r\n    SetWorldSize(512);\r\n}\r\n", "import { GameInstance } from '../../GameInstance';\r\nimport { TimeComponent } from './TimeComponent';\r\n\r\nexport function UpdateDelta (id: number, time: number): void\r\n{\r\n    //  Note that privacy.resistFingerprinting can round this value to 100ms or more!\r\n    const now = performance.now();\r\n\r\n    //  How long it took to process this frame\r\n    const delta = now - time;\r\n\r\n    TimeComponent.fpsCount[id]++;\r\n\r\n    if (now >= TimeComponent.prevFrame[id] + 1000)\r\n    {\r\n        TimeComponent.fps[id] = (TimeComponent.fpsCount[id] * 1000) / (now - TimeComponent.prevFrame[id]);\r\n        TimeComponent.prevFrame[id] = now;\r\n        TimeComponent.fpsCount[id] = 0;\r\n    }\r\n\r\n    TimeComponent.lastTick[id] = now;\r\n    TimeComponent.elapsed[id] += delta;\r\n    TimeComponent.delta[id] = delta;\r\n    TimeComponent.frame[id]++;\r\n\r\n    GameInstance.setFrame(TimeComponent.frame[id]);\r\n}\r\n", "import { TimeComponent } from './TimeComponent';\r\n\r\nexport function UpdateTime (id: number, time: number): void\r\n{\r\n    TimeComponent.ms[id] = time - TimeComponent.lastTick[id];\r\n}\r\n", "import { AddBanner } from './config/banner/AddBanner';\r\nimport { AddGlobalVar } from './config/globalvar/AddGlobalVar';\r\nimport { AddTimeComponent } from './components/timer/AddTimeComponent';\r\nimport { AddToParent } from './config/parent/AddToParent';\r\nimport { CreateRenderer } from './config/renderer/CreateRenderer';\r\nimport { CreateSceneManager } from './scenes/CreateSceneManager';\r\nimport { CreateTextureManager } from './textures/CreateTextureManager';\r\nimport { DOMContentLoaded } from './dom/DOMContentLoaded';\r\nimport { Emit } from './events/Emit';\r\nimport { EventEmitter } from './events/EventEmitter';\r\nimport { GameInstance } from './GameInstance';\r\nimport { GameObjectWorld } from './GameObjectWorld';\r\nimport { GetRenderStatsAsObject } from './scenes/GetRenderStatsAsObject';\r\nimport { IRenderPass } from './renderer/webgl1/renderpass/IRenderPass';\r\nimport { IRenderStats } from './scenes/IRenderStats';\r\nimport { RendererInstance } from './renderer/RendererInstance';\r\nimport { ResetLastTick } from './components/timer/ResetLastTick';\r\nimport { SceneManagerInstance } from './scenes';\r\nimport { SetConfigDefaults } from './config/SetConfigDefaults';\r\nimport { TimeComponent } from './components/timer/TimeComponent';\r\nimport { UpdateDelta } from './components/timer/UpdateDelta';\r\nimport { UpdateTime } from './components/timer/UpdateTime';\r\nimport { addEntity } from 'bitecs';\r\n\r\nexport class Game extends EventEmitter\r\n{\r\n    readonly id: number = addEntity(GameObjectWorld);\r\n\r\n    readonly VERSION: string = '4.0.0-beta1';\r\n\r\n    isBooted: boolean = false;\r\n    isPaused: boolean = false;\r\n\r\n    //  TODO - Allow update to run on different tick to render\r\n    //  TODO - Allow update and render to be called directly\r\n    willUpdate: boolean = true;\r\n    willRender: boolean = true;\r\n\r\n    renderStats: IRenderStats;\r\n\r\n    constructor (...settings: { (): void }[])\r\n    {\r\n        super();\r\n\r\n        GameInstance.set(this);\r\n\r\n        SetConfigDefaults();\r\n\r\n        DOMContentLoaded(() => this.boot(settings));\r\n    }\r\n\r\n    boot (settings: { (): void }[]): void\r\n    {\r\n        //  Activate the settings post DOM Content Loaded\r\n        settings.forEach(setting => setting());\r\n\r\n        CreateRenderer();\r\n        CreateTextureManager();\r\n        CreateSceneManager();\r\n\r\n        AddTimeComponent(this.id);\r\n        AddBanner();\r\n        AddGlobalVar(this);\r\n        AddToParent();\r\n\r\n        this.renderStats = GetRenderStatsAsObject();\r\n\r\n        this.isBooted = true;\r\n\r\n        Emit(this, 'boot');\r\n\r\n        requestAnimationFrame(now => this.step(now));\r\n    }\r\n\r\n    pause (): void\r\n    {\r\n        this.isPaused = true;\r\n    }\r\n\r\n    resume (): void\r\n    {\r\n        this.isPaused = false;\r\n\r\n        ResetLastTick(this.id);\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    update (delta: number, time: number): void\r\n    {\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    render (renderPass: IRenderPass, delta: number, time: number): void\r\n    {\r\n    }\r\n\r\n    step (time: number): void\r\n    {\r\n        const id = this.id;\r\n        const renderer = RendererInstance.get();\r\n        const sceneManager = SceneManagerInstance.get();\r\n\r\n        UpdateTime(id, time);\r\n\r\n        if (!this.isPaused)\r\n        {\r\n            const delta = TimeComponent.delta[id];\r\n\r\n            if (this.willUpdate)\r\n            {\r\n                sceneManager.update();\r\n\r\n                this.update(delta, time);\r\n\r\n                Emit(this, 'update', delta, time);\r\n            }\r\n\r\n            if (this.willRender)\r\n            {\r\n                sceneManager.preRender();\r\n\r\n                renderer.begin(sceneManager.flush);\r\n\r\n                sceneManager.render(renderer.renderPass);\r\n\r\n                this.render(renderer.renderPass, delta, time);\r\n\r\n                Emit(this, 'render', renderer.renderPass, delta, time);\r\n\r\n                renderer.end();\r\n            }\r\n        }\r\n\r\n        UpdateDelta(id, time);\r\n\r\n        GetRenderStatsAsObject(this.renderStats);\r\n\r\n        this.renderStats.fps = TimeComponent.fps[id];\r\n        this.renderStats.delta = TimeComponent.delta[id];\r\n\r\n        Emit(this, 'step');\r\n\r\n        requestAnimationFrame(now => this.step(now));\r\n    }\r\n\r\n    destroy (): void\r\n    {\r\n        //  TODO - Code destroy function\r\n    }\r\n}\r\n", "import { BackgroundColor, GlobalVar, Parent, Scenes, WebGL } from '../../../../../phaser-genesis/src/config';\r\nimport { EffectLayer, Rectangle, RenderLayer } from '../../../../../phaser-genesis/src/gameobjects';\r\n\r\nimport { AddChildren } from '../../../../../phaser-genesis/src/display';\r\nimport { FXShader } from '../../../../../phaser-genesis/src/renderer/webgl1/shaders/FXShader';\r\nimport { Game } from '../../../../../phaser-genesis/src/Game';\r\nimport { On } from '../../../../../phaser-genesis/src/events';\r\nimport { Scene } from '../../../../../phaser-genesis/src/scenes/Scene';\r\nimport { StaticWorld } from '../../../../../phaser-genesis/src/world/StaticWorld';\r\n\r\nconst cloudsFragmentShader = `\r\n#define SHADER_NAME CLOUDS_FRAG\r\n\r\n/*\r\n * Original shader from: https://www.shadertoy.com/view/MtjGRK\r\n */\r\n\r\nprecision mediump float;\r\n\r\nvarying vec2 vTextureCoord;\r\nvarying float vTextureId;\r\nvarying vec4 vTintColor;\r\n\r\nuniform sampler2D uTexture;\r\nuniform float uTime;\r\nuniform vec2 uResolution;\r\n\r\n#define PI 3.14159265358979323\r\n\r\n//Random\r\nfloat rand(vec2 uv)\r\n{\r\n    float dt = dot(uv, vec2(12.9898, 78.233));\r\n\treturn fract(sin(mod(dt, PI / 2.0)) * 43758.5453);\r\n}\r\n\r\n//Clouds from (https://www.shadertoy.com/view/MlS3z1)\r\nconst int iter = 8;\r\n\r\nfloat turbulence(vec2 fragCoord, float octave, int id)\r\n{\r\n    float col = 0.0;\r\n    vec2 xy;\r\n    vec2 frac;\r\n    vec2 tmp1;\r\n    vec2 tmp2;\r\n    float i2;\r\n    float amp;\r\n    float maxOct = octave;\r\n    float time = uTime / 1000.0;\r\n    for (int i = 0; i < iter; i++)\r\n    {\r\n        amp = maxOct / octave;\r\n        i2 = float(i);\r\n        xy = id == 1 || id == 4? (fragCoord + 50.0 * float(id) * time / (4.0 + i2)) / octave : fragCoord / octave;\r\n        frac = fract(xy);\r\n        tmp1 = mod(floor(xy) + uResolution.xy, uResolution.xy);\r\n        tmp2 = mod(tmp1 + uResolution.xy - 1.0, uResolution.xy);\r\n        col += frac.x * frac.y * rand(tmp1) / amp;\r\n        col += frac.x * (1.0 - frac.y) * rand(vec2(tmp1.x, tmp2.y)) / amp;\r\n        col += (1.0 - frac.x) * frac.y * rand(vec2(tmp2.x, tmp1.y)) / amp;\r\n        col += (1.0 - frac.x) * (1.0 - frac.y) * rand(tmp2) / amp;\r\n        octave /= 2.0;\r\n    }\r\n    return (col);\r\n}\r\n//____________________________________________________\r\n\r\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\r\n{\r\n\tvec2 uv = fragCoord.xy / uResolution.xy;\r\n\r\n    vec3 sky = clamp(vec3(0.2, sin(uv.y), 1.0) + 0.3, 0.0, 1.0);\r\n\r\n    vec4 color = texture2D(uTexture, vTextureCoord);\r\n\r\n    // vec4 skyandtexture = mix(sky, color);\r\n\r\n    float cloud1 = turbulence(fragCoord, 128.0, 1);\r\n    float cloud2 = turbulence(fragCoord + 2000.0, 128.0, 1);\r\n    float cloudss = clamp(pow(mix(cloud1, cloud2, 0.5), 30.0) / 9.0, 0.0, 1.0);\r\n\r\n\t// fragColor = sky + color + vec4(cloudss, 1.0);\r\n\r\n    fragColor = color * vec4(sky + cloudss, 1.0);\r\n}\r\n\r\nvoid main(void)\r\n{\r\n    mainImage(gl_FragColor, gl_FragCoord.xy);\r\n}\r\n`;\r\n\r\nconst sineWaveFragmentShader = `\r\nprecision mediump float;\r\n\r\nvarying vec2 vTextureCoord;\r\nvarying float vTextureId;\r\nvarying vec4 vTintColor;\r\n\r\nuniform sampler2D uTexture;\r\nuniform float uTime;\r\nuniform vec2 uResolution;\r\n\r\nvoid main (void)\r\n{\r\n    vec2 uv = gl_FragCoord.xy / uResolution.xy;\r\n\r\n    // Represents the v/y coord(0 to 1) that will not sway.\r\n    float fixedBasePosY = 0.0;\r\n\r\n    // Configs for you to get the sway just right.\r\n    float speed = 3.0;\r\n    float verticleDensity = 6.0;\r\n    float swayIntensity = 0.2;\r\n\r\n    // Putting it all together.\r\n    float offsetX = sin(uv.y * verticleDensity + (uTime * 0.001) * speed) * swayIntensity;\r\n\r\n    // Offsettin the u/x coord.\r\n    uv.x += offsetX * (uv.y - fixedBasePosY);\r\n\r\n    gl_FragColor = texture2D(uTexture, uv);\r\n}`;\r\n\r\nconst plasmaFragmentShader = `\r\nprecision mediump float;\r\n\r\nvarying vec2 vTextureCoord;\r\nvarying float vTextureId;\r\nvarying vec4 vTintColor;\r\n\r\nuniform sampler2D uTexture;\r\nuniform float uTime;\r\nuniform vec2 uResolution;\r\n\r\nconst float PI = 3.14159265;\r\nfloat ptime = uTime * 0.0001;\r\nfloat alpha = 1.0;\r\nfloat size = 0.03;\r\nfloat redShift = 0.5;\r\nfloat greenShift = 0.5;\r\nfloat blueShift = 0.9;\r\n\r\nvoid main (void)\r\n{\r\n    vec4 tcolor = texture2D(uTexture, vTextureCoord);\r\n\r\n    float color1, color2, color;\r\n\r\n    color1 = (sin(dot(gl_FragCoord.xy, vec2(sin(ptime * 3.0), cos(ptime * 3.0))) * 0.02 + ptime * 3.0) + 1.0) / 2.0;\r\n    vec2 center = vec2(640.0 / 2.0, 360.0 / 2.0) + vec2(640.0 / 2.0 * sin(-ptime * 3.0), 360.0 / 2.0 * cos(-ptime * 3.0));\r\n    color2 = (cos(length(gl_FragCoord.xy - center) * size) + 1.0) / 2.0;\r\n    color = (color1 + color2) / 2.0;\r\n\r\n    float red = (cos(PI * color / redShift + ptime * 3.0) + 1.0) / 2.0;\r\n    float green = (sin(PI * color / greenShift + ptime * 3.0) + 1.0) / 2.0;\r\n    float blue = (sin(PI * color / blueShift + ptime * 3.0) + 1.0) / 2.0;\r\n\r\n    gl_FragColor = tcolor * vec4(red, green, blue, alpha);\r\n}`;\r\n\r\nconst dotsFragmentShader = `\r\nprecision mediump float;\r\n\r\nvarying vec2 vTextureCoord;\r\nvarying float vTextureId;\r\nvarying vec4 vTintColor;\r\n\r\nuniform sampler2D uTexture;\r\n\r\nuniform float time;\r\nuniform vec2 resolution;\r\n\r\nvec2 rotate(vec2 v, float a)\r\n{\r\n\tfloat s = sin(a);\r\n\tfloat c = cos(a);\r\n\tmat2 m = mat2(c, -s, s, c);\r\n\treturn m * v;\r\n}\r\n\r\nfloat tw()\r\n{\r\n\treturn sin(time) * 0.25 + 1.25;\r\n}\r\n\r\nfloat circle(vec2 pt, float radius)\r\n{\r\n\treturn step(length(pt), radius + sin(pt.x * radius * 44.*tw()) * cos(pt.y * radius *44.*tw()));\r\n}\r\n\r\nvoid main( void )\r\n{\r\n    vec4 tcolor = texture2D(uTexture, vTextureCoord);\r\n\r\n    vec2 uv = (gl_FragCoord.xy * 2. - resolution) / resolution.y; //* mix(0.067, 3.0, tw());\r\n\r\n\tvec3 color;\r\n\tfloat t = uv.x * 72. + time * 50. + tw() * 1000.;\r\n\tfor (int i = 0; i < 3; i++) {\r\n\t\tfloat d = abs(uv.y - sin(radians(t)) * .3 * float(i) * sin(time));\r\n\t\tcolor[i] = .05 / (d * d);\r\n\t\tt += 120.;\r\n\t}\r\n\tuv = rotate(uv, time*1.0);\r\n\tcolor *= circle(uv, 0.45);\r\n\t\r\n\tgl_FragColor = vec4(tcolor.rgb * color, tcolor.a);\r\n}`;\r\n\r\nconst starsFragmentShader = `\r\n#ifdef GL_ES\r\nprecision highp float;\r\n#endif\r\n \r\nuniform float time;\r\nuniform vec2 resolution;\r\n\r\nvarying vec2 vTextureCoord;\r\nvarying float vTextureId;\r\nvarying vec4 vTintColor;\r\n\r\nuniform sampler2D uTexture;\r\n\r\n#define mouse vec2(sin(time)/48., cos(time)/48.)\r\n#define iterations 14\r\n#define formuparam2 0.79\r\n \r\n#define volsteps 5\r\n#define stepsize 0.390\r\n \r\n#define zoom 0.900\r\n#define tile   0.850\r\n#define speed2  100.0 \r\n#define brightness 0.003\r\n#define darkmatter 0.400\r\n#define distfading 0.560\r\n#define saturation 0.800\r\n\r\n\r\n#define transverseSpeed zoom*2.0\r\n#define cloud 0.11 \r\n\r\n \r\nfloat triangle(float x, float a) { \r\n\tfloat output2 = 2.0*abs(  2.0*  ( (x/a) - floor( (x/a) + 0.5) ) ) - 1.0;\r\n\treturn output2;\r\n}\r\n \r\nfloat field(in vec3 p) {\t\r\n\tfloat strength = 7. + .03 * log(1.e-6 + fract(sin(time) * 4373.11));\r\n\tfloat accum = 0.;\r\n\tfloat prev = 0.;\r\n\tfloat tw = 0.;\t\r\n\r\n\tfor (int i = 0; i < 6; ++i) {\r\n\t\tfloat mag = dot(p, p);\r\n\t\tp = abs(p) / mag + vec3(-.5, -.8 + 0.1*sin(time*0.7 + 2.0), -1.1+0.3*cos(time*0.3));\r\n\t\tfloat w = exp(-float(i) / 7.);\r\n\t\taccum += w * exp(-strength * pow(abs(mag - prev), 2.3));\r\n\t\ttw += w;\r\n\t\tprev = mag;\r\n\t}\r\n\treturn max(0., 5. * accum / tw - .7);\r\n}\r\n\r\n\r\n\r\nvoid main() {   \r\n     \tvec2 uv2 = 2. * gl_FragCoord.xy / vec2(512) - 1.;\r\n\tvec2 uvs = uv2 * vec2(512)  / 512.;\r\n\t\r\n\tfloat time2 = time;               \r\n        float speed = speed2;\r\n        speed = .01 * cos(time2*0.02 + 3.1415926/4.0);          \r\n\t\t\r\n    \tfloat formuparam = formuparam2;\r\n\t\r\n    \t\t\r\n\tvec2 uv = uvs;\t\t       \r\n\t\r\n\tfloat a_xz = 0.9;\r\n\tfloat a_yz = -.6;\r\n\tfloat a_xy = 0.9 + time*0.08;\t\r\n\t\r\n\tmat2 rot_xz = mat2(cos(a_xz),sin(a_xz),-sin(a_xz),cos(a_xz));\t\r\n\tmat2 rot_yz = mat2(cos(a_yz),sin(a_yz),-sin(a_yz),cos(a_yz));\t\t\r\n\tmat2 rot_xy = mat2(cos(a_xy),sin(a_xy),-sin(a_xy),cos(a_xy));\r\n\t\r\n\r\n\tfloat v2 =1.0;\t\r\n\tvec3 dir=vec3(uv*zoom,1.); \r\n\tvec3 from=vec3(0.0, 0.0,0.0);                               \r\n        from.x -= 5.0*(mouse.x-0.5);\r\n        from.y -= 5.0*(mouse.y-0.5);\r\n               \r\n               \r\n\tvec3 forward = vec3(0.,0.,1.);   \r\n\tfrom.x += transverseSpeed*(1.0)*cos(0.01*time) + 0.001*time;\r\n\tfrom.y += transverseSpeed*(1.0)*sin(0.01*time) +0.001*time;\r\n\tfrom.z += 0.003*time;\t\r\n\t\r\n\tdir.xy*=rot_xy;\r\n\tforward.xy *= rot_xy;\r\n\tdir.xz*=rot_xz;\r\n\tforward.xz *= rot_xz;\t\r\n\tdir.yz*= rot_yz;\r\n\tforward.yz *= rot_yz;\r\n\t\r\n\tfrom.xy*=-rot_xy;\r\n\tfrom.xz*=rot_xz;\r\n\tfrom.yz*= rot_yz;\r\n\t\r\n\tfloat zooom = (time2-3311.)*speed;\r\n\tfrom += forward* zooom;\r\n\tfloat sampleShift = mod( zooom, stepsize );\r\n\t \r\n\tfloat zoffset = -sampleShift;\r\n\tsampleShift /= stepsize;\r\n\t\r\n\t\r\n\tfloat s=0.24;\r\n\tfloat s3 = s + stepsize/2.0;\r\n\tvec3 v=vec3(0.);\r\n\tfloat t3 = 0.0;\t\r\n\t\r\n\tvec3 backCol2 = vec3(0.);\r\n\tfor (int r=0; r<volsteps; r++) {\r\n\t\tvec3 p2=from+(s+zoffset)*dir;\r\n\t\tvec3 p3=from+(s3+zoffset)*dir;\r\n\t\t\r\n\t\tp2 = abs(vec3(tile)-mod(p2,vec3(tile*2.)));\r\n\t\tp3 = abs(vec3(tile)-mod(p3,vec3(tile*2.)));\t\t\r\n\t\t#ifdef cloud\r\n\t\tt3 = field(p3);\r\n\t\t#endif\r\n\t\t\r\n\t\tfloat pa,a=pa=0.;\r\n\t\tfor (int i=0; i<iterations; i++) {\r\n\t\t\tp2=abs(p2)/dot(p2,p2)-formuparam;\r\n\t\t\t\r\n\t\t\tfloat D = abs(length(p2)-pa);\r\n\t\t\ta += i > 7 ? min( 12., D) : D;\r\n\t\t\tpa=length(p2);\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\ta*=a*a;\r\n\t\t\r\n\t\tfloat s1 = s+zoffset;\r\n\t\t\r\n\t\tfloat fade = pow(distfading,max(0.,float(r)-sampleShift));\t\t\r\n\t\t\t\r\n\t\tv+=fade;\r\n\t       \t\r\n\r\n\t\t\r\n\t\tif( r == 0 )\r\n\t\t\tfade *= (1. - (sampleShift));\r\n\t\t\r\n\t\tif( r == volsteps-1 )\r\n\t\t\tfade *= sampleShift;\r\n\t\tv+=vec3(s1,s1*s1,s1*s1*s1*s1)*a*brightness*fade;\r\n\t\t\r\n\t\tbackCol2 += mix(.4, 1., v2) * vec3(1.8 * t3 * t3 * t3, 1.4 * t3 * t3, t3) * fade;\r\n\r\n\t\t\r\n\t\ts+=stepsize;\r\n\t\ts3 += stepsize;\t\t\r\n\t}\r\n\t\t       \r\n\tv=mix(vec3(length(v)),v,saturation);\t\r\n\r\n\tvec4 forCol2 = vec4(v*.01,1.);\t\r\n\t#ifdef cloud\r\n\tbackCol2 *= cloud;\r\n\t#endif\t\r\n\tbackCol2.b *= 1.8;\r\n\tbackCol2.r *= 0.05;\t\r\n\t\r\n\tbackCol2.b = 0.5*mix(backCol2.g, backCol2.b, 0.8);\r\n\tbackCol2.g = 0.0;\r\n\tbackCol2.bg = mix(backCol2.gb, backCol2.bg, 0.5*(cos(time*0.01) + 1.0));\r\n\r\n    vec4 tcolor = texture2D(uTexture, vTextureCoord);\r\n\r\n\tgl_FragColor = vec4(tcolor.rgb * (forCol2.rgb + backCol2), tcolor.a);\r\n}`;\r\n\r\n\r\nconst flowerFragmentShader = `\r\nprecision mediump float;\r\n\r\nvarying vec2 vTextureCoord;\r\nvarying float vTextureId;\r\nvarying vec4 vTintColor;\r\n\r\nuniform float uTime;\r\nuniform vec2 uResolution;\r\nuniform sampler2D uTexture;\r\n\r\nvec2 rotate(vec2 v, float a) {\r\n\tfloat s = sin(a);\r\n\tfloat c = cos(a);\r\n\tmat2 m = mat2(c, -s, s, c);\r\n\treturn m * v;\r\n}\r\n\r\nfloat tw()\r\n{\r\n\treturn sin(uTime) * 0.5 + 0.5;\r\n}\r\n\r\nvoid main( void ) {\r\n    vec4 tcolor = texture2D(uTexture, vTextureCoord);\r\n\r\n    vec2 uv = gl_FragCoord.xy / uResolution.y * 2.;\r\n\tuv.y = uv.y - 0.5;\r\n\tuv.x = uv.x - 1.0 - sin(uTime/4.0);\r\n\tuv = rotate(uv, uTime * 0.5) * length(uv)/3.;\r\n\tuv = 0.3 * uv * length(uv +cos(uTime*uv.x*sin(uv.y)) + 2.0 * tw());\r\n\tuv = floor(uv * 20.) / 20.0 + tw();\r\n\t\r\n\tvec3 color;\r\n\tfloat t = uv.x * 120.0 + 45.0 * uTime;\r\n\tfor (int i = 0; i < 3; i++) {\r\n\t\tfloat d = sin(radians(t)) * 0.5 + 0.5;\r\n\t\tcolor[i] = d;\r\n\t\tt -= 120.;\r\n\t}\r\n\tgl_FragColor = vec4(tcolor.rgb * color, tcolor.a);\r\n}`;\r\n\r\nclass Demo extends Scene\r\n{\r\n    constructor ()\r\n    {\r\n        super();\r\n\r\n        // const plasma = new FXShader({ fragmentShader: plasmaFragmentShader });\r\n        // const sine = new FXShader({ fragmentShader: sineWaveFragmentShader });\r\n        // const clouds = new FXShader({ fragmentShader: cloudsFragmentShader });\r\n        // const flower = new FXShader({ fragmentShader: flowerFragmentShader });\r\n        // const dots = new FXShader({ fragmentShader: dotsFragmentShader });\r\n        const stars = new FXShader({ fragmentShader: starsFragmentShader });\r\n\r\n        const world = new StaticWorld(this);\r\n\r\n        const layer = new EffectLayer();\r\n        const layer2 = new RenderLayer();\r\n\r\n        // dots.timeScale = 0.001;\r\n        stars.timeScale = 0.001;\r\n        // flower.timeScale = 0.001;\r\n\r\n        // layer.shaders.push(flower);\r\n        // layer.shaders.push(plasma);\r\n        // layer.shaders.push(sine);\r\n        // layer.shaders.push(clouds);\r\n        // layer.shaders.push(dots);\r\n        // layer.shaders.push(stars);\r\n\r\n        const rect = new Rectangle(400, 300, 512, 512, 0xff0000);\r\n\r\n        rect.rotation = 0.4;\r\n        rect.skew.set(2, 1);\r\n\r\n        On(world, 'update', () => {\r\n\r\n            rect.rotation += 0.01;\r\n            // rect.x += 1;\r\n\r\n        });\r\n\r\n        window['bob'] = rect;\r\n\r\n        // AddChildren(world, rect);\r\n\r\n        AddChildren(layer2, rect);\r\n\r\n        // AddChildren(layer, rect);\r\n\r\n        // AddChildren(world, layer);\r\n\r\n        AddChildren(world, layer2);\r\n    }\r\n}\r\n\r\nnew Game(\r\n    WebGL(),\r\n    Parent('gameParent'),\r\n    GlobalVar('Phaser4'),\r\n    BackgroundColor(0x2d2d2d),\r\n    Scenes(Demo)\r\n);\r\n"],
  "mappings": ";;AAAO,MAAM,kBAAkB;AAAA,IAC3B,MAAM;AAAA,IACN,kBAAkB;AAAA,IAClB,QAAQ;AAAA,IACR,YAAY;AAAA,IACZ,gBAAgB;AAAA,IAChB,QAAQ;AAAA,IACR,gBAAgB;AAAA,IAChB,YAAY;AAAA,IACZ,cAAc;AAAA,IACd,QAAQ;AAAA,IACR,UAAU;AAAA,IACV,QAAQ;AAAA,IACR,MAAM;AAAA,IACN,eAAe;AAAA,IACf,OAAO;AAAA,IACP,YAAY;AAAA;;;AChBT,MAAM,cAAc,IAAI;;;ACGxB,8BAA6B,OACpC;AACI,gBAAY,IAAI,gBAAgB,kBAAkB;AAAA;;;ACH/C,2BAA0B,OACjC;AACI,WAAO,MACP;AACI,yBAAmB;AAAA;AAAA;;;ACHpB,qBAAoB,QAAgB,IAAI,UAAkB,IAAI,MAAc,IAAI,QAAgB,QAAQ,aAAqB,yCACpI;AACI,gBAAY,IAAI,gBAAgB,QAAQ,EAAE,OAAO,SAAS,KAAK,OAAO;AAAA;;;ACFnE,wBAAuB,MAC9B;AACI,gBAAY,IAAI,gBAAgB,YAAY;AAAA;;;ACGhD,MAAM,QAA6B;AAE5B,MAAM,eACb;AAAA,IACI,KAAK,CAAC,SAAmB,aACzB;AACI,YAAM,KAAK,EAAE,SAAS;AAAA;AAAA,IAG1B,KAAK,MACL;AACI,aAAO;AAAA;AAAA,IAGX,OAAO,MACP;AACI,YAAM,SAAS;AAAA;AAAA;;;ACrBhB,gCACP;AACI,WAAO,YAAY,IAAI,gBAAgB;AAAA;;;ACFpC,uBACP;AACI,WAAO,YAAY,IAAI,gBAAgB,MAAM;AAAA;;;ACF1C,2BACP;AACI,WAAO,YAAY,IAAI,gBAAgB,MAAM;AAAA;;;ACF1C,sBACP;AACI,WAAO,YAAY,IAAI,gBAAgB,MAAM;AAAA;;;ACD1C,uBAAsB,UAC7B;AACI,gBAAY,IAAI,gBAAgB,UAAU;AAAA;;;ACHvC,4BAA2B,IAAY,KAAK,IAAY,GAC/D;AACI,gBAAY,IAAI,gBAAgB,gBAAgB,EAAE,GAAG;AAAA;;;ACFlD,wBAAuB,MAC9B;AACI,gBAAY,IAAI,gBAAgB,YAAY;AAAA;;;ACHzC,qBAAoB,MAC3B;AACI,WAAO,MACP;AACI,mBAAa;AAAA;AAAA;;;ACHd,0BAAyB,KAChC;AACI,gBAAY,IAAI,gBAAgB,cAAc;AAAA;;;ACLlD,AAkBO,sBAAqB,QAC5B;AACI,QAAI;AAEJ,QAAI,QACJ;AACI,UAAI,OAAO,WAAW,UACtB;AAEI,kBAAU,SAAS,eAAe;AAAA,iBAE7B,OAAO,WAAW,YAAY,OAAO,aAAa,GAC3D;AAEI,kBAAU;AAAA;AAAA;AAIlB,QAAI,CAAC,SACL;AACI,gBAAU,SAAS;AAAA;AAGvB,WAAO;AAAA;;;ACrCJ,qBAAoB,eAC3B;AAGI,QAAI,eACJ;AACI,kBAAY,IAAI,gBAAgB,QAAQ,WAAW;AAAA;AAAA;;;ACRpD,kBAAiB,eACxB;AACI,WAAO,MACP;AACI,gBAAU;AAAA;AAAA;;;ACFX,qBAAoB,QAC3B;AACI,gBAAY,IAAI,gBAAgB,QAAQ,GAAG,OAAO;AAAA;;;ACH/C,kBAAiB,QACxB;AACI,WAAO,MACP;AACI,gBAAU;AAAA;AAAA;;;ACJX,mBAAkB,QAAgB,KAAK,SAAiB,KAAK,aAAqB,GACzF;AACI,QAAI,eAAe,GACnB;AACI,mBAAa,OAAO;AAAA;AAGxB,gBAAY,IAAI,gBAAgB,MAAM,EAAE,OAAO,QAAQ;AAAA;;;ACVpD,MAAI;AAEJ,MAAM,KACb;AAAA,IACI,KAAK,MACL;AACI,aAAO;AAAA;AAAA,IAGX,KAAK,CAAC,YACN;AACI,WAAK;AAAA;AAAA;;;ACRN,gBAAe,YACtB;AACI,UAAM,QAAQ,WAAW;AAEzB,QAAI,UAAU,GACd;AACI;AAAA;AAGJ,UAAM,gBAAgB,WAAW,aAAa;AAC9C,UAAM,gBAAgB,WAAW,OAAO;AAExC,UAAM,sBAAsB,cAAc,OAAO;AAEjD,QAAI,qBACJ;AACI,iBAAW,YAAY,IAAI,cAAc,OAAO,aAAa;AAAA;AAGjE,QAAI,UAAU,cAAc,WAC5B;AACI,YAAM,OAAQ,cAAc,YAAa,GAAG,eAAe,GAAG;AAE9D,SAAG,WAAW,GAAG,cAAc,cAAc,MAAM;AAAA,WAGvD;AACI,YAAM,UAAU,QAAQ,cAAc;AAEtC,YAAM,OAAO,cAAc,cAAc,SAAS,GAAG;AAErD,SAAG,cAAc,GAAG,cAAc,GAAG;AAAA;AAGzC,QAAI,cAAc,SAClB;AACI,SAAG,aAAa,GAAG,WAAW,QAAQ,cAAc,gBAAgB,GAAG,gBAAgB;AAAA,WAG3F;AACI,SAAG,WAAW,GAAG,WAAW,GAAG,QAAQ,cAAc;AAAA;AAGzD,QAAI,qBACJ;AACI,iBAAW,YAAY;AAAA;AAAA;;;AC7CxB,iBAAgB,YAAyB,YAChD;AACI,QAAI,YACJ;AACI,iBAAW,QAAQ;AAAA;AAGvB,UAAM,QAAQ,WAAW;AAEzB,QAAI,UAAU,GACd;AACI,aAAO;AAAA;AAGX,SAAK;AAEL,eAAW;AAEX,WAAO;AAAA;;;ACrBJ,MAAM,aAAa;IACxB,IAAI;IACJ,KAAK;IACL,MAAM;IACN,KAAK;IACL,MAAM;IACN,KAAK;IACL,MAAM;IACN,KAAK;IACL,KAAK;;AAGA,MAAM,cAAc;IACzB,IAAI;IACJ,KAAK;IACL,MAAM;IACN,KAAK;IACL,MAAM;IACN,KAAK;IACL,MAAM;IACN,KAAK;IACL,KAAK;;AAGA,MAAM,QAAQ;IACnB,IAAI;IACJ,KAAK;IACL,MAAM;IACN,KAAK;IACL,MAAM;IACN,KAAK;IACL,MAAM;IACN,KAAK;IACL,KAAK;;AAGP,MAAM,eAAe;IACnB,OAAO,KAAG;IACV,QAAQ,KAAG;IACX,QAAQ,KAAG;;AAKN,MAAM,YAAY,OAAO;AACzB,MAAM,aAAa,OAAO;AAC1B,MAAM,aAAa,OAAO;AAC1B,MAAM,kBAAkB,OAAO;AAC/B,MAAM,aAAa,OAAO;AAC1B,MAAM,aAAa,OAAO;AAE1B,MAAM,oBAAoB,OAAO;AACjC,MAAM,kBAAkB,OAAO;AAC/B,MAAM,eAAe,OAAO;AAC5B,MAAM,mBAAmB,OAAO;AAChC,MAAM,YAAY,OAAO;AACzB,MAAM,gBAAgB,OAAO;AAC7B,MAAM,cAAc,OAAO;AAC3B,MAAM,eAAe,OAAO;AAC5B,MAAM,YAAY,OAAO;AAEzB,MAAM,eAAe,OAAO;AAC5B,MAAM,mBAAmB,OAAO;AAEhC,MAAM,aAAa,OAAO;AAC1B,MAAM,cAAc,OAAO;AAElC,MAAM,SAAS;AAER,MAAM,SAAS,CAAC,IAAI,SAAS;AAClC,UAAM,YAAY,IAAI,YAAY,OAAO,GAAG;AAC5C,UAAM,QAAQ,IAAI,GAAG,YAAY;AACjC,UAAM,IAAI,IAAI;AACd,WAAO;;AAGF,MAAM,eAAe,CAAC,OAAO,QAAQ;AAC1C,QAAI,CAAC,YAAY,OAAO,QAAQ;AAC9B,YAAM,SAAS,MAAM,cAAc,MAAM,GAAG,KAAK;AACjD,iBAAW,KAAK,MAAM,MAAM;AAC1B,cAAM,OAAO,MAAM,KAAK,GAAG;AAC3B,cAAM,KAAK,MAAM,KAAK,GAAG;AACzB,cAAM,KAAK,KAAK,OAAO,SAAS,MAAM;;WAEnC;AACL,YAAM,OAAO,MAAM,MAAM,GAAG,KAAK;;;AAIrC,MAAM,iBAAiB,CAAC,UAAU,OAAO,SAAS;AAChD,UAAM,UAAU,SAAS;AACzB,UAAM,OAAO,MAAM;AACnB,UAAM,SAAS,MAAM,GAAG;AACxB,UAAM,YACJ,UAAU,aAAa,QACnB,QACA,UAAU,aAAa,SACrB,SACA;AAER,UAAM,aAAa,SAAS,mBAAmB;AAC/C,UAAM,eAAe,MAAM,YAAY,KAAK,GAAG,OAAO,CAAC,GAAG,MAAM,IAAI,QAAQ;AAO5E,UAAM,QAAQ,IAAI,MAAM,MAAM,eAAe;AAE7C,UAAM,IAAI,SAAS,iBAAiB;AAEpC,aAAS,iBAAiB,QAAQ;AAClC,iBAAa,SAAS,iBAAiB,OAAO;AAC9C,iBAAa,SAAS,iBAAiB,OAAO;AAE9C,UAAM,cAAc,YAAY;AAChC,UAAM,eAAe,MAAM,WAAW;AAEtC,UAAM,QAAQ,QAAQ;AACtB,QAAI,MAAM;AACV,aAAS,MAAM,GAAG,MAAM,MAAM,OAAO;AACnC,YAAM,OAAO,QAAQ,QAAS,MAAM;AACpC,YAAM,KAAK,OAAO;AAElB,YAAM,OAAO,SAAS,iBAAiB,MAAM,SAAS,MAAM;AAE5D,YAAM,KAAK,iBAAiB;AAC5B,YAAM,KAAK,eAAe;AAC1B,YAAM,KAAK,gBAAgB,SAAS,iBAAiB,MAAM,cAAc,SAAS,MAAM;AACxF,YAAM,KAAK,oBAAoB,SAAS,iBAAiB,MAAM,kBAAkB,SAAS,MAAM;AAChG,YAAM,KAAK,aAAa;AACxB,YAAM,KAAK,cAAc,MAAM;AAC/B,YAAM,KAAK,eAAe,MAAM;AAEhC,YAAM;;AAGR,YAAQ,QAAQ;AAEhB,UAAM,gBAAgB,SAAS,iBAAiB,MAAM,SAAS,OAAO;;AAGxE,MAAM,kBAAkB,CAAC,UAAU,OAAO,SAAS;AACjD,WAAO,KAAK,OAAO,QAAQ,SAAO;AAChC,YAAM,KAAK,MAAM;AACjB,UAAI,MAAM,QAAQ,KAAK;AACrB,uBAAe,UAAU,IAAI;AAC7B,cAAM,iBAAiB,KAAK;iBACnB,YAAY,OAAO,KAAK;AACjC,cAAM,OAAO,OAAO,IAAI;AACxB,cAAM,iBAAiB,KAAK,MAAM;AAClC,cAAM,KAAK,gBAAgB,OAAO,GAAG,eAAe;AACpD,cAAM,KAAK,oBAAoB,OAAO,GAAG,mBAAmB;iBACnD,OAAO,OAAO,UAAU;AACjC,wBAAgB,UAAU,MAAM,MAAM;;;;AAKrC,MAAM,cAAc,CAAC,OAAO,SAAS;AAC1C,QAAI,MAAM;AAAY;AACtB,UAAM,cAAc;AACpB,UAAM,iBAAiB,SAAS;AAChC,WAAO,KAAK,MAAM,mBAAmB,QAAQ,OAAK;AAChD,YAAM,kBAAkB,KAAK;;AAE/B,oBAAgB,OAAO,OAAO;;AAczB,MAAM,gBAAgB,CAAC,OAAO,QAAQ;AAC3C,QAAI,MAAM,kBAAkB;AAC1B,YAAM,iBAAiB,QAAQ,QAAM;AACnC,YAAI,YAAY,OAAO;AAAK,aAAG,OAAO;;AACjC,aAAG,KAAK,KAAK;;;;AAKxB,MAAM,kBAAkB,CAAC,MAAM,WAAW;AACxC,UAAM,aAAa,SAAS,MAAM,MAAM;AACxC,UAAM,SAAS,IAAI,YAAY;AAC/B,WAAO,IAAI,MAAM,MAAM;;AAKzB,MAAM,mBAAmB,CAAC,UAAU,MAAM,WAAW;AACnD,UAAM,OAAO,SAAS;AACtB,UAAM,QAAQ,MAAM,MAAM,KAAK;AAC/B,UAAM,cAAc;AAEpB,UAAM,UAAU,SAAS;AACzB,UAAM,YACJ,SAAS,aAAa,QAClB,QACA,SAAS,aAAa,SACpB,SACA;AAER,QAAI,CAAC;AAAQ,YAAM,IAAI,MAAM;AAC7B,QAAI,CAAC,MAAM;AAAO,YAAM,IAAI,MAAO,kDAAiD;AAGpF,QAAI,CAAC,SAAS,iBAAiB,OAAO;AACpC,YAAM,aAAa,SAAS,mBAAmB;AAC/C,YAAM,eAAe,MAAM,YAAY,KAAK,GAAG,OAAO,CAAC,GAAG,MAAM,IAAI,QAAQ;AAO5E,YAAM,QAAQ,IAAI,MAAM,MAAM,eAAe;AAE7C,eAAS,iBAAiB,QAAQ;AAClC,mBAAa,SAAS,iBAAiB,OAAO;AAC9C,mBAAa,SAAS,iBAAiB,OAAO;AAE9C,YAAM,cAAc,YAAY;AAChC,YAAM,eAAe,MAAM,WAAW;;AAIxC,UAAM,QAAQ,QAAQ;AACtB,QAAI,MAAM;AACV,aAAS,MAAM,GAAG,MAAM,MAAM,OAAO;AACnC,YAAM,OAAO,QAAQ,QAAS,MAAM;AACpC,YAAM,KAAK,OAAO;AAElB,YAAM,OAAO,SAAS,iBAAiB,MAAM,SAAS,MAAM;AAE5D,YAAM,KAAK,iBAAiB;AAC5B,YAAM,KAAK,eAAe;AAC1B,YAAM,KAAK,gBAAgB,SAAS,iBAAiB,MAAM,cAAc,SAAS,MAAM;AACxF,YAAM,KAAK,oBAAoB,SAAS,iBAAiB,MAAM,kBAAkB,SAAS,MAAM;AAChG,YAAM,KAAK,aAAa;AACxB,YAAM,KAAK,cAAc,YAAY;AACrC,YAAM,KAAK,eAAe,MAAM,WAAW;AAE3C,YAAM;;AAGR,YAAQ,QAAQ;AAEhB,UAAM,gBAAgB,SAAS,iBAAiB,MAAM,SAAS,OAAO;AAEtE,WAAO;;AAGT,MAAM,cAAc,OAAK,MAAM,QAAQ,MAAM,OAAO,EAAE,OAAO,YAAY,OAAO,EAAE,OAAO;AAElF,MAAM,cAAc,CAAC,QAAQ,SAAS;AAC3C,UAAM,SAAS,OAAO;AAEtB,QAAI,CAAC,UAAU,CAAC,OAAO,KAAK,QAAQ,QAAQ;AAE1C,aAAO,UAAU;SACd,aAAa;SACb,YAAY;SACZ,aAAa,MAAM,OAAO;;AAE7B,aAAO,OAAO;;AAGhB,aAAS,KAAK,MAAM,KAAK,UAAU;AAEnC,UAAM,cAAc;AACpB,UAAM,qBAAqB,OAAK;AAC9B,YAAM,OAAO,OAAO,KAAK;AACzB,iBAAW,KAAK,MAAM;AACpB,YAAI,YAAY,EAAE,KAAK;AACrB,cAAI,CAAC,YAAY,EAAE,GAAG;AAAK,wBAAY,EAAE,GAAG,MAAM;AAClD,sBAAY,EAAE,GAAG;mBACR,EAAE,cAAc,QAAQ;AACjC,6BAAmB,EAAE;;;;AAI3B,uBAAmB;AAEnB,UAAM,WAAW;OACd,aAAa;OACb,aAAa;OACb,kBAAkB;OAClB,YAAY;OACZ,eAAe;OACf,mBAAmB,OAAO,KAAK,OAAO,OAAO,CAAC,GAAG,SAAU;WAAK;SAAI,OAAO;UAAM;OACjF,kBAAkB;OAClB,oBAAoB;;AAGvB,QAAI,kBAAkB,UAAU,OAAO,KAAK,QAAQ,QAAQ;AAE1D,YAAM,qBAAqB,CAAC,GAAG,MAAM;AAEnC,YAAI,OAAO,EAAE,OAAO,UAAU;AAE5B,YAAE,KAAK,gBAAgB,EAAE,IAAI;AAC7B,uBAAa,EAAE,IAAI;AACnB,uBAAa,EAAE,IAAI;AACnB,YAAE,GAAG,cAAc,MAAM,OAAO;AAChC,mBAAS,iBAAiB,KAAK,EAAE;mBAExB,YAAY,EAAE,KAAK;AAE5B,gBAAM,CAAC,MAAM,UAAU,EAAE;AACzB,YAAE,KAAK,iBAAiB,UAAU,MAAM;AACxC,YAAE,GAAG,cAAc,MAAM,OAAO;AAChC,mBAAS,iBAAiB,KAAK,EAAE;mBAGxB,EAAE,cAAc,QAAQ;AAEjC,YAAE,KAAK,OAAO,KAAK,EAAE,IAAI,OAAO,oBAAoB,EAAE;;AAKxD,eAAO;;AAGT,aAAO,UAAU,OAAO,OAAO,OAAO,KAAK,QAAQ,OAAO,oBAAoB,SAAS;AACvF,aAAO,QAAQ,cAAc,MAAM,OAAO;AAI1C,aAAO,OAAO;;;AC5SX,MAAM,YAAY,MAAM;AAC7B,UAAM,QAAQ;AACd,UAAM,SAAS;AAIf,UAAM,MAAM,SAAO,MAAM,OAAO,UAAU;AAE1C,UAAM,MAAM,SAAO;AACjB,UAAI,IAAI;AAAM;AACd,aAAO,OAAO,MAAM,KAAK,OAAO;;AAGlC,UAAM,SAAS,SAAO;AACpB,UAAI,CAAC,IAAI;AAAM;AACf,YAAM,QAAQ,OAAO;AACrB,YAAM,UAAU,MAAM;AACtB,UAAI,YAAY,KAAK;AACnB,cAAM,SAAS;AACf,eAAO,WAAW;;;AAItB,WAAO;MACL;MACA;MACA;MACA;MACA;;;ACvDJ,MAAI,UAAU;AAEP,MAAM,0BAA0B,OAAK;AAAE,cAAU;;AA6KxD,MAAM,cAAc,IAAI;ACrLjB,MAAM,eAAe,OAAO;AAC5B,MAAM,oBAAoB,OAAO;AACjC,MAAM,mBAAmB,OAAO;AAChC,MAAM,eAAe,OAAO;AAInC,MAAI,cAAc;AAIlB,MAAI,qBAAqB;AACzB,MAAI,aAAa;AACjB,MAAI,kBAAkB,MAAM,aAAc,aAAa;AAEhD,MAAM,gBAAgB,MAAM;AAGnC,MAAM,UAAU;AAQT,MAAM,iBAAiB,MAAM;AAY7B,MAAM,kBAAkB,MAAM;AAG9B,MAAM,aAAa,IAAI;MAQjB,YAAa,YAAU;AAElC,UAAM,MAAM,QAAQ,SAAS,IAAI,QAAQ,UAAU;AACnD,WAAM,kBAAkB,IAAI;AAC5B,eAAW,IAAI,KAAK;AAGpB,QAAI,sBAAsB,mBAAmB;AAE3C,YAAM,OAAO;AACb,YAAM,SAAS,KAAK,KAAM,OAAK,IAAK,KAAK;AACzC,YAAM,UAAU,OAAO;AACvB,mBAAa;AACb,mBAAa;AACb,uBAAiB;AACjB,8BAAwB;AACxB,cAAQ,KAAM,+CAAuC,WAAW,OAAK;;AAGvE,WAAM,aAAa,QAAQ,OAAK;AAC9B,YAAM,QAAQ,iBAAiB,QAAO,GAAG;AACzC,UAAI;AAAO,uBAAe,GAAG;;AAG/B,WAAM,mBAAmB,IAAI,KAAK,IAAI;AAEtC,WAAO;;MASI,eAAe,CAAC,QAAO,QAAQ;AAE1C,QAAI,CAAC,OAAM,kBAAkB,IAAI;AAAM;AAIvC,WAAM,UAAU,QAAQ,OAAK;AAC3B,wBAAkB,QAAO,GAAG;;AAI9B,YAAQ,KAAK;AAGb,WAAM,kBAAkB,OAAO;AAC/B,WAAM,mBAAmB,OAAO;AAGhC,aAAS,IAAI,GAAG,IAAI,OAAM,cAAc,QAAQ;AAAK,aAAM,cAAc,GAAG,OAAO;;AClG9E,MAAM,WAAW,OAAO;AACxB,MAAM,cAAc,OAAO;AAC3B,MAAM,YAAY,OAAO;AACzB,MAAM,gBAAgB,OAAO;AAC7B,MAAM,mBAAmB,OAAO;AA4BhC,MAAM,gBAAgB,CAAC,QAAO,UAAU;AAE7C,UAAM,cAAa;AACnB,UAAM,gBAAgB;AACtB,UAAM,oBAAoB;AAE1B,UAAM,kBAAkB,QAAQ,OAAK;AACnC,UAAI,OAAO,MAAM,YAAY;AAC3B,cAAM,OAAO;AACb,YAAI,CAAC,OAAM,eAAe,IAAI;AAAO,4BAAkB,QAAO;AAC9D,YAAI,EAAE,SAAS,YAAY;AACzB,wBAAc,KAAK;;AAErB,YAAI,EAAE,SAAS,gBAAgB;AAC7B,4BAAkB,KAAK;AACvB,sBAAW,KAAK;;aAEb;AACL,YAAI,CAAC,OAAM,eAAe,IAAI;AAAI,4BAAkB,QAAO;AAC3D,oBAAW,KAAK;;;AAKpB,UAAM,gBAAgB,OAAK,OAAM,eAAe,IAAI;AAEpD,UAAM,gBAAgB,YAAW,OAAO,eAAe,IAAI;AAG3D,UAAM,YAAY;AAElB,UAAM,aAAa;AACnB,UAAM,UAAU;AAChB,UAAM,WAAW;AACjB,UAAM,UAAU;AAChB,UAAM,SAAS;AAEf,UAAM,cAAc,cACjB,IAAI,OAAK,EAAE,cACX,OAAO,CAAC,GAAE,MAAM;AACf,UAAI,EAAE,SAAS;AAAI,eAAO;AAC1B,QAAE,KAAK;AACP,aAAO;OACN;AAEL,UAAM,iBAAiB,CAAC,GAAE,MAAM;AAC9B,UAAI,CAAC,EAAE,EAAE;AAAe,UAAE,EAAE,gBAAgB;AAC5C,QAAE,EAAE,iBAAiB,EAAE;AACvB,aAAO;;AAET,UAAM,QAAQ,YACX,IAAI,eACJ,OAAO,gBAAgB;AAE1B,UAAM,WAAW,cACd,IAAI,eACJ,OAAO,CAAC,GAAE,MAAM;AACf,UAAI,CAAC,EAAE,EAAE,eAAe;AACtB,UAAE,EAAE,gBAAgB;;AAEtB,QAAE,EAAE,iBAAiB,EAAE;AACvB,aAAO;OACN;AAML,UAAM,WAAW,cACd,OAAO,gBAAgB;AAE1B,UAAM,YAAY,YACf,OAAO,OAAK,CAAC,EAAE,YACf,IAAI,OAAK,OAAO,sBAAsB,GAAG,SAAS,mBAAmB,EAAE,mBAAmB,CAAC,IAC3F,OAAO,CAAC,GAAE,MAAM,EAAE,OAAO,IAAI;AAEhC,UAAM,UAAU,UAAU,IAAI,UAAQ;AAClC,YAAM,IAAI;AACV,mBAAa,MAAM;AACnB,aAAO,KAAK;OACb;AAEH,UAAM,IAAI,OAAO,OAAO,WAAW;MACjC;MACA;MACA;MACA;MACA;MACA;MACA;MAEA;MACA;MACA;MACA;MACA;MACA;MACA;;AAGF,WAAM,WAAW,IAAI,OAAO;AAC5B,WAAM,UAAU,IAAI;AAEpB,gBAAW,IAAI,eAAe,QAAQ,OAAK;AACzC,QAAE,QAAQ,IAAI;;AAEhB,kBAAc,IAAI,eAAe,QAAQ,OAAK;AAC5C,QAAE,WAAW,IAAI;;AAEnB,sBAAkB,IAAI,eAAe,QAAQ,OAAK;AAChD,QAAE,eAAe,IAAI;;AAGvB,QAAI,cAAc;AAAQ,aAAM,aAAa,IAAI;AAEjD,aAAS,MAAM,GAAG,MAAM,mBAAmB,OAAO;AAChD,UAAI,CAAC,OAAM,kBAAkB,IAAI;AAAM;AACvC,UAAI,iBAAiB,QAAO,GAAG,MAAM;AACnC,uBAAe,GAAG;;;;MAsDX,cAAe,iBAAe;AACzC,QAAI,gBAAe,UAAa,YAAW,mBAAmB,QAAW;AACvE,aAAO,YAAS,SAAQ,OAAM,gBAAgB,YAAW;;AAG3D,UAAM,QAAQ,SAAU,QAAO,YAAU,MAAM;AAC7C,UAAI,CAAC,OAAM,WAAW,IAAI;AAAQ,sBAAc,QAAO;AAEvD,YAAM,IAAI,OAAM,WAAW,IAAI;AAE/B,0BAAoB;AAGpB,UAAI,EAAE,kBAAkB;AAAQ,eAAO,EAAE,QAAQ;AAEjD,aAAO,EAAE;;AAEX,UAAM,oBAAoB;AAC1B,WAAO;;AAIF,MAAM,mBAAmB,CAAC,QAAO,GAAG,QAAQ;AACjD,UAAM;MAAE;MAAO;MAAU;QAAgB;AAEzC,aAAS,IAAI,GAAG,IAAI,YAAY,QAAQ,KAAK;AAC3C,YAAM,eAAe,YAAY;AACjC,YAAM,QAAQ,MAAM;AACpB,YAAM,WAAW,SAAS;AAE1B,YAAM,QAAQ,OAAM,cAAc,cAAc;AAKhD,UAAI,YAAa,SAAQ,cAAc,GAAG;AACxC,eAAO;;AAET,UAAI,SAAU,SAAQ,WAAW,OAAO;AACtC,eAAO;;;AAGX,WAAO;;AAUF,MAAM,iBAAiB,CAAC,GAAG,QAAQ;AACxC,QAAI,EAAE,IAAI;AAAM;AAChB,MAAE,IAAI;AACN,MAAE,QAAQ,KAAK;;AAGjB,MAAM,sBAAuB,OAAM;AACjC,WAAO,EAAE,SAAS,QAAQ;AACxB,QAAE,OAAO,EAAE,SAAS;;;MAIX,iBAAkB,YAAU;AACvC,WAAM,eAAe,QAAQ;AAC7B,WAAM,eAAe;;AAGhB,MAAM,oBAAoB,CAAC,QAAO,GAAG,QAAQ;AAClD,QAAI,CAAC,EAAE,IAAI;AAAM;AACjB,MAAE,SAAS,KAAK;AAChB,WAAM,eAAe,IAAI;AACzB,MAAE,OAAO,KAAK;;ACzRT,MAAM,gBAAgB,OAAO;AAE7B,MAAM,aAAa;AAEnB,MAAM,mBAAoB,UAAS;AACxC,eAAW,QAAQ,eAAa,YAAY,WAAW;;MAU5C,kBAAmB,YAAW;AACzC,UAAM,YAAY,YAAY,QAAQ;AACtC,QAAI,UAAU,OAAO,KAAK,QAAQ;AAAQ,iBAAW,KAAK;AAC1D,WAAO;;AAGF,MAAM,mBAAoB,YAAU;AACzC,WAAM,aAAa;AACnB,QAAI,OAAM,aAAa,KAAG,IAAI;AAC5B,aAAM,YAAY;AAClB,aAAM,cAAc,KAAK,IAAI,YAAY,OAAM;;;MAWtC,oBAAoB,CAAC,QAAO,cAAc;AACrD,QAAI,CAAC;AAAW,YAAM,IAAI,MAAO;AAEjC,UAAM,UAAU,IAAI;AACpB,UAAM,aAAa,IAAI;AACvB,UAAM,iBAAiB,IAAI;AAE3B,WAAM,UAAU,QAAQ,OAAK;AAC3B,UAAI,EAAE,cAAc,SAAS,YAAY;AACvC,gBAAQ,IAAI;iBACH,EAAE,kBAAkB,SAAS,YAAY;AAClD,uBAAe,IAAI;iBACV,EAAE,WAAW,SAAS,YAAY;AAC3C,mBAAW,IAAI;;;AAInB,WAAM,eAAe,IAAI,WAAW;MAClC,cAAc,OAAM,cAAc,SAAS;MAC3C,SAAS,OAAM;MACf,OAAO;MACP;MACA;MACA;;AAGF,QAAI,UAAU,cAAc,OAAM,QAAQ;AACxC,kBAAY,WAAW,OAAM;;AAG/B,qBAAiB;;MAqBN,eAAe,CAAC,QAAO,WAAW,QAAQ;AACrD,UAAM,sBAAsB,OAAM,eAAe,IAAI;AACrD,QAAI,CAAC;AAAqB;AAC1B,UAAM;MAAE;MAAc;QAAY;AAClC,UAAM,OAAO,OAAM,cAAc,cAAc;AAC/C,WAAQ,QAAO,aAAa;;MAWjB,eAAe,CAAC,QAAO,WAAW,KAAK,QAAM,UAAU;AAClE,QAAI,CAAC,OAAO,UAAU,MAAM;AAC1B,kBAAY;AACZ,eAAQ,WAAW,IAAI;AACvB,cAAQ,OAAO;;AAEjB,QAAI,CAAC,OAAM,eAAe,IAAI;AAAY,wBAAkB,QAAO;AACnE,QAAI,aAAa,QAAO,WAAW;AAAM;AAEzC,UAAM,IAAI,OAAM,eAAe,IAAI;AACnC,UAAM;MAAE;MAAc;MAAS;MAAS;QAAe;AAEvD,eAAW,QAAQ,OAAK;AACtB,YAAM,QAAQ,iBAAiB,QAAO,GAAG;AACzC,UAAI;AAAO,0BAAkB,QAAO,GAAG;;AAIzC,WAAM,cAAc,cAAc,QAAQ;AAG1C,YAAQ,QAAQ,OAAK;AACnB,YAAM,QAAQ,iBAAiB,QAAO,GAAG;AACzC,UAAI;AAAO,uBAAe,GAAG;;AAG/B,WAAM,mBAAmB,IAAI,KAAK,IAAI;AAGtC,QAAI;AAAO,oBAAc,WAAW;;MAWzB,kBAAkB,CAAC,QAAO,WAAW,KAAK,QAAM,SAAS;AACpE,QAAI,CAAC,OAAO,UAAU,MAAM;AAC1B,kBAAY;AACZ,eAAQ,WAAW,IAAI;AACvB,cAAQ,OAAO;;AAEjB,UAAM,IAAI,OAAM,eAAe,IAAI;AACnC,UAAM;MAAE;MAAc;MAAS;MAAS;QAAe;AAEvD,QAAI,CAAE,QAAM,cAAc,cAAc,OAAO;AAAU;AAGzD,YAAQ,QAAQ,OAAK;AACnB,YAAM,QAAQ,iBAAiB,QAAO,GAAG;AACzC,UAAI;AAAO,0BAAkB,QAAO,GAAG;;AAIzC,WAAM,cAAc,cAAc,QAAQ,CAAC;AAE3C,eAAW,QAAQ,OAAK;AACtB,YAAM,QAAQ,iBAAiB,QAAO,GAAG;AACzC,UAAI;AAAO,uBAAe,GAAG;;AAG/B,WAAM,mBAAmB,IAAI,KAAK,OAAO;AAGzC,QAAI;AAAO,oBAAc,WAAW;;AC1K/B,MAAM,QAAQ,OAAO;AACrB,MAAM,mBAAmB,OAAO;AAChC,MAAM,WAAW,OAAO;AACxB,MAAM,cAAc,OAAO;AAC3B,MAAM,iBAAiB,OAAO;AAE9B,MAAM,SAAS;AAEf,MAAM,eAAgB,UAAS;AACpC,WAAO,QAAQ,YAAS;AACtB,aAAM,SAAS;AAEf,eAAS,IAAI,GAAG,IAAI,OAAM,cAAc,QAAQ,KAAK;AACnD,cAAM,QAAQ,OAAM,cAAc;AAClC,eAAM,cAAc,KAAK,OAAO,OAAO;;AAGzC,aAAM,oBAAoB,OAAM,SAAU,OAAM,SAAS;;;MAShD,cAAc,MAAM;AAC/B,UAAM,SAAQ;AACd,eAAW;AACX,WAAO,KAAK;AACZ,WAAO;;MASI,aAAc,YAAU;AACnC,UAAM,OAAO;AACb,WAAM,SAAS;AAEf,QAAI,OAAM;AAAe,aAAM,cAAc,QAAQ,SAAO,aAAa,QAAO;AAEhF,WAAM,gBAAgB,CAAC,IAAI,YAAY;AACvC,WAAM,qBAAqB,IAAI;AAC/B,WAAM,eAAe;AAErB,WAAM,oBAAoB;AAC1B,WAAM,gBAAgB,OAAM,kBAAkB;AAE9C,WAAM,YAAY;AAElB,WAAM,iBAAiB,IAAI;AAE3B,WAAM,aAAa,IAAI;AACvB,WAAM,YAAY,IAAI;AACtB,WAAM,eAAe,IAAI;AACzB,WAAM,iBAAiB,IAAI;AAE3B,WAAM,kBAAkB,IAAI;AAE5B,WAAO;;MC7DI,eAAe,CAAC,KAAK,QAAQ;AACxC,UAAM,SAAS,QAAQ,SAAY,MAAM;AACzC,UAAM,SAAS,QAAQ,SAAY,MAAM;AACzC,UAAM,OAAO,IAAI;AACjB,UAAM,UAAS,CAAC,WAAU,SAAS;AACjC,UAAI,UAAU,CAAC,KAAK,IAAI,SAAQ;AAC9B,eAAO,QAAO,GAAG;AACjB,aAAK,IAAI;;AAEX,aAAO,QAAO,GAAG;AACjB,qBAAe;AACf,aAAO;;AAGT,WAAO,eAAe,SAAQ,QAAQ;MACpC,OAAQ,QAAO,QAAQ,qBAAqB;MAC5C,cAAc;;AAGhB,WAAO;;MEDI,QAAQ;;;ACxBrB,MAAM,QAAQ;AAEP,MAAM,kBAAkB;;;ACF/B,MAAM,QAAQ,gBAAgB;AAAA,IAC1B,GAAG,MAAM;AAAA,IACT,GAAG,MAAM;AAAA,IACT,GAAG,MAAM;AAAA,IACT,GAAG,MAAM;AAAA,IACT,aAAa,CAAE,MAAM,KAAK;AAAA,IAC1B,aAAa,CAAE,MAAM,KAAK;AAAA;AAGvB,MAAM,iBAAiB;;;ACXvB,MAAM,uBAAuB,IAAI,aAAa,CAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG;AAC7F,MAAM,uBAAuB,IAAI,aAAa;;;ACI9C,6BAA4B,IACnC;AACI,iBAAa,iBAAiB,gBAAgB;AAE9C,mBAAe,EAAE,MAAM;AACvB,mBAAe,EAAE,MAAM;AACvB,mBAAe,EAAE,MAAM;AACvB,mBAAe,EAAE,MAAM;AACvB,mBAAe,YAAY,IAAI,IAAI;AAAA;;;ACZhC,8BAA6B,WAAyB,WAAyB,cAA4B,cAClH;AACI,aAAS,IAAI,GAAG,IAAI,UAAU,QAAQ,KACtC;AACI,UAAI,UAAU,OAAO,aAAa,IAClC;AACI,eAAO;AAAA;AAAA;AAIf,aAAS,IAAI,GAAG,IAAI,UAAU,QAAQ,KACtC;AACI,UAAI,UAAU,OAAO,aAAa,IAClC;AACI,eAAO;AAAA;AAAA;AAIf,WAAO;AAAA;;;AC+DX,MAAM,aAAa,gBAAgB;AAAA,IAC/B,QAAQ,CAAE,MAAM,KAAK;AAAA;AAGlB,MAAM,sBAAsB;;;ACpF5B,wBAAuB,IAAY,KAAa,OAAe,MAAc,OACpF;AACI,UAAM,OAAO,oBAAoB,OAAO;AAExC,SAAK,KAAK;AACV,SAAK,KAAK;AACV,SAAK,KAAK;AACV,SAAK,KAAK;AAEV,SAAK,MAAM;AACX,SAAK,MAAM;AACX,SAAK,MAAM;AACX,SAAK,MAAM;AAEX,SAAK,MAAM;AACX,SAAK,MAAM;AACX,SAAK,MAAM;AACX,SAAK,MAAM;AAEX,SAAK,MAAM;AACX,SAAK,MAAM;AACX,SAAK,MAAM;AACX,SAAK,MAAM;AAEX,SAAK,MAAM;AACX,SAAK,MAAM;AACX,SAAK,MAAM;AACX,SAAK,MAAM;AAEX,SAAK,MAAM;AACX,SAAK,MAAM;AACX,SAAK,MAAM;AACX,SAAK,MAAM;AAAA;;;AC5Bf,MAAM,oBAAoB,YAAY,CAAE,gBAAgB;AAGxD,MAAM,uBAAuB,aAAa,YAC1C;AACI,UAAM,YAAW,kBAAkB;AAEnC,aAAS,IAAI,GAAG,IAAI,UAAS,QAAQ,KACrC;AACI,YAAM,KAAK,UAAS;AAEpB,YAAM,IAAI,eAAe,EAAE,MAAM;AACjC,YAAM,IAAI,eAAe,EAAE,MAAM;AACjC,YAAM,IAAI,eAAe,EAAE,MAAM;AACjC,YAAM,IAAI,eAAe,EAAE;AAE3B,mBAAa,IAAI,GAAG,GAAG,GAAG;AAAA;AAG9B,WAAO;AAAA;AAGJ,MAAM,uBAAuB;;;ACnBpC,MAAM,YAAY,gBAAgB;AAAA,IAC9B,SAAS,MAAM;AAAA,IACf,UAAU,MAAM;AAAA,IAChB,aAAa,MAAM;AAAA,IACnB,OAAO,MAAM;AAAA,IACb,OAAO,MAAM;AAAA,IACb,YAAY,MAAM;AAAA;AAGf,MAAM,qBAAqB;;;AChB3B,uBAAsB,IAC7B;AACI,WAAO,mBAAmB,SAAS;AAAA;;;ACFhC,sBAAqB,IAC5B;AACI,UAAM,UAAU;AAEhB,QAAI,gBAAgB,YAAY;AAEhC,WAAO,eACP;AACI,cAAQ,KAAK;AAEb,sBAAgB,YAAY;AAAA;AAGhC,WAAO;AAAA;;;ACbX,MAAM,QAAQ,gBAAgB;AAAA,IAC1B,OAAO,MAAM;AAAA,IACb,YAAY,MAAM;AAAA,IAClB,aAAa,MAAM;AAAA,IACnB,WAAW,MAAM;AAAA;AAGd,MAAM,iBAAiB;;;ACPvB,yBAAwB,IAC/B;AACI,mBAAe,MAAM,MAAM;AAAA;;;ACFxB,8BAA6B,IACpC;AACI,mBAAe,WAAW,MAAM;AAAA;;;ACF7B,6BAA4B,IACnC;AACI,mBAAe,UAAU,MAAM;AAAA;;;ACFnC,MAAM,cAAc,gBAAgB;AAAA,IAChC,SAAS,MAAM;AAAA,IACf,iBAAiB,MAAM;AAAA,IACvB,YAAY,MAAM;AAAA,IAClB,oBAAoB,MAAM;AAAA,IAC1B,YAAY,MAAM;AAAA,IAClB,oBAAoB,MAAM;AAAA,IAC1B,mBAAmB,MAAM;AAAA,IACzB,uBAAuB,MAAM;AAAA,IAC7B,mBAAmB,MAAM;AAAA;AAGtB,MAAM,uBAAuB;;;ACZ7B,6BAA4B,IACnC;AACI,WAAO,QAAQ,qBAAqB,kBAAkB;AAAA;;;ACFnD,iCAAgC,IACvC;AACI,WAAO,QAAQ,qBAAqB,sBAAsB;AAAA;;;ACGvD,2BAA0B,SACjC;AACI,UAAM,UAAU,WAAW;AAE3B,YAAQ,QAAQ,QAChB;AACI,oBAAc;AAEd,UAAI,sBAAsB,KAC1B;AACI,0BAAkB;AAAA;AAGtB,UAAI,kBAAkB,KACtB;AACI,2BAAmB;AAAA;AAAA;AAAA;;;ACjBxB,eAAc,YACrB;AACI,yBAAqB;AAErB,UAAM;AAAA;;;ACPH,iCAAgC,KACvC;AACI,UAAM,YAAY;AAClB,UAAM,cAAc,YAAY;AAEhC,UAAM,SAAS,CAAC,WAChB;AACI,YAAM,UAAU,IAAG,aAAa,YAAY,WAAW,IAAG,aAAa,cAAc;AAErF,UAAI,SACJ;AACI,cAAM,UAAU;AAEhB,mBAAW,OAAO,SAClB;AACI,kBAAQ,QAAQ,QAAQ;AAAA;AAG5B,eAAO;AAAA;AAAA;AAIf,WAAO;AAAA,MACH,KAAK,OAAO;AAAA,MACZ,MAAM,OAAO;AAAA,MACb,KAAK,OAAO;AAAA,MACZ,MAAM,OAAO;AAAA,MACb,MAAM,OAAO;AAAA,MACb,MAAM,OAAO;AAAA,MACb,OAAO,OAAO;AAAA,MACd,MAAM,OAAO;AAAA,MACb,UAAU,OAAO;AAAA,MACjB,KAAK;AAAA;AAAA;;;AClCN,uBAAsB,OAAe,SAAmB,IAC/D;AACI,UAAM,IAAY,SAAS,KAAK;AAChC,UAAM,IAAY,SAAS,IAAI;AAC/B,UAAM,IAAY,QAAQ;AAC1B,UAAM,IAAa,QAAQ,WAAY,UAAU,KAAK;AAEtD,WAAO,KAAK,IAAI;AAChB,WAAO,KAAK,IAAI;AAChB,WAAO,KAAK,IAAI;AAChB,WAAO,KAAK,IAAI;AAEhB,WAAO;AAAA;;;ACTJ,6BACP;AACI,WAAO,YAAY,IAAI,gBAAgB;AAAA;;;ACHpC,6BAA4B,SAAuB,YAC1D;AACI,QAAI,CAAC,YACL;AACI,mBAAa,GAAG;AAAA;AAGpB,UAAM,cAAc,GAAG;AAEvB,OAAG,gBAAgB,GAAG,aAAa;AAEnC,OAAG,qBAAqB,GAAG,aAAa,YAAY,GAAG,YAAY,SAAS;AAE5E,OAAG,gBAAgB,GAAG,aAAa;AAEnC,WAAO;AAAA;;;ACbJ,2BAAwD,SAAY,SAC3E;AACI,UAAM,EAAE,gBAAgB,WAAW,QAAQ,YAAY,gBAAgB,OAAO,wBAAwB,WAAW,OAAO,OAAO,UAAU;AAEzI,UAAM,SAAS,OAAO;AAEtB,QAAI,QAAQ,OAAO;AACnB,QAAI,SAAS,OAAO;AAEpB,UAAM,YAA0B,GAAG;AAEnC,OAAG,cAAc,GAAG;AACpB,OAAG,YAAY,GAAG,YAAY;AAE9B,OAAG,YAAY,GAAG,qBAAqB;AACvC,OAAG,YAAY,GAAG,gCAAgC;AAElD,QAAI,QACJ;AACI,SAAG,WAAW,GAAG,YAAY,GAAG,GAAG,MAAM,GAAG,MAAM,GAAG,eAAe;AAEpE,cAAQ,OAAO;AACf,eAAS,OAAO;AAAA,eAEX,cAAc,SACvB;AACI,eAAS,IAAI,GAAG,IAAI,QAAQ,QAAQ,KACpC;AACI,WAAG,qBAAqB,GAAG,YAAY,GAAG,gBAAgB,QAAQ,GAAG,OAAO,QAAQ,GAAG,QAAQ,GAAG,QAAQ,GAAG;AAAA;AAAA,WAIrH;AACI,SAAG,WAAW,GAAG,YAAY,GAAG,GAAG,MAAM,OAAO,QAAQ,GAAG,GAAG,MAAM,GAAG,eAAe;AAAA;AAG1F,OAAG,cAAc,GAAG,YAAY,GAAG,oBAAoB;AACvD,OAAG,cAAc,GAAG,YAAY,GAAG,oBAAoB;AAEvD,OAAG,cAAc,GAAG,YAAY,GAAG,gBAAgB;AACnD,OAAG,cAAc,GAAG,YAAY,GAAG,gBAAgB;AAEnD,QAAI,kBAAkB,OACtB;AACI,SAAG,eAAe,GAAG;AAAA;AAGzB,YAAQ,UAAU;AAElB,WAAO;AAAA;;;ACnDJ,6BAA4B,aACnC;AACI,QAAI,MAAM,GAAG,cAAc,cAC3B;AACI,SAAG,kBAAkB;AAAA;AAAA;;;ACJtB,2BAA0B,SACjC;AACI,QAAI,GAAG,UAAU,UACjB;AACI,SAAG,cAAc;AAAA;AAAA;;;ACNzB,AAkBO,4BAA2B,OAAe,QACjD;AACI,QAAI,QAAQ,KAAK,SAAS,GAC1B;AACI,aAAO;AAAA;AAGX,WAAS,SAAS,QAAQ,OAAQ,KAAQ,UAAU,SAAS,OAAQ;AAAA;;;ACvBlE,kCAAiC,SAAuB,SAAkB,MACjF;AACI,OAAG,cAAc,GAAG;AACpB,OAAG,YAAY,GAAG,YAAY;AAE9B,UAAM,OAAQ,SAAU,GAAG,SAAS,GAAG;AAEvC,OAAG,cAAc,GAAG,YAAY,GAAG,oBAAoB;AACvD,OAAG,cAAc,GAAG,YAAY,GAAG,oBAAoB;AAAA;;;ACPpD,2BAAwD,SAC/D;AACI,UAAM,SAAS,QAAQ,OAAO;AAC9B,UAAM,QAAQ,OAAO;AACrB,UAAM,SAAS,OAAO;AAEtB,QAAI,QAAQ,KAAK,SAAS,GAC1B;AACI,SAAG,cAAc,GAAG;AACpB,SAAG,YAAY,GAAG,YAAY,QAAQ;AAEtC,SAAG,YAAY,GAAG,qBAAqB,QAAQ;AAC/C,SAAG,WAAW,GAAG,YAAY,GAAG,GAAG,MAAM,GAAG,MAAM,GAAG,eAAe;AAAA;AAGxE,WAAO,QAAQ;AAAA;;;ACLZ,+BACP;AAAA,IACI;AAAA,IAEA;AAAA,IACA;AAAA,IACA;AAAA,IAEA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IAEA,UAAmB;AAAA,IACnB,cAAsB;AAAA,IAEtB,yBAAkC;AAAA,IAElC;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IAEA,QAAiB;AAAA,IACjB,QAAiB;AAAA,IACjB,iBAA0B;AAAA,IAE1B,YAAa,QAAkB,SAAkC,IACjE;AACI,WAAK,SAAS;AAEd,WAAK,QAAQ,iBAAiB,OAAO,OAAO,OAAO;AAInD,YAAM;AAAA,QACF,UAAU;AAAA,QACV,aAAa;AAAA,QACb,SAAS;AAAA,QACT,iBAAiB;AAAA,QACjB,UAAU;AAAA,QACV,cAAc;AAAA,QACd,oBAAoB;AAAA,QACpB,cAAc;AAAA,QACd,yBAAyB;AAAA,QACzB,YAAa,KAAK,QAAS,GAAG,uBAAuB,GAAG;AAAA,QACxD,YAAY,GAAG;AAAA,QACf,QAAQ,GAAG;AAAA,QACX,QAAQ,GAAG;AAAA,QACX,iBAAiB,KAAK;AAAA,QACtB,QAAQ;AAAA,UACR;AAEJ,WAAK,aAAa;AAClB,WAAK,SAAS;AACd,WAAK,iBAAiB;AACtB,WAAK,UAAU;AAGf,UAAI,YACJ;AACI,aAAK,YAAY,GAAG;AAAA,aAGxB;AACI,aAAK,YAAY;AAAA;AAGrB,WAAK,YAAY;AACjB,WAAK,QAAQ;AACb,WAAK,QAAQ;AACb,WAAK,iBAAiB;AACtB,WAAK,QAAQ;AACb,WAAK,yBAAyB;AAE9B,UAAI,SACJ;AACI,aAAK,UAAU;AAAA,aAGnB;AACI,wBAAgB,MAAM;AAAA;AAG1B,UAAI,aACJ;AACI,aAAK,cAAc;AAAA,iBAEd,mBACT;AACI,aAAK,cAAc,kBAAkB,KAAK;AAAA;AAG9C,UAAI,aACJ;AACI,aAAK,cAAc;AAAA;AAGvB,aAAO,UAAU;AAAA;AAAA,IAIrB,UAAW,QACX;AACI,UAAI,KAAK,SACT;AACI,+BAAuB,KAAK,SAAS;AAAA;AAAA;AAAA,IAI7C,SACA;AACI,YAAM,UAAU,KAAK;AAErB,UAAI,SACJ;AACI,wBAAgB;AAAA;AAGpB,aAAO,gBAAgB;AAAA;AAAA,IAG3B,SACA;AACI,YAAM,UAAU,KAAK;AAErB,UAAI,CAAC,SACL;AACI,eAAO,gBAAgB;AAAA,aAG3B;AACI,eAAO,gBAAgB;AAAA;AAAA;AAAA,IAI/B,KAAM,OACN;AACI,WAAK,UAAU;AACf,WAAK,cAAc;AAAA;AAAA,IAGvB,SACA;AACI,WAAK,UAAU;AACf,WAAK,cAAc;AAAA;AAAA,IAGvB,UACA;AACI,WAAK;AAEL,sBAAgB,KAAK;AACrB,wBAAkB,KAAK;AAEvB,WAAK,SAAS;AACd,WAAK,UAAU;AACf,WAAK,cAAc;AAAA;AAAA;;;ACvKpB,iCACP;AACI,UAAM,SAAQ,aAAa;AAE3B,WAAM,QAAQ,WACd;AACI,YAAM,EAAE,SAAS,aAAa;AAE9B,UAAI,CAAC,QAAQ,SACb;AACI,gBAAQ,UAAU,IAAI,iBAAiB,SAAS;AAAA;AAAA;AAIxD,iBAAa;AAAA;;;ACRV,6BACP;AAAA,IACI;AAAA,IAEA;AAAA,IACA;AAAA,IACA;AAAA,IAEA,YAAa,YACb;AACI,WAAK,aAAa;AAClB,WAAK,QAAQ;AAAA;AAAA,QAGb,UACJ;AACI,aAAO,KAAK,MAAM,KAAK;AAAA;AAAA,IAG3B,IAAK,QAAiB,SAAkB,SACxC;AACI,YAAM,QAAQ,EAAE,QAAQ,SAAS;AAEjC,WAAK;AAGL,UAAI,KAAK,UAAU,KAAK,MAAM,QAC9B;AACI,aAAK,MAAM,KAAK;AAAA,aAGpB;AACI,aAAK,MAAM,KAAK,SAAS;AAAA;AAG7B,aAAO;AAAA;AAAA,IAGX,cACA;AACI,WAAK,QAAQ;AAEb,WAAK,KAAK,KAAK;AAAA;AAAA,IAGnB,KAAM,OACN;AACI,UAAI,CAAC,OACL;AACI,gBAAQ,KAAK;AAAA;AAGjB,UAAI,MAAM,QACV;AACI,YAAI,CAAC,GAAG,UAAU,GAAG,UAAW,MAAK,QAAQ,YAAY,MAAM,WAAW,KAAK,QAAQ,YAAY,MAAM,UACzG;AACI,aAAG,OAAO,GAAG;AACb,aAAG,UAAU,MAAM,SAAS,MAAM;AAAA;AAAA,aAI1C;AACI,WAAG,QAAQ,GAAG;AAAA;AAAA;AAAA,IAItB,MACA;AACI,WAAK;AAEL,WAAK;AAAA;AAAA,IAGT,IAAK,QAAiB,SAAkB,SACxC;AACI,YAAM,QAAQ,KAAK,IAAI,QAAQ,SAAS;AAExC,WAAK,KAAK;AAAA;AAAA,IAGd,WAAY,QAAiB,SAAkB,SAC/C;AACI,YAAM,QAAQ,EAAE,QAAQ,SAAS;AAGjC,WAAK,MAAM,KAAK;AAEhB,WAAK,QAAQ;AAEb,WAAK,UAAU;AAAA;AAAA;;;ACxFhB,+BACP;AAAA,IACI;AAAA,IAEA;AAAA,IACA;AAAA,IACA;AAAA,IAEA,YAAa,YACb;AACI,WAAK,aAAa;AAClB,WAAK,QAAQ;AAAA;AAAA,QAGb,UACJ;AACI,aAAO,KAAK,MAAM,KAAK;AAAA;AAAA,IAG3B,IAAK,aAA2B,aAChC;AACI,YAAM,QAAQ,EAAE,aAAa;AAE7B,WAAK;AAGL,UAAI,KAAK,UAAU,KAAK,MAAM,QAC9B;AACI,aAAK,MAAM,KAAK;AAAA,aAGpB;AACI,aAAK,MAAM,KAAK,SAAS;AAAA;AAG7B,aAAO;AAAA;AAAA,IAGX,cACA;AACI,WAAK,QAAQ;AAEb,WAAK,KAAK,KAAK;AAAA;AAAA,IAGnB,KAAM,OACN;AACI,UAAI,CAAC,OACL;AACI,gBAAQ,KAAK;AAAA;AAGjB,YAAM,SAAS,KAAK,WAAW;AAE/B,YAAM,KAAK;AAEX,aAAO,WAAW,gBAAgB,MAAM;AACxC,aAAO,WAAW,gBAAgB,MAAM;AAAA;AAAA,IAG5C,MACA;AACI,WAAK;AAEL,WAAK;AAAA;AAAA,IAGT,IAAK,OACL;AACI,YAAM,UAAU,KAAK;AAErB,YAAM,QAAQ,KAAK,IAAI,MAAM,aAAa,MAAM;AAEhD,UAAI,CAAC,mBAAmB,MAAM,aAAa,MAAM,aAAa,QAAQ,aAAa,QAAQ,cAC3F;AACI,aAAK,KAAK;AAAA;AAAA;AAAA,IAIlB,WAAY,aAA2B,aACvC;AACI,YAAM,QAAQ,EAAE,aAAa;AAG7B,WAAK,MAAM,KAAK;AAEhB,WAAK,QAAQ;AAEb,WAAK,UAAU;AAAA;AAAA;;;ACzFhB,+BACP;AAAA,IACI;AAAA,IAEA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IAEA,YAAa,YACb;AACI,WAAK,aAAa;AAClB,WAAK,QAAQ;AAAA;AAAA,QAGb,UACJ;AACI,aAAO,KAAK,MAAM,KAAK;AAAA;AAAA,IAG3B,IAAK,aAA+B,UACpC;AACI,YAAM,QAAQ,EAAE,aAAa;AAE7B,WAAK;AAGL,UAAI,KAAK,UAAU,KAAK,MAAM,QAC9B;AACI,aAAK,MAAM,KAAK;AAAA,aAGpB;AACI,aAAK,MAAM,KAAK,SAAS;AAAA;AAG7B,aAAO;AAAA;AAAA,IAGX,cACA;AACI,WAAK,QAAQ;AAEb,WAAK,KAAK,OAAO,KAAK;AAAA;AAAA,IAG1B,KAAM,QAAiB,MAAM,OAC7B;AACI,UAAI,CAAC,OACL;AACI,gBAAQ,KAAK;AAAA;AAGjB,YAAM,EAAE,aAAa,aAAa;AAElC,UAAI,KAAK,WAAW,aACpB;AACI,WAAG,gBAAgB,GAAG,aAAa;AAAA;AAGvC,UAAI,OACJ;AACI,WAAG,WAAW,GAAG,GAAG,GAAG;AACvB,WAAG,MAAM,GAAG,mBAAmB,GAAG;AAAA;AAGtC,UAAI,UACJ;AACI,aAAK,WAAW,SAAS,IAAI,SAAS,GAAG,SAAS,GAAG,SAAS,OAAO,SAAS;AAAA;AAGlF,WAAK,SAAS;AAAA;AAAA,IAGlB,MACA;AACI,UAAI,KAAK,QAAQ,UACjB;AACI,aAAK,WAAW,SAAS;AAAA;AAG7B,WAAK;AAEL,WAAK,KAAK;AAAA;AAAA,IAGd,IAAK,aAA+B,QAAiB,MAAM,UAC3D;AACI,YAAM,QAAQ,KAAK,IAAI,aAAa;AAEpC,WAAK,KAAK,OAAO;AAAA;AAAA,IAGrB,WAAY,cAAgC,MAAM,UAClD;AACI,YAAM,QAAQ,EAAE,aAAa;AAG7B,WAAK,MAAM,KAAK;AAEhB,WAAK,QAAQ;AAEb,WAAK,UAAU;AAAA;AAAA;;;AC5GhB,0BACP;AACI,WAAO,YAAY,IAAI,gBAAgB;AAAA;;;ACFpC,4BACP;AACI,WAAO,YAAY,IAAI,gBAAgB;AAAA;;;ACDpC,qBAAoB,QAAsB,MAAc,OAAe,QAAgB,KAAa,MAAc,KACzH;AACI,UAAM,KAAK,IAAK,QAAO;AACvB,UAAM,KAAK,IAAK,UAAS;AACzB,UAAM,KAAK,IAAK,QAAO;AAEvB,WAAO,IAAI;AAAA,MACP,KAAK;AAAA,MACL;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA,KAAK;AAAA,MACL;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA,IAAI;AAAA,MACJ;AAAA,MACC,QAAO,SAAS;AAAA,MAChB,OAAM,UAAU;AAAA,MAChB,OAAM,QAAQ;AAAA,MACf;AAAA;AAAA;;;AC1BD,MAAM,kBACb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACGO,MAAM,wBACb;AAAA,IACI,iBAAiB,EAAE,MAAM;AAAA,IACzB,eAAe,EAAE,MAAM;AAAA,IACvB,YAAY,EAAE,MAAM;AAAA,IACpB,YAAY,EAAE,MAAM;AAAA;;;ACTxB,MAAM,OAAyB;AAC/B,MAAM,gBAAyB;AAC/B,MAAM,QAAyB;AAC/B,MAAM,iBAAyB;AAG/B,MAAM,QAAyB;;;ACMxB,4BAA2B,SAAuB,SACzD;AACI,UAAM,aAAa,IAAI;AAEvB,UAAM,kBACN;AAAA,MACI,MAAM;AAAA,MACN,MAAe;AAAA,MACf,YAAY;AAAA,MACZ,QAAQ;AAAA;AAGZ,QAAI,SAAS;AAEb,eAAW,CAAE,MAAM,UAAW,OAAO,QAAQ,UAC7C;AACI,YAAM,QAAQ,GAAG,kBAAkB,SAAS;AAE5C,UAAI,UAAU,IACd;AACI,WAAG,wBAAwB;AAE3B,cAAM;AAAA,UAEF,OAAO,gBAAgB;AAAA,UACvB,OAAO,gBAAgB;AAAA,UACvB,aAAa,gBAAgB;AAAA,UAC7B,SAAS,gBAAgB;AAAA,YAEzB;AAEJ,mBAAW,IAAI,MAAM,EAAE,OAAO,MAAM,MAAM,YAAY,QAAQ;AAG9D,YAAI,WAAW;AAEf,YAAI,SAAkB,kBAAkB,SAAkB,OAC1D;AACI,qBAAW;AAAA,mBAEN,SAAkB,iBAAiB,SAAkB,MAC9D;AACI,qBAAW;AAAA;AAGf,kBAAU,OAAO;AAAA;AAAA;AAIzB,WAAO;AAAA;;;AC3DJ,6BAA4B,aAA+B,cAAsB,eACxF;AACI,OAAG,gBAAgB,GAAG,aAAa;AAEnC,UAAM,cAAc,GAAG;AAEvB,OAAG,iBAAiB,GAAG,cAAc;AAErC,OAAG,oBAAoB,GAAG,cAAc,GAAG,mBAAmB,cAAc;AAE5E,OAAG,wBAAwB,GAAG,aAAa,GAAG,kBAAkB,GAAG,cAAc;AAEjF,OAAG,gBAAgB,GAAG,aAAa;AAEnC,WAAO;AAAA;;;ACdJ,4BAA2B,SAClC;AACI,YAAQ,QAAQ,YAChB;AACI,SAAG,aAAa;AAAA;AAAA;;;ACHjB,4BAA2B,SAClC;AACI,UAAM,UAAU,GAAG;AAEnB,YAAQ,QAAQ,YAChB;AACI,SAAG,aAAa,SAAS;AAAA;AAG7B,OAAG,YAAY;AAEf,UAAM,SAAS,GAAG,oBAAoB,SAAS,GAAG;AAElD,QAAI,CAAC,QACL;AACI,YAAM,OAAO,GAAG,kBAAkB;AAElC,cAAQ,MAAM,0BAA0B;AAExC,SAAG,cAAc;AAEjB,oBAAc,GAAG;AAEjB,aAAO;AAAA;AAGX,WAAO;AAAA;;;AC3BJ,wBAAuB,QAAgB,MAC9C;AACI,UAAM,SAAS,GAAG,aAAa;AAE/B,OAAG,aAAa,QAAQ;AAExB,OAAG,cAAc;AAEjB,UAAM,SAAS,GAAG,mBAAmB,QAAQ,GAAG;AAEhD,QAAI,CAAC,QACL;AACI,YAAM,OAAO,GAAG,iBAAiB;AAGjC,YAAM,cAAc,OAAO,MAAM,MAAM,IAAI,CAAC,MAAM,UAClD;AACI,eAAO,GAAG,UAAU;AAAA;AAGxB,cAAQ,MAAM,2BAA2B,QAAQ,YAAY,KAAK;AAElE,SAAG,aAAa;AAEhB,aAAO;AAAA;AAGX,WAAO;AAAA;;;ACvBJ,+BAA8B,SAA0B,UAAgC,UAAmB,OAClH;AACI,YAAQ,QAAQ;AAAA,WAEP,GAAG;AAAA,WACH,GAAG,MACR;AACI,YAAI,SACJ;AACI,iBAAO,CAAC,MACR;AACI,eAAG,WAAW,UAAU;AAAA;AAAA,eAIhC;AACI,iBAAO,CAAC,MACR;AACI,eAAG,UAAU,UAAU;AAAA;AAAA;AAAA;AAAA,WAK9B,GAAG;AAAA,WACH,GAAG,WACR;AACI,eAAO,CAAC,MACR;AACI,aAAG,WAAW,UAAU;AAAA;AAAA;AAAA,WAI3B,GAAG;AAAA,WACH,GAAG,WACR;AACI,eAAO,CAAC,MACR;AACI,aAAG,WAAW,UAAU;AAAA;AAAA;AAAA,WAI3B,GAAG;AAAA,WACH,GAAG,WACR;AACI,eAAO,CAAC,MACR;AACI,aAAG,WAAW,UAAU;AAAA;AAAA;AAAA,WAI3B,GAAG,OACR;AACI,YAAI,SACJ;AACI,iBAAO,CAAC,MACR;AACI,eAAG,WAAW,UAAU;AAAA;AAAA,eAIhC;AACI,iBAAO,CAAC,MACR;AACI,eAAG,UAAU,UAAU;AAAA;AAAA;AAAA;AAAA,WAK9B,GAAG,YACR;AACI,eAAO,CAAC,MACR;AACI,aAAG,WAAW,UAAU;AAAA;AAAA;AAAA,WAI3B,GAAG,YACR;AACI,eAAO,CAAC,MACR;AACI,aAAG,WAAW,UAAU;AAAA;AAAA;AAAA,WAI3B,GAAG,YACR;AACI,eAAO,CAAC,MACR;AACI,aAAG,WAAW,UAAU;AAAA;AAAA;AAAA,WAI3B,GAAG,YACR;AACI,eAAO,CAAC,MACR;AACI,aAAG,iBAAiB,UAAU,OAAO;AAAA;AAAA;AAAA,WAIxC,GAAG,YACR;AACI,eAAO,CAAC,MACR;AACI,aAAG,iBAAiB,UAAU,OAAO;AAAA;AAAA;AAAA,WAIxC,GAAG,YACR;AACI,eAAO,CAAC,MACR;AACI,aAAG,iBAAiB,UAAU,OAAO;AAAA;AAAA;AAAA,WAIxC,GAAG;AAAA,WACH,GAAG,cACR;AACI,YAAI,QAAQ,OAAO,GACnB;AACI,iBAAO,CAAC,MACR;AACI,eAAG,WAAW,UAAU;AAAA;AAAA,eAIhC;AACI,iBAAO,CAAC,MACR;AACI,eAAG,UAAU,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACrIpC,0BAAyB,SAChC;AACI,UAAM,WAAW,IAAI;AAErB,UAAM,SAAQ,GAAG,oBAAoB,SAAS,GAAG;AAEjD,aAAS,IAAI,GAAG,IAAI,QAAO,KAC3B;AACI,YAAM,UAAU,GAAG,iBAAiB,SAAS;AAE7C,UAAI,OAAO,QAAQ;AAEnB,UAAI,KAAK,WAAW,UAAU,KAAK,WAAW,WAC9C;AAEI;AAAA;AAGJ,YAAM,WAAW,GAAG,mBAAmB,SAAS;AAEhD,UAAI,UACJ;AACI,YAAI,UAAU;AAGd,YAAI,KAAK,SAAS,QAClB;AACI,iBAAO,KAAK,MAAM,GAAG;AAErB,oBAAW,QAAQ,OAAO;AAAA;AAG9B,iBAAS,IAAI,MAAM,oBAAoB,SAAS,UAAU;AAAA;AAAA;AAIlE,WAAO;AAAA;;;ACvCJ,MAAM,sBACb;AAAA,IACI,mBAAmB,IAAI,aAAa;AAAA,IACpC,eAAe,IAAI,aAAa;AAAA,IAChC,UAAU;AAAA,IACV,cAAc,IAAI,aAAa;AAAA,MAC3B;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MACT;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MACT;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MACT;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA;AAAA,IAEb,cAAc,IAAI,aAAa;AAAA;;;ACX5B,MAAM,mBACb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACDO,MAAM,mBACb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACCA,MAAM,WAAW,gBAAgB;AAAA,IAC7B,GAAG,MAAM;AAAA,IACT,GAAG,MAAM;AAAA,IACT,OAAO,MAAM;AAAA,IACb,QAAQ,MAAM;AAAA,IACd,OAAO,MAAM;AAAA,IACb,QAAQ,MAAM;AAAA;AAGX,MAAM,oBAAoB;;;ACN1B,qBAAoB,IAAY,GAAW,GAAW,OAAe,QAC5E;AACI,sBAAkB,EAAE,MAAM;AAC1B,sBAAkB,EAAE,MAAM;AAC1B,sBAAkB,MAAM,MAAM;AAC9B,sBAAkB,OAAO,MAAM;AAC/B,sBAAkB,MAAM,MAAM,IAAI;AAClC,sBAAkB,OAAO,MAAM,IAAI;AAEnC,sBAAkB;AAAA;;;ACZf,iBAAgB,IAAY,IAAY,IAAY,IAAY,IACvE;AACI,UAAM,OAAO,oBAAoB,OAAO;AAExC,SAAK,KAAK;AACV,SAAK,KAAK;AAEV,SAAK,MAAM;AACX,SAAK,MAAM;AAEX,SAAK,MAAM;AACX,SAAK,MAAM;AAEX,SAAK,MAAM;AACX,SAAK,MAAM;AAEX,SAAK,MAAM;AACX,SAAK,MAAM;AAEX,SAAK,MAAM;AACX,SAAK,MAAM;AAAA;;;AChBR,oBACP;AAAA,IACI;AAAA,IACA;AAAA,IAIA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IAEA,UAAmB;AAAA,IAGnB;AAAA,IACA;AAAA,IAGA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IAEA;AAAA,IAEA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IAEA,YAAa,SAAkB,KAAsB,GAAW,GAAW,OAAe,QAC1F;AACI,WAAK,UAAU;AACf,WAAK,MAAM;AAEX,WAAK,IAAI;AACT,WAAK,IAAI;AACT,WAAK,QAAQ;AACb,WAAK,SAAS;AAEd,WAAK,kBAAkB;AACvB,WAAK,mBAAmB;AAExB,WAAK;AAAA;AAAA,IAGT,SAAU,GAAW,GACrB;AACI,WAAK,QAAQ,EAAE,GAAG;AAAA;AAAA,IAGtB,QAAS,OAAe,QACxB;AACI,WAAK,QAAQ;AACb,WAAK,SAAS;AACd,WAAK,kBAAkB;AACvB,WAAK,mBAAmB;AAExB,WAAK;AAAA;AAAA,IAGT,cAAe,OAAe,QAC9B;AACI,WAAK,kBAAkB;AACvB,WAAK,mBAAmB;AAAA;AAAA,IAG5B,QAAS,OAAe,QAAgB,GAAW,GAAW,GAAW,GACzE;AACI,WAAK,UAAU;AAEf,WAAK,kBAAkB;AACvB,WAAK,mBAAmB;AAExB,WAAK,oBAAoB;AACzB,WAAK,oBAAoB;AACzB,WAAK,wBAAwB;AAC7B,WAAK,yBAAyB;AAAA;AAAA,IAGlC,UAAW,SAAiB,SAC5B;AACI,YAAM,kBAAkB,KAAK;AAC7B,YAAM,mBAAmB,KAAK;AAE9B,UAAI;AACJ,UAAI;AACJ,UAAI;AACJ,UAAI;AAEJ,UAAI,KAAK,SACT;AACI,eAAO,KAAK,oBAAqB,UAAU;AAC3C,gBAAQ,OAAO,KAAK;AAEpB,cAAM,KAAK,oBAAqB,UAAU;AAC1C,iBAAS,MAAM,KAAK;AAAA,aAGxB;AACI,eAAO,CAAC,UAAU;AAClB,gBAAQ,OAAO;AAEf,cAAM,CAAC,UAAU;AACjB,iBAAS,MAAM;AAAA;AAGnB,aAAO,EAAE,MAAM,OAAO,KAAK;AAAA;AAAA,IAG/B,aAAc,OACd;AACI,YAAM,UAAU,MAAM,OAAO;AAC7B,YAAM,UAAU,MAAM,OAAO;AAE7B,YAAM,kBAAkB,KAAK;AAC7B,YAAM,mBAAmB,KAAK;AAE9B,UAAI;AACJ,UAAI;AACJ,UAAI;AACJ,UAAI;AAEJ,UAAI,KAAK,SACT;AACI,YAAI,KAAK,oBAAqB,UAAU;AACxC,YAAI,KAAK,oBAAqB,UAAU;AAExC,gBAAQ,KAAK;AACb,iBAAS,KAAK;AAAA,aAGlB;AACI,YAAI,CAAC,UAAU;AACf,YAAI,CAAC,UAAU;AAEf,gBAAQ;AACR,iBAAS;AAAA;AAGb,gBAAU,MAAM,IAAI,GAAG,GAAG,OAAO;AAEjC,aAAO;AAAA;AAAA,IAGX,eAAgB,IAChB;AACI,YAAM,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK;AAE1C,aAAO;AAAA;AAAA,IAGX,YACA;AACI,YAAM,EAAE,GAAG,GAAG,OAAO,WAAW;AAEhC,YAAM,mBAAmB,KAAK,QAAQ;AACtC,YAAM,oBAAoB,KAAK,QAAQ;AAEvC,WAAK,KAAK,IAAI;AACd,WAAK,KAAK,IAAI;AAEd,WAAK,KAAM,KAAI,SAAS;AACxB,WAAK,KAAM,KAAI,UAAU;AAAA;AAAA,IAG7B,UACA;AACI,WAAK,UAAU;AAAA;AAAA;;;ACzKhB,sBACP;AAAA,IAEI,MAAc;AAAA,IAEd,SAAkB;AAAA,IAElB;AAAA,IACA;AAAA,IAEA;AAAA,IAEA;AAAA,IAEA;AAAA,IAEA;AAAA,IAEA;AAAA,IAEA,YAAa,OAAwB,OAAgB,QAAiB,UACtE;AACI,UAAI,OACJ;AACI,gBAAQ,MAAM;AACd,iBAAS,MAAM;AAAA;AAGnB,WAAK,QAAQ;AAEb,WAAK,QAAQ;AACb,WAAK,SAAS;AAEd,WAAK,SAAS,IAAI;AAElB,WAAK,OAAO;AAEZ,WAAK,SAAS,UAAU,GAAG,GAAG,OAAO;AAErC,mBAAa,IAAI,MAAM;AAAA;AAAA,IAG3B,SAAU,KAAsB,GAAW,GAAW,OAAe,QACrE;AACI,UAAI,KAAK,OAAO,IAAI,MACpB;AACI,eAAO;AAAA;AAGX,YAAM,SAAQ,IAAI,MAAM,MAAM,KAAK,GAAG,GAAG,OAAO;AAEhD,WAAK,OAAO,IAAI,KAAK;AAErB,UAAI,CAAC,KAAK,cAAc,KAAK,WAAW,QAAQ,UAChD;AACI,aAAK,aAAa;AAAA;AAGtB,aAAO;AAAA;AAAA,IAGX,SAAU,KACV;AAEI,UAAI,CAAC,KACL;AACI,eAAO,KAAK;AAAA;AAGhB,UAAI,eAAe,OACnB;AACI,cAAM,IAAI;AAAA;AAGd,UAAI,SAAe,KAAK,OAAO,IAAI;AAEnC,UAAI,CAAC,QACL;AACI,gBAAQ,KAAK,kBAAkB;AAE/B,iBAAQ,KAAK;AAAA;AAGjB,aAAO;AAAA;AAAA,IAGX,QAAS,OAAe,QACxB;AACI,WAAK,QAAQ;AACb,WAAK,SAAS;AAEd,YAAM,SAAQ,KAAK,OAAO,IAAI;AAE9B,aAAM,QAAQ,OAAO;AAAA;AAAA,IAGzB,OAAQ,OAAuB,UAC/B;AACI,WAAK,QAAQ;AAEb,WAAK,QAAQ,MAAM,OAAO,MAAM;AAEhC,mBAAa,IAAI,MAAM;AAAA;AAAA,IAG3B,UACA;AACI,UAAI,KAAK,SACT;AACI,aAAK,QAAQ;AAAA;AAGjB,WAAK,OAAO;AAEZ,WAAK,UAAU;AACf,WAAK,OAAO;AACZ,WAAK,QAAQ;AACb,WAAK,aAAa;AAAA;AAAA;;;ACnGnB,qBACP;AAAA,IACI;AAAA,IAEA;AAAA,IAEA;AAAA,IAEA;AAAA,IAEA;AAAA,IAEA;AAAA,IAEA,sBAA+B;AAAA,IAE/B,sBAA+B;AAAA,IAE/B,WAAoB;AAAA,IAEpB,YAAa,QACb;AACI,UAAI,QACJ;AACI,aAAK,WAAW;AAAA;AAAA;AAAA,IAIxB,WAAY,QACZ;AACI,YAAM;AAAA,QACF,aAAa;AAAA,QACb,iBAAiB;AAAA,QACjB,SAAS;AAAA,QACT,sBAAsB;AAAA,QACtB,sBAAsB;AAAA,QACtB,aAAa;AAAA,QACb,eAAe;AAAA,QACf,QAAQ;AAAA,QACR,WAAW;AAAA,UACX;AAEJ,WAAK,OAAO,gBAAgB,cAAc,UAAU;AAEpD,UAAI,qBACJ;AACI,aAAK,sBAAsB;AAE3B,cAAM,UAAU,IAAI,QAAQ,MAAM,QAAQ,YAAY,SAAS;AAC/D,cAAM,UAAU,IAAI,iBAAiB;AAErC,gBAAQ,cAAc,kBAAkB,QAAQ;AAEhD,YAAI,qBACJ;AACI,eAAK,sBAAsB;AAE3B,kBAAQ,cAAc,kBAAkB,QAAQ,aAAa,QAAQ,OAAO,QAAQ;AAAA;AAGxF,aAAK,UAAU;AACf,aAAK,cAAc,QAAQ;AAAA;AAAA;AAAA,IAInC,OAAQ,sBAA8B,oBAA4B,UAAc,SAChF;AACI,YAAM,iBAAiB,aAAa,sBAAsB,GAAG;AAC7D,YAAM,eAAe,aAAa,oBAAoB,GAAG;AAEzD,UAAI,CAAC,kBAAkB,CAAC,cACxB;AACI;AAAA;AAGJ,YAAM,UAAU,cAAc,gBAAgB;AAE9C,UAAI,CAAC,SACL;AACI;AAAA;AAGJ,YAAM,iBAAiB,GAAG,aAAa,GAAG;AAE1C,SAAG,WAAW;AAEd,WAAK,UAAU;AAEf,WAAK,iBAAiB,eAAe;AAErC,WAAK,WAAW,IAAI;AAGpB,iBAAW,CAAE,KAAK,UAAW,OAAO,QAAQ,WAC5C;AACI,YAAI,KAAK,eAAe,IAAI,MAC5B;AACI,eAAK,SAAS,IAAI,KAAK;AAAA;AAAA;AAI/B,WAAK,aAAa,iBAAiB,SAAS;AAE5C,SAAG,WAAW;AAEd,WAAK,WAAW;AAAA;AAAA,IAIpB,eAAgB,YAChB;AAAA;AAAA,IAIA,KAAM,YACN;AACI,YAAM,WAAW,KAAK;AAEtB,eAAS,IAAI,qBAAqB,WAAW;AAC7C,eAAS,IAAI,iBAAiB,WAAW;AAEzC,WAAK,eAAe;AAEpB,aAAO,KAAK,YAAY;AAAA;AAAA,IAG5B,WAAY,KAAa,OACzB;AACI,YAAM,WAAW,KAAK;AAEtB,UAAI,SAAS,IAAI,MACjB;AACI,iBAAS,IAAI,KAAK;AAElB,cAAM,SAAS,KAAK,eAAe,IAAI;AAEvC,eAAO;AAAA;AAAA;AAAA,IAKf,YAAa,YACb;AACI,UAAI,CAAC,KAAK,SACV;AACI,eAAO;AAAA;AAGX,SAAG,WAAW,KAAK;AAEnB,WAAK,WAAW;AAEhB,YAAM,WAAW,KAAK;AAEtB,iBAAW,CAAE,MAAM,WAAY,KAAK,eAAe,WACnD;AACI,eAAO,SAAS,IAAI;AAAA;AAGxB,aAAO;AAAA;AAAA,IAIX,cAAe,YACf;AACI,UAAI,KAAK,SACT;AACI,cAAM,SAAS,WAAW,aAAa,QAAQ;AAE/C,aAAK,WAAW,QAAQ,YACxB;AACI,aAAG,oBAAoB,OAAO,OAAO,OAAO,MAAM,OAAO,MAAM,OAAO,YAAY,QAAQ,OAAO;AAAA;AAAA;AAAA;AAAA,IAK7G,UACA;AACI,oBAAc,KAAK;AACnB,sBAAgB,KAAK;AACrB,wBAAkB,KAAK;AAEvB,WAAK,SAAS;AACd,WAAK,eAAe;AACpB,WAAK,WAAW;AAEhB,WAAK,UAAU;AACf,WAAK,UAAU;AACf,WAAK,cAAc;AAAA;AAAA;;;AC7MpB,iCAAyB,OAChC;AAAA,IACI,YAAa,SAAwB,IACrC;AACI,aAAO,aAAa,QAAQ,cAAc;AAE1C,YAAM;AAAA;AAAA;;;ACPP,6CAAqC,WAC5C;AAAA,IACI,YAAa,SAAwB,IACrC;AACI,aAAO,iBAAiB,QAAQ,kBAAkB;AAElD,YAAM;AAAA;AAAA,IAGV,OAAQ,sBAA8B,oBAA4B,UAAc,SAChF;AACI,YAAM,cAAc;AAEpB,6BAAuB,qBAAqB,QAAQ,aAAa,GAAG;AAEpE,YAAM,OAAO,sBAAsB,oBAAoB,UAAU;AAAA;AAAA,IAGrE,KAAM,YACN;AACI,WAAK,SAAS,IAAI,YAAY,WAAW,SAAS;AAElD,aAAO,MAAM,KAAK;AAAA;AAAA;;;ACpBnB,0BACP;AAAA,IACI;AAAA,IAEA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IAEA,YAAa,YACb;AACI,WAAK,aAAa;AAClB,WAAK,QAAQ;AAAA;AAAA,QAGb,UACJ;AACI,aAAO,KAAK,MAAM,KAAK;AAAA;AAAA,IAG3B,IAAK,QAAiB,WACtB;AACI,YAAM,QAAQ,EAAE,QAAQ;AAExB,WAAK;AAGL,UAAI,KAAK,UAAU,KAAK,MAAM,QAC9B;AACI,aAAK,MAAM,KAAK;AAAA,aAGpB;AACI,aAAK,MAAM,KAAK,SAAS;AAAA;AAG7B,aAAO;AAAA;AAAA,IAGX,cACA;AACI,WAAK,QAAQ;AAEb,WAAK,KAAK,KAAK;AAAA;AAAA,IAGnB,KAAM,OACN;AACI,UAAI,CAAC,OACL;AACI,gBAAQ,KAAK;AAAA;AAGjB,UAAI,CAAC,MAAM,OAAO,UAClB;AACI,cAAM,UAAU,MAAM,OAAO,KAAK,KAAK,YAAY,MAAM;AAEzD,YAAI,SACJ;AACI,gBAAM,OAAO,cAAc,KAAK;AAEhC,cAAI,KAAK,UAAU,KAAK,WAAW,MAAM,QACzC;AACI,iBAAK,OAAO,WAAW;AAAA;AAG3B,eAAK,SAAS,MAAM;AAAA;AAAA;AAAA;AAAA,IAKhC,MACA;AACI,WAAK;AAEL,WAAK;AAAA;AAAA,IAGT,IAAK,QAAiB,WACtB;AACI,YAAM,QAAQ,KAAK,IAAI,QAAQ;AAE/B,WAAK,KAAK;AAAA;AAAA,IAGd,WAAY,QAAiB,WAC7B;AACI,YAAM,QAAQ,EAAE,QAAQ;AAGxB,WAAK,MAAM,KAAK;AAEhB,WAAK,QAAQ;AAEb,WAAK,UAAU;AAAA;AAAA;;;AC7FvB,MAAM,SAAS,gBAAgB;AAAA,IAC3B,OAAO,CAAE,MAAM,KAAK;AAAA,IACpB,QAAQ,CAAE,MAAM,KAAK;AAAA,IACrB,OAAO,CAAE,MAAM,KAAK;AAAA;AAGjB,MAAM,kBAAkB;;;ACXxB,8BAA6B,IACpC;AACI,iBAAa,iBAAiB,iBAAiB;AAAA;;;ACJ5C,MAAM,mBAAmB,gBAAgB;AAAA,IAC5C,MAAM,CAAE,MAAM,KAAK;AAAA;;;ACChB,+BAA8B,IACrC;AACI,iBAAa,iBAAiB,kBAAkB;AAEhD,UAAM,OAAO,iBAAiB,KAAK;AAEnC,SAAK,KAAK;AACV,SAAK,KAAK;AACV,SAAK,MAAM;AACX,SAAK,MAAM;AAAA;;;ACJR,2BACP;AAAA,IACa,KAAa,UAAU;AAAA,IAEvB,OAAe;AAAA,IAGxB,OAAe;AAAA,IAEf,YAAa,OAAe,QAC5B;AACI,YAAM,KAAK,KAAK;AAEhB,0BAAoB;AACpB,yBAAmB;AAEnB,WAAK,MAAM,OAAO;AAAA;AAAA,IAGtB,YACA;AACI,aAAO,gBAAgB,OAAO,KAAK;AAAA;AAAA,IAGvC,YACA;AACI,aAAO,iBAAiB,KAAK,KAAK;AAAA;AAAA,IAGtC,SACA;AACI,aAAO;AAAA;AAAA,IAGX,MAAO,OAAe,QACtB;AACI,sBAAgB,OAAO,KAAK,IAAI,IAAI,CAAE,GAAG,GAAG,OAAO;AAAA;AAAA,IAGvD,UACA;AACI,YAAM,KAAK,KAAK;AAEhB,sBAAgB,iBAAiB,kBAAkB;AACnD,sBAAgB,iBAAiB,iBAAiB;AAElD,mBAAa,iBAAiB;AAAA;AAAA;;;AChD/B,gCACP;AACI,QAAI,iBAAyB,GAAG,aAAa,GAAG;AAEhD,UAAM,oBAAoB;AAE1B,QAAI,sBAAsB,KAAK,oBAAoB,gBACnD;AAEI,qBAAe;AAAA,WAGnB;AACI,uBAAiB;AAAA;AAGrB,UAAM,WAA4C;AAGlD,aAAS,IAAY,GAAG,IAAI,gBAAgB,KAC5C;AACI,YAAM,cAAc,GAAG;AAEvB,SAAG,cAAc,GAAG,WAAW;AAE/B,SAAG,YAAY,GAAG,YAAY;AAE9B,SAAG,WAAW,GAAG,YAAY,GAAG,GAAG,MAAM,GAAG,GAAG,GAAG,GAAG,MAAM,GAAG,eAAe,IAAI,WAAW,CAAE,GAAG,GAAG,KAAK;AAEzG,eAAS,KAAK,CAAE,GAAG;AAAA;AAGvB,WAAO;AAAA;;;ACrCX,MAAI;AAEG,MAAM,eACb;AAAA,IACI,KAAK,MACL;AACI,aAAO;AAAA;AAAA,IAGX,KAAK,CAAC,YACN;AACI,iBAAW;AAAA;AAAA;;;ACLZ,2BACP;AAAA,IACI;AAAA,IAEA;AAAA,IACA;AAAA,IACA;AAAA,IAEA;AAAA,IAEA,YAAa,YACb;AACI,WAAK,aAAa;AAAA;AAAA,IAItB,KAAM,SAAkB,QAAgB,GACxC;AACI,YAAM,UAAU,QAAQ;AAExB,cAAQ,KAAK;AAEb,SAAG,cAAc,GAAG,WAAW;AAC/B,SAAG,YAAY,GAAG,YAAY,QAAQ;AAAA;AAAA,IAG1C,OAAQ,QAAgB,GACxB;AACI,SAAG,cAAc,GAAG,WAAW;AAC/B,SAAG,YAAY,GAAG,YAAY,KAAK,aAAc;AAAA;AAAA,IAGrD,WACA;AACI,aAAO,KAAK,IAAI,aAAa;AAAA;AAAA,IAKjC,IAAK,SACL;AACI,UAAI,CAAC,QAAQ,SACb;AACI,eAAO;AAAA;AAGX,YAAM,UAAU,QAAQ;AACxB,YAAM,WAAW,KAAK;AAGtB,UAAI,CAAC,QAAQ,SACb;AAEI,YAAI,SAAS,SAAS,KAAK,aAC3B;AACI,gBAAM,KAAK;AAEX,eAAK;AAAA;AAIT,cAAM,cAAc,SAAS;AAE7B,WAAG,cAAc,GAAG,WAAW;AAC/B,WAAG,YAAY,GAAG,YAAY,QAAQ;AAEtC,iBAAS,IAAI,aAAa;AAE1B,gBAAQ,KAAK;AAAA;AAGjB,aAAO,QAAQ;AAAA;AAAA,IAGnB,aACA;AACI,UAAI,KAAK,UACT;AACI,aAAK;AAAA;AAGT,YAAM,eAAe;AAErB,WAAK,cAAc,aAAa;AAEhC,WAAK,eAAe,IAAI,IAAI;AAC5B,WAAK,WAAW,IAAI;AAEpB,WAAK,eAAe;AAEpB,WAAK,aAAa,QAAQ,CAAC,SAAS,UACpC;AACI,aAAK,aAAa,KAAK;AAAA;AAAA;AAAA,IAI/B,QACA;AACI,WAAK,SAAS,QAAQ,aAAW,QAAQ,QAAQ;AAEjD,WAAK,SAAS;AAAA;AAAA,IAGlB,QACA;AACI,WAAK,aAAa,QAAQ,CAAC,SAAS,UACpC;AACI,WAAG,cAAc,GAAG,WAAW;AAE/B,WAAG,YAAY,GAAG,YAAY;AAAA;AAGlC,WAAK;AAAA;AAAA;;;ACtHN,0BAAyB,QAChC;AACI,QAAI,GAAG,SAAS,SAChB;AACI,SAAG,aAAa;AAAA;AAAA;;;ACDjB,2BACP;AAAA,IAEI;AAAA,IASA;AAAA,IAOA;AAAA,IAiBA;AAAA,IASA;AAAA,IASA;AAAA,IASA;AAAA,IAOA;AAAA,IAOA;AAAA,IAOA;AAAA,IASA;AAAA,IAEA,UAAmB;AAAA,IAEnB,YAAqB;AAAA,IAUrB,QAAgB;AAAA,IAOhB,SAAiB;AAAA,IASjB;AAAA,IAEA,UAAmB;AAAA,IAEnB,YAAa,SAA8B,IAC3C;AACI,YAAM;AAAA,QACF,OAAO;AAAA,QACP,YAAY;AAAA,QACZ,WAAW;AAAA,QACX,YAAY;AAAA,QACZ,mBAAmB;AAAA,QACnB,oBAAoB;AAAA,UACpB;AAEJ,WAAK,OAAO;AACZ,WAAK,YAAY;AACjB,WAAK,WAAW;AAChB,WAAK,oBAAoB;AACzB,WAAK,YAAY;AACjB,WAAK,mBAAmB;AAGxB,WAAK,iBAAiB,oBAAoB;AAC1C,WAAK,gBAAgB,KAAK,iBAAiB;AAC3C,WAAK,iBAAiB,YAAY,KAAK;AACvC,WAAK,mBAAmB,KAAK,oBAAoB,KAAK;AAEtD,WAAK;AAAA;AAAA,IAGT,OAAQ,WACR;AACI,WAAK,YAAY;AACjB,WAAK,iBAAiB,YAAY,KAAK;AAEvC,UAAI,KAAK,cACT;AACI,uBAAe,KAAK;AAAA;AAGxB,WAAK;AAAA;AAAA,IAGT,SACA;AACI,YAAM,OAAO,IAAI,YAAY,KAAK;AAElC,WAAK,OAAO;AAEZ,WAAK,gBAAgB,IAAI,aAAa;AAEtC,WAAK,eAAe,GAAG;AAEvB,SAAG,WAAW,GAAG,cAAc,KAAK;AAEpC,YAAM,OAAQ,KAAK,YAAa,GAAG,eAAe,GAAG;AAErD,SAAG,WAAW,GAAG,cAAc,MAAM;AAErC,SAAG,WAAW,GAAG,cAAc;AAE/B,WAAK,UAAU;AAAA;AAAA,IAGnB,IAAK,OACL;AACI,WAAK,SAAS;AACd,WAAK,UAAW,KAAK,oBAAoB;AAAA;AAAA,IAG7C,QACA;AACI,WAAK,QAAQ;AACb,WAAK,SAAS;AAAA;AAAA,IAGlB,WAAY,OACZ;AACI,aAAS,KAAK,QAAQ,SAAU,KAAK;AAAA;AAAA,IAGzC,OACA;AACI,aAAO,KAAK,IAAI,GAAG,IAAK,KAAK,QAAQ,KAAK;AAAA;AAAA,IAG9C,OACA;AACI,SAAG,WAAW,GAAG,sBAAsB;AACvC,SAAG,WAAW,GAAG,cAAc,KAAK;AAAA;AAAA,IAGxC,UACA;AACI,qBAAe,KAAK;AAEpB,WAAK,OAAO;AACZ,WAAK,gBAAgB;AACrB,WAAK,eAAe;AAAA;AAAA;;;AC/NrB,gCACP;AAAA,IACI;AAAA,IAEA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IAEA,YAAa,YACb;AACI,WAAK,aAAa;AAClB,WAAK,QAAQ;AAAA;AAAA,QAGb,UACJ;AACI,aAAO,KAAK,MAAM,KAAK;AAAA;AAAA,IAG3B,IAAK,QACL;AACI,WAAK;AAGL,UAAI,KAAK,UAAU,KAAK,MAAM,QAC9B;AACI,aAAK,MAAM,KAAK;AAAA,aAGpB;AACI,aAAK,MAAM,KAAK,SAAS;AAAA;AAG7B,aAAO;AAAA;AAAA,IAGX,cACA;AACI,WAAK,QAAQ;AAEb,WAAK,KAAK,KAAK;AAAA;AAAA,IAGnB,KAAM,QACN;AACI,UAAI,CAAC,QACL;AACI,iBAAS,KAAK;AAAA;AAGlB,UAAI,CAAC,OAAO,SACZ;AACI,cAAM,cAAe,OAAO,UAAW,OAAO,cAAc;AAE5D,WAAG,WAAW,GAAG,sBAAsB;AAEvC,WAAG,WAAW,GAAG,cAAc,OAAO;AAEtC,eAAO,UAAU;AAEjB,YAAI,KAAK,UAAU,KAAK,WAAW,QACnC;AACI,eAAK,OAAO,UAAU;AAAA;AAG1B,aAAK,SAAS;AAAA;AAAA;AAAA,IAItB,MACA;AACI,WAAK;AAEL,WAAK;AAAA;AAAA,IAGT,IAAK,QACL;AACI,YAAM,QAAQ,KAAK,IAAI;AAEvB,WAAK,KAAK;AAAA;AAAA,IAGd,WAAY,QACZ;AAEI,WAAK,MAAM,KAAK;AAEhB,WAAK,QAAQ;AAEb,WAAK,UAAU;AAAA;AAAA;;;AC/FvB,AAWO,6BAA4B,MAAkB,GAAW,GAChE;AACI,QAAI,KAAK,SAAS,KAAK,KAAK,UAAU,GACtC;AACI,aAAO;AAAA;AAGX,WAAQ,KAAK,KAAK,KAAK,KAAK,IAAI,KAAK,SAAS,KAAK,KAAK,KAAK,KAAK,KAAK,IAAI,KAAK,UAAU;AAAA;;;AClB9F,AAQO,wBACP;AAAA,IACI;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IAEA,YAAa,IAAY,GAAG,IAAY,GAAG,QAAgB,GAAG,SAAiB,GAC/E;AACI,WAAK,IAAI,GAAG,GAAG,OAAO;AAAA;AAAA,IAG1B,IAAK,IAAY,GAAG,IAAY,GAAG,QAAgB,GAAG,SAAiB,GACvE;AACI,WAAK,IAAI;AACT,WAAK,IAAI;AACT,WAAK,QAAQ;AACb,WAAK,SAAS;AAEd,aAAO;AAAA;AAAA,IAGX,SAAU,GAAW,GACrB;AACI,aAAO,kBAAkB,MAAM,GAAG;AAAA;AAAA,QAGlC,MAAO,OACX;AACI,UAAI,SAAS,KAAK,GAClB;AACI,aAAK,QAAQ;AAAA,aAGjB;AACI,aAAK,QAAQ,QAAQ,KAAK;AAAA;AAAA;AAAA,QAI9B,QACJ;AACI,aAAO,KAAK,IAAI,KAAK;AAAA;AAAA,QAGrB,OAAQ,OACZ;AACI,UAAI,SAAS,KAAK,GAClB;AACI,aAAK,SAAS;AAAA,aAGlB;AACI,aAAK,SAAS,QAAQ,KAAK;AAAA;AAAA;AAAA,QAI/B,SACJ;AACI,aAAO,KAAK,IAAI,KAAK;AAAA;AAAA;;;AClE7B,AAWO,2BAA0B,MAAkB,WACnD;AACI,WACI,KAAK,MAAM,UAAU,KACrB,KAAK,MAAM,UAAU,KACrB,KAAK,UAAU,UAAU,SACzB,KAAK,WAAW,UAAU;AAAA;;;ACZ3B,4BACP;AAAA,IACI;AAAA,IAEA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IAEA,YAAa,YACb;AACI,WAAK,aAAa;AAClB,WAAK,QAAQ;AAAA;AAAA,QAGb,UACJ;AACI,aAAO,KAAK,MAAM,KAAK;AAAA;AAAA,IAG3B,IAAK,IAAY,GAAG,IAAY,GAAG,QAAgB,GAAG,SAAiB,GACvE;AACI,YAAM,QAAQ,IAAI,UAAU,GAAG,GAAG,OAAO;AAEzC,WAAK;AAGL,UAAI,KAAK,UAAU,KAAK,MAAM,QAC9B;AACI,aAAK,MAAM,KAAK;AAAA,aAGpB;AACI,aAAK,MAAM,KAAK,SAAS;AAAA;AAG7B,aAAO;AAAA;AAAA,IAGX,cACA;AACI,WAAK,QAAQ;AAEb,WAAK,KAAK,KAAK;AAAA;AAAA,IAGnB,KAAM,UACN;AACI,UAAI,CAAC,UACL;AACI,mBAAW,KAAK;AAAA;AAGpB,UAAI,CAAC,KAAK,UAAU,CAAC,gBAAgB,KAAK,QAAQ,WAClD;AACI,WAAG,SAAS,SAAS,GAAG,SAAS,GAAG,SAAS,OAAO,SAAS;AAE7D,aAAK,SAAS;AAAA;AAAA;AAAA,IAItB,MACA;AACI,WAAK;AAEL,WAAK;AAAA;AAAA,IAGT,IAAK,IAAY,GAAG,IAAY,GAAG,QAAgB,GAAG,SAAiB,GACvE;AACI,YAAM,QAAQ,KAAK,IAAI,GAAG,GAAG,OAAO;AAEpC,WAAK,KAAK;AAAA;AAAA,IAGd,WAAY,IAAY,GAAG,IAAY,GAAG,QAAgB,GAAG,SAAiB,GAC9E;AACI,YAAM,QAAQ,IAAI,UAAU,GAAG,GAAG,OAAO;AAGzC,WAAK,MAAM,KAAK;AAEhB,WAAK,QAAQ;AAEb,WAAK,UAAU;AAAA;AAAA;;;ACpEhB,yBACP;AAAA,IACI;AAAA,IAEA;AAAA,IACA;AAAA,IAEA,QAAgB;AAAA,IAChB,YAAoB;AAAA,IACpB,aAAqB;AAAA,IAGrB;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IAGA;AAAA,IACA;AAAA,IAGA;AAAA,IAEA,YAAa,UACb;AACI,WAAK,WAAW;AAEhB,WAAK,mBAAmB,IAAI,aAAa;AAEzC,WAAK,cAAc,IAAI,iBAAiB;AACxC,WAAK,eAAe,IAAI,kBAAkB;AAC1C,WAAK,YAAY,IAAI,eAAe;AACpC,WAAK,SAAS,IAAI,YAAY;AAC9B,WAAK,WAAW,IAAI,cAAc;AAClC,WAAK,WAAW,IAAI,aAAa;AACjC,WAAK,cAAc,IAAI,iBAAiB;AAExC,WAAK;AAAA;AAAA,IAGT,mBACA;AACI,aAAO,KAAK,OAAO,QAAQ;AAAA;AAAA,IAG/B,QACA;AACI,WAAK,YAAY,KAAK;AAEtB,WAAK,QAAQ;AAEb,WAAK;AAAA;AAAA,IAKT,QACA;AACI,YAAM,MAAK,KAAK,SAAS;AAIzB,WAAK,aAAa,IAAI;AACtB,WAAK,aAAa,IAAI,aAAa,KAAK,SAAS,OAAO,KAAK,SAAS;AAItE,WAAK,SAAS;AACd,WAAK,YAAY;AACjB,WAAK,UAAU,WAAW,MAAM,IAAG,KAAK,IAAG;AAC3C,WAAK,YAAY,WAAW,sBAAsB;AAClD,WAAK,aAAa,WAAW,IAAI,aAAa,EAAE,WAAW;AAC3D,WAAK,OAAO,WAAY,qBAAqB,IAAK,IAAI,eAAe,IAAI;AAAA;AAAA,IAG7E,OAAQ,OAAe,QACvB;AAEI,gBAAU,KAAK,kBAAkB,GAAG,OAAO,QAAQ,GAAG,MAAO;AAE7D,WAAK,WAAW,MAAM,OAAO;AAE7B,WAAK,SAAS,WAAW,GAAG,GAAG,OAAO;AAAA;AAAA;;;ACzGvC,iBAAgB,YACvB;AACI,QAAI,CAAC,WAAW,iBAChB;AACI,iBAAW,kBAAkB,WAAW;AACxC,iBAAW,eAAe,WAAW,WAAW;AAAA;AAGpD,eAAW,QAAQ;AACnB,eAAW,aAAa;AAExB,eAAW,YAAY;AACvB,eAAW,UAAU;AACrB,eAAW,SAAS;AACpB,eAAW,aAAa;AACxB,eAAW,OAAO;AAClB,eAAW,YAAY;AAEvB,WAAO;AAAA;;;AClBJ,MAAI;AAEJ,MAAM,mBACb;AAAA,IACI,KAAK,MACL;AACI,aAAO;AAAA;AAAA,IAGX,KAAK,CAAC,aACN;AACI,kBAAW;AAAA;AAAA;;;ACVZ,MAAI;AAEJ,MAAM,wBACb;AAAA,IACI,KAAK,MACL;AACI,aAAO;AAAA;AAAA,IAGX,KAAK,CAAC,aACN;AACI,kBAAW;AACX,uBAAiB,IAAI;AAAA;AAAA;;;ACCtB,4BACP;AAAA,IACI;AAAA,IACA;AAAA,IAEA;AAAA,IAEA,aAAa,CAAE,GAAG,GAAG,GAAG;AAAA,IAExB;AAAA,IACA;AAAA,IACA;AAAA,IAEA,oBAA6B;AAAA,IAC7B,iBAA0B;AAAA,IAC1B,aAAsB;AAAA,IAEtB,cAAuB;AAAA,IAEvB;AAAA,IAEA,cACA;AACI,WAAK,QAAQ;AACb,WAAK,SAAS;AACd,WAAK,aAAa;AAElB,WAAK,mBAAmB;AAExB,YAAM,SAAS,SAAS,cAAc;AAEtC,aAAO,iBAAiB,oBAAoB,CAAC,UAAU,KAAK,cAAc,QAAQ;AAClF,aAAO,iBAAiB,wBAAwB,MAAM,KAAK,qBAAqB;AAEhF,WAAK,SAAS;AAEd,WAAK;AAGL,4BAAsB,IAAI;AAE1B,WAAK,aAAa,IAAI,WAAW;AAEjC,WAAK,OAAO,KAAK,OAAO,KAAK,QAAQ,KAAK;AAG1C;AAAA;AAAA,IAGJ,cACA;AACI,YAAM,MAAK,KAAK,OAAO,WAAW,SAAS;AAE3C,SAAG,IAAI;AAEP,WAAK,KAAK;AAEV,WAAK,cAAc,sBAAsB;AAEzC,UAAG,QAAQ,IAAG;AACd,UAAG,QAAQ,IAAG;AAAA;AAAA,IAGlB,OAAQ,OAAe,QAAgB,aAAqB,GAC5D;AACI,YAAM,YAAY,QAAQ;AAC1B,YAAM,aAAa,SAAS;AAE5B,WAAK,QAAQ;AACb,WAAK,SAAS;AACd,WAAK,aAAa;AAElB,YAAM,SAAS,KAAK;AAEpB,aAAO,QAAQ;AACf,aAAO,SAAS;AAEhB,UAAI,KAAK,YACT;AACI,eAAO,MAAM,QAAQ,MAAM,aAAa;AACxC,eAAO,MAAM,SAAS,OAAO,aAAa;AAAA;AAG9C,WAAK,WAAW,OAAO,WAAW;AAAA;AAAA,IAGtC,cAAe,OACf;AACI,YAAM;AAEN,WAAK,cAAc;AAAA;AAAA,IAGvB,oBACA;AACI,WAAK,cAAc;AAEnB,WAAK;AAAA;AAAA,IAGT,mBAAoB,OACpB;AACI,kBAAY,OAAO,KAAK;AAExB,aAAO;AAAA;AAAA,IAIX,QACA;AAAA;AAAA,IAIA,MAAO,YACP;AACI,UAAI,KAAK,aACT;AACI;AAAA;AAGJ,YAAM,MAAK,KAAK;AAIhB,UAAG;AAEH;AAGA,UAAI,KAAK,kBAAkB,CAAC,YAC5B;AAAA;AAIA,UAAI,KAAK,mBACT;AACI,cAAM,MAAM,KAAK;AAEjB,YAAG,WAAW,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI;AAC1C,YAAG,MAAM,IAAG;AAAA;AAGhB,aAAO,MAAM,KAAK;AAAA;AAAA,IAGtB,MACA;AACI,UAAI,KAAK;AAAA;AAAA,IAMb,UACA;AACI,4BAAsB,IAAI;AAAA;AAAA;;;ACxK3B,mBACP;AACI,WAAO,MACP;AACI,kBAAY;AAAA;AAAA;;;ACJb,2BAA0B,mBACjC;AACI,gBAAY,IAAI,gBAAgB,eAAe;AAAA;;;ACF5C,wBAAuB,MAC9B;AACI,gBAAY,IAAI,gBAAgB,YAAY;AAAA;;;ACDzC,4BAA2B,IAAY,GAAW,GAAW,OAAe,QACnF;AACI,QAAI,aAAa,iBAAiB,iBAAiB,KACnD;AACI,YAAM,CAAE,IAAI,IAAI,IAAI,MAAO,gBAAgB,OAAO;AAElD,aAAO,CAAE,SAAQ,MAAM,SAAS,MAAM,IAAI,MAAM,IAAI;AAAA;AAIxD,WAAO;AAAA;;;ACVJ,6BAA4B,IACnC;AACI,iBAAa,iBAAiB,gBAAgB;AAE9C,mBAAe,UAAU,MAAM;AAAA;;;ACN5B,2BAA0B,IACjC;AACI,mBAAe,MAAM,MAAM;AAAA;;;ACFxB,gCAA+B,IACtC;AACI,mBAAe,WAAW,MAAM;AAAA;;;ACF7B,iCAAgC,IACvC;AACI,mBAAe,YAAY,MAAM;AAAA;;;ACF9B,+BAA8B,IACrC;AACI,mBAAe,UAAU,MAAM;AAAA;;;ACF5B,yBAAwB,IAC/B;AACI,WAAO,QAAQ,eAAe,MAAM;AAAA;;;ACFjC,8BAA6B,IACpC;AACI,WAAO,QAAQ,eAAe,WAAW;AAAA;;;ACFtC,+BAA8B,IACrC;AACI,WAAO,QAAQ,eAAe,YAAY;AAAA;;;ACFvC,6BAA4B,IACnC;AACI,WAAO,QAAQ,eAAe,UAAU;AAAA;;;ACFrC,+BAA8B,IACrC;AACI,mBAAe,YAAY,MAAM;AAAA;;;ACD9B,oCAAmC,IAC1C;AACI,UAAM,UAAU,mBAAmB,QAAQ;AAE3C,mBAAe,YAAY,WAAW;AAAA;;;ACHnC,iCAAgC,IACvC;AACI,iBAAa,iBAAiB,oBAAoB;AAAA;;;ACJ/C,MAAM,kBAA4C,IAAI;;;ACAtD,sBAAqB,IAC5B;AACI,WAAO,mBAAmB,QAAQ;AAAA;;;ACJ/B,MAAM,iBAAwC,IAAI;;;ACGlD,6BAA4B,IACnC;AACI,uBAAmB,YAAY,MAAM,eAAe,IAAI,IAAI;AAAA;;;ACMzD,iCAAgC,IACvC;AACI,UAAM,UAAU,WAAW;AAC3B,UAAM,WAAW,YAAY;AAC7B,UAAM,SAAQ,gBAAgB,IAAI;AAElC,uBAAmB,QAAQ,MAAM;AACjC,uBAAmB,SAAS,MAAM;AAElC,QAAI,UAAS,aAAa,iBAAiB,OAAM,KAAK,KACtD;AACI,sBAAgB,iBAAiB,OAAM,KAAK;AAAA;AAGhD,sBAAkB;AAElB,oBAAgB;AAAA;;;ACvBb,wCAAuC,UAC9C;AACI,UAAM,QAAkB,CAAE;AAC1B,UAAM,SAAmB;AAEzB,WAAO,MAAM,SAAS,GACtB;AACI,YAAM,OAAO,MAAM;AAEnB,aAAO,KAAK;AAEZ,YAAM,eAAe,eAAe,IAAI;AAExC,YAAM,cAAc,aAAa;AAEjC,UAAI,cAAc,GAClB;AACI,iBAAS,IAAI,cAAc,GAAG,KAAK,GAAG,KACtC;AACI,gBAAM,QAAQ,aAAa;AAAA;AAAA;AAAA;AAMvC,WAAO;AAEP,WAAO;AAAA;;;AC3BJ,mCAAkC,IACzC;AACI,UAAM,MAAqB;AAE3B,mBAAe,IAAI,IAAI,QAAQ,aAC/B;AACI,UAAI,KAAK,gBAAgB,IAAI;AAAA;AAGjC,WAAO;AAAA;;;ACXJ,0BAAyB,IAChC;AACI,WAAO,mBAAmB,YAAY;AAAA;;;ACAnC,+BAA8B,IACrC;AACI,WAAO,gBAAgB,IAAI,mBAAmB,SAAS;AAAA;;;ACFpD,gCAA+B,UACtC;AACI,UAAM,UAAU,WAAW;AAE3B,WAAO,gBAAgB,IAAI;AAAA;;;ACNxB,oBAAmB,IAAY,OACtC;AACI,uBAAmB,MAAM,MAAM;AAAA;;;ACA5B,uBAAsB,SAAiB,UAC9C;AACI,uBAAmB,SAAS,WAAW;AAEvC,sBAAkB;AAElB,sBAAkB;AAAA;;;ACRf,yBAAwB,IAAY,YAC3C;AACI,uBAAmB,WAAW,MAAM;AAAA;;;ACFjC,sBAAqB,IAAY,SACxC;AACI,uBAAmB,QAAQ,MAAM;AAAA;;;ACD9B,8BAA6B,UACpC;AACI,UAAM,WAAW,eAAe,IAAI;AAEpC,aAAS,IAAI,GAAG,IAAI,SAAS,QAAQ,KACrC;AACI,eAAS,SAAS,IAAI;AAAA;AAAA;;;ACLvB,yBAAwB,IAC/B;AACI,UAAM,WAAW,YAAY;AAE7B,UAAM,WAAW,eAAe,IAAI;AAEpC,aAAS,IAAI,GAAG,IAAI,SAAS,QAAQ,KACrC;AACI,eAAS,SAAS,IAAI;AAAA;AAAA;;;ACRvB,mCAAkC,IACzC;AACI,iBAAa,iBAAiB,sBAAsB;AAEpD,yBAAqB,QAAQ,MAAM;AACnC,yBAAqB,gBAAgB,MAAM;AAC3C,yBAAqB,WAAW,MAAM;AACtC,yBAAqB,mBAAmB,MAAM;AAC9C,yBAAqB,WAAW,MAAM;AACtC,yBAAqB,mBAAmB,MAAM;AAC9C,yBAAqB,kBAAkB,MAAM;AAC7C,yBAAqB,sBAAsB,MAAM;AACjD,yBAAqB,kBAAkB,MAAM;AAAA;;;ACb1C,gCAA+B,UAAmB,UACzD;AACI,aAAS,QAAQ,WACjB;AACI,2BAAqB,kBAAkB,MAAM,MAAM,OAAO;AAAA;AAG9D,WAAO;AAAA;;;ACRJ,sBAAqB,IAC5B;AACI,WAAO,QAAQ,qBAAqB,QAAQ,QAAQ,QAAQ,qBAAqB,WAAW;AAAA;;;ACFzF,8BAA6B,IACpC;AACI,WAAO,QAAQ,qBAAqB,gBAAgB,QAAQ,QAAQ,qBAAqB,mBAAmB;AAAA;;;ACFzG,sBAAqB,IAC5B;AACI,WAAO,QAAQ,qBAAqB,WAAW;AAAA;;;ACF5C,8BAA6B,IACpC;AACI,WAAO,QAAQ,qBAAqB,mBAAmB;AAAA;;;ACFpD,MAAM,uBAAuB,gBAAgB;AAAA,IAChD,GAAG,MAAM;AAAA,IACT,GAAG,MAAM;AAAA,IACT,UAAU,MAAM;AAAA,IAChB,QAAQ,MAAM;AAAA,IACd,QAAQ,MAAM;AAAA,IACd,OAAO,MAAM;AAAA,IACb,OAAO,MAAM;AAAA,IACb,SAAS,MAAM;AAAA,IACf,SAAS,MAAM;AAAA,IACf,OAAO,CAAE,MAAM,KAAK;AAAA,IACpB,OAAO,CAAE,MAAM,KAAK;AAAA;;;ACUjB,mCAAkC,IAAY,IAAY,GAAG,IAAY,GAAG,UAAkB,GAAG,UAAkB,GAC1H;AACI,iBAAa,iBAAiB,sBAAsB;AACpD,iBAAa,iBAAiB,mBAAmB;AAIjD,yBAAqB,EAAE,MAAM;AAC7B,yBAAqB,EAAE,MAAM;AAC7B,yBAAqB,OAAO,MAAM;AAClC,yBAAqB,OAAO,MAAM;AAClC,yBAAqB,QAAQ,MAAM;AACnC,yBAAqB,QAAQ,MAAM;AAEnC,yBAAqB,MAAM,IAAI,IAAI,CAAE,GAAG,GAAG,GAAG,GAAG,GAAG;AACpD,yBAAqB,MAAM,IAAI,IAAI,CAAE,GAAG,GAAG,GAAG,GAAG,GAAG;AAAA;;;AClCjD,wBAAuB,IAAY,OAAe,QACzD;AACI,UAAM,IAAI,CAAE,qBAAqB,QAAQ,MAAO;AAChD,UAAM,IAAI,CAAE,qBAAqB,QAAQ,MAAO;AAEhD,sBAAkB,EAAE,MAAM;AAC1B,sBAAkB,EAAE,MAAM;AAC1B,sBAAkB,MAAM,MAAM;AAC9B,sBAAkB,OAAO,MAAM;AAC/B,sBAAkB,MAAM,MAAM,IAAI;AAClC,sBAAkB,OAAO,MAAM,IAAI;AAEnC,sBAAkB;AAAA;;;ACXf,qBACP;AAAA,IACY;AAAA,IAER,YAAa,IAAY,IAAY,GAAG,IAAY,GACpD;AACI,WAAK,KAAK;AAEV,WAAK,IAAI;AACT,WAAK,IAAI;AAAA;AAAA,IAGb,IAAK,GAAW,IAAY,GAC5B;AACI,YAAM,KAAK,KAAK;AAEhB,2BAAqB,QAAQ,MAAM;AACnC,2BAAqB,QAAQ,MAAM;AAEnC,mBAAa,IAAI,kBAAkB,MAAM,KAAK,kBAAkB,OAAO;AAEvE,aAAO;AAAA;AAAA,QAGP,EAAG,OACP;AACI,YAAM,KAAK,KAAK;AAEhB,2BAAqB,QAAQ,MAAM;AAEnC,mBAAa,IAAI,kBAAkB,MAAM,KAAK,kBAAkB,OAAO;AAAA;AAAA,QAGvE,IACJ;AACI,aAAO,qBAAqB,QAAQ,KAAK;AAAA;AAAA,QAGzC,EAAG,OACP;AACI,YAAM,KAAK,KAAK;AAEhB,2BAAqB,QAAQ,MAAM;AAEnC,mBAAa,IAAI,kBAAkB,MAAM,KAAK,kBAAkB,OAAO;AAAA;AAAA,QAGvE,IACJ;AACI,aAAO,qBAAqB,QAAQ,KAAK;AAAA;AAAA;;;AClD1C,uBACP;AAAA,IACY;AAAA,IAER,YAAa,IAAY,IAAY,GAAG,IAAY,GACpD;AACI,WAAK,KAAK;AAEV,WAAK,IAAI;AACT,WAAK,IAAI;AAAA;AAAA,IAGb,IAAK,GAAW,IAAY,GAC5B;AACI,WAAK,IAAI;AACT,WAAK,IAAI;AAET,aAAO;AAAA;AAAA,QAGP,EAAG,OACP;AACI,2BAAqB,EAAE,KAAK,MAAM;AAClC,wBAAkB,KAAK;AAAA;AAAA,QAGvB,IACJ;AACI,aAAO,qBAAqB,EAAE,KAAK;AAAA;AAAA,QAGnC,EAAG,OACP;AACI,2BAAqB,EAAE,KAAK,MAAM;AAClC,wBAAkB,KAAK;AAAA;AAAA,QAGvB,IACJ;AACI,aAAO,qBAAqB,EAAE,KAAK;AAAA;AAAA;;;ACvCpC,oBACP;AAAA,IACY;AAAA,IAER,YAAa,IAAY,IAAY,GAAG,IAAY,GACpD;AACI,WAAK,KAAK;AAEV,WAAK,IAAI;AACT,WAAK,IAAI;AAAA;AAAA,IAGb,IAAK,GAAW,IAAY,GAC5B;AACI,WAAK,IAAI;AACT,WAAK,IAAI;AAET,aAAO;AAAA;AAAA,QAGP,EAAG,OACP;AACI,2BAAqB,OAAO,KAAK,MAAM;AACvC,wBAAkB,KAAK;AAAA;AAAA,QAGvB,IACJ;AACI,aAAO,qBAAqB,OAAO,KAAK;AAAA;AAAA,QAGxC,EAAG,OACP;AACI,2BAAqB,OAAO,KAAK,MAAM;AACvC,wBAAkB,KAAK;AAAA;AAAA,QAGvB,IACJ;AACI,aAAO,qBAAqB,OAAO,KAAK;AAAA;AAAA;;;ACvCzC,mBACP;AAAA,IACY;AAAA,IAER,YAAa,IAAY,QAAgB,GAAG,SAAiB,GAC7D;AACI,WAAK,KAAK;AAEV,WAAK,IAAI,OAAO;AAAA;AAAA,IAGpB,IAAK,OAAe,SAAiB,OACrC;AACI,WAAK,QAAQ;AACb,WAAK,SAAS;AAEd,aAAO;AAAA;AAAA,QAGP,MAAO,OACX;AACI,mBAAa,KAAK,IAAI,OAAO,KAAK;AAAA;AAAA,QAGlC,QACJ;AACI,aAAO,kBAAkB,MAAM,KAAK;AAAA;AAAA,QAGpC,OAAQ,OACZ;AACI,mBAAa,KAAK,IAAI,KAAK,OAAO;AAAA;AAAA,QAGlC,SACJ;AACI,aAAO,kBAAkB,OAAO,KAAK;AAAA;AAAA,QAGrC,EAAG,OACP;AACI,WAAK,QAAQ;AAAA;AAAA,QAGb,IACJ;AACI,aAAO,KAAK;AAAA;AAAA,QAGZ,EAAG,OACP;AACI,WAAK,SAAS;AAAA;AAAA,QAGd,IACJ;AACI,aAAO,KAAK;AAAA;AAAA;;;ACxDb,mBACP;AAAA,IACY;AAAA,IAER,YAAa,IAAY,IAAY,GAAG,IAAY,GACpD;AACI,WAAK,KAAK;AAEV,WAAK,IAAI;AACT,WAAK,IAAI;AAAA;AAAA,IAGb,IAAK,GAAW,IAAY,GAC5B;AACI,WAAK,IAAI;AACT,WAAK,IAAI;AAET,aAAO;AAAA;AAAA,QAGP,EAAG,OACP;AACI,2BAAqB,MAAM,KAAK,MAAM;AACtC,wBAAkB,KAAK;AAAA;AAAA,QAGvB,IACJ;AACI,aAAO,qBAAqB,MAAM,KAAK;AAAA;AAAA,QAGvC,EAAG,OACP;AACI,2BAAqB,MAAM,KAAK,MAAM;AACtC,wBAAkB,KAAK;AAAA;AAAA,QAGvB,IACJ;AACI,aAAO,qBAAqB,MAAM,KAAK;AAAA;AAAA;;;ACzCxC,2BAA0B,IAAY,IAAY,IAAY,IAAY,IAAY,IAAY,IAAY,IAAY,IACjI;AACI,UAAM,OAAO,oBAAoB,OAAO;AAExC,SAAK,KAAK;AACV,SAAK,KAAK;AAEV,SAAK,KAAK;AACV,SAAK,MAAM;AAEX,SAAK,MAAM;AACX,SAAK,MAAM;AAEX,SAAK,MAAM;AACX,SAAK,MAAM;AAEX,SAAK,MAAM;AACX,SAAK,MAAM;AAEX,SAAK,MAAM;AACX,SAAK,MAAM;AAAA;;;ACpBR,4BAA2B,QAAgB,QAClD;AACI,yBAAqB,MAAM,QAAQ,IAAI,qBAAqB,MAAM;AAAA;;;ACF/D,4BAA2B,QAAgB,QAClD;AACI,yBAAqB,MAAM,QAAQ,IAAI,qBAAqB,MAAM;AAAA;;;ACD/D,kCAAiC,UAAkB,SAC1D;AACI,UAAM,SAAQ,qBAAqB,MAAM;AACzC,UAAM,QAAQ,qBAAqB,MAAM;AAEzC,UAAM,CAAE,IAAI,IAAI,IAAI,IAAI,KAAK,OAAQ,qBAAqB,MAAM;AAChE,UAAM,CAAE,GAAG,GAAG,GAAG,GAAG,IAAI,MAAO;AAE/B,WAAM,KAAK,IAAI,KAAK,IAAI;AACxB,WAAM,KAAK,IAAI,KAAK,IAAI;AACxB,WAAM,KAAK,IAAI,KAAK,IAAI;AACxB,WAAM,KAAK,IAAI,KAAK,IAAI;AACxB,WAAM,KAAK,KAAK,KAAK,KAAK,KAAK;AAC/B,WAAM,KAAK,KAAK,KAAK,KAAK,KAAK;AAE/B,sBAAkB;AAAA;;;ACTf,gCAA+B,IACtC;AACI,UAAM,WAAW,YAAY;AAE7B,QAAI,CAAC,aAAa,iBAAiB,sBAAsB,WACzD;AACI,uBAAiB,IAAI;AAAA,eAEhB,CAAC,sBAAsB,KAChC;AACI,uBAAiB,UAAU;AAAA,WAG/B;AACI,6BAAuB,UAAU;AAAA;AAAA;;;ACrBlC,MAAI;AACJ,MAAI,QAAgB;AACpB,MAAI,UAAkB;AAEtB,MAAM,eACb;AAAA,IACI,KAAK,MACL;AACI,aAAO;AAAA;AAAA,IAGX,KAAK,CAAC,SACN;AACI,kBAAW;AAAA;AAAA,IAGf,UAAU,MACV;AACI,aAAO;AAAA;AAAA,IAGX,UAAU,CAAC,YACX;AACI,cAAQ;AAAA;AAAA,IAGZ,YAAY,MACZ;AACI,aAAO;AAAA;AAAA,IAGX,YAAY,CAAC,YACb;AACI,gBAAU;AAAA;AAAA;;;ACjCX,MAAM,wBAAgC;;;ACAtC,MAAM,yBAAiC;;;ACCvC,MAAM,uBAA+B;;;ACArC,MAAM,mBAA2B;;;ACDjC,MAAM,qBAA6B;;;ACAnC,MAAM,mBAA2B;;;ACAxC,MAAM,aAAa,gBAAgB;AAAA,IAC/B,WAAW,MAAM;AAAA,IACjB,YAAY,MAAM;AAAA,IAClB,eAAe,MAAM;AAAA,IACrB,aAAa,MAAM;AAAA,IACnB,aAAa,MAAM;AAAA,IACnB,eAAe,MAAM;AAAA,IACrB,aAAa,MAAM;AAAA,IACnB,cAAc,MAAM;AAAA;AAGjB,MAAM,sBAAsB;;;ACT5B,kCAAiC,IACxC;AACI,iBAAa,iBAAiB,qBAAqB;AAAA;;;ACHhD,0BACP;AACI,WAAO,YAAY,IAAI,gBAAgB;AAAA;;;ACKpC,2BAA0B,QAAmB,IAAY,YAChE;AACI,QAAI,MAAc,OAAM;AACxB,UAAM,OAAO,OAAM;AAEnB,QAAI,MAAM,GACV;AAKI,YAAM,aAAa,KAAK,MAAM;AAC9B,YAAM,WAAW,KAAK;AAEtB,UAAI,eAAe,MAAM,aAAa,KAAK,eAAe,GAC1D;AAEI,aAAK,MAAM,KAAK;AAGhB;AAAA;AAAA;AAIR,SAAK,OAAO;AACZ,SAAK,MAAM,KAAK;AAEhB,WAAM,cAAc;AAEpB,WAAO;AAEP,QAAI,QAAQ,KAAK,QACjB;AAEI,YAAM,UAAU,IAAI,YAAY,MAAO,iBAAiB;AAExD,cAAQ,IAAI,MAAM;AAElB,aAAM,aAAa;AAAA;AAAA;;;ACvCpB,qBACP;AAAA,IACY;AAAA,IAER,qBAA8B;AAAA,IAE9B,YAAa,IAAY,MAAc,KAAK,QAAgB,KAAK,OAAe,KAAK,QAAgB,GACrG;AACI,wBAAkB;AAElB,WAAK,KAAK;AAEV,WAAK,IAAI,KAAK,OAAO,MAAM;AAAA;AAAA,IAG/B,IAAK,KAAa,OAAe,MAAc,OAC/C;AACI,WAAK,MAAM;AACX,WAAK,QAAQ;AACb,WAAK,OAAO;AACZ,WAAK,QAAQ;AAAA;AAAA,QAIb,KAAM,OACV;AACI,WAAK,MAAO,SAAS,KAAM;AAC3B,WAAK,QAAS,SAAS,IAAK;AAC5B,WAAK,OAAO,QAAQ;AAAA;AAAA,QAGpB,OACJ;AACI,aAAO,KAAK,OAAO,KAAK,KAAK,SAAS,IAAI,KAAK;AAAA;AAAA,QAG/C,kBAAmB,OACvB;AACI,2BAAqB,kBAAkB,KAAK,MAAM,OAAO;AAAA;AAAA,QAGzD,oBACJ;AACI,aAAO,QAAQ,qBAAqB,kBAAkB,KAAK;AAAA;AAAA,QAI3D,YAAa,OACjB;AACI,qBAAe,YAAY,KAAK,IAAI,IAAI;AAExC,WAAK,qBAAqB;AAAA;AAAA,QAG1B,cACJ;AACI,aAAO,eAAe,YAAY,KAAK;AAAA;AAAA,QAIvC,YAAa,OACjB;AACI,qBAAe,YAAY,KAAK,IAAI,IAAI;AAAA;AAAA,QAGxC,cACJ;AACI,aAAO,eAAe,YAAY,KAAK;AAAA;AAAA,QAIvC,IAAK,OACT;AACI,qBAAe,EAAE,KAAK,MAAM;AAAA;AAAA,QAG5B,MACJ;AACI,aAAO,eAAe,EAAE,KAAK;AAAA;AAAA,QAG7B,MAAO,OACX;AACI,qBAAe,EAAE,KAAK,MAAM;AAAA;AAAA,QAG5B,QACJ;AACI,aAAO,eAAe,EAAE,KAAK;AAAA;AAAA,QAG7B,KAAM,OACV;AACI,qBAAe,EAAE,KAAK,MAAM;AAAA;AAAA,QAG5B,OACJ;AACI,aAAO,eAAe,EAAE,KAAK;AAAA;AAAA,QAG7B,MAAO,OACX;AACI,qBAAe,EAAE,KAAK,MAAM;AAAA;AAAA,QAG5B,QACJ;AACI,aAAO,eAAe,EAAE,KAAK;AAAA;AAAA;;;AClH9B,gBAAe,SAAwB,UAAkB,MAChE;AACI,QAAI,QAAQ,OAAO,SAAS,KAAK,CAAC,QAAQ,OAAO,IAAI,QACrD;AACI,aAAO;AAAA;AAGX,UAAM,YAAiC,QAAQ,OAAO,IAAI;AAI1D,UAAM,WAAW,CAAE,GAAG;AAEtB,eAAW,MAAM,UACjB;AACI,SAAG,SAAS,MAAM,GAAG,SAAS;AAE9B,UAAI,GAAG,MACP;AACI,kBAAU,OAAO;AAAA;AAAA;AAIzB,QAAI,UAAU,SAAS,GACvB;AACI,cAAQ,OAAO,OAAO;AAAA;AAG1B,WAAO;AAAA;;;ACzBJ,iCAAwD,QAAW,aAAqB,GAAG,UAClG;AACI,UAAM,WAAW,OAAO;AAExB,UAAM,WAAW,eAAe,IAAI;AAEpC,QAAI,aAAa,QACjB;AACI,iBAAW,SAAS;AAAA;AAGxB,UAAM,QAAQ,WAAW;AAEzB,QAAI,QAAQ,KAAK,SAAS,UAC1B;AACI,YAAM,WAAU,SAAS,OAAO,YAAY;AAE5C,eAAQ,QAAQ,aAChB;AACI,8BAAsB;AAAA;AAG1B,yBAAmB;AAEnB,aAAO,SAAQ,IAAI,QAAM,gBAAgB,IAAI;AAAA,WAGjD;AACI,aAAO;AAAA;AAAA;;;AC7BR,2BAAkD,QAAW,aAAqB,GAAG,UAC5F;AACI,UAAM,WAAU,sBAAsB,QAAQ,YAAY;AAE1D,aAAQ,QAAQ,WAChB;AACI,YAAM;AAAA;AAGV,uBAAmB,OAAO;AAE1B,6BAAyB,OAAO;AAAA;;;ACd7B,MAAM,eAAuB;;;ACA7B,sBAAqB,IAC5B;AACI,WAAO,QAAQ,qBAAqB,QAAQ;AAAA;;;ACFzC,8BAA6B,IACpC;AACI,WAAO,QAAQ,qBAAqB,gBAAgB;AAAA;;;ACDjD,yBAAuE,QAAW,OACzF;AAEI,WAAO,CAAE,OAAM,OAAO,OAAO,MAAM,OAAO,OAAO,YAAY,MAAM;AAAA;;;ACHhE,yBAAgD,OACvD;AACI,WAAO,mBAAmB,MAAM,MAAM;AAAA;;;ACCnC,yBAAgD,QAAW,OAClE;AACI,UAAM,WAAW,OAAO;AAExB,UAAM,WAAW,eAAe,IAAI;AAEpC,QAAI,SAAS,KAAK,QAAQ,SAAS,QACnC;AACI,YAAM,YAAY,SAAS,OAAO,OAAO,GAAG;AAE5C,UAAI,WACJ;AACI,8BAAsB;AAEtB,2BAAmB;AAInB,eAAO,gBAAgB,IAAI;AAAA;AAAA;AAAA;;;ACpBhC,uBAAqE,QAAW,OACvF;AACI,QAAI,UAAU,MAAM,UAAU,OAAO,KACrC;AACI,oBAAc,QAAQ,cAAc;AAAA;AAGxC,WAAO;AAAA;;;ACAJ,oBAA0C,WAAa,SAC9D;AACI,UAAM,UAAU,OAAM;AACtB,UAAM,WAAW,OAAM;AAEvB,YAAQ,QAAQ,WAChB;AAOI,mBAAa,iBAAiB,UAAU,MAAM;AAE9C,yBAAmB,QAAQ,MAAM,MAAM;AAMvC,YAAM,WAAW,6BAA6B,MAAM;AAEpD,eAAS,IAAI,QACb;AACI,qBAAa,iBAAiB,UAAU;AAExC,2BAAmB,QAAQ,MAAM;AAAA;AAAA;AAIzC,wBAAoB;AAEpB,WAAO;AAAA;;;AClCJ,sBAAoE,QAAW,OAAU,QAAgB,IAChH;AACI,QAAI,cAAc,QAAQ,QAC1B;AACI,YAAM,UAAU,MAAM;AACtB,YAAM,WAAW,OAAO;AACxB,YAAM,SAAQ,qBAAqB;AAEnC,YAAM,WAAW,eAAe,IAAI;AAEpC,UAAI,UAAU,IACd;AACI,gBAAQ,SAAS;AAAA;AAGrB,UAAI,SAAS,KAAK,SAAS,SAAS,QACpC;AACI,oBAAY,MAAM,aAAa;AAG/B,iBAAS,OAAO,OAAO,GAAG;AAE1B,YAAI,QACJ;AACI,mBAAS,QAAO;AAAA;AAGpB,oBAAY,SAAS;AAErB,sBAAc;AAEd,wBAAgB;AAAA;AAAA;AAIxB,WAAO;AAAA;;;ACtCJ,sBAA4C,WAAc,UACjE;AACI,aAAS,QAAQ,WACjB;AACI,iBAAW,QAAQ;AAAA;AAGvB,WAAO;AAAA;;;ACVJ,4BAA0E,QAAW,WAAc,aAAqB,GAAG,UAClI;AACI,UAAM,QAAQ,sBAAsB,QAAQ,YAAY;AAExD,eAAU,WAAW,GAAG;AAExB,WAAO;AAAA;;;ACLJ,sBAAqB,OAAgB,IAC5C;AACI,yBAAqB,QAAQ,MAAM,OAAO;AAE1C,oBAAgB;AAChB,wBAAoB,WAAW;AAAA;;;ACL5B,8BAA6B,OAAgB,IACpD;AACI,yBAAqB,gBAAgB,MAAM,OAAO;AAElD,oBAAgB;AAChB,wBAAoB,WAAW;AAAA;;;ACiB5B,yBACP;AAAA,IACa,KAAa,UAAU;AAAA,IAEvB,OAAe;AAAA,IAGxB,OAAe;AAAA,IAEf;AAAA,IAEA,cACA;AACI,YAAM,KAAK,KAAK;AAEhB,4BAAsB;AACtB,8BAAwB;AACxB,wBAAkB;AAElB,sBAAgB,IAAI,IAAI;AACxB,qBAAe,IAAI,IAAI;AAEvB,WAAK,SAAS,IAAI;AAAA;AAAA,IAGtB,eACA;AACI,aAAO,WAAW,KAAK;AAAA;AAAA,IAI3B,aAAc,OAAe,MAC7B;AAAA;AAAA,IAKA,OAAQ,OAAe,MACvB;AACI,WAAK,aAAa,OAAO;AAEzB,UAAI,mBAAmB,KAAK,KAC5B;AACI,cAAM,WAAW,eAAe,IAAI,KAAK;AAEzC,iBAAS,IAAI,GAAG,IAAI,SAAS,QAAQ,KACrC;AACI,gBAAM,UAAU,SAAS;AAEzB,cAAI,WAAW,UACf;AACI,4BAAgB,IAAI,SAAS,OAAO,OAAO;AAAA;AAAA;AAAA;AAKvD,WAAK,YAAY,OAAO;AAAA;AAAA,IAI5B,YAAa,OAAe,MAC5B;AAAA;AAAA,IAMA,YAAqC,YACrC;AAAA;AAAA,IAMA,SAAkC,YAClC;AAAA;AAAA,IAIA,aAA0C,UAC1C;AAAA;AAAA,IAIA,aAAsC,YACtC;AAAA;AAAA,IAMA,iBAA8C,UAC9C;AAAA;AAAA,QAKI,QAAS,OACb;AACI,iBAAW,OAAO,KAAK;AAAA;AAAA,QAGvB,UACJ;AACI,aAAO,WAAW,KAAK;AAAA;AAAA,QAGvB,gBAAiB,OACrB;AACI,yBAAmB,OAAO,KAAK;AAAA;AAAA,QAG/B,kBACJ;AACI,aAAO,mBAAmB,KAAK;AAAA;AAAA,QAG/B,MAAO,OACX;AACI,yBAAmB,MAAM,KAAK,MAAM;AAAA;AAAA,QAGpC,QACJ;AACI,aAAO,mBAAmB,MAAM,KAAK;AAAA;AAAA,IAGzC,UAAW,IACX;AACI,UAAI,IACJ;AACI,eAAQ,mBAAmB,SAAS,KAAK,QAAQ;AAAA,aAGrD;AACI,eAAQ,mBAAmB,SAAS,KAAK,MAAM;AAAA;AAAA;AAAA,IAIvD,YACA;AACI,aAAO,oBAAoB,KAAK;AAAA;AAAA,IAGpC,cACA;AACI,aAAO,wBAAwB,KAAK;AAAA;AAAA,IAGxC,iBACA;AACI,aAAO,eAAe,KAAK;AAAA;AAAA,IAI/B,iBACA;AACI,YAAM,KAAK,KAAK;AAEhB,aAAO;AAAA,QACH;AAAA,QACA,OAAO,mBAAmB,MAAM;AAAA,QAChC,QAAQ,mBAAmB,SAAS;AAAA,QACpC,OAAO,mBAAmB,QAAQ;AAAA,QAClC,YAAY,mBAAmB,WAAW;AAAA,QAC1C,aAAa,mBAAmB,YAAY;AAAA,QAC5C,UAAU,eAAe,IAAI;AAAA;AAAA;AAAA,IAKrC,WACA;AACI,aAAO,GAAG,KAAK,YAAY,KAAK,aAAa,KAAK;AAAA;AAAA,IAGtD,QAAiC,kBACjC;AACI,UAAI,kBACJ;AACI,yBAAiB,MAAM;AAAA,aAG3B;AACI,wBAAgB;AAAA;AAGpB,WAAK,MAAM,cAAc;AAEzB,WAAK,OAAO;AAEZ,WAAK,SAAS;AAAA;AAAA;;;AC1Nf,4BACP;AAAA,IACI;AAAA,IACA;AAAA,IACA;AAAA,IAEA,YAAa,UAAoB,SAAkB,OAAgB,OACnE;AACI,WAAK,WAAW;AAChB,WAAK,UAAU;AACf,WAAK,OAAO;AAAA;AAAA;;;ACNb,cAAa,SAAwB,OAAe,UAAoB,UAAmB,SAAS,OAAgB,OAC3H;AACI,QAAI,OAAO,aAAa,YACxB;AACI,YAAM,IAAI,UAAU;AAAA;AAGxB,UAAM,WAAW,IAAI,cAAc,UAAU,SAAS;AACtD,UAAM,YAAY,QAAQ,OAAO,IAAI;AAErC,QAAI,CAAC,WACL;AACI,cAAQ,OAAO,IAAI,OAAO,IAAI,IAAI,CAAE;AAAA,WAGxC;AACI,gBAAU,IAAI;AAAA;AAGlB,WAAO;AAAA;;;ACnBJ,gBAAe,SAAwB,OAAe,UAAoB,UAAmB,SACpG;AACI,WAAO,GAAG,SAAS,OAAO,UAAU,SAAS;AAAA;;;ACH1C,0BAAiD,WAAc,UACtE;AACI,aAAS,QAAQ,WACjB;AACI,kBAAY,QAAQ;AAAA;AAGxB,WAAO;AAAA;;;ACVJ,MAAM,oBAA4B;;;ACGlC,MAAM,YAAuC,IAAI;;;ACoBjD,gCAAwB,WAC/B;AAAA,IACa,OAAe;AAAA,IAExB,MAAM;AAAA,IAEN;AAAA,IAEA;AAAA,IAEA,OAAgB;AAAA,IAEhB;AAAA,IAEA;AAAA,IACA,aAAqB;AAAA,IAEb,gBAAwB;AAAA,IAExB;AAAA,IAER,YAAa,OACb;AACI;AAEA,YAAM,KAAK,KAAK;AAChB,YAAM,MAAM,KAAK;AAEjB,WAAK,QAAQ;AAEb,WAAK,qBAAqB,YAAY,CAAE;AAGxC,WAAK,aAAa,IAAI,YAAY,iBAAiB;AAEnD,6BAAuB;AAEvB,iBAAW,IAAI;AAEf,gBAAU,IAAI,OAAO,KAAK;AAE1B,WAAK,QAAQ,IAAI,OAAM;AAEvB,WAAK,OAAO,mBAAmB,MAAM,KAAK;AAAA;AAAA,IAG9C,iBACA;AACI,UAAI,oBAAoB,KAAK,KAC7B;AACI,aAAK,gBAAgB,KAAK,mBAAmB,iBAAiB;AAAA;AAGlE,aAAO,KAAK;AAAA;AAAA,IAGhB,aAAc,OAAe,MAC7B;AACI,WAAK,MAAkB,wBAAwB,OAAO,MAAM;AAAA;AAAA,IAGhE,OAAQ,OAAe,MACvB;AACI,UAAI,CAAC,WAAW,KAAK,KACrB;AACI;AAAA;AAGJ,WAAK,MAAkB,kBAAkB,OAAO,MAAM;AAEtD,YAAM,OAAO,OAAO;AAAA;AAAA,IAGxB,YAAa,OAAe,MAC5B;AACI,WAAK,MAAkB,uBAAuB,OAAO,MAAM;AAAA;AAAA,IAG/D,UAAW,WACX;AACI,aAAO;AAAA;AAAA,IAGX,SAAkC,YAClC;AAAA;AAAA,IAGA,WACA;AACI,qBAAe;AAEf,WAAK,MAAkB,oBAAoB;AAAA;AAAA,IAG/C,QAAS,kBACT;AACI,YAAM,QAAQ;AAEd,WAAK;AAEL,UAAI,KAAK,QACT;AACI,aAAK,OAAO;AAAA;AAGhB,WAAK,SAAS;AAAA;AAAA;;;AC5Hf,qBAAoB,YAAyB,QACpD;AACI,QAAI,WAAW,oBAAoB,QACnC;AACI,YAAM;AAEN,iBAAW,kBAAkB;AAC7B,iBAAW,eAAe,OAAO;AAAA;AAGrC,QAAI,OAAO,UACX;AACI,iBAAW,mBAAmB,KAAK;AAAA;AAAA;;;ACVpC,iBAAgB,YAAyB,QAChD;AACI,eAAW,OAAO;AAElB,cAAU,YAAY;AAAA;;;ACPnB,oBAA2C,YAAe,OACjE;AACI,QAAI,MAAM,sBAAsB,MAAM,mBACtC;AACI,iBAAW,YAAY;AAAA;AAAA;;;ACLxB,gCAA+B,IAAY,WAClD;AACI,wBAAoB,UAAU,MAAM;AACpC,wBAAoB,WAAW,MAAM;AACrC,wBAAoB,cAAc,MAAM;AACxC,wBAAoB,YAAY,MAAM;AAAA;;;ACJnC,oBAA2C,YAAe,OACjE;AACI,QAAI,MAAM,sBAAsB,MAAM,mBACtC;AACI,iBAAW,YAAY,IAAI;AAAA;AAAA;;;ACEnC,MAAI;AACJ,MAAI,QAAgB;AAEpB,MAAM,6BAA6B,aAAa,YAChD;AACI,aAAS,IAAI,GAAG,IAAI,SAAS,QAAQ,KACrC;AACI,YAAM,KAAK,SAAS;AAEpB,UAAI,CAAC,kBAAkB,KACvB;AACI;AAAA;AAGJ,YAAM,CAAE,GAAG,GAAG,GAAG,GAAG,IAAI,MAAO,qBAAqB,MAAM;AAE1D,YAAM,IAAI,kBAAkB,EAAE;AAC9B,YAAM,IAAI,kBAAkB,EAAE;AAC9B,YAAM,QAAQ,kBAAkB,MAAM;AACtC,YAAM,SAAS,kBAAkB,OAAO;AAExC,YAAM,KAAM,IAAI,IAAM,IAAI,IAAK;AAC/B,YAAM,KAAM,IAAI,IAAM,IAAI,IAAK;AAE/B,YAAM,KAAM,IAAI,IAAM,SAAS,IAAK;AACpC,YAAM,KAAM,IAAI,IAAM,SAAS,IAAK;AAEpC,YAAM,KAAM,QAAQ,IAAM,SAAS,IAAK;AACxC,YAAM,KAAM,QAAQ,IAAM,SAAS,IAAK;AAExC,YAAM,KAAM,QAAQ,IAAM,IAAI,IAAK;AACnC,YAAM,KAAM,QAAQ,IAAM,IAAI,IAAK;AAEnC,sBAAgB,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI;AAGhD,YAAM,KAAK,KAAK,IAAI,IAAI,IAAI,IAAI;AAChC,YAAM,KAAK,KAAK,IAAI,IAAI,IAAI,IAAI;AAChC,YAAM,KAAK,KAAK,IAAI,IAAI,IAAI,IAAI;AAChC,YAAM,KAAK,KAAK,IAAI,IAAI,IAAI,IAAI;AAEhC,YAAM,SAAS,gBAAgB,OAAO;AAEtC,aAAO,KAAK;AACZ,aAAO,KAAK;AACZ,aAAO,KAAK;AACZ,aAAO,KAAK;AAEZ,0BAAoB;AAEpB;AAAA;AAGJ,WAAO;AAAA;AAUJ,MAAM,6BAA6B,CAAC,IAAY,QAAe,UACtE;AACI,YAAQ;AACR,eAAW,MAAM;AAEjB,QAAI,SAAS,SAAS,GACtB;AACI,iCAA2B;AAAA;AAG/B,wBAAoB;AAEpB,wBAAoB,cAAc,MAAM;AAAA;;;AClErC,4BAA2B,QAAmB,QAAgB,YACrE;AACI,QAAI,WAAW,SACf;AACI,UAAI,OAAM,OAAO,QACjB;AACI,wBAAgB,QAAO,QAAQ;AAAA;AAGnC,YAAM,WAAW,eAAe,IAAI;AAEpC,eAAS,IAAI,GAAG,IAAI,SAAS,QAAQ,KACrC;AACI,cAAM,SAAS,SAAS;AAExB,YAAI,WAAW,SACf;AACI,cAAI,eAAe,UAAU,KAAK,mBAAmB,SACrD;AAEI,gBAAI,CAAC,kBAAkB,WAAW,mBAAmB,SACrD;AACI,4BAAc,QAAQ;AAEtB,+BAAiB,QAAO,QAAQ,aAAa;AAAA,mBAGjD;AACI,4BAAc,QAAQ;AAEtB,8BAAgB,QAAO,QAAQ;AAC/B,8BAAgB,QAAO,QAAQ;AAAA;AAAA,qBAG9B,CAAC,kBAAkB,SAC5B;AACI,0BAAc,QAAQ;AAEtB,4BAAgB,QAAO,QAAQ;AAC/B,4BAAgB,QAAO,QAAQ;AAAA;AAAA;AAAA;AAK3C,UAAI,SAAS,WAAW,GACxB;AACI,sBAAc,QAAQ;AAAA;AAG1B,UAAI,OAAM,OAAO,QACjB;AACI,wBAAgB,QAAO,QAAQ;AAAA;AAAA;AAAA;;;ACzDpC,kCAAiC,QAAmB,QAAgB,aAC3E;AACI,QAAI,WAAW,SACf;AACI,UAAI,CAAC,eAAe,kBAAkB,SACtC;AACI,sBAAc;AAAA;AAGlB,UAAI,eAAe,aAAa,iBAAiB,sBAAsB,SACvE;AACI,6BAAqB;AAAA;AAGzB,YAAM,WAAW,eAAe,IAAI;AAEpC,eAAS,IAAI,GAAG,IAAI,SAAS,QAAQ,KACrC;AACI,cAAM,SAAS,SAAS;AAExB,YAAI,WAAW,SACf;AACI,cAAI,eAAe,UAAU,GAC7B;AACI,gBAAI,mBAAmB,WAAW,sBAAsB,SACxD;AACI,qCAAuB,QAAO,QAAQ;AAAA;AAAA,qBAGrC,eAAe,kBAAkB,SAC1C;AACI,iCAAqB;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACjCzC,MAAI;AACJ,MAAI,SAAgB;AAEpB,MAAM,SAAS,aAAa,YAC5B;AACI,QAAI,aAAqB;AAEzB,aAAS,IAAI,GAAG,IAAI,UAAS,QAAQ,KACrC;AACI,YAAM,KAAK,UAAS;AAEpB,UAAI,CAAC,kBAAkB,KACvB;AACI;AAAA;AAGJ,YAAM,IAAI,qBAAqB,EAAE;AACjC,YAAM,IAAI,qBAAqB,EAAE;AACjC,YAAM,WAAW,qBAAqB,SAAS;AAC/C,YAAM,SAAS,qBAAqB,OAAO;AAC3C,YAAM,SAAS,qBAAqB,OAAO;AAC3C,YAAM,QAAQ,qBAAqB,MAAM;AACzC,YAAM,QAAQ,qBAAqB,MAAM;AAEzC,YAAM,QAAQ,qBAAqB,MAAM;AAEzC,YAAM,KAAK,KAAK,IAAI,WAAW,SAAS;AACxC,YAAM,KAAK,KAAK,IAAI,WAAW,SAAS;AACxC,YAAM,KAAK,CAAC,KAAK,IAAI,WAAW,SAAS;AACzC,YAAM,KAAK,KAAK,IAAI,WAAW,SAAS;AACxC,YAAM,KAAK;AACX,YAAM,KAAK;AAEX,wBAAkB;AAElB,UAAI,YAAY,QAAQ,YACxB;AACI,wBAAgB;AAEhB,qBAAa,YAAY;AAAA;AAG7B;AAAA;AAGJ,WAAO;AAAA;AAOJ,MAAM,uBAAuB,CAAC,IAAY,QAAe,UAChE;AACI,aAAQ;AACR,gBAAW,MAAM;AAEjB,QAAI,UAAS,SAAS,GACtB;AACI,aAAO;AAAA;AAGX,QAAI,SAAQ,GACZ;AACI,oBAAc;AAAA;AAIlB,wBAAoB,WAAW,MAAM;AAErC,WAAO,SAAQ;AAAA;;;AC7CZ,kCAA0B,UACjC;AAAA,IACa,OAAe;AAAA,IAIhB;AAAA,IAER,YAAa,OACb;AACI,YAAM;AAEN,YAAM,MAAM,KAAK;AAEjB,WAAK,iBAAiB,YAAY,CAAE,KAAK;AAEzC,YAAM,WAAW,iBAAiB;AAElC,WAAK,SAAS,IAAI,aAAa,SAAS,OAAO,SAAS;AAAA;AAAA,IAK5D,UAAW,WACX;AACI,YAAM,KAAK,KAAK;AAEhB,2BAAqB,IAAI;AAEzB,0BAAoB,YAAY,MAAM;AACtC,0BAAoB,aAAa,MAAM;AAEvC,sBAAgB;AAEhB,UAAI,UAAU,qBAAqB,IAAI,iBAAiB,KAAK;AAE7D,YAAM,mBAAmB,oBAAoB;AAE7C,UAAI,oBAAoB,cAAc,KACtC;AAII,+BAAuB,MAAM,IAAI;AAEjC,4BAAoB,aAAa,MAAM;AAEvC,kBAAU;AAAA;AAGd,iCAA2B,IAAI,iBAAiB,KAAK;AAErD,UAAI,kBACJ;AACI,aAAK,aAAa;AAElB,yBAAiB,MAAM,IAAI;AAE3B,4BAAoB,YAAY,MAAM,KAAK;AAC3C,4BAAoB,cAAc,MAAM,KAAK,aAAa;AAC1D,4BAAoB,YAAY,MAAM;AAEtC,8BAAsB;AAEtB,kBAAU;AAAA;AASd,aAAO;AAAA;AAAA,IAGX,SAAkC,YAClC;AACI,eAAS,YAAY,KAAK;AAE1B,WAAK,MAAkB,kBAAkB;AAEzC,YAAM,SAAS,KAAK;AAEpB,YAAM,YAAY;AAElB,YAAM,OAAO,KAAK;AAElB,YAAM,CAAE,GAAG,GAAG,OAAO,UAAW,OAAO;AAEvC,UAAI,WAAW;AAEf,eAAS,IAAI,GAAG,IAAI,KAAK,YAAY,KAAK,GAC1C;AACI,cAAM,MAAM,KAAK;AACjB,cAAM,OAAO,KAAK,IAAI;AACtB,cAAM,QAAQ,gBAAgB,IAAI;AAElC,YAAI,SAAS,GACb;AAEI,gBAAM,aAAa;AAAA,mBAEd,iBAAiB,KAAK,GAAG,GAAG,OAAO,SAC5C;AACI,gBAAM,SAAS;AAEf,cAAI,SAAS,GACb;AACI,kBAAM,aAAa;AAAA;AAGvB;AAAA;AAAA;AAIR,eAAS,YAAY,KAAK;AAE1B,YAAM,KAAK,KAAK;AAGhB,aAAO,iBAAiB;AAAA,QACpB,WAAW,oBAAoB,UAAU;AAAA,QACzC,aAAa,oBAAoB,YAAY;AAAA,QAC7C,cAAc;AAAA,QACd,eAAe,oBAAoB,cAAc;AAAA,QACjD,YAAY,oBAAoB,WAAW;AAAA,QAC3C,eAAe,oBAAoB,cAAc;AAAA,QACjD,aAAa,oBAAoB,YAAY;AAAA,QAC7C,cAAc,oBAAoB,aAAa;AAAA;AAInD,WAAK,MAAkB,sBAAsB,YAAY;AAAA;AAAA;;;ACpK1D,yBAAwB,IAAY,QAAgB,GAAG,SAAiB,GAAG,QAAiB,MACnG;AACI,iBAAa,iBAAiB,qBAAqB;AAAA;;;ACFvD,MAAM,cAA2B;AAAA,IAC7B,QAAQ;AAAA,IACR,KAAK;AAAA,IACL,QAAQ;AAAA;AAGL,gCAA+B,YAAyB,aAAqB,GACpF;AACI,UAAM,SAAS,WAAW,aAAa;AAGvC,QAAI,WAAW,QAAQ,cAAc,OAAO,WAC5C;AACI,YAAM;AAAA;AAGV,gBAAY,SAAS;AACrB,gBAAY,MAAM,OAAO;AACzB,gBAAY,SAAS,WAAW,QAAQ,OAAO;AAE/C,eAAW,SAAS;AAEpB,WAAO;AAAA;;;ACxBJ,+BAA8B,IAAY,cACjD;AACI,UAAM,OAAO,oBAAoB,OAAO;AAExC,QAAI,KAAK,OAAO,cAChB;AACI,WAAK,KAAK;AACV,WAAK,MAAM;AACX,WAAK,MAAM;AACX,WAAK,MAAM;AACX,WAAK,MAAM;AACX,WAAK,MAAM;AAAA;AAAA;;;ACPZ,mCAAuD,SAAY,IAAY,YACtF;AACI,UAAM,EAAE,KAAK,WAAW,qBAAqB,YAAY;AAEzD,UAAM,eAAe,WAAW,SAAS,IAAI;AAE7C,wBAAoB,IAAI;AAExB,QAAI,IAAI,oBAAoB,OAAO,KAAK;AAAA;;;ACXrC,+BACP;AACI,WAAO,YAAY,IAAI,gBAAgB,gBAAgB;AAAA;;;ACFpD,+BACP;AACI,WAAO,YAAY,IAAI,gBAAgB,gBAAgB;AAAA;;;ACgBpD,gCAAwB,WAC/B;AAAA,IACa,OAAe;AAAA,IAExB;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IAEA;AAAA,IAEA,YAAa,IAAY,GAAG,IAAY,GACxC;AACI;AAEA,YAAM,KAAK,KAAK;AAEhB,8BAAwB,IAAI,GAAG,GAAG,qBAAqB;AACvD,yBAAmB;AAEnB,WAAK,WAAW,IAAI,SAAS,IAAI,GAAG;AACpC,WAAK,QAAQ,IAAI,MAAM;AACvB,WAAK,OAAO,IAAI,KAAK;AACrB,WAAK,OAAO,IAAI,KAAK;AACrB,WAAK,SAAS,IAAI,OAAO,IAAI,qBAAqB;AAClD,WAAK,QAAQ,IAAI,OAAM;AAAA;AAAA,IAG3B,SAAkC,YAClC;AACI,UAAI,KAAK,QACT;AACI,cAAM;AAEN,mBAAW,OAAO,IAAI,KAAK,QAAQ;AAAA;AAGvC,eAAS,YAAY,KAAK;AAE1B,WAAK,YAAY;AAAA;AAAA,IAGrB,aAAsC,YACtC;AACI,UAAI,KAAK,QACT;AACI,cAAM;AAEN,mBAAW,OAAO;AAAA;AAGtB,eAAS,YAAY,KAAK;AAAA;AAAA,QAG1B,EAAG,OACP;AACI,WAAK,SAAS,IAAI;AAAA;AAAA,QAGlB,IACJ;AACI,aAAO,KAAK,SAAS;AAAA;AAAA,QAGrB,EAAG,OACP;AACI,WAAK,SAAS,IAAI;AAAA;AAAA,QAGlB,IACJ;AACI,aAAO,KAAK,SAAS;AAAA;AAAA,QAGrB,SAAU,OACd;AACI,2BAAqB,SAAS,KAAK,MAAM;AACzC,wBAAkB,KAAK;AAAA;AAAA,QAGvB,WACJ;AACI,aAAO,qBAAqB,SAAS,KAAK;AAAA;AAAA,QAG1C,QACJ;AACI,aAAO,KAAK,MAAM;AAAA;AAAA,QAGlB,MAAO,OACX;AACI,WAAK,MAAM,QAAQ;AAAA;AAAA,IAGvB,SAAU,OACV;AACI,WAAK,QAAQ;AAEb,aAAO;AAAA;AAAA,IAGX,YAAa,GAAW,GACxB;AACI,WAAK,SAAS,IAAI,GAAG;AAErB,aAAO;AAAA;AAAA,IAGX,SAAU,GAAW,GACrB;AACI,WAAK,MAAM,IAAI,GAAG;AAElB,aAAO;AAAA;AAAA,IAGX,YAAa,OACb;AACI,WAAK,WAAW;AAEhB,aAAO;AAAA;AAAA,IAGX,QAAS,GAAW,GACpB;AACI,WAAK,KAAK,IAAI,GAAG;AAEjB,aAAO;AAAA;AAAA,IAGX,UAAW,GAAW,GACtB;AACI,WAAK,OAAO,IAAI,GAAG;AAEnB,aAAO;AAAA;AAAA,IAGX,QAAS,kBACT;AACI,YAAM,QAAQ;AAAA;AAAA;;;AChKtB,MAAI;AAEG,MAAM,yBACb;AAAA,IACI,KAAK,MACL;AACI,aAAO;AAAA;AAAA,IAGX,KAAK,CAAC,YACN;AACI,UAAI,WACJ;AACI,cAAM,IAAI,MAAM;AAAA;AAGpB,kBAAW;AAAA;AAAA;;;AClBZ,6BACH,KACA,QACA,cACA,IAAY,IACZ,IAAY,IACZ,IAAY,IACZ,IAAY,IACZ,IAAY,IAAY,IAAY,IACpC,GAAW,GAAW,GAAW,GACrb,2BAA0B,YAAyB,GAAW,GAAW,OAAe,QAAgB,IAAY,IAAY,IAAY,IAAY,eAAuB,GACtL;AACI,UAAM,EAAE,KAAK,WAAW,qBAAqB,YAAY;AAEzD,sBACI,KAAK,QAAQ,cACb,GAAG,GACH,GAAG,IAAI,QACP,IAAI,OAAO,IAAI,QACf,IAAI,OAAO,GACX,IAAI,IAAI,IAAI,IACZ,GAAG,GAAG,GAAG;AAAA;;;ACTV,4BAA2B,YAAyB,SAAkB,QAC7E;AACI,QAAI,CAAC,QACL;AACI,eAAS,WAAW;AAAA;AAGxB,UAAM,EAAE,IAAI,IAAI,IAAI,OAAO,QAAQ;AAGnC,UAAM;AAEN,eAAW,SAAS,KAAK,SAAS;AAElC,eAAW,OAAO,IAAI,QAAQ;AAE9B,oBAAgB,YAAY,GAAG,GAAG,QAAQ,OAAO,QAAQ,QAAQ,IAAI,IAAI,IAAI,IAAI;AAGjF,UAAM;AAEN,eAAW,OAAO;AAElB,eAAW,SAAS;AAAA;;;AC1BjB,oCAAmC,UAAmB,UAC7D;AACI,aAAS,QAAQ,WACjB;AACI,2BAAqB,sBAAsB,MAAM,MAAM,OAAO;AAAA;AAGlE,WAAO;AAAA;;;ACHJ,4BAAoB,WAC3B;AAAA,IACI,cACA;AACI;AAEA,+BAAyB,OAAO;AAAA;AAAA;;;ACcjC,kCAA0B,MACjC;AAAA,IACa,OAAe;AAAA,IAExB;AAAA,IACA;AAAA,IAEA,cACA;AACI;AAEA,2BAAqB,MAAM;AAE3B,YAAM,QAAQ;AACd,YAAM,SAAS;AACf,YAAM,aAAa;AAEnB,YAAM,KAAK,KAAK;AAGhB,YAAM,UAAU,IAAI,QAAQ,MAAM,QAAQ,YAAY,SAAS;AAE/D,cAAQ,MAAM,KAAK,OAAO,GAAG;AAE7B,YAAM,UAAU,IAAI,iBAAiB,SAAS;AAAA,QAC1C,mBAAmB;AAAA,QACnB,OAAO;AAAA;AAGX,oBAAc,IAAI,OAAO,QAAQ;AAEjC,WAAK,UAAU;AACf,WAAK,cAAc,QAAQ;AAAA;AAAA,IAG/B,SAAkC,YAClC;AACI,YAAM,KAAK,KAAK;AAIZ,YAAM;AAEN,iBAAW,YAAY,IAAI,KAAK,aAAa;AAAA;AAAA,IAIrD,aAAsC,YACtC;AACI,YAAM,KAAK,KAAK;AAEhB,UAAI,CAAC,kBAAkB,OAAO,mBAAmB,KACjD;AACI,cAAM;AAEN,mBAAW,YAAY;AAEvB,6BAAqB;AAErB,wBAAgB;AAAA;AAGpB,uBAAiB,YAAY,KAAK;AAAA;AAAA;;;AC7EnC,kCAA0B,YACjC;AAAA,IACa,OAAe;AAAA,IAExB;AAAA,IAEA,UAAqB;AAAA,IAErB,eAAgB,SAChB;AACI;AAEA,UAAI,MAAM,QAAQ,UAClB;AACI,aAAK,UAAU;AAAA;AAAA;AAAA,IAIvB,aAAsC,YACtC;AACI,YAAM,KAAK,KAAK;AAChB,YAAM,UAAU,KAAK;AACrB,YAAM,UAAU,KAAK;AAErB,YAAM;AAEN,iBAAW,YAAY;AAIvB,UAAI,QAAQ,WAAW,GACvB;AACI,mBAAW,SAAS;AAEpB,yBAAiB,YAAY;AAAA,aAKjC;AACI,mBAAW,SAAS;AAIpB,YAAI,cAAc;AAElB,iBAAS,IAAY,GAAG,IAAI,QAAQ,QAAQ,KAC5C;AACI,gBAAM,SAAS,QAAQ;AAEvB,2BAAiB,YAAY,aAAa;AAE1C,wBAAc,OAAO;AAAA;AAGzB,yBAAiB,YAAY;AAAA;AAAA;AAAA;;;ACnElC,wBAAuB,OAAe,QAC7C;AACI,UAAM,SAAS,SAAS,cAAc;AAEtC,WAAO,QAAQ;AACf,WAAO,SAAS;AAEhB,WAAO,OAAO,WAAW;AAAA;;;ACDtB,6BACP;AAAA,IACI;AAAA,IAEA,cACA;AACI,6BAAuB,IAAI;AAE3B,WAAK,WAAW,IAAI;AAEpB,WAAK;AAAA;AAAA,IAGD,wBACR;AACI,WAAK,IAAI,WAAW,IAAI,QAAQ,aAAa,GAAG,GAAG;AAEnD,YAAM,UAAU,aAAa,IAAI;AAEjC,cAAQ,cAAc;AACtB,cAAQ,OAAO,GAAG;AAClB,cAAQ,OAAO,IAAI;AACnB,cAAQ;AACR,cAAQ,WAAW,KAAK,KAAK,IAAI;AAEjC,WAAK,IAAI,aAAa,IAAI,QAAQ,QAAQ;AAE1C,YAAM,QAAQ,aAAa,GAAG;AAE9B,YAAM,YAAY;AAClB,YAAM,SAAS,GAAG,GAAG,GAAG;AAExB,YAAM,eAAe,KAAK,IAAI,WAAW,IAAI,QAAQ,MAAM;AAG3D,mBAAa,IAAI;AAAA;AAAA,IAGrB,IAAK,KACL;AACI,YAAM,WAAW,KAAK;AAEtB,UAAI,SAAS,IAAI,MACjB;AACI,eAAO,SAAS,IAAI;AAAA,aAGxB;AACI,eAAO,SAAS,IAAI;AAAA;AAAA;AAAA,IAI5B,IAAK,KACL;AACI,aAAO,KAAK,SAAS,IAAI;AAAA;AAAA,IAG7B,IAAK,KAAa,QAAkC,UACpD;AACI,UAAI;AAEJ,UAAI,CAAC,KAAK,SAAS,IAAI,MACvB;AACI,YAAI,kBAAkB,SACtB;AACI,oBAAU;AAAA,eAGd;AACI,oBAAU,IAAI,QAAQ,QAAQ,GAAG,GAAG;AAAA;AAGxC,gBAAQ,MAAM;AAEd,aAAK,SAAS,IAAI,KAAK;AAAA;AAG3B,aAAO;AAAA;AAAA,IAGX,OAAQ,KAAa,QAAwB,UAC7C;AACI,YAAM,UAAU,KAAK,SAAS,IAAI;AAElC,UAAI,SACJ;AACI,gBAAQ,OAAO,QAAQ;AAAA;AAG3B,aAAO;AAAA;AAAA;;;AC7FR,kCACP;AACI,QAAI;AAAA;;;ACQD,iCAAwB,UAC/B;AAAA,IACa,OAAe;AAAA,IAEhB;AAAA,IACA;AAAA,IAER,YAAa,GAAW,GAAW,QAAgB,IAAI,SAAiB,IAAI,QAAgB,UAC5F;AACI,YAAM,GAAG;AAET,YAAM,KAAK,KAAK;AAEhB,oBAAc;AAEd,WAAK,UAAU,aAAa;AAE5B,WAAK,QAAQ,KAAK,QAAQ;AAE1B,WAAK,MAAM,aAAa;AACxB,WAAK,MAAM,eAAe;AAE1B,WAAK,KAAK,IAAI,OAAO;AAErB,WAAK,MAAM,OAAO;AAAA;AAAA,IAGtB,eACA;AACI,aAAQ,KAAK,WAAW,WAAW,KAAK,OAAO,KAAK,QAAQ;AAAA;AAAA,IAGhE,SAAkC,YAClC;AACI,YAAM,QAAQ,KAAK;AAEnB,UAAI,KAAK,QACT;AACI,cAAM;AAEN,mBAAW,OAAO,IAAI,KAAK,QAAQ;AAAA;AAGvC,UAAI,MAAM,oBACV;AACI,mBAAW,YAAY,IAAI;AAAA;AAG/B,WAAK,YAAY;AAEjB,8BAAwB,KAAK,SAAS,KAAK,IAAI;AAE/C,UAAI,MAAM,sBAAsB,CAAC,MAAM,mBACvC;AACI,cAAM;AAEN,mBAAW,YAAY;AAAA;AAAA;AAAA,IAI/B,aAA0C,UAC1C;AAAA;AAAA,IAMA,QAAS,kBACT;AACI,YAAM,QAAQ;AAEd,WAAK,UAAU;AACf,WAAK,QAAQ;AAAA;AAAA;;;ACjFd,uBAA8C,WAAc,UACnE;AACI,aAAS,QAAQ,WACjB;AACI,iBAAW,QAAQ;AAAA;AAGvB,WAAO;AAAA;;;ACCJ,+BAAuB,WAC9B;AAAA,IACY;AAAA,IACA;AAAA,IAER;AAAA,IAEA,YAAa,SAA0B,IACvC;AACI,aAAO,aAAa,QAAQ,cAAc;AAE1C,aAAO,sBAAsB;AAE7B,YAAM;AAEN,YAAM;AAAA,QACF,cAAc;AAAA,QACd,oBAAoB;AAAA,QACpB,YAAY;AAAA,UACZ;AAEJ,YAAM,WAAW,CAAE,GAAI,KAAK,eAAe;AAE3C,WAAK,UAAU,SAAS,SAAS,eAAe,cAAc;AAC9D,WAAK,gBAAgB,SAAS,SAAS,qBAAqB,oBAAoB;AAEhF,UAAI,CAAC,SAAS,SAAS,KAAK,UAC5B;AACI,aAAK,UAAU;AAAA;AAGnB,UAAI,CAAC,SAAS,SAAS,KAAK,gBAC5B;AACI,aAAK,gBAAgB;AAAA;AAGzB,WAAK,YAAY;AAAA;AAAA,IAGrB,KAAM,YACN;AACI,YAAM,WAAW,WAAW;AAE5B,UAAI,KAAK,SACT;AACI,aAAK,SAAS,IAAI,KAAK,SAAS,YAAY,QAAQ,KAAK;AAAA;AAG7D,UAAI,KAAK,eACT;AACI,aAAK,SAAS,IAAI,KAAK,eAAe,CAAE,SAAS,OAAO,SAAS;AAAA;AAGrE,aAAO,MAAM,KAAK;AAAA;AAAA;;;AC3DnB,uBACP;AACI,UAAM,EAAE,OAAO,SAAS,KAAK,OAAO,eAAe,YAAY,IAAI,gBAAgB;AAEnF,QAAI,UAAU,IACd;AACI,YAAM,MAAM,GAAG,SAAS,UAAU;AAElC,cAAQ,IACJ,KAAK,SAAS,OACd,6BAA6B,sBAAsB,cACnD;AAAA;AAAA;;;ACZL,wBAAuB,MAC9B;AACI,UAAM,YAAY,YAAY,IAAI,gBAAgB;AAElD,QAAI,aAAa,QACjB;AACI,MAAC,OAAmB,aAAa;AAAA;AAAA;;;ACRlC,MAAM,gBAAgB,gBAAgB;AAAA,IACzC,UAAU,MAAM;AAAA,IAChB,SAAS,MAAM;AAAA,IACf,OAAO,MAAM;AAAA,IACb,KAAK,MAAM;AAAA,IACX,UAAU,MAAM;AAAA,IAChB,OAAO,MAAM;AAAA,IACb,IAAI,MAAM;AAAA,IACV,WAAW,MAAM;AAAA;;;ACNd,4BAA2B,IAClC;AACI,iBAAa,iBAAiB,eAAe;AAE7C,UAAM,MAAM,YAAY;AAExB,kBAAc,SAAS,MAAM;AAC7B,kBAAc,UAAU,MAAM;AAAA;;;ACT3B,oBAAmB,SAAsB,QAChD;AACI,UAAM,SAAsB,WAAW;AAEvC,WAAO,YAAY;AAEnB,WAAO;AAAA;;;ACHJ,yBACP;AACI,UAAM,SAAS,YAAY,IAAI,gBAAgB;AAC/C,UAAM,SAAS,iBAAiB,MAAM;AAKtC,QAAI,UAAU,QACd;AACI,eAAS,QAAQ;AAAA;AAAA;;;ACZlB,4BACP;AACI,UAAM,WAAW,YAAY,IAAI,gBAAgB;AAEjD,QAAI,UACJ;AACI,UAAI;AAAA;AAAA;;;ACPZ,MAAM,cAAc,gBAAgB;AAAA,IAGhC,WAAW,MAAM;AAAA,IAGjB,WAAW,MAAM;AAAA,IAGjB,WAAW,MAAM;AAAA,IAGjB,gBAAgB,MAAM;AAAA,IAGtB,wBAAwB,MAAM;AAAA,IAG9B,yBAAyB,MAAM;AAAA,IAG/B,yBAAyB,MAAM;AAAA,IAG/B,kBAAkB,MAAM;AAAA,IAGxB,oBAAoB,MAAM;AAAA,IAG1B,iBAAiB,MAAM;AAAA;AAIpB,MAAM,uBAAuB;;;AChC7B,mCAAkC,IACzC;AACI,iBAAa,iBAAiB,sBAAsB;AAAA;;;ACFjD,uBACP;AACI,WAAO,YAAY,IAAI,gBAAgB;AAAA;;;ACJpC,4BAA2B,IAAY,WAAmB,QACjE;AACI,yBAAqB,UAAU,MAAM;AACrC,yBAAqB,UAAU,MAAM;AACrC,yBAAqB,UAAU,MAAM;AACrC,yBAAqB,eAAe,MAAM;AAC1C,yBAAqB,uBAAuB,MAAM;AAClD,yBAAqB,mBAAmB,MAAM;AAC9C,yBAAqB,iBAAiB,MAAM;AAC5C,yBAAqB,wBAAwB,MAAM;AACnD,yBAAqB,wBAAwB,MAAM;AACnD,yBAAqB,gBAAgB,MAAM;AAAA;;;ACX/C,MAAI;AAEG,MAAM,uBACb;AAAA,IACI,KAAK,MACL;AACI,aAAO;AAAA;AAAA,IAGX,KAAK,CAAC,YACN;AACI,UAAI,WACJ;AACI,cAAM,IAAI,MAAM;AAAA;AAGpB,kBAAW;AAAA;AAAA;;;ACFZ,2BACP;AAAA,IACa,KAAa,UAAU;AAAA,IAEhC;AAAA,IAEA,SAA8B,IAAI;AAAA,IAGlC,aAAqB;AAAA,IAGrB;AAAA,IAEA,cACA;AACI,2BAAqB,IAAI;AAEzB,WAAK,OAAO,aAAa;AAEzB,8BAAwB,KAAK;AAE7B,WAAK,KAAK,MAAM,QAAQ,MAAM,KAAK;AAAA;AAAA,IAGvC,OACA;AACI,YAAM,SAAS;AAEf,UAAI,QACJ;AACI,eAAO,QAAQ,WAAS,IAAI;AAAA;AAAA;AAAA,IAIpC,SACA;AACI,YAAM,KAAK,KAAK,KAAK;AAErB,YAAM,QAAQ,cAAc,MAAM;AAClC,YAAM,OAAO,cAAc,SAAS;AACpC,YAAM,YAAY,cAAc,MAAM;AAEtC,uBAAiB,KAAK,IAAI,WAAW,KAAK,OAAO;AAEjD,iBAAW,SAAS,KAAK,OAAO,UAChC;AACI,cAAM,UAAS,UAAU,IAAI;AAE7B,mBAAW,UAAS,SACpB;AACI,iBAAM,aAAa,OAAO;AAAA;AAG9B,YAAI,MAAM,QACV;AACI,gBAAM,OAAO,OAAO;AAAA;AAGxB,mBAAW,UAAS,SACpB;AACI,iBAAM,OAAO,OAAO;AAAA;AAGxB,mBAAW,UAAS,SACpB;AACI,iBAAM,YAAY,OAAO;AAAA;AAAA;AAAA;AAAA,IAMrC,YACA;AACI,YAAM,KAAK,KAAK,KAAK;AAErB,YAAM,YAAY,cAAc,MAAM;AAEtC,iBAAW,SAAS,KAAK,OAAO,UAChC;AACI,cAAM,UAAS,UAAU,IAAI;AAE7B,mBAAW,UAAS,SACpB;AACI,cAAI,OAAM,UAAU,YACpB;AACI,iBAAK,QAAQ;AAAA;AAAA;AAAA;AAAA;AAAA,IAM7B,OAAQ,YACR;AACI,iBAAW,SAAS,KAAK,OAAO,UAChC;AACI,cAAM,UAAS,UAAU,IAAI;AAE7B,mBAAW,UAAS,SACpB;AACI,iBAAM,SAAS;AAAA;AAAA;AAIvB,WAAK,QAAQ;AAAA;AAAA;;;ACtHd,gCACP;AACI,QAAI;AAAA;;;ACJD,4BAA2B,UAClC;AACI,UAAM,aAAa,SAAS;AAE5B,QAAI,eAAe,cAAc,eAAe,eAChD;AACI;AAEA;AAAA;AAGJ,UAAM,QAAQ,MACd;AACI,eAAS,oBAAoB,eAAe,OAAO;AACnD,eAAS,oBAAoB,oBAAoB,OAAO;AACxD,aAAO,oBAAoB,QAAQ,OAAO;AAE1C;AAAA;AAKJ,QAAI,CAAC,SAAS,MACd;AACI,aAAO,WAAW,OAAO;AAAA,eAEpB,OAAO,eAAe,YAC/B;AACI,eAAS,iBAAiB,eAAe,OAAO;AAAA,WAGpD;AACI,eAAS,iBAAiB,oBAAoB,OAAO;AACrD,aAAO,iBAAiB,QAAQ,OAAO;AAAA;AAAA;;;AC/BxC,2BACP;AAAA,IACI;AAAA,IAEA,cACA;AACI,WAAK,SAAS,IAAI;AAAA;AAAA;;;ACJnB,kCAAiC,KACxC;AACI,UAAM,KAAK,qBAAqB,MAAM;AAEtC,QAAI,CAAC,KACL;AACI,YAAM,EAAE,KAAK,GAAG,OAAO,GAAG,WAAW,GAAG,WAAW,GAAG,WAAW,GAAG,gBAAgB,GAAG,wBAAwB,GAAG,yBAAyB,GAAG,yBAAyB,GAAG,kBAAkB,GAAG,oBAAoB,GAAG,iBAAiB;AAAA;AAG3O,QAAI,YAAY,qBAAqB,UAAU;AAC/C,QAAI,YAAY,qBAAqB,UAAU;AAC/C,QAAI,YAAY,qBAAqB,UAAU;AAC/C,QAAI,iBAAiB,qBAAqB,eAAe;AACzD,QAAI,yBAAyB,qBAAqB,uBAAuB;AACzE,QAAI,0BAA0B,qBAAqB,wBAAwB;AAC3E,QAAI,0BAA0B,qBAAqB,wBAAwB;AAC3E,QAAI,mBAAmB,qBAAqB,iBAAiB;AAC7D,QAAI,qBAAqB,qBAAqB,mBAAmB;AACjE,QAAI,kBAAkB,qBAAqB,gBAAgB;AAE3D,WAAO;AAAA;;;ACtBJ,yBAAwB,IAC/B;AACI,kBAAc,SAAS,MAAM,YAAY;AAAA;;;ACFtC,0BAA8D,QAAsB,UAAoB,cAC/G;AACI,QAAI,OAAO,UAAU,eAAe,KAAK,QAAQ,WACjD;AACI,aAAO,OAAO;AAAA,WAGlB;AACI,aAAO;AAAA;AAAA;;;ACJR,mBAAkB,OAAe,SAAgC,IACxE;AACI,UAAM,eAAe,qBAAqB;AAE1C,UAAM,OAAO,aAAa,OAAO;AACjC,UAAM,aAAa,aAAa;AAChC,UAAM,aAAc,SAAS;AAE7B,QAAI,OAAO,WAAW,UACtB;AACI,YAAM,MAAM;AAAA,eAEP,UAAW,CAAC,UAAU,YAC/B;AACI,YAAM,MAAM,eAAe,QAAQ,OAAO,UAAU,WAAW;AAAA;AAGnE,QAAI,aAAa,OAAO,IAAI,MAAM,MAClC;AACI,cAAQ,KAAK,+BAA+B,MAAM;AAAA,WAGtD;AACI,mBAAa,OAAO,IAAI,MAAM,KAAK;AAEnC,mBAAa,QAAQ;AAErB,mBAAa;AAAA;AAGjB,cAAU,IAAI,OAAO;AAAA;;;AC5BlB,oBACP;AAAA,IACI;AAAA,IACA;AAAA,IACA;AAAA,IAEA,YAAa,QACb;AACI,WAAK,OAAO,aAAa;AACzB,WAAK,SAAS,IAAI;AAElB,cAAQ,MAAM;AAAA;AAAA;;;ACRf,+BACP;AACI,uBAAmB;AACnB,iBAAa;AACb,cAAU,UAAU,SAAS;AAC7B,mBAAe;AACf,qBAAiB,KAAK;AACtB,YAAQ,KAAK,KAAK;AAClB,oBAAgB;AAAA,MACZ,WAAW;AAAA,MACX,gBAAgB;AAAA,MAChB,uBAAuB;AAAA;AAE3B,iBAAa;AAAA;;;ACrBV,uBAAsB,IAAY,MACzC;AAEI,UAAM,MAAM,YAAY;AAGxB,UAAM,QAAQ,MAAM;AAEpB,kBAAc,SAAS;AAEvB,QAAI,OAAO,cAAc,UAAU,MAAM,KACzC;AACI,oBAAc,IAAI,MAAO,cAAc,SAAS,MAAM,MAAS,OAAM,cAAc,UAAU;AAC7F,oBAAc,UAAU,MAAM;AAC9B,oBAAc,SAAS,MAAM;AAAA;AAGjC,kBAAc,SAAS,MAAM;AAC7B,kBAAc,QAAQ,OAAO;AAC7B,kBAAc,MAAM,MAAM;AAC1B,kBAAc,MAAM;AAEpB,iBAAa,SAAS,cAAc,MAAM;AAAA;;;ACvBvC,sBAAqB,IAAY,MACxC;AACI,kBAAc,GAAG,MAAM,OAAO,cAAc,SAAS;AAAA;;;ACoBlD,2BAAmB,aAC1B;AAAA,IACa,KAAa,UAAU;AAAA,IAEvB,UAAkB;AAAA,IAE3B,WAAoB;AAAA,IACpB,WAAoB;AAAA,IAIpB,aAAsB;AAAA,IACtB,aAAsB;AAAA,IAEtB;AAAA,IAEA,eAAgB,UAChB;AACI;AAEA,mBAAa,IAAI;AAEjB;AAEA,uBAAiB,MAAM,KAAK,KAAK;AAAA;AAAA,IAGrC,KAAM,UACN;AAEI,eAAS,QAAQ,aAAW;AAE5B;AACA;AACA;AAEA,uBAAiB,KAAK;AACtB;AACA,mBAAa;AACb;AAEA,WAAK,cAAc;AAEnB,WAAK,WAAW;AAEhB,WAAK,MAAM;AAEX,4BAAsB,SAAO,KAAK,KAAK;AAAA;AAAA,IAG3C,QACA;AACI,WAAK,WAAW;AAAA;AAAA,IAGpB,SACA;AACI,WAAK,WAAW;AAEhB,oBAAc,KAAK;AAAA;AAAA,IAIvB,OAAQ,OAAe,MACvB;AAAA;AAAA,IAIA,OAAQ,YAAyB,OAAe,MAChD;AAAA;AAAA,IAGA,KAAM,MACN;AACI,YAAM,KAAK,KAAK;AAChB,YAAM,WAAW,iBAAiB;AAClC,YAAM,eAAe,qBAAqB;AAE1C,iBAAW,IAAI;AAEf,UAAI,CAAC,KAAK,UACV;AACI,cAAM,QAAQ,cAAc,MAAM;AAElC,YAAI,KAAK,YACT;AACI,uBAAa;AAEb,eAAK,OAAO,OAAO;AAEnB,eAAK,MAAM,UAAU,OAAO;AAAA;AAGhC,YAAI,KAAK,YACT;AACI,uBAAa;AAEb,mBAAS,MAAM,aAAa;AAE5B,uBAAa,OAAO,SAAS;AAE7B,eAAK,OAAO,SAAS,YAAY,OAAO;AAExC,eAAK,MAAM,UAAU,SAAS,YAAY,OAAO;AAEjD,mBAAS;AAAA;AAAA;AAIjB,kBAAY,IAAI;AAEhB,6BAAuB,KAAK;AAE5B,WAAK,YAAY,MAAM,cAAc,IAAI;AACzC,WAAK,YAAY,QAAQ,cAAc,MAAM;AAE7C,WAAK,MAAM;AAEX,4BAAsB,SAAO,KAAK,KAAK;AAAA;AAAA,IAG3C,UACA;AAAA;AAAA;;;ACiEJ,MAAM,sBAAsgO5B,2BAAmB,MACnB;AAAA,IACI,cACA;AACI;AAOA,YAAM,QAAQ,IAAI,SAAS,EAAE,gBAAgB;AAE7C,YAAM,SAAQ,IAAI,YAAY;AAE9B,YAAM,QAAQ,IAAI;AAClB,YAAM,SAAS,IAAI;AAGnB,YAAM,YAAY;AAUlB,YAAM,OAAO,IAAI,WAAU,KAAK,KAAK,KAAK,KAAK;AAE/C,WAAK,WAAW;AAChB,WAAK,KAAK,IAAI,GAAG;AAEjB,SAAG,QAAO,UAAU,MAAM;AAEtB,aAAK,YAAY;AAAA;AAKrB,aAAO,SAAS;AAIhB,kBAAY,QAAQ;AAMpB,kBAAY,QAAO;AAAA;AAAA;AAI3B,MAAI,KACA,SACA,OAAO,eACP,UAAU,YACV,gBAAgB,UAChB,OAAO;",
  "names": []
}
