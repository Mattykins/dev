{
  "version": 3,
  "sources": ["../../../../phaser-genesis/src/config/const.ts", "../../../../phaser-genesis/src/config/ConfigStore.ts", "../../../../phaser-genesis/src/config/backgroundcolor/SetBackgroundColor.ts", "../../../../phaser-genesis/src/config/backgroundcolor/BackgroundColor.ts", "../../../../phaser-genesis/src/config/banner/SetBanner.ts", "../../../../phaser-genesis/src/config/batchsize/SetBatchSize.ts", "../../../../phaser-genesis/src/config/size/GetHeight.ts", "../../../../phaser-genesis/src/config/size/GetResolution.ts", "../../../../phaser-genesis/src/config/size/GetWidth.ts", "../../../../phaser-genesis/src/config/size/SetSize.ts", "../../../../phaser-genesis/src/renderer/BindingQueue.ts", "../../../../phaser-genesis/src/config/backgroundcolor/GetBackgroundColor.ts", "../../../../phaser-genesis/src/config/renderer/SetRenderer.ts", "../../../../phaser-genesis/src/config/defaultorigin/SetDefaultOrigin.ts", "../../../../phaser-genesis/src/config/globalvar/SetGlobalVar.ts", "../../../../phaser-genesis/src/config/globalvar/GlobalVar.ts", "../../../../phaser-genesis/src/config/maxtextures/SetMaxTextures.ts", "../../../../phaser-genesis/src/dom/GetElement.ts", "../../../../phaser-genesis/src/config/parent/SetParent.ts", "../../../../phaser-genesis/src/config/parent/Parent.ts", "../../../../phaser-genesis/src/config/scenes/SetScenes.ts", "../../../../phaser-genesis/src/config/scenes/Scenes.ts", "../../../../phaser-genesis/src/geom/rectangle/RectangleContains.ts", "../../../../phaser-genesis/src/geom/rectangle/Rectangle.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/AddViewport.ts", "../../../../phaser-genesis/src/renderer/webgl1/GL.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/BindViewport.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/SetViewport.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/BindFramebuffer.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/PopViewport.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/PopFramebuffer.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/AddFramebuffer.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/SetFramebuffer.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/Draw.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/Flush.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/End.ts", "../../../../phaser-genesis/src/renderer/webgl1/colors/GetRGBArray.ts", "../../../../phaser-genesis/src/config/webglcontext/GetWebGLContext.ts", "../../../../phaser-genesis/src/renderer/webgl1/textures/CreateGLTexture.ts", "../../../../phaser-genesis/src/renderer/webgl1/fbo/DeleteFramebuffer.ts", "../../../../phaser-genesis/src/renderer/webgl1/textures/DeleteGLTexture.ts", "../../../../phaser-genesis/src/math/pow2/IsSizePowerOfTwo.ts", "../../../../phaser-genesis/src/renderer/webgl1/textures/SetGLTextureFilterMode.ts", "../../../../phaser-genesis/src/renderer/webgl1/textures/UpdateGLTexture.ts", "../../../../phaser-genesis/src/renderer/webgl1/textures/GLTextureBinding.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/ProcessBindingQueue.ts", "../../../../phaser-genesis/src/config/maxtextures/GetMaxTextures.ts", "../../../../phaser-genesis/src/renderer/webgl1/shaders/CheckShaderMaxIfStatements.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/CreateTempTextures.ts", "../../../../phaser-genesis/src/config/batchsize/GetBatchSize.ts", "../../../../phaser-genesis/src/renderer/webgl1/buffers/DeleteGLBuffer.ts", "../../../../phaser-genesis/src/renderer/webgl1/buffers/VertexBuffer.ts", "../../../../phaser-genesis/src/renderer/webgl1/buffers/IndexedVertexBuffer.ts", "../../../../phaser-genesis/src/utils/array/matrix/CheckMatrix.ts", "../../../../phaser-genesis/src/utils/array/matrix/MatrixToString.ts", "../../../../phaser-genesis/src/utils/array/matrix/ReverseColumns.ts", "../../../../phaser-genesis/src/utils/array/matrix/ReverseRows.ts", "../../../../phaser-genesis/src/utils/array/matrix/TransposeMatrix.ts", "../../../../phaser-genesis/src/utils/array/matrix/RotateMatrix.ts", "../../../../phaser-genesis/src/utils/array/matrix/Rotate180.ts", "../../../../phaser-genesis/src/utils/array/matrix/RotateLeft.ts", "../../../../phaser-genesis/src/utils/array/matrix/RotateRight.ts", "../../../../phaser-genesis/src/utils/array/NumberArray.ts", "../../../../phaser-genesis/src/math/RoundAwayFromZero.ts", "../../../../phaser-genesis/src/utils/array/NumberArrayStep.ts", "../../../../phaser-genesis/src/utils/base64/ArrayBufferToBase64.ts", "../../../../phaser-genesis/src/utils/base64/Base64ToArrayBuffer.ts", "../../../../phaser-genesis/src/utils/string/UppercaseFirst.ts", "../../../../phaser-genesis/src/utils/NOOP.ts", "../../../../phaser-genesis/src/math/mat4/Matrix4.ts", "../../../../phaser-genesis/src/math/mat4/Mat4Ortho.ts", "../../../../phaser-genesis/src/renderer/webgl1/shaders/CreateAttributes.ts", "../../../../phaser-genesis/src/renderer/webgl1/shaders/DeleteShaders.ts", "../../../../phaser-genesis/src/renderer/webgl1/shaders/CreateProgram.ts", "../../../../phaser-genesis/src/renderer/webgl1/shaders/CreateShader.ts", "../../../../phaser-genesis/src/renderer/webgl1/shaders/CreateUniformSetter.ts", "../../../../phaser-genesis/src/renderer/webgl1/shaders/CreateUniforms.ts", "../../../../phaser-genesis/src/renderer/webgl1/GL_CONST.ts", "../../../../phaser-genesis/src/renderer/webgl1/shaders/DefaultQuadAttributes.ts", "../../../../phaser-genesis/src/renderer/webgl1/shaders/DefaultQuadUniforms.ts", "../../../../phaser-genesis/src/renderer/webgl1/fbo/CreateDepthBuffer.ts", "../../../../phaser-genesis/src/renderer/webgl1/fbo/CreateFramebuffer.ts", "../../../../phaser-genesis/src/renderer/webgl1/glsl/SINGLE_QUAD_FRAG.ts", "../../../../phaser-genesis/src/renderer/webgl1/glsl/SINGLE_QUAD_VERT.ts", "../../../../phaser-genesis/node_modules/bitecs/src/Storage.js", "../../../../phaser-genesis/node_modules/bitecs/src/Serialize.js", "../../../../phaser-genesis/node_modules/bitecs/src/Entity.js", "../../../../phaser-genesis/node_modules/bitecs/src/Query.js", "../../../../phaser-genesis/node_modules/bitecs/src/Component.js", "../../../../phaser-genesis/node_modules/bitecs/src/World.js", "../../../../phaser-genesis/node_modules/bitecs/src/System.js", "../../../../phaser-genesis/node_modules/bitecs/src/index.js", "../../../../phaser-genesis/src/components/vertices/QuadVertexComponent.ts", "../../../../phaser-genesis/src/components/transform/Extent2DComponent.ts", "../../../../phaser-genesis/src/components/dirty/DirtyComponent.ts", "../../../../phaser-genesis/src/components/GameObjectWorld.ts", "../../../../phaser-genesis/src/components/dirty/AddDirtyComponent.ts", "../../../../phaser-genesis/src/components/dirty/HasDirtyChildCache.ts", "../../../../phaser-genesis/src/components/dirty/HasDirtyTransform.ts", "../../../../phaser-genesis/src/components/dirty/IsDirtyFrame.ts", "../../../../phaser-genesis/src/components/dirty/SetDirtyChildCache.ts", "../../../../phaser-genesis/src/GameInstance.ts", "../../../../phaser-genesis/src/components/dirty/SetDirtyTransform.ts", "../../../../phaser-genesis/src/components/transform/SetExtent.ts", "../../../../phaser-genesis/src/components/vertices/VertexComponent.ts", "../../../../phaser-genesis/src/components/vertices/SetUV.ts", "../../../../phaser-genesis/src/textures/Frame.ts", "../../../../phaser-genesis/src/textures/Texture.ts", "../../../../phaser-genesis/src/renderer/webgl1/shaders/Shader.ts", "../../../../phaser-genesis/src/renderer/webgl1/shaders/QuadShader.ts", "../../../../phaser-genesis/src/renderer/webgl1/glsl/MULTI_QUAD_FRAG.ts", "../../../../phaser-genesis/src/renderer/webgl1/shaders/MultiTextureQuadShader.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/SetDefaultBlendMode.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/SetDefaultFramebuffer.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/SetDefaultShader.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/SetDefaultVertexBuffer.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/SetDefaultViewport.ts", "../../../../phaser-genesis/src/math/mat4/Mat4Identity.ts", "../../../../phaser-genesis/src/math/mat2d/Matrix2D.ts", "../../../../phaser-genesis/src/math/angle/AngleBetween.ts", "../../../../phaser-genesis/src/math/angle/AngleBetweenY.ts", "../../../../phaser-genesis/src/math/const.ts", "../../../../phaser-genesis/src/math/angle/CounterClockwise.ts", "../../../../phaser-genesis/src/math/angle/NormalizeAngle.ts", "../../../../phaser-genesis/src/math/angle/ReverseAngle.ts", "../../../../phaser-genesis/src/math/angle/RotateAngleTo.ts", "../../../../phaser-genesis/src/math/angle/ShortestAngleBetween.ts", "../../../../phaser-genesis/src/math/Wrap.ts", "../../../../phaser-genesis/src/math/angle/WrapAngle.ts", "../../../../phaser-genesis/src/math/angle/WrapAngleDegrees.ts", "../../../../phaser-genesis/src/math/angle/index.ts", "../../../../phaser-genesis/src/camera/StaticCamera.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/RenderPass.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/BindShader.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/Begin.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/BindBlendMode.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/BindVertexBuffer.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/GetVertexBufferEntry.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/SetTexture.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/Start.ts", "../../../../phaser-genesis/src/renderer/webgl1/WebGLRendererInstance.ts", "../../../../phaser-genesis/src/renderer/webgl1/WebGLRenderer.ts", "../../../../phaser-genesis/src/config/webgl/WebGL.ts", "../../../../phaser-genesis/src/config/webglcontext/SetWebGLContext.ts", "../../../../phaser-genesis/src/textures/TextureManagerInstance.ts", "../../../../phaser-genesis/src/textures/GetTexture.ts", "../../../../phaser-genesis/src/renderer/webgl1/colors/PackColor.ts", "../../../../phaser-genesis/src/renderer/webgl1/draw/FillLine.ts", "../../../../phaser-genesis/src/dom/AddToDOM.ts", "../../../../phaser-genesis/src/dom/DOMContentLoaded.ts", "../../../../phaser-genesis/src/dom/ParseXML.ts", "../../../../phaser-genesis/src/events/Emit.ts", "../../../../phaser-genesis/src/events/EventEmitter.ts", "../../../../phaser-genesis/src/events/EventInstance.ts", "../../../../phaser-genesis/src/events/Off.ts", "../../../../phaser-genesis/src/events/On.ts", "../../../../phaser-genesis/src/events/Once.ts", "../../../../phaser-genesis/src/config/banner/GetBanner.ts", "../../../../phaser-genesis/src/config/globalvar/GetGlobalVar.ts", "../../../../phaser-genesis/src/config/parent/GetParent.ts", "../../../../phaser-genesis/src/config/renderer/GetRenderer.ts", "../../../../phaser-genesis/src/scenes/CreateSceneRenderData.ts", "../../../../phaser-genesis/src/config/scenes/GetScenes.ts", "../../../../phaser-genesis/src/scenes/ResetSceneRenderData.ts", "../../../../phaser-genesis/src/scenes/SceneManagerInstance.ts", "../../../../phaser-genesis/src/scenes/SceneManager.ts", "../../../../phaser-genesis/src/config/SetConfigDefaults.ts", "../../../../phaser-genesis/src/textures/CreateCanvas.ts", "../../../../phaser-genesis/src/textures/TextureManager.ts", "../../../../phaser-genesis/src/Game.ts", "../../../../phaser-genesis/src/scenes/GetConfigValue.ts", "../../../../phaser-genesis/src/scenes/Install.ts", "../../../../phaser-genesis/src/scenes/Scene.ts", "../../../../phaser-genesis/src/gameobjects/events/AddedToWorldEvent.ts", "../../../../phaser-genesis/src/gameobjects/events/DestroyEvent.ts", "../../../../phaser-genesis/src/gameobjects/events/PostUpdateEvent.ts", "../../../../phaser-genesis/src/gameobjects/events/RemovedFromWorldEvent.ts", "../../../../phaser-genesis/src/gameobjects/events/UpdateEvent.ts", "../../../../phaser-genesis/src/world/events/WorldPostRenderEvent.ts", "../../../../phaser-genesis/src/world/events/WorldRenderEvent.ts", "../../../../phaser-genesis/src/world/events/WorldShutdownEvent.ts", "../../../../phaser-genesis/src/components/transform/LocalMatrix2DComponent.ts", "../../../../phaser-genesis/src/components/transform/Transform2DComponent.ts", "../../../../phaser-genesis/src/components/transform/WorldMatrix2DComponent.ts", "../../../../phaser-genesis/src/components/transform/AddTransform2DComponent.ts", "../../../../phaser-genesis/src/world/CalculateTotalRenderable.ts", "../../../../phaser-genesis/src/world/HasDirtyChildren.ts", "../../../../phaser-genesis/src/world/UpdateCachedLayers.ts", "../../../../phaser-genesis/src/components/permissions/PermissionsComponent.ts", "../../../../phaser-genesis/src/components/permissions/AddPermissionsComponent.ts", "../../../../phaser-genesis/src/components/permissions/WillCacheChildren.ts", "../../../../phaser-genesis/src/components/permissions/WillRender.ts", "../../../../phaser-genesis/src/components/permissions/WillRenderChildren.ts", "../../../../phaser-genesis/src/components/permissions/WillUpdate.ts", "../../../../phaser-genesis/src/components/permissions/WillUpdateChildren.ts", "../../../../phaser-genesis/src/world/WorldDepthFirstSearch.ts", "../../../../phaser-genesis/src/world/BuildRenderList.ts", "../../../../phaser-genesis/src/gameobjects/DIRTY_CONST.ts", "../../../../phaser-genesis/src/components/transform/UpdateLocalTransform2DSystem.ts", "../../../../phaser-genesis/src/components/transform/CopyLocalToWorld.ts", "../../../../phaser-genesis/src/components/transform/CopyWorldToWorld.ts", "../../../../phaser-genesis/src/gameobjects/GameObjectCache.ts", "../../../../phaser-genesis/src/components/transform/MultiplyLocalWithWorld.ts", "../../../../phaser-genesis/src/components/permissions/WillTransformChildren.ts", "../../../../phaser-genesis/src/components/transform/UpdateWorldTransform2DSystem.ts", "../../../../phaser-genesis/src/components/vertices/VertexWorld.ts", "../../../../phaser-genesis/src/display/RemoveChildrenBetween.ts", "../../../../phaser-genesis/src/display/DestroyChildren.ts", "../../../../phaser-genesis/src/display/DepthFirstSearch.ts", "../../../../phaser-genesis/src/display/GetChildIndex.ts", "../../../../phaser-genesis/src/display/RemoveChildAt.ts", "../../../../phaser-genesis/src/display/RemoveChild.ts", "../../../../phaser-genesis/src/display/SetWorld.ts", "../../../../phaser-genesis/src/display/SetParent.ts", "../../../../phaser-genesis/src/display/ReparentChildren.ts", "../../../../phaser-genesis/src/gameobjects/GameObject.ts", "../../../../phaser-genesis/src/math/Clamp.ts", "../../../../phaser-genesis/src/math/mat2d/Mat2dEquals.ts", "../../../../phaser-genesis/src/world/MergeRenderData.ts", "../../../../phaser-genesis/src/display/RemoveChildren.ts", "../../../../phaser-genesis/src/world/ResetWorldRenderData.ts", "../../../../phaser-genesis/src/components/vertices/UpdateVertexPositionSystem.ts", "../../../../phaser-genesis/src/world/BaseWorld.ts", "../../../../phaser-genesis/src/world/CreateWorldRenderData.ts", "../../../../phaser-genesis/src/world/StaticWorld.ts", "../../src/display/fill line.ts"],
  "sourcesContent": ["export const CONFIG_DEFAULTS = {\n    AUTO: 'Auto',\n    BACKGROUND_COLOR: 'BackgroundColor',\n    BANNER: 'Banner',\n    BATCH_SIZE: 'BatchSize',\n    CANVAS_CONTEXT: 'CanvasContext',\n    CANVAS: 'Canvas',\n    DEFAULT_ORIGIN: 'DefaultOrigin',\n    GLOBAL_VAR: 'GlobalVar',\n    MAX_TEXTURES: 'MaxTextures',\n    PARENT: 'Parent',\n    RENDERER: 'Renderer',\n    SCENES: 'Scenes',\n    SIZE: 'Size',\n    WEBGL_CONTEXT: 'WebGLContext',\n    WEBGL: 'WebGL'\n};\n", "export const ConfigStore = new Map();\n", "import { CONFIG_DEFAULTS } from '../const';\nimport { ConfigStore } from '../ConfigStore';\n\nexport function SetBackgroundColor (color: number): void\n{\n    ConfigStore.set(CONFIG_DEFAULTS.BACKGROUND_COLOR, color);\n}\n", "import { SetBackgroundColor } from './SetBackgroundColor';\n\nexport function BackgroundColor (color: number): () => void\n{\n    return (): void =>\n    {\n        SetBackgroundColor(color);\n    };\n}\n", "import { CONFIG_DEFAULTS } from '../const';\nimport { ConfigStore } from '../ConfigStore';\n\nexport function SetBanner (title: string = '', version: string = '', url: string = '', color: string = '#fff', background: string = 'linear-gradient(#3e0081 40%, #00bcc3)'): void\n{\n    ConfigStore.set(CONFIG_DEFAULTS.BANNER, { title, version, url, color, background });\n}\n", "import { CONFIG_DEFAULTS } from '../const';\nimport { ConfigStore } from '../ConfigStore';\n\nexport function SetBatchSize (size: number): void\n{\n    ConfigStore.set(CONFIG_DEFAULTS.BATCH_SIZE, size);\n}\n", "import { CONFIG_DEFAULTS } from '../const';\nimport { ConfigStore } from '../ConfigStore';\n\nexport function GetHeight (): number\n{\n    return ConfigStore.get(CONFIG_DEFAULTS.SIZE).height;\n}\n", "import { CONFIG_DEFAULTS } from '../const';\nimport { ConfigStore } from '../ConfigStore';\n\nexport function GetResolution (): number\n{\n    return ConfigStore.get(CONFIG_DEFAULTS.SIZE).resolution;\n}\n", "import { CONFIG_DEFAULTS } from '../const';\nimport { ConfigStore } from '../ConfigStore';\n\nexport function GetWidth (): number\n{\n    return ConfigStore.get(CONFIG_DEFAULTS.SIZE).width;\n}\n", "import { CONFIG_DEFAULTS } from '../const';\nimport { ConfigStore } from '../ConfigStore';\n\nexport function SetSize (width: number = 800, height: number = 600, resolution: number = 1): void\n{\n    if (resolution === 0)\n    {\n        resolution = window.devicePixelRatio;\n    }\n\n    ConfigStore.set(CONFIG_DEFAULTS.SIZE, { width, height, resolution });\n}\n", "import { IGLTextureBindingConfig } from './webgl1/textures/IGLTextureBindingConfig';\nimport { ITexture } from '../textures/ITexture';\n\nexport type BindingQueueEntry = {\n    texture: ITexture,\n    glConfig: IGLTextureBindingConfig\n};\n\nconst queue: BindingQueueEntry[] = [];\n\nexport const BindingQueue =\n{\n    add: (texture: ITexture, glConfig?: IGLTextureBindingConfig): void =>\n    {\n        queue.push({ texture, glConfig });\n    },\n\n    get: (): BindingQueueEntry[] =>\n    {\n        return queue;\n    },\n\n    clear: (): void =>\n    {\n        queue.length = 0;\n    }\n};\n", "import { CONFIG_DEFAULTS } from '../const';\nimport { ConfigStore } from '../ConfigStore';\n\nexport function GetBackgroundColor (): number\n{\n    return ConfigStore.get(CONFIG_DEFAULTS.BACKGROUND_COLOR);\n}\n", "import { CONFIG_DEFAULTS } from '../const';\nimport { ConfigStore } from '../ConfigStore';\nimport { IRendererConstructor } from '../../renderer/IRendererConstructor';\n\nexport function SetRenderer (renderer: IRendererConstructor): void\n{\n    ConfigStore.set(CONFIG_DEFAULTS.RENDERER, renderer);\n}\n", "import { CONFIG_DEFAULTS } from '../const';\nimport { ConfigStore } from '../ConfigStore';\n\nexport function SetDefaultOrigin (x: number = 0.5, y: number = x): void\n{\n    ConfigStore.set(CONFIG_DEFAULTS.DEFAULT_ORIGIN, { x, y });\n}\n", "import { CONFIG_DEFAULTS } from '../const';\nimport { ConfigStore } from '../ConfigStore';\n\nexport function SetGlobalVar (name: string): void\n{\n    ConfigStore.set(CONFIG_DEFAULTS.GLOBAL_VAR, name);\n}\n", "import { SetGlobalVar } from './SetGlobalVar';\n\nexport function GlobalVar (name: string): () => void\n{\n    return (): void =>\n    {\n        SetGlobalVar(name);\n    };\n}\n", "import { CONFIG_DEFAULTS } from '../const';\nimport { ConfigStore } from '../ConfigStore';\n\nexport function SetMaxTextures (max: number): void\n{\n    ConfigStore.set(CONFIG_DEFAULTS.MAX_TEXTURES, max);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Attempts to get the target DOM element based on the given value, which can be either\n * a string, in which case it will be looked-up by ID, or an element node. If nothing\n * can be found it will return a reference to the document.body.\n *\n * @function Phaser.DOM.GetElement\n * @since 4.0.0\n *\n * @param {(string | HTMLElement)} [target] - The DOM element to look-up.\n * \n * @returns {HTMLElement} The HTML Element that was found.\n */\nexport function GetElement (target?: string | HTMLElement): HTMLElement\n{\n    let element: HTMLElement;\n\n    if (target)\n    {\n        if (typeof target === 'string')\n        {\n            //  Hopefully an element ID\n            element = document.getElementById(target);\n        }\n        else if (typeof target === 'object' && target.nodeType === 1)\n        {\n            //  Quick test for a HTMLElement\n            element = target;\n        }\n    }\n\n    if (!element)\n    {\n        element = document.body;\n    }\n\n    return element;\n}\n", "import { CONFIG_DEFAULTS } from '../const';\nimport { ConfigStore } from '../ConfigStore';\nimport { GetElement } from '../../dom/GetElement';\n\nexport function SetParent (parentElement?: string | HTMLElement): void\n{\n    //  If this function was called and `null` *wasn't* given as the parent\n    //  then we try to figure it out, or fallback to the document body\n    if (parentElement)\n    {\n        ConfigStore.set(CONFIG_DEFAULTS.PARENT, GetElement(parentElement));\n    }\n}\n", "import { SetParent } from './SetParent';\n\nexport function Parent (parentElement?: string | HTMLElement): () => void\n{\n    return (): void =>\n    {\n        SetParent(parentElement);\n    };\n}\n", "import { CONFIG_DEFAULTS } from '../const';\nimport { ConfigStore } from '../ConfigStore';\nimport { ISceneConstructor } from '../../scenes/ISceneConstructor';\n\nexport function SetScenes (scenes?: ISceneConstructor | Array<ISceneConstructor>): void\n{\n    ConfigStore.set(CONFIG_DEFAULTS.SCENES, [].concat(scenes));\n}\n", "import { ISceneConstructor } from '../../scenes/ISceneConstructor';\nimport { SetScenes } from './SetScenes';\n\nexport function Scenes (scenes?: ISceneConstructor | Array<ISceneConstructor>): () => void\n{\n    return (): void =>\n    {\n        SetScenes(scenes);\n    };\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { IRectangle } from './IRectangle';\n\n/**\n * Checks if a given point is inside a Rectangle's bounds.\n */\nexport function RectangleContains (rect: IRectangle, x: number, y: number): boolean\n{\n    if (rect.width <= 0 || rect.height <= 0)\n    {\n        return false;\n    }\n\n    return (rect.x <= x && rect.x + rect.width >= x && rect.y <= y && rect.y + rect.height >= y);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { RectangleContains } from './RectangleContains';\n\nexport class Rectangle\n{\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n\n    constructor (x: number = 0, y: number = 0, width: number = 0, height: number = 0)\n    {\n        this.set(x, y, width, height);\n    }\n\n    set (x: number = 0, y: number = 0, width: number = 0, height: number = 0): this\n    {\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n\n        return this;\n    }\n\n    contains (x: number, y: number): boolean\n    {\n        return RectangleContains(this, x, y);\n    }\n\n    set right (value: number)\n    {\n        if (value <= this.x)\n        {\n            this.width = 0;\n        }\n        else\n        {\n            this.width = value - this.x;\n        }\n    }\n\n    get right (): number\n    {\n        return this.x + this.width;\n    }\n\n    set bottom (value: number)\n    {\n        if (value <= this.y)\n        {\n            this.height = 0;\n        }\n        else\n        {\n            this.height = value - this.y;\n        }\n    }\n\n    get bottom (): number\n    {\n        return this.y + this.height;\n    }\n}\n", "import { IRenderPass } from './IRenderPass';\nimport { Rectangle } from '../../../geom/rectangle/Rectangle';\n\nexport function AddViewport (renderPass: IRenderPass, x: number = 0, y: number = 0, width: number = 0, height: number = 0): Rectangle\n{\n    const viewport = new Rectangle(x, y, width, height);\n\n    renderPass.viewportStack.push(viewport);\n\n    return viewport;\n}\n", "export let gl: WebGLRenderingContext;\n\nexport const GL =\n{\n    get: (): WebGLRenderingContext =>\n    {\n        return gl;\n    },\n\n    set: (context: WebGLRenderingContext | undefined): void =>\n    {\n        gl = context;\n    }\n};\n", "import { IRenderPass } from './IRenderPass';\nimport { Rectangle } from '../../../geom/rectangle';\nimport { gl } from '../GL';\n\nexport function BindViewport (renderPass: IRenderPass, viewport?: Rectangle): void\n{\n    if (!viewport)\n    {\n        viewport = renderPass.currentViewport;\n\n        if (!viewport)\n        {\n            return;\n        }\n    }\n\n    const glv = gl.getParameter(gl.VIEWPORT);\n\n    if (glv[0] !== viewport.x || glv[1] !== viewport.y || glv[2] !== viewport.width || glv[3] !== viewport.height)\n    {\n        gl.viewport(viewport.x, viewport.y, viewport.width, viewport.height);\n    }\n}\n", "import { AddViewport } from './AddViewport';\nimport { BindViewport } from './BindViewport';\nimport { IRenderPass } from './IRenderPass';\n\nexport function SetViewport (renderPass: IRenderPass, x: number = 0, y: number = 0, width: number = 0, height: number = 0): void\n{\n    const entry = AddViewport(renderPass, x, y, width, height);\n\n    BindViewport(renderPass, entry);\n\n    renderPass.currentViewport = entry;\n}\n", "import { FramebufferStackEntry } from './RenderPass';\nimport { IRenderPass } from './IRenderPass';\nimport { SetViewport } from './SetViewport';\nimport { gl } from '../GL';\n\nexport function BindFramebuffer (renderPass: IRenderPass, clear: boolean = true, entry?: FramebufferStackEntry): void\n{\n    if (!entry)\n    {\n        entry = renderPass.currentFramebuffer;\n    }\n\n    const { framebuffer, viewport } = entry;\n\n    //  TODO - Only bind if different\n    gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n\n    if (clear)\n    {\n        gl.clearColor(0, 0, 0, 0);\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n    }\n\n    if (viewport)\n    {\n        SetViewport(renderPass, viewport.x, viewport.y, viewport.width, viewport.height);\n    }\n}\n", "import { BindViewport } from './BindViewport';\nimport { IRenderPass } from './IRenderPass';\n\nexport function PopViewport (renderPass: IRenderPass): void\n{\n    const stack = renderPass.viewportStack;\n\n    //  > 1 because index 0 contains the default, which we don't want to remove\n    if (stack.length > 1)\n    {\n        stack.pop();\n    }\n\n    renderPass.currentViewport = stack[ stack.length - 1 ];\n\n    BindViewport(renderPass);\n}\n", "import { BindFramebuffer } from './BindFramebuffer';\nimport { IRenderPass } from './IRenderPass';\nimport { PopViewport } from './PopViewport';\n\nexport function PopFramebuffer (renderPass: IRenderPass): void\n{\n    const stack = renderPass.framebufferStack;\n\n    //  > 1 because index 0 contains the default, which we don't want to remove\n    if (stack.length > 1)\n    {\n        if (renderPass.currentFramebuffer.viewport)\n        {\n            PopViewport(renderPass);\n        }\n\n        stack.pop();\n    }\n\n    renderPass.currentFramebuffer = stack[ stack.length - 1 ];\n\n    BindFramebuffer(renderPass, false);\n}\n", "import { FramebufferStackEntry } from './RenderPass';\nimport { IRenderPass } from './IRenderPass';\nimport { Rectangle } from '../../../geom/rectangle/Rectangle';\n\nexport function AddFramebuffer (renderPass: IRenderPass, framebuffer: WebGLFramebuffer, viewport?: Rectangle): FramebufferStackEntry\n{\n    const entry = { framebuffer, viewport };\n\n    renderPass.framebufferStack.push(entry);\n\n    return entry;\n}\n", "import { AddFramebuffer } from './AddFramebuffer';\nimport { BindFramebuffer } from './BindFramebuffer';\nimport { IRenderPass } from './IRenderPass';\nimport { Rectangle } from '../../../geom/rectangle';\n\nexport function SetFramebuffer (renderPass: IRenderPass, framebuffer: WebGLFramebuffer, clear: boolean = true, viewport?: Rectangle): void\n{\n    const entry = AddFramebuffer(renderPass, framebuffer, viewport);\n\n    BindFramebuffer(renderPass, clear, entry);\n\n    renderPass.currentFramebuffer = entry;\n}\n", "import { IRenderPass } from './IRenderPass';\nimport { PopFramebuffer } from './PopFramebuffer';\nimport { SetFramebuffer } from './SetFramebuffer';\nimport { gl } from '../GL';\n\nexport function Draw (renderPass: IRenderPass): void\n{\n    const count = renderPass.count;\n\n    if (count === 0)\n    {\n        return;\n    }\n\n    const currentBuffer = renderPass.currentVertexBuffer;\n    const currentShader = renderPass.currentShader;\n\n    const renderToFramebuffer = currentShader.shader.renderToFramebuffer;\n\n    if (renderToFramebuffer)\n    {\n        SetFramebuffer(renderPass, currentShader.shader.framebuffer, true);\n    }\n\n    if (count === currentBuffer.batchSize)\n    {\n        const type = (currentBuffer.isDynamic) ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW;\n\n        gl.bufferData(gl.ARRAY_BUFFER, currentBuffer.data, type);\n    }\n    else\n    {\n        const subsize = (currentBuffer.indexed) ? count * currentBuffer.entryElementSize : count * currentBuffer.vertexElementSize;\n\n        const view = currentBuffer.vertexViewF32.subarray(0, subsize);\n\n        gl.bufferSubData(gl.ARRAY_BUFFER, 0, view);\n    }\n\n    if (currentBuffer.indexed)\n    {\n        gl.drawElements(gl.TRIANGLES, count * currentBuffer.entryIndexSize, gl.UNSIGNED_SHORT, 0);\n    }\n    else\n    {\n        gl.drawArrays(gl.TRIANGLES, 0, count);\n    }\n\n    if (renderToFramebuffer)\n    {\n        PopFramebuffer(renderPass);\n    }\n}\n", "import { Draw } from './Draw';\nimport { IRenderPass } from './IRenderPass';\n\nexport function Flush (renderPass: IRenderPass, forceCount?: number): boolean\n{\n    if (forceCount)\n    {\n        renderPass.count = forceCount;\n    }\n\n    const count = renderPass.count;\n\n    if (count === 0)\n    {\n        return false;\n    }\n\n    Draw(renderPass);\n\n    renderPass.prevCount = count;\n\n    renderPass.count = 0;\n\n    renderPass.flushTotal++;\n\n    return true;\n}\n", "import { Flush } from './Flush';\nimport { IRenderPass } from './IRenderPass';\n\nexport function End (renderPass: IRenderPass): void\n{\n    Flush(renderPass);\n}\n", "export function GetRGBArray (color: number, output: number[] = []): number[]\n{\n    const r: number = color >> 16 & 0xFF;\n    const g: number = color >> 8 & 0xFF;\n    const b: number = color & 0xFF;\n    const a: number = (color > 16777215) ? color >>> 24 : 255;\n\n    output[0] = r / 255;\n    output[1] = g / 255;\n    output[2] = b / 255;\n    output[3] = a / 255;\n\n    return output;\n}\n", "import { CONFIG_DEFAULTS } from '../const';\nimport { ConfigStore } from '../ConfigStore';\n\nexport function GetWebGLContext (): WebGLContextAttributes\n{\n    return ConfigStore.get(CONFIG_DEFAULTS.WEBGL_CONTEXT);\n}\n", "import { IGLTextureBinding } from './IGLTextureBinding';\nimport { gl } from '../GL';\n\nexport function CreateGLTexture <T extends IGLTextureBinding> (binding: T): WebGLTexture\n{\n    const { parent, flipY, unpackPremultiplyAlpha, minFilter, magFilter, wrapS, wrapT, generateMipmap, isPOT } = binding;\n\n    const source = parent.image;\n\n    let width = parent.width;\n    let height = parent.height;\n\n    const glTexture: WebGLTexture = gl.createTexture();\n\n    gl.activeTexture(gl.TEXTURE0);\n    gl.bindTexture(gl.TEXTURE_2D, glTexture);\n\n    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, flipY);\n    gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, unpackPremultiplyAlpha);\n\n    if (source)\n    {\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, source);\n\n        width = source.width;\n        height = source.height;\n    }\n    else\n    {\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n    }\n\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, minFilter);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, magFilter);\n\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, wrapS);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, wrapT);\n\n    if (generateMipmap && isPOT)\n    {\n        gl.generateMipmap(gl.TEXTURE_2D);\n    }\n\n    binding.texture = glTexture;\n\n    return glTexture;\n}\n", "import { gl } from '../GL';\n\nexport function DeleteFramebuffer (framebuffer: WebGLFramebuffer): void\n{\n    if (gl && gl.isFramebuffer(framebuffer))\n    {\n        gl.deleteFramebuffer(framebuffer);\n    }\n}\n", "import { gl } from '../GL';\n\nexport function DeleteGLTexture (texture: WebGLTexture): void\n{\n    if (gl.isTexture(texture))\n    {\n        gl.deleteTexture(texture);\n    }\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Checks if the given `width` and `height` are a power of two.\n * Useful for checking texture dimensions.\n *\n * @function Phaser.Math.Pow2.IsSize\n * @since 3.0.0\n *\n * @param {number} width - The width.\n * @param {number} height - The height.\n *\n * @return {boolean} `true` if `width` and `height` are a power of two, otherwise `false`.\n */\nexport function IsSizePowerOfTwo (width: number, height: number): boolean\n{\n    if (width < 1 || height < 1)\n    {\n        return false;\n    }\n\n    return ((width & (width - 1)) === 0) && ((height & (height - 1)) === 0);\n}\n", "import { gl } from '../GL';\n\nexport function SetGLTextureFilterMode (texture: WebGLTexture, linear: boolean = true): void\n{\n    gl.activeTexture(gl.TEXTURE0);\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n\n    const mode = (linear) ? gl.LINEAR : gl.NEAREST;\n\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, mode);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, mode);\n}\n", "import { IGLTextureBinding } from './IGLTextureBinding';\nimport { gl } from '../GL';\n\nexport function UpdateGLTexture <T extends IGLTextureBinding> (binding: T): WebGLTexture\n{\n    const source = binding.parent.image;\n    const width = source.width;\n    const height = source.height;\n\n    if (width > 0 && height > 0)\n    {\n        gl.activeTexture(gl.TEXTURE0);\n        gl.bindTexture(gl.TEXTURE_2D, binding.texture);\n\n        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, binding.flipY);\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, source);\n    }\n\n    return binding.texture;\n}\n", "import { CreateGLTexture } from './CreateGLTexture';\nimport { DeleteFramebuffer } from '../fbo/DeleteFramebuffer';\nimport { DeleteGLTexture } from './DeleteGLTexture';\nimport { IGLTextureBinding } from './IGLTextureBinding';\nimport { IGLTextureBindingConfig } from './IGLTextureBindingConfig';\nimport { ITexture } from '../../../textures/ITexture';\nimport { IsSizePowerOfTwo } from '../../../math/pow2/IsSizePowerOfTwo';\nimport { SetGLTextureFilterMode } from './SetGLTextureFilterMode';\nimport { UpdateGLTexture } from './UpdateGLTexture';\nimport { gl } from '../GL';\n\nexport class GLTextureBinding implements IGLTextureBinding\n{\n    parent: ITexture;\n\n    texture: WebGLTexture;\n    framebuffer: WebGLFramebuffer;\n    depthbuffer: WebGLRenderbuffer;\n\n    index: number = 0;\n    indexCounter: number = -1;\n\n    dirtyIndex: boolean = true;\n    unpackPremultiplyAlpha: boolean = true;\n\n    minFilter: GLenum;\n    magFilter: GLenum;\n    wrapS: GLenum;\n    wrapT: GLenum;\n\n    flipY: boolean = false;\n    isPOT: boolean = false;\n    generateMipmap: boolean = false;\n\n    constructor (parent: ITexture, config: IGLTextureBindingConfig = {})\n    {\n        this.parent = parent;\n\n        this.isPOT = IsSizePowerOfTwo(parent.width, parent.height);\n\n        const {\n            texture = null,\n            framebuffer = null,\n            depthbuffer = null,\n            unpackPremultiplyAlpha = true,\n            minFilter = (this.isPOT) ? gl.LINEAR_MIPMAP_LINEAR : gl.LINEAR,\n            magFilter = gl.LINEAR,\n            wrapS = gl.CLAMP_TO_EDGE,\n            wrapT = gl.CLAMP_TO_EDGE,\n            generateMipmap = this.isPOT,\n            flipY = false\n        } = config;\n\n        this.minFilter = minFilter;\n        this.magFilter = magFilter;\n        this.wrapS = wrapS;\n        this.wrapT = wrapT;\n        this.generateMipmap = generateMipmap;\n        this.flipY = flipY;\n        this.unpackPremultiplyAlpha = unpackPremultiplyAlpha;\n\n        if (framebuffer)\n        {\n            this.framebuffer = framebuffer;\n        }\n\n        if (depthbuffer)\n        {\n            this.depthbuffer = depthbuffer;\n        }\n\n        if (texture)\n        {\n            this.texture = texture;\n        }\n        else\n        {\n            CreateGLTexture(this);\n        }\n    }\n\n    //  Needed?\n    setFilter (linear: boolean): void\n    {\n        if (this.texture)\n        {\n            SetGLTextureFilterMode(this.texture, linear);\n        }\n    }\n\n    create (): WebGLTexture\n    {\n        const texture = this.texture;\n\n        if (texture)\n        {\n            DeleteGLTexture(texture);\n        }\n\n        return CreateGLTexture(this);\n    }\n\n    update (): WebGLTexture\n    {\n        const texture = this.texture;\n\n        if (!texture)\n        {\n            return CreateGLTexture(this);\n        }\n        else\n        {\n            return UpdateGLTexture(this);\n        }\n    }\n\n    setIndex (index: number): void\n    {\n        this.dirtyIndex = (index !== this.index);\n        this.index = index;\n    }\n\n    destroy (): void\n    {\n        DeleteGLTexture(this.texture);\n        DeleteFramebuffer(this.framebuffer);\n\n        this.parent = null;\n        this.texture = null;\n        this.framebuffer = null;\n    }\n}\n", "import { BindingQueue } from '../../BindingQueue';\nimport { GLTextureBinding } from '../textures/GLTextureBinding';\n\nexport function ProcessBindingQueue (): void\n{\n    const queue = BindingQueue.get();\n\n    queue.forEach(entry =>\n    {\n        const { texture, glConfig } = entry;\n\n        if (!texture.binding)\n        {\n            texture.binding = new GLTextureBinding(texture, glConfig);\n        }\n    });\n\n    BindingQueue.clear();\n}\n", "import { CONFIG_DEFAULTS } from '../const';\nimport { ConfigStore } from '../ConfigStore';\n\nexport function GetMaxTextures (): number\n{\n    return ConfigStore.get(CONFIG_DEFAULTS.MAX_TEXTURES);\n}\n", "import { gl } from '../GL';\n\n//  From Pixi v5\n\nconst fragTemplate = [\n    'precision mediump float;',\n    'void main(void){',\n    'float test = 0.1;',\n    '%forloop%',\n    'gl_FragColor = vec4(0.0);',\n    '}'\n].join('\\n');\n\nfunction GenerateSrc (maxIfs: number): string\n{\n    let src = '';\n\n    for (let i = 0; i < maxIfs; ++i)\n    {\n        if (i > 0)\n        {\n            src += '\\nelse ';\n        }\n\n        if (i < maxIfs - 1)\n        {\n            src += `if(test == ${i}.0){}`;\n        }\n    }\n\n    return src;\n}\n\nexport function CheckShaderMaxIfStatements (maxIfs: number): number\n{\n    const shader = gl.createShader(gl.FRAGMENT_SHADER);\n\n    // eslint-disable-next-line no-constant-condition\n    while (true)\n    {\n        const fragmentSrc = fragTemplate.replace(/%forloop%/gi, GenerateSrc(maxIfs));\n\n        gl.shaderSource(shader, fragmentSrc);\n        gl.compileShader(shader);\n\n        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS))\n        {\n            maxIfs = (maxIfs / 2) | 0;\n        }\n        else\n        {\n            // valid!\n            break;\n        }\n    }\n\n    return maxIfs;\n}\n", "import { GetMaxTextures, SetMaxTextures } from '../../../config/maxtextures/';\n\nimport { CheckShaderMaxIfStatements } from '../shaders/CheckShaderMaxIfStatements';\nimport { IRenderPass } from './IRenderPass';\nimport { gl } from '../GL';\n\n//  As per the WebGL spec, the browser should always support at least 8 texture units\n\nexport function CreateTempTextures (renderPass: IRenderPass): void\n{\n    let maxGPUTextures: number = CheckShaderMaxIfStatements(gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS));\n\n    const maxConfigTextures = GetMaxTextures();\n\n    if (maxConfigTextures === 0 || (maxConfigTextures > 0 && maxConfigTextures > maxGPUTextures))\n    {\n        //  Insert gpu limit into config value\n        SetMaxTextures(maxGPUTextures);\n    }\n    else if (maxConfigTextures > 0 && maxConfigTextures < maxGPUTextures)\n    {\n        //  Limit to config setting, or 8, whichever is higher\n        maxGPUTextures = Math.max(8, maxConfigTextures);\n    }\n\n    const tempTextures = renderPass.tempTextures;\n\n    if (tempTextures.length)\n    {\n        tempTextures.forEach(texture =>\n        {\n            gl.deleteTexture(texture);\n        });\n    }\n\n    const index = [];\n\n    //  Create temp textures to stop WebGL errors on mac os\n    for (let texturesIndex: number = 0; texturesIndex < maxGPUTextures; texturesIndex++)\n    {\n        const tempTexture = gl.createTexture();\n\n        gl.activeTexture(gl.TEXTURE0 + texturesIndex);\n\n        gl.bindTexture(gl.TEXTURE_2D, tempTexture);\n\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, new Uint8Array([ 0, 0, 255, 255 ]));\n\n        tempTextures[texturesIndex] = tempTexture;\n\n        index.push(texturesIndex);\n    }\n\n    renderPass.maxTextures = maxGPUTextures;\n\n    renderPass.textureIndex = index;\n\n    //  ID Zero is reserved for FBO Textures\n    renderPass.currentActiveTexture = 1;\n}\n", "import { CONFIG_DEFAULTS } from '../const';\nimport { ConfigStore } from '../ConfigStore';\n\nexport function GetBatchSize (): number\n{\n    return ConfigStore.get(CONFIG_DEFAULTS.BATCH_SIZE);\n}\n", "import { gl } from '../GL';\n\nexport function DeleteGLBuffer (buffer: WebGLBuffer): void\n{\n    if (gl.isBuffer(buffer))\n    {\n        gl.deleteBuffer(buffer);\n    }\n}\n", "import { DeleteGLBuffer } from './DeleteGLBuffer';\nimport { IVertexBuffer } from './IVertexBuffer';\nimport { IVertexBufferConfig } from './IVertexBufferConfig';\nimport { gl } from '../GL';\n\nexport class VertexBuffer implements IVertexBuffer\n{\n    /**\n     * Maximum number of entries per batch before a flush takes place.\n     * For a Mesh, this is the number of triangles / faces in the vertex buffer.\n     * Typically each face consists of 3 verticies.\n     *\n     * @type {number}\n     */\n    batchSize: number;\n\n    /**\n     * The size, in bytes, per entry in the array buffer.\n     *\n     * @type {number}\n     */\n    dataSize: number;\n\n    /**\n     * The amount of elements / floats a single vertex consists of.\n     *\n     * The default is 6:\n     *\n     * position (x,y - 2 floats)\n     * texture coord (x,y - 2 floats)\n     * texture index (uint)\n     * packed color (uint)\n     *\n     * @type {number}\n     */\n    vertexElementSize: number;\n\n    /**\n     * The size, in bytes, of a single vertex in the array buffer.\n     *\n     * This is `vertexElementSize * dataSize`.\n     *\n     * @type {number}\n     */\n    vertexByteSize: number;\n\n    /**\n     * The size, in bytes, of a single entry in the array buffer.\n     *\n     * This is `vertexByteSize * 4` for a quad.\n     *\n     * @type {number}\n     */\n    entryByteSize: number;\n\n    /**\n     * The size, in bytes, of the Array Buffer.\n     *\n     * This is `batchSize * entryByteSize`\n     *\n     * @type {number}\n     */\n    bufferByteSize: number;\n\n    /**\n     * The Array Buffer.\n     *\n     * @type {ArrayBuffer}\n     */\n    data: ArrayBuffer;\n\n    /**\n     * Float32 View of the Array Buffer.\n     *\n     * @type {Float32Array}\n     */\n    vertexViewF32: Float32Array;\n\n    /**\n     * Uint32 View of the Array Buffer.\n     *\n     * @type {Uint32Array}\n     */\n    vertexViewU32: Uint32Array;\n\n    /**\n     * The data array buffer.\n     *\n     * @type {WebGLBuffer}\n     */\n    vertexBuffer: WebGLBuffer;\n\n    indexed: boolean = false;\n\n    isDynamic: boolean = false;\n\n    /**\n     * The total number of entries added to the buffer so far, or reserved to be added.\n     *\n     * This is the total number of indices / verticies, not faces.\n     * Typically there are 3 verts per face, so this value is usually batchSize x 3 for a Mesh.\n     *\n     * @type {number}\n     */\n    count: number = 0;\n\n    /**\n     * The current buffer offset.\n     *\n     * @type {number}\n     */\n    offset: number = 0;\n\n    elementsPerEntry: number;\n\n    constructor (config: IVertexBufferConfig = {})\n    {\n        const {\n            batchSize = 1,\n            dataSize = 4,\n            isDynamic = true,\n            elementsPerEntry = 4,\n            vertexElementSize = 6\n        } = config;\n\n        this.batchSize = batchSize;\n        this.dataSize = dataSize;\n        this.vertexElementSize = vertexElementSize;\n        this.isDynamic = isDynamic;\n        this.elementsPerEntry = elementsPerEntry;\n\n        //  Derive the remaining values\n        this.vertexByteSize = vertexElementSize * dataSize;\n        this.entryByteSize = this.vertexByteSize * elementsPerEntry;\n        this.bufferByteSize = batchSize * this.entryByteSize;\n\n        this.create();\n    }\n\n    resize (batchSize: number): void\n    {\n        this.batchSize = batchSize;\n        this.bufferByteSize = batchSize * this.entryByteSize;\n\n        if (this.vertexBuffer)\n        {\n            DeleteGLBuffer(this.vertexBuffer);\n        }\n\n        this.create();\n    }\n\n    create (): void\n    {\n        const data = new ArrayBuffer(this.bufferByteSize);\n\n        this.data = data;\n\n        this.vertexViewF32 = new Float32Array(data);\n        this.vertexViewU32 = new Uint32Array(data);\n\n        this.vertexBuffer = gl.createBuffer();\n\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);\n\n        const type = (this.isDynamic) ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW;\n\n        gl.bufferData(gl.ARRAY_BUFFER, data, type);\n\n        gl.bindBuffer(gl.ARRAY_BUFFER, null);\n    }\n\n    add (count: number): void\n    {\n        this.count += count;\n        this.offset += (this.vertexElementSize * count);\n    }\n\n    reset (): void\n    {\n        this.count = 0;\n        this.offset = 0;\n    }\n\n    canContain (count: number): boolean\n    {\n        return ((this.count + count) <= this.batchSize);\n    }\n\n    free (): number\n    {\n        return Math.max(0, 1 - (this.count / this.batchSize));\n    }\n\n    bind (): void\n    {\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);\n    }\n\n    destroy (): void\n    {\n        DeleteGLBuffer(this.vertexBuffer);\n\n        this.data = null;\n        this.vertexViewF32 = null;\n        this.vertexViewU32 = null;\n        this.vertexBuffer = null;\n    }\n}\n", "import { DeleteGLBuffer } from './DeleteGLBuffer';\nimport { IIndexedVertexBuffer } from './IIndexedVertexBuffer';\nimport { IVertexBufferConfig } from './IVertexBufferConfig';\nimport { VertexBuffer } from './VertexBuffer';\nimport { gl } from '../GL';\n\nexport class IndexedVertexBuffer extends VertexBuffer implements IIndexedVertexBuffer\n{\n    /**\n     * The size, in bytes, per entry in the element index array.\n     *\n     * @type {number}\n     */\n    indexSize: number;\n\n    /**\n     * The size, in quantity of elements, of a single entry in the element index array.\n     *\n     * This is `vertexElementSize * 4` for a quad.\n     *\n     * @type {number}\n     */\n    entryElementSize: number;\n\n    /**\n     * The total number of entries per entry in the element index array.\n     *\n     * For a quad, the IBO contains 6 entries per entry:\n     *\n     * 0, 1, 2\n     * 2, 3, 0\n     *\n     * @type {number}\n     */\n    entryIndexSize: number;\n\n    /**\n     * The Element Array Buffer.\n     *\n     * @type {Uint16Array}\n     */\n    index: Uint16Array;\n\n    /**\n     * The element array buffer.\n     *\n     * @type {WebGLBuffer}\n     */\n    indexBuffer: WebGLBuffer;\n\n    indexLayout: number[];\n\n    constructor (config: IVertexBufferConfig = {})\n    {\n        super(config);\n\n        const {\n            indexSize = 4,\n            entryIndexSize = 6,\n            indexLayout = null\n        } = config;\n\n        this.indexed = true;\n\n        this.indexSize = indexSize;\n        this.entryIndexSize = entryIndexSize;\n\n        //  Derive the remaining values\n        this.entryElementSize = this.vertexElementSize * this.elementsPerEntry;\n\n        const seededIndexBuffer = [];\n\n        if (indexLayout)\n        {\n            this.indexLayout = indexLayout;\n\n            //  Seed the index buffer\n            for (let i = 0; i < (this.batchSize * indexSize); i += indexSize)\n            {\n                for (let c = 0; c < indexLayout.length; c++)\n                {\n                    seededIndexBuffer.push(i + indexLayout[c]);\n                }\n            }\n        }\n\n        this.create();\n        this.createIndexBuffer(seededIndexBuffer);\n    }\n\n    createIndexBuffer (seededIndex: number[]): void\n    {\n        this.index = new Uint16Array(seededIndex);\n\n        this.indexBuffer = gl.createBuffer();\n\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, this.index, gl.STATIC_DRAW);\n\n        //  Free memory\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\n        seededIndex = [];\n    }\n\n    bind (): void\n    {\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);\n    }\n\n    destroy (): void\n    {\n        super.destroy();\n\n        DeleteGLBuffer(this.indexBuffer);\n\n        this.index = null;\n        this.indexLayout = null;\n        this.indexBuffer = null;\n    }\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Checks if an array can be used as a matrix.\n *\n * A matrix is a two-dimensional array (array of arrays), where all sub-arrays (rows) have the same length. There must be at least two rows:\n *\n * ```\n *    [\n *        [ 1, 1, 1, 1, 1, 1 ],\n *        [ 2, 0, 0, 0, 0, 4 ],\n *        [ 2, 0, 1, 2, 0, 4 ],\n *        [ 2, 0, 3, 4, 0, 4 ],\n *        [ 2, 0, 0, 0, 0, 4 ],\n *        [ 3, 3, 3, 3, 3, 3 ]\n *    ]\n * ```\n */\nexport function CheckMatrix (matrix: unknown[][]): boolean\n{\n    if (!Array.isArray(matrix) || matrix.length < 2 || !Array.isArray(matrix[0]))\n    {\n        return false;\n    }\n\n    //  How long is the first row?\n    const size = matrix[0].length;\n\n    //  Validate the rest of the rows are the same length\n    for (let i = 1; i < matrix.length; i++)\n    {\n        if (matrix[i].length !== size)\n        {\n            return false;\n        }\n    }\n\n    return true;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { CheckMatrix } from './CheckMatrix';\n\n/**\n * Generates a string (which you can pass to console.log) from the given Array Matrix.\n */\nexport function MatrixToString (matrix: unknown[][]): string\n{\n    let str = '';\n\n    if (!CheckMatrix(matrix))\n    {\n        return str;\n    }\n\n    for (let r = 0; r < matrix.length; r++)\n    {\n        for (let c = 0; c < matrix[r].length; c++)\n        {\n            const cell = matrix[r][c].toString();\n\n            if (cell !== 'undefined')\n            {\n                str = str.padEnd(2, cell);\n            }\n            else\n            {\n                str += '?';\n            }\n\n            if (c < matrix[r].length - 1)\n            {\n                str += ' |';\n            }\n        }\n\n        if (r < matrix.length - 1)\n        {\n            str += '\\n';\n\n            for (let i = 0; i < matrix[r].length; i++)\n            {\n                str += '---';\n\n                if (i < matrix[r].length - 1)\n                {\n                    str += '+';\n                }\n            }\n\n            str += '\\n';\n        }\n\n    }\n\n    return str;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Reverses the columns in the given Array Matrix.\n */\nexport function ReverseColumns (matrix: unknown[][]): unknown[][]\n{\n    return matrix.reverse();\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Reverses the rows in the given Array Matrix.\n */\nexport function ReverseRows (matrix: unknown[][]): unknown[][]\n{\n    for (let i = 0; i < matrix.length; i++)\n    {\n        matrix[i].reverse();\n    }\n\n    return matrix;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Transposes the elements of the given matrix (array of arrays).\n *\n * The transpose of a matrix is a new matrix whose rows are the columns of the original.\n */\nexport function TransposeMatrix (matrix: unknown[][]): unknown[][]\n{\n    const sourceRowCount = matrix.length;\n    const sourceColCount = matrix[0].length;\n\n    const result = new Array(sourceColCount);\n\n    for (let i = 0; i < sourceColCount; i++)\n    {\n        result[i] = new Array(sourceRowCount);\n\n        for (let j = sourceRowCount - 1; j > -1; j--)\n        {\n            result[i][j] = matrix[j][i];\n        }\n    }\n\n    return result;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { CheckMatrix } from './CheckMatrix';\nimport { TransposeMatrix } from './TransposeMatrix';\n\n/**\n * Rotates the array matrix based on the given rotation value.\n *\n * The value can be given in degrees: 90, -90, 270, -270 or 180,\n * or a string command: `rotateLeft`, `rotateRight` or `rotate180`.\n *\n * Based on the routine from {@link http://jsfiddle.net/MrPolywhirl/NH42z/}.\n */\nexport function RotateMatrix (matrix: unknown[][], direction: number | string = 90): unknown[][]\n{\n    if (!CheckMatrix(matrix))\n    {\n        return matrix;\n    }\n\n    if (typeof direction !== 'string')\n    {\n        direction = ((direction % 360) + 360) % 360;\n    }\n\n    if (direction === 90 || direction === -270 || direction === 'rotateLeft')\n    {\n        matrix = TransposeMatrix(matrix);\n        matrix.reverse();\n    }\n    else if (direction === -90 || direction === 270 || direction === 'rotateRight')\n    {\n        matrix.reverse();\n        matrix = TransposeMatrix(matrix);\n    }\n    else if (Math.abs(direction as number) === 180 || direction === 'rotate180')\n    {\n        for (let i = 0; i < matrix.length; i++)\n        {\n            matrix[i].reverse();\n        }\n\n        matrix.reverse();\n    }\n\n    return matrix;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { RotateMatrix } from './RotateMatrix';\n\n/**\n * Rotates the array matrix 180 degrees.\n *\n * @function Phaser.Utils.Array.Matrix.Rotate180\n * @since 3.0.0\n *\n * @generic T\n * @genericUse {T[][]} - [matrix,$return]\n *\n * @param {T[][]} [matrix] - The array to rotate.\n *\n * @return {T[][]} The rotated matrix array. The source matrix should be discard for the returned matrix.\n */\nexport function Rotate180 (matrix: unknown[][]): unknown[][]\n{\n    return RotateMatrix(matrix, 180);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { RotateMatrix } from './RotateMatrix';\n\n/**\n * Rotates the array matrix to the left (or 90 degrees)\n *\n * @function Phaser.Utils.Array.Matrix.RotateLeft\n * @since 3.0.0\n *\n * @generic T\n * @genericUse {T[][]} - [matrix,$return]\n *\n * @param {T[][]} [matrix] - The array to rotate.\n *\n * @return {T[][]} The rotated matrix array. The source matrix should be discard for the returned matrix.\n */\nexport function RotateLeft (matrix: unknown[][]): unknown[][]\n{\n    return RotateMatrix(matrix, 90);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { RotateMatrix } from './RotateMatrix';\n\n/**\n * Rotates the array matrix to the left (or -90 degrees)\n *\n * @function Phaser.Utils.Array.Matrix.RotateRight\n * @since 3.0.0\n *\n * @generic T\n * @genericUse {T[][]} - [matrix,$return]\n *\n * @param {T[][]} [matrix] - The array to rotate.\n *\n * @return {T[][]} The rotated matrix array. The source matrix should be discard for the returned matrix.\n */\nexport function RotateRight (matrix: unknown[][]): unknown[][]\n{\n    return RotateMatrix(matrix, -90);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Create an array representing the range of numbers (usually integers), between, and inclusive of,\n * the given `start` and `end` arguments. For example:\n *\n * `var array = numberArray(2, 4); // array = [2, 3, 4]`\n * `var array = numberArray(0, 9); // array = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]`\n *\n * This is equivalent to `numberArrayStep(start, end, 1)`.\n *\n * You can optionally provide a prefix and / or suffix string. If given the array will contain\n * strings, not integers. For example:\n *\n * `var array = numberArray(1, 4, 'Level '); // array = [\"Level 1\", \"Level 2\", \"Level 3\", \"Level 4\"]`\n * `var array = numberArray(5, 7, 'HD-', '.png'); // array = [\"HD-5.png\", \"HD-6.png\", \"HD-7.png\"]`\n *\n * @param {number} start - The minimum value the array starts with.\n * @param {number} end - The maximum value the array contains.\n * @param {string} [prefix] - Optional prefix to place before the number. If provided the array will contain strings, not integers.\n * @param {string} [suffix] - Optional suffix to place after the number. If provided the array will contain strings, not integers.\n *\n * @return {(number[]|string[])} The array of number values, or strings if a prefix or suffix was provided.\n */\nexport function NumberArray (start: number, end: number, prefix?: string, suffix?: string): (string | number)[]\n{\n    const result: (string | number)[] = [];\n\n    for (let i = start; i <= end; i++)\n    {\n        if (prefix || suffix)\n        {\n            let key = (prefix) ? prefix + i.toString() : i.toString();\n\n            if (suffix)\n            {\n                key = key.concat(suffix);\n            }\n\n            result.push(key);\n        }\n        else\n        {\n            result.push(i);\n        }\n    }\n\n    return result;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Round a given number so it is further away from zero. That is, positive numbers are rounded up, and negative numbers are rounded down.\n *\n * @function Phaser.Math.RoundAwayFromZero\n * @since 3.0.0\n *\n * @param {number} value - The number to round.\n *\n * @return {number} The rounded number, rounded away from zero.\n */\nexport function RoundAwayFromZero (value: number): number\n{\n    // \"Opposite\" of truncate.\n    return (value > 0) ? Math.ceil(value) : Math.floor(value);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { RoundAwayFromZero } from '../../math/RoundAwayFromZero';\n\n/**\n * Create an array of numbers (positive and/or negative) progressing from `start`\n * up to but not including `end` by advancing by `step`.\n *\n * If `start` is less than `end` a zero-length range is created unless a negative `step` is specified.\n *\n * Certain values for `start` and `end` (eg. NaN/undefined/null) are currently coerced to 0;\n * for forward compatibility make sure to pass in actual numbers.\n *\n * @example\n * NumberArrayStep(4);\n * // => [0, 1, 2, 3]\n *\n * NumberArrayStep(1, 5);\n * // => [1, 2, 3, 4]\n *\n * NumberArrayStep(0, 20, 5);\n * // => [0, 5, 10, 15]\n *\n * NumberArrayStep(0, -4, -1);\n * // => [0, -1, -2, -3]\n *\n * NumberArrayStep(1, 4, 0);\n * // => [1, 1, 1]\n *\n * NumberArrayStep(0);\n * // => []\n *\n * @param {number} [start=0] - The start of the range.\n * @param {number} [end=null] - The end of the range.\n * @param {number} [step=1] - The value to increment or decrement by.\n *\n * @return {number[]} The array of number values.\n */\nexport function NumberArrayStep (start: number, end: number, step: number): number[]\n{\n    const result: number[] = [];\n\n    const total = Math.max(RoundAwayFromZero((end - start) / (step || 1)), 0);\n\n    for (let i = 0; i < total; i++)\n    {\n        result.push(start);\n\n        start += step;\n    }\n\n    return result;\n}\n", "/**\n * @author       Niklas von Hertzen (https://github.com/niklasvh/base64-arraybuffer)\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nconst chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\n/**\n * Converts an ArrayBuffer into a base64 string.\n *\n * The resulting string can optionally be a data uri if the `mediaType` argument is provided.\n *\n * See https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs for more details.\n *\n * @function Phaser.Utils.Base64.ArrayBufferToBase64\n * @since 3.18.0\n *\n * @param {ArrayBuffer} arrayBuffer - The Array Buffer to encode.\n * @param {string} [mediaType] - An optional media type, i.e. `audio/ogg` or `image/jpeg`. If included the resulting string will be a data URI.\n *\n * @return {string} The base64 encoded Array Buffer.\n */\nexport function ArrayBufferToBase64 (arrayBuffer: ArrayBuffer, mediaType: string): string\n{\n    const bytes = new Uint8Array(arrayBuffer);\n    const len = bytes.length;\n\n    let base64 = (mediaType) ? 'data:' + mediaType + ';base64,' : '';\n\n    for (let i = 0; i < len; i += 3)\n    {\n        base64 += chars[bytes[i] >> 2];\n        base64 += chars[((bytes[i] & 3) << 4) | (bytes[i + 1] >> 4)];\n        base64 += chars[((bytes[i + 1] & 15) << 2) | (bytes[i + 2] >> 6)];\n        base64 += chars[bytes[i + 2] & 63];\n    }\n\n    if ((len % 3) === 2)\n    {\n        base64 = base64.substring(0, base64.length - 1) + '=';\n    }\n    else if (len % 3 === 1)\n    {\n        base64 = base64.substring(0, base64.length - 2) + '==';\n    }\n\n    return base64;\n}\n", "/**\n * @author       Niklas von Hertzen (https://github.com/niklasvh/base64-arraybuffer)\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nconst chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\n//  Use a lookup table to find the index.\nconst lookup = new Uint8Array(256);\n\nfor (let i = 0; i < chars.length; i++)\n{\n    lookup[chars.charCodeAt(i)] = i;\n}\n\n/**\n * Converts a base64 string, either with or without a data uri, into an Array Buffer.\n *\n * @function Phaser.Utils.Base64.Base64ToArrayBuffer\n * @since 3.18.0\n *\n * @param {string} base64 - The base64 string to be decoded. Can optionally contain a data URI header, which will be stripped out prior to decoding.\n *\n * @return {ArrayBuffer} An ArrayBuffer decoded from the base64 data.\n */\nexport function Base64ToArrayBuffer (base64: string): ArrayBuffer\n{\n    //  Is it a data uri? if so, strip the header away\n    base64 = base64.substr(base64.indexOf(',') + 1);\n\n    const len = base64.length;\n    let bufferLength = len * 0.75;\n    let p = 0;\n    let encoded1;\n    let encoded2;\n    let encoded3;\n    let encoded4;\n\n    if (base64[len - 1] === '=')\n    {\n        bufferLength--;\n\n        if (base64[len - 2] === '=')\n        {\n            bufferLength--;\n        }\n    }\n\n    const arrayBuffer = new ArrayBuffer(bufferLength);\n    const bytes = new Uint8Array(arrayBuffer);\n\n    for (let i = 0; i < len; i += 4)\n    {\n        encoded1 = lookup[base64.charCodeAt(i)];\n        encoded2 = lookup[base64.charCodeAt(i + 1)];\n        encoded3 = lookup[base64.charCodeAt(i + 2)];\n        encoded4 = lookup[base64.charCodeAt(i + 3)];\n\n        bytes[p++] = (encoded1 << 2) | (encoded2 >> 4);\n        bytes[p++] = ((encoded2 & 15) << 4) | (encoded3 >> 2);\n        bytes[p++] = ((encoded3 & 3) << 6) | (encoded4 & 63);\n    }\n\n    return arrayBuffer;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Capitalizes the first letter of a string if there is one.\n * @example\n * UppercaseFirst('abc');\n * // returns 'Abc'\n * @example\n * UppercaseFirst('the happy family');\n * // returns 'The happy family'\n * @example\n * UppercaseFirst('');\n * // returns ''\n *\n * @function Phaser.Utils.String.UppercaseFirst\n * @since 3.0.0\n *\n * @param {string} str - The string to capitalize.\n *\n * @return {string} A new string, same as the first, but with the first letter capitalized.\n */\nexport function UppercaseFirst (str: string): string\n{\n    return str && str[0].toUpperCase() + str.slice(1);\n}\n", "export function NOOP (): void\n{\n    //  No-op\n}\n", "import { NOOP } from '../../utils';\n\n//  4x4 Matrix in column-major format\n\n/**\n * data[0] = m00\n * data[1] = m01\n * data[2] = m02\n * data[3] = m03\n * data[4] = m10\n * data[5] = m11\n * data[6] = m12\n * data[7] = m13\n * data[8] = m20\n * data[9] = m21\n * data[10] = m22\n * data[11] = m23\n * data[12] = m30\n * data[13] = m31\n * data[14] = m32\n * data[15] = m33\n */\n\nexport class Matrix4\n{\n    data: Float32Array;\n\n    onChange: (mat4: Matrix4) => void;\n\n    constructor (src?: Matrix4 | Float32List)\n    {\n        const data = new Float32Array(16);\n\n        this.data = data;\n        this.onChange = NOOP;\n\n        if (src)\n        {\n            if (Array.isArray(src))\n            {\n                this.fromArray(src);\n            }\n            else\n            {\n                this.fromArray((src as Matrix4).data);\n            }\n        }\n        else\n        {\n            data[0] = 1;\n            data[5] = 1;\n            data[10] = 1;\n            data[15] = 1;\n        }\n    }\n\n    /**\n     * @param m00 - 1st value of 1st row\n     * @param m01 - 2nd value of 1st row\n     * @param m02 - 3rd value of 1st row\n     * @param m03 - 4th value of 1st row\n     * @param m10 - 1st value of 2nd row\n     * @param m11 - 2nd value of 2nd row\n     * @param m12 - 3rd value of 2nd row\n     * @param m13 - 4th value of 2nd row\n     * @param m20 - 1st value of 3rd row\n     * @param m21 - 2nd value of 3rd row\n     * @param m22 - 3rd value of 3rd row\n     * @param m23 - 4th value of 3rd row\n     * @param m30 - 1st value of 4th row\n     * @param m31 - 2nd value of 4th row\n     * @param m32 - 3rd value of 4th row\n     * @param m33 - 4th value of 4th row\n     */\n    set (m00: number, m01: number, m02: number, m03: number, m10: number, m11: number, m12: number, m13: number, m20: number, m21: number, m22: number, m23: number, m30: number, m31: number, m32: number, m33: number): this\n    {\n        const data = this.data;\n\n        data[ 0 ] = m00;\n        data[ 1 ] = m01;\n        data[ 2 ] = m02;\n        data[ 3 ] = m03;\n\n        data[ 4 ] = m10;\n        data[ 5 ] = m11;\n        data[ 6 ] = m12;\n        data[ 7 ] = m13;\n\n        data[ 8 ] = m20;\n        data[ 9 ] = m21;\n        data[ 10 ] = m22;\n        data[ 11 ] = m23;\n\n        data[ 12 ] = m30;\n        data[ 13 ] = m31;\n        data[ 14 ] = m32;\n        data[ 15 ] = m33;\n\n        this.onChange(this);\n\n        return this;\n    }\n\n    toArray (dst: Float32List = [], index: number = 0): Float32List\n    {\n        const data = this.data;\n\n        for (let i = 0; i < 16; i++)\n        {\n            dst[ index + i ] = data[i];\n        }\n\n        return dst;\n    }\n\n    fromArray (src: Float32List, index: number = 0): this\n    {\n        const data = this.data;\n\n        for (let i = 0; i < 16; i++)\n        {\n            data[i] = src[ index + i ];\n        }\n\n        this.onChange(this);\n\n        return this;\n    }\n\n    toString (): string\n    {\n        return '[ mat4=' + this.data.join(', ') + ' ]';\n    }\n\n    destroy (): void\n    {\n        this.onChange = NOOP;\n        this.data = null;\n    }\n}\n", "import { Matrix4 } from './Matrix4';\n\n// Generates a orthogonal projection matrix with the given bounds\n\nexport function Mat4Ortho (left: number, right: number, bottom: number, top: number, near: number, far: number, out: Matrix4 = new Matrix4()): Matrix4\n{\n    const lr = 1 / (left - right);\n    const bt = 1 / (bottom - top);\n    const nf = 1 / (near - far);\n\n    return out.set(\n        -2 * lr,\n        0,\n        0,\n        0,\n        0,\n        -2 * bt,\n        0,\n        0,\n        0,\n        0,\n        2 * nf,\n        0,\n        (left + right) * lr,\n        (top + bottom) * bt,\n        (far + near) * nf,\n        1\n    );\n}\n", "import { IVertexAttribPointer } from './IVertexAttribPointer';\nimport { gl } from '../GL';\n\nexport function CreateAttributes (program: WebGLProgram, config: Object): Map<string, IVertexAttribPointer>\n{\n    const attributes = new Map();\n\n    const defaultSettings =\n    {\n        size: 1,\n        type: gl.FLOAT,\n        normalized: false,\n        stride: 0,\n        offset: 0\n    };\n\n    const total = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);\n\n    for (let i = 0; i < total; i++)\n    {\n        const attrib = gl.getActiveAttrib(program, i);\n\n        if (!attrib)\n        {\n            break;\n        }\n\n        const name = attrib.name;\n\n        const index = gl.getAttribLocation(program, name);\n\n        gl.enableVertexAttribArray(index);\n\n        const setting = config.hasOwnProperty(name) ? config[name] : {};\n\n        const {\n\n            size = defaultSettings.size,\n            type = defaultSettings.type,\n            normalized = defaultSettings.normalized,\n            stride = defaultSettings.stride,\n            offset = defaultSettings.offset\n\n        } = setting;\n\n        attributes.set(name, { index, size, type, normalized, stride, offset });\n    }\n\n    return attributes;\n}\n", "import { gl } from '../GL';\n\nexport function DeleteShaders (...shaders: WebGLShader[]): void\n{\n    shaders.forEach(shader =>\n    {\n        gl.deleteShader(shader);\n    });\n}\n", "import { DeleteShaders } from './DeleteShaders';\nimport { gl } from '../GL';\n\nexport function CreateProgram (...shaders: WebGLShader[]): WebGLProgram\n{\n    const program = gl.createProgram();\n\n    shaders.forEach(shader =>\n    {\n        gl.attachShader(program, shader);\n    });\n\n    gl.linkProgram(program);\n\n    const status = gl.getProgramParameter(program, gl.LINK_STATUS);\n\n    if (!status)\n    {\n        const info = gl.getProgramInfoLog(program);\n\n        console.error(`Error linking program: ${info}`);\n\n        gl.deleteProgram(program);\n\n        DeleteShaders(...shaders);\n\n        return null;\n    }\n\n    return program;\n}\n", "import { gl } from '../GL';\n\nexport function CreateShader (source: string, type: GLenum): WebGLShader | null\n{\n    const shader = gl.createShader(type);\n\n    gl.shaderSource(shader, source);\n\n    gl.compileShader(shader);\n\n    const status = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n\n    if (!status)\n    {\n        const info = gl.getShaderInfoLog(shader);\n\n        //  Adding line numbers idea borrowed from Gregg Tavares!\n        const sourceLines = source.split('\\n').map((line, index) =>\n        {\n            return `${index}: ${line}`;\n        });\n\n        console.error(`Error compiling shader: ${info}`, sourceLines.join('\\n'));\n\n        gl.deleteShader(shader);\n\n        return null;\n    }\n\n    return shader;\n}\n", "import { gl } from '../GL';\n\nexport type FloatSetter = (v: number) => void;\nexport type F32Setter = (v: Float32List) => void;\nexport type I32Setter = (v: Int32List) => void;\n\nexport function CreateUniformSetter (uniform: WebGLActiveInfo, location: WebGLUniformLocation, isArray: boolean = false): FloatSetter | F32Setter | I32Setter\n{\n    switch (uniform.type)\n    {\n        case gl.INT:\n        case gl.BOOL:\n        {\n            if (isArray)\n            {\n                return (v: Int32List): void =>\n                {\n                    gl.uniform1iv(location, v);\n                };\n            }\n            else\n            {\n                return (v: number): void =>\n                {\n                    gl.uniform1i(location, v);\n                };\n            }\n        }\n\n        case gl.INT_VEC2:\n        case gl.BOOL_VEC2:\n        {\n            return (v: Int32List): void =>\n            {\n                gl.uniform2iv(location, v);\n            };\n        }\n\n        case gl.INT_VEC3:\n        case gl.BOOL_VEC3:\n        {\n            return (v: Int32List): void =>\n            {\n                gl.uniform3iv(location, v);\n            };\n        }\n\n        case gl.INT_VEC4:\n        case gl.BOOL_VEC4:\n        {\n            return (v: Int32List): void =>\n            {\n                gl.uniform4iv(location, v);\n            };\n        }\n\n        case gl.FLOAT:\n        {\n            if (isArray)\n            {\n                return (v: Float32List): void =>\n                {\n                    gl.uniform1fv(location, v);\n                };\n            }\n            else\n            {\n                return (v: number): void =>\n                {\n                    gl.uniform1f(location, v);\n                };\n            }\n        }\n\n        case gl.FLOAT_VEC2:\n        {\n            return (v: Float32List): void =>\n            {\n                gl.uniform2fv(location, v);\n            };\n        }\n\n        case gl.FLOAT_VEC3:\n        {\n            return (v: Float32List): void =>\n            {\n                gl.uniform3fv(location, v);\n            };\n        }\n\n        case gl.FLOAT_VEC4:\n        {\n            return (v: Float32List): void =>\n            {\n                gl.uniform4fv(location, v);\n            };\n        }\n\n        case gl.FLOAT_MAT2:\n        {\n            return (v: Float32List): void =>\n            {\n                gl.uniformMatrix2fv(location, false, v);\n            };\n        }\n\n        case gl.FLOAT_MAT3:\n        {\n            return (v: Float32List): void =>\n            {\n                gl.uniformMatrix3fv(location, false, v);\n            };\n        }\n\n        case gl.FLOAT_MAT4:\n        {\n            return (v: Float32List): void =>\n            {\n                gl.uniformMatrix4fv(location, false, v);\n            };\n        }\n\n        case gl.SAMPLER_2D:\n        case gl.SAMPLER_CUBE:\n        {\n            if (uniform.size > 1)\n            {\n                return (v: Int32List): void =>\n                {\n                    gl.uniform1iv(location, v);\n                };\n            }\n            else\n            {\n                return (v: number): void =>\n                {\n                    gl.uniform1i(location, v);\n                };\n            }\n        }\n    }\n}\n", "import { CreateUniformSetter } from './CreateUniformSetter';\nimport { gl } from '../GL';\n\nexport function CreateUniforms (program: WebGLProgram): Map<string, Function>\n{\n    const uniforms = new Map();\n\n    const total = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);\n\n    for (let i = 0; i < total; i++)\n    {\n        const uniform = gl.getActiveUniform(program, i);\n\n        let name = uniform.name;\n\n        if (name.startsWith('gl_') || name.startsWith('webgl_'))\n        {\n            //  Skip built-in uniforms\n            continue;\n        }\n\n        const location = gl.getUniformLocation(program, uniform.name);\n\n        if (location)\n        {\n            let isArray = false;\n\n            //  If uniform name has [0] at the end, remove it\n            if (name.substr(-3) === '[0]')\n            {\n                name = name.substr(0, name.length - 3);\n\n                isArray = (uniform.size > 1);\n            }\n\n            uniforms.set(name, CreateUniformSetter(uniform, location, isArray));\n        }\n    }\n\n    return uniforms;\n}\n", "const BYTE                   = 0x1400;\nconst UNSIGNED_BYTE          = 0x1401;\nconst SHORT                  = 0x1402;\nconst UNSIGNED_SHORT         = 0x1403;\nconst INT                    = 0x1404;\nconst UNSIGNED_INT           = 0x1405;\nconst FLOAT                  = 0x1406;\nconst REPEAT                 = 0x2901;  // eslint-disable-line\nconst CLAMP_TO_EDGE          = 0x812F;\nconst MIRRORED_REPEAT        = 0x8370;  // eslint-disable-line\nconst NEAREST                = 0x2600;  // eslint-disable-line\nconst LINEAR                 = 0x2601;\nconst NEAREST_MIPMAP_NEAREST = 0x2700;  // eslint-disable-line\nconst LINEAR_MIPMAP_NEAREST  = 0x2701;  // eslint-disable-line\nconst NEAREST_MIPMAP_LINEAR  = 0x2702;  // eslint-disable-line\nconst LINEAR_MIPMAP_LINEAR   = 0x2703;  // eslint-disable-line\n\nexport {\n    BYTE,\n    UNSIGNED_BYTE,\n    SHORT,\n    UNSIGNED_SHORT,\n    INT,\n    UNSIGNED_INT,\n    FLOAT,\n    REPEAT,\n    CLAMP_TO_EDGE,\n    MIRRORED_REPEAT,\n    NEAREST,\n    LINEAR,\n    NEAREST_MIPMAP_NEAREST,\n    LINEAR_MIPMAP_NEAREST,\n    NEAREST_MIPMAP_LINEAR,\n    LINEAR_MIPMAP_LINEAR\n};\n", "import * as GL_CONST from '../GL_CONST';\n\n// size = 8\n// size = 8, offset = position\n// size = 4, offset = position + tex coord\n// size = 4, offset = position + tex coord + index\n\nexport const DefaultQuadAttributes =\n{\n    aVertexPosition: { size: 2, type: GL_CONST.FLOAT, normalized: false, offset: 0 },\n    aTextureCoord: { size: 2, type: GL_CONST.FLOAT, normalized: false, offset: 8 },\n    aTextureId: { size: 1, type: GL_CONST.FLOAT, normalized: false, offset: 16 },\n    aTintColor: { size: 4, type: GL_CONST.UNSIGNED_BYTE, normalized: true, offset: 20 }\n};\n", "export const DefaultQuadUniforms =\n{\n    uProjectionMatrix: new Float32Array(),\n    uCameraMatrix: new Float32Array(),\n    uTexture: 0\n};\n", "import { gl } from '../GL';\n\nexport function CreateDepthBuffer (framebuffer: WebGLFramebuffer, textureWidth: number, textureHeight: number): WebGLRenderbuffer\n{\n    gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n\n    const depthBuffer = gl.createRenderbuffer();\n\n    gl.bindRenderbuffer(gl.RENDERBUFFER, depthBuffer);\n\n    gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, textureWidth, textureHeight);\n\n    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, depthBuffer);\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\n    return depthBuffer;\n}\n", "import { gl } from '../GL';\n\nexport function CreateFramebuffer (texture: WebGLTexture, attachment?: GLenum): WebGLFramebuffer\n{\n    if (!attachment)\n    {\n        attachment = gl.COLOR_ATTACHMENT0;\n    }\n\n    const framebuffer = gl.createFramebuffer();\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, attachment, gl.TEXTURE_2D, texture, 0);\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\n    return framebuffer;\n}\n", "export const SINGLE_QUAD_FRAG =\n`#define SHADER_NAME SINGLE_QUAD_FRAG\n\nprecision highp float;\n\nvarying vec2 vTextureCoord;\nvarying float vTextureId;\nvarying vec4 vTintColor;\n\nuniform sampler2D uTexture;\n\nvoid main (void)\n{\n    vec4 color = texture2D(uTexture, vTextureCoord);\n\n    gl_FragColor = color * vec4(vTintColor.bgr * vTintColor.a, vTintColor.a);\n}`;\n", "export const SINGLE_QUAD_VERT =\n`#define SHADER_NAME SINGLE_QUAD_VERT\n\nprecision highp float;\n\nattribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\nattribute float aTextureId;\nattribute vec4 aTintColor;\n\nuniform mat4 uProjectionMatrix;\nuniform mat4 uCameraMatrix;\n\nvarying vec2 vTextureCoord;\nvarying float vTextureId;\nvarying vec4 vTintColor;\n\nvoid main (void)\n{\n    vTextureCoord = aTextureCoord;\n    vTextureId = aTextureId;\n    vTintColor = aTintColor;\n\n    gl_Position = uProjectionMatrix * uCameraMatrix * vec4(aVertexPosition, 0.0, 1.0);\n}`;\n", "export const TYPES_ENUM = {\r\n  i8: 'i8',\r\n  ui8: 'ui8',\r\n  ui8c: 'ui8c',\r\n  i16: 'i16',\r\n  ui16: 'ui16',\r\n  i32: 'i32',\r\n  ui32: 'ui32',\r\n  f32: 'f32',\r\n  f64: 'f64'\r\n}\r\n\r\nexport const TYPES_NAMES = {\r\n  i8: 'Int8',\r\n  ui8: 'Uint8',\r\n  ui8c: 'Uint8Clamped',\r\n  i16: 'Int16',\r\n  ui16: 'Uint16',\r\n  i32: 'Int32',\r\n  ui32: 'Uint32',\r\n  f32: 'Float32',\r\n  f64: 'Float64'\r\n}\r\n\r\nexport const TYPES = {\r\n  i8: Int8Array,\r\n  ui8: Uint8Array,\r\n  ui8c: Uint8ClampedArray,\r\n  i16: Int16Array,\r\n  ui16: Uint16Array,\r\n  i32: Int32Array,\r\n  ui32: Uint32Array,\r\n  f32: Float32Array,\r\n  f64: Float64Array\r\n}\r\n\r\nconst UNSIGNED_MAX = {\r\n  uint8: 2**8,\r\n  uint16: 2**16,\r\n  uint32: 2**32\r\n}\r\n\r\nconst roundToMultiple4 = x => Math.ceil(x / 4) * 4\r\n\r\nexport const $storeRef = Symbol('storeRef')\r\nexport const $storeSize = Symbol('storeSize')\r\nexport const $storeMaps = Symbol('storeMaps')\r\nexport const $storeFlattened = Symbol('storeFlattened')\r\nexport const $storeBase = Symbol('storeBase')\r\nexport const $storeType = Symbol('storeType')\r\n\r\nexport const $storeArrayCounts = Symbol('storeArrayCount')\r\nexport const $storeSubarrays = Symbol('storeSubarrays')\r\nexport const $storeCursor = Symbol('storeCursor')\r\nexport const $subarrayCursors = Symbol('subarrayCursors')\r\nexport const $subarray = Symbol('subarray')\r\nexport const $tagStore = Symbol('tagStore')\r\n\r\nexport const $queryShadow = Symbol('queryShadow')\r\nexport const $serializeShadow = Symbol('serializeShadow')\r\n\r\nexport const $indexType = Symbol('indexType')\r\nexport const $indexBytes = Symbol('indexBytes')\r\n\r\nconst stores = {}\r\n\r\nexport const resize = (ta, size) => {\r\n  const newBuffer = new ArrayBuffer(size * ta.BYTES_PER_ELEMENT)\r\n  const newTa = new ta.constructor(newBuffer)\r\n  newTa.set(ta, 0)\r\n  return newTa\r\n}\r\n\r\nconst resizeSubarray = (metadata, store, size) => {\r\n  const cursors = metadata[$subarrayCursors]\r\n  const type = store[$storeType]\r\n  const length = store[0].length\r\n  const indexType =\r\n    length < UNSIGNED_MAX.uint8\r\n      ? 'ui8'\r\n      : length < UNSIGNED_MAX.uint16\r\n        ? 'ui16'\r\n        : 'ui32'\r\n  const arrayCount = metadata[$storeArrayCounts][type]\r\n  const summedLength = Array(arrayCount).fill(0).reduce((a, p) => a + length, 0)\r\n  \r\n  // for threaded impl\r\n  // const summedBytesPerElement = Array(arrayCount).fill(0).reduce((a, p) => a + TYPES[type].BYTES_PER_ELEMENT, 0)\r\n  // const totalBytes = roundToMultiple4(summedBytesPerElement * summedLength * size)\r\n  // const buffer = new ArrayBuffer(totalBytes)\r\n\r\n  const array = new TYPES[type](summedLength * size)\r\n\r\n  array.set(metadata[$storeSubarrays][type])\r\n  \r\n  metadata[$storeSubarrays][type] = array\r\n  metadata[$storeSubarrays][type][$queryShadow] = array.slice(0)\r\n  metadata[$storeSubarrays][type][$serializeShadow] = array.slice(0)\r\n  \r\n  array[$indexType] = TYPES_NAMES[indexType]\r\n  array[$indexBytes] = TYPES[indexType].BYTES_PER_ELEMENT\r\n\r\n  let end = 0\r\n  for (let eid = 0; eid < size; eid++) {\r\n    const from = cursors[type] + (eid * length)\r\n    const to = from + length\r\n\r\n    store[eid] = metadata[$storeSubarrays][type].subarray(from, to)\r\n    \r\n    store[eid].from = from\r\n    store[eid].to = to\r\n    store[eid][$queryShadow] = metadata[$storeSubarrays][type][$queryShadow].subarray(from, to)\r\n    store[eid][$serializeShadow] = metadata[$storeSubarrays][type][$serializeShadow].subarray(from, to)\r\n    store[eid][$subarray] = true\r\n    store[eid][$indexType] = array[$indexType]\r\n    store[eid][$indexBytes] = array[$indexBytes]\r\n    \r\n    end = to\r\n  }\r\n\r\n  cursors[type] = end\r\n}\r\n\r\nconst resizeRecursive = (metadata, store, size) => {\r\n  Object.keys(store).forEach(key => {\r\n    const ta = store[key]\r\n    if (Array.isArray(ta)) {\r\n      resizeSubarray(metadata, ta, size)\r\n      store[$storeFlattened].push(ta)\r\n    } else if (ArrayBuffer.isView(ta)) {\r\n      store[key] = resize(ta, size)\r\n      store[$storeFlattened].push(store[key])\r\n      store[key][$queryShadow] = resize(ta[$queryShadow], size)\r\n      store[key][$serializeShadow] = resize(ta[$serializeShadow], size)\r\n    } else if (typeof ta === 'object') {\r\n      resizeRecursive(metadata, store[key], size)\r\n    }\r\n  })\r\n}\r\n\r\nexport const resizeStore = (store, size) => {\r\n  if (store[$tagStore]) return\r\n  store[$storeSize] = size\r\n  store[$storeFlattened].length = 0\r\n  Object.keys(store[$subarrayCursors]).forEach(k => {\r\n    store[$subarrayCursors][k] = 0\r\n  })\r\n  resizeRecursive(store, store, size)\r\n  // resizeSubarrays(store, size)\r\n}\r\n\r\nexport const resetStore = store => {\r\n  if (store[$storeFlattened]) {\r\n    store[$storeFlattened].forEach(ta => {\r\n      ta.fill(0)\r\n    })\r\n    Object.keys(store[$storeSubarrays]).forEach(key => {\r\n      store[$storeSubarrays][key].fill(0)\r\n    })\r\n  }\r\n}\r\n\r\nexport const resetStoreFor = (store, eid) => {\r\n  if (store[$storeFlattened]) {\r\n    store[$storeFlattened].forEach(ta => {\r\n      if (ArrayBuffer.isView(ta)) ta[eid] = 0\r\n      else ta[eid].fill(0)\r\n    })\r\n  }\r\n}\r\n\r\nconst createTypeStore = (type, length) => {\r\n  const totalBytes = length * TYPES[type].BYTES_PER_ELEMENT\r\n  const buffer = new ArrayBuffer(totalBytes)\r\n  return new TYPES[type](buffer)\r\n}\r\n\r\nconst createArrayStore = (metadata, type, length) => {\r\n  const size = metadata[$storeSize]\r\n  const store = Array(size).fill(0)\r\n  store[$storeType] = type\r\n\r\n  const cursors = metadata[$subarrayCursors]\r\n  const indexType =\r\n    length < UNSIGNED_MAX.uint8\r\n      ? 'ui8'\r\n      : length < UNSIGNED_MAX.uint16\r\n        ? 'ui16'\r\n        : 'ui32'\r\n\r\n  if (!length) throw new Error('\u274C Must define a length for component array.')\r\n  if (!TYPES[type]) throw new Error(`\u274C Invalid component array property type ${type}.`)\r\n\r\n  // create buffer for type if it does not already exist\r\n  if (!metadata[$storeSubarrays][type]) {\r\n    const arrayCount = metadata[$storeArrayCounts][type]\r\n    const summedLength = Array(arrayCount).fill(0).reduce((a, p) => a + length, 0)\r\n    \r\n    // for threaded impl\r\n    // const summedBytesPerElement = Array(arrayCount).fill(0).reduce((a, p) => a + TYPES[type].BYTES_PER_ELEMENT, 0)\r\n    // const totalBytes = roundToMultiple4(summedBytesPerElement * summedLength * size)\r\n    // const buffer = new ArrayBuffer(totalBytes)\r\n\r\n    const array = new TYPES[type](summedLength * size)\r\n\r\n    metadata[$storeSubarrays][type] = array\r\n    metadata[$storeSubarrays][type][$queryShadow] = array.slice(0)\r\n    metadata[$storeSubarrays][type][$serializeShadow] = array.slice(0)\r\n    \r\n    array[$indexType] = TYPES_NAMES[indexType]\r\n    array[$indexBytes] = TYPES[indexType].BYTES_PER_ELEMENT\r\n  }\r\n\r\n  // pre-generate subarrays for each eid\r\n  let end = 0\r\n  for (let eid = 0; eid < size; eid++) {\r\n    const from = cursors[type] + (eid * length)\r\n    const to = from + length\r\n\r\n    store[eid] = metadata[$storeSubarrays][type].subarray(from, to)\r\n    \r\n    store[eid].from = from\r\n    store[eid].to = to\r\n    store[eid][$queryShadow] = metadata[$storeSubarrays][type][$queryShadow].subarray(from, to)\r\n    store[eid][$serializeShadow] = metadata[$storeSubarrays][type][$serializeShadow].subarray(from, to)\r\n    store[eid][$subarray] = true\r\n    store[eid][$indexType] = TYPES_NAMES[indexType]\r\n    store[eid][$indexBytes] = TYPES[indexType].BYTES_PER_ELEMENT\r\n\r\n    end = to\r\n  }\r\n\r\n  cursors[type] = end\r\n\r\n  return store\r\n}\r\n\r\nconst createShadows = (store) => {\r\n  store[$queryShadow] = store.slice(0)\r\n  store[$serializeShadow] = store.slice(0)\r\n}\r\n\r\nconst isArrayType = x => Array.isArray(x) && typeof x[0] === 'string' && typeof x[1] === 'number'\r\n\r\nexport const createStore = (schema, size) => {\r\n  const $store = Symbol('store')\r\n\r\n  if (!schema || !Object.keys(schema).length) {\r\n    // tag component\r\n    stores[$store] = {\r\n      [$storeSize]: size,\r\n      [$tagStore]: true,\r\n      [$storeBase]: () => stores[$store]\r\n    }\r\n    return stores[$store]\r\n  }\r\n\r\n  schema = JSON.parse(JSON.stringify(schema))\r\n\r\n  const arrayCounts = {}\r\n  const collectArrayCounts = s => {\r\n    const keys = Object.keys(s)\r\n    for (const k of keys) {\r\n      if (isArrayType(s[k])) {\r\n        if (!arrayCounts[s[k][0]]) arrayCounts[s[k][0]] = 0\r\n        arrayCounts[s[k][0]]++\r\n      } else if (s[k] instanceof Object) {\r\n        collectArrayCounts(s[k])\r\n      }\r\n    }\r\n  }\r\n  collectArrayCounts(schema)\r\n\r\n  const metadata = {\r\n    [$storeSize]: size,\r\n    [$storeMaps]: {},\r\n    [$storeSubarrays]: {},\r\n    [$storeRef]: $store,\r\n    [$storeCursor]: 0,\r\n    [$subarrayCursors]: Object.keys(TYPES).reduce((a, type) => ({ ...a, [type]: 0 }), {}),\r\n    [$storeFlattened]: [],\r\n    [$storeArrayCounts]: arrayCounts\r\n  }\r\n\r\n  if (schema instanceof Object && Object.keys(schema).length) {\r\n\r\n    const recursiveTransform = (a, k) => {\r\n\r\n      if (typeof a[k] === 'string') {\r\n\r\n        a[k] = createTypeStore(a[k], size)\r\n        createShadows(a[k])\r\n        a[k][$storeBase] = () => stores[$store]\r\n        metadata[$storeFlattened].push(a[k])\r\n\r\n      } else if (isArrayType(a[k])) {\r\n        \r\n        const [type, length] = a[k]\r\n        a[k] = createArrayStore(metadata, type, length)\r\n        a[k][$storeBase] = () => stores[$store]\r\n        metadata[$storeFlattened].push(a[k])\r\n        // Object.freeze(a[k])\r\n\r\n      } else if (a[k] instanceof Object) {\r\n        \r\n        a[k] = Object.keys(a[k]).reduce(recursiveTransform, a[k])\r\n        // Object.freeze(a[k])\r\n        \r\n      }\r\n\r\n      return a\r\n    }\r\n\r\n    stores[$store] = Object.assign(Object.keys(schema).reduce(recursiveTransform, schema), metadata)\r\n    stores[$store][$storeBase] = () => stores[$store]\r\n\r\n    // Object.freeze(stores[$store])\r\n\r\n    return stores[$store]\r\n\r\n  }\r\n}\r\n\r\nexport const free = (store) => {\r\n  delete stores[store[$storeRef]]\r\n}", "import { $indexBytes, $indexType, $serializeShadow, $storeBase, $storeFlattened, $tagStore } from \"./Storage.js\"\r\nimport { $componentMap, addComponent, hasComponent } from \"./Component.js\"\r\nimport { $entityArray, $entityEnabled, addEntity, eidToWorld } from \"./Entity.js\"\r\n\r\nlet resized = false\r\n\r\nexport const setSerializationResized = v => { resized = v }\r\n\r\nconst canonicalize = (target) => {\r\n  let componentProps = []\r\n  let changedProps = new Set()\r\n  if (Array.isArray(target)) {\r\n    componentProps = target\r\n      .map(p => {\r\n        if (typeof p === 'function' && p.name === 'QueryChanged') {\r\n          p()[$storeFlattened].forEach(prop => {\r\n            changedProps.add(prop)\r\n          })\r\n          return p()[$storeFlattened]\r\n        }\r\n        if (Object.getOwnPropertySymbols(p).includes($storeFlattened)) {\r\n          return p[$storeFlattened]\r\n        }\r\n        if (Object.getOwnPropertySymbols(p).includes($storeBase)) {\r\n          return p\r\n        }\r\n      })\r\n      .reduce((a,v) => a.concat(v), [])\r\n  }\r\n  return [componentProps, changedProps]\r\n}\r\n\r\nexport const defineSerializer = (target, maxBytes = 20000000) => {\r\n  const isWorld = Object.getOwnPropertySymbols(target).includes($componentMap)\r\n\r\n  let [componentProps, changedProps] = canonicalize(target)\r\n\r\n  // TODO: calculate max bytes based on target\r\n\r\n  const buffer = new ArrayBuffer(maxBytes)\r\n  const view = new DataView(buffer)\r\n\r\n  return ents => {\r\n\r\n    if (resized) {\r\n      [componentProps, changedProps] = canonicalize(target)\r\n      resized = false\r\n    }\r\n\r\n    if (isWorld) {\r\n      componentProps = []\r\n      target[$componentMap].forEach((c, component) => {\r\n        if (component[$storeFlattened])\r\n          componentProps.push(...component[$storeFlattened])\r\n        else componentProps.push(component)\r\n      })\r\n    }\r\n    \r\n    let world\r\n    if (Object.getOwnPropertySymbols(ents).includes($componentMap)) {\r\n      world = ents\r\n      ents = ents[$entityArray]\r\n    } else {\r\n      world = eidToWorld.get(ents[0])\r\n    }\r\n\r\n    if (!ents.length) return\r\n\r\n    let where = 0\r\n\r\n    // iterate over component props\r\n    for (let pid = 0; pid < componentProps.length; pid++) {\r\n      const prop = componentProps[pid]\r\n      const diff = changedProps.has(prop)\r\n      \r\n      // write pid\r\n      view.setUint8(where, pid)\r\n      where += 1\r\n\r\n      // save space for entity count\r\n      const countWhere = where\r\n      where += 4\r\n      \r\n      let count = 0\r\n      // write eid,val\r\n      for (let i = 0; i < ents.length; i++) {\r\n        const eid = ents[i]\r\n\r\n        // skip if entity doesn't have this component\r\n        if (!hasComponent(world, prop[$storeBase](), eid)) {\r\n          continue\r\n        }\r\n\r\n        // skip if diffing and no change\r\n        if (diff && prop[eid] === prop[$serializeShadow][eid]) {\r\n          continue\r\n        }\r\n        \r\n        count++\r\n\r\n        // write eid\r\n        view.setUint32(where, eid)\r\n        where += 4\r\n\r\n        if (prop[$tagStore]) {\r\n          continue\r\n        }\r\n\r\n        // if property is an array\r\n        if (ArrayBuffer.isView(prop[eid])) {\r\n          const type = prop[eid].constructor.name.replace('Array', '')\r\n          const indexType = prop[eid][$indexType]\r\n          const indexBytes = prop[eid][$indexBytes]\r\n\r\n          // add space for count of dirty array elements\r\n          const countWhere2 = where\r\n          where += 1\r\n\r\n          let count2 = 0\r\n\r\n          // write index,value\r\n          for (let i = 0; i < prop[eid].length; i++) {\r\n            const value = prop[eid][i]\r\n\r\n            if (diff && prop[eid][i] === prop[eid][$serializeShadow][i]) {\r\n              continue\r\n            }\r\n\r\n            // write array index\r\n            view[`set${indexType}`](where, i)\r\n            where += indexBytes\r\n\r\n            // write value at that index\r\n            view[`set${type}`](where, value)\r\n            where += prop[eid].BYTES_PER_ELEMENT\r\n            count2++\r\n          }\r\n\r\n          // write total element count\r\n          view[`set${indexType}`](countWhere2, count2)\r\n\r\n        } else {\r\n          // regular property values\r\n          const type = prop.constructor.name.replace('Array', '')\r\n          // set value next [type] bytes\r\n          view[`set${type}`](where, prop[eid])\r\n          where += prop.BYTES_PER_ELEMENT\r\n\r\n          // sync shadow state\r\n          prop[$serializeShadow][eid] = prop[eid]\r\n        }\r\n      }\r\n\r\n      view.setUint32(countWhere, count)\r\n    }\r\n    return buffer.slice(0, where)\r\n  }\r\n}\r\n\r\nexport const defineDeserializer = (target) => {\r\n  const isWorld = Object.getOwnPropertySymbols(target).includes($componentMap)\r\n  let [componentProps] = canonicalize(target)\r\n  return (world, packet) => {\r\n    \r\n    if (resized) {\r\n      [componentProps] = canonicalize(target)\r\n      resized = false\r\n    }\r\n\r\n    if (isWorld) {\r\n      componentProps = []\r\n      target[$componentMap].forEach((c, component) => {\r\n        if (component[$storeFlattened])\r\n          componentProps.push(...component[$storeFlattened])\r\n        else componentProps.push(component)\r\n      })\r\n    }\r\n\r\n    const view = new DataView(packet)\r\n    let where = 0\r\n\r\n    const newEntities = new Map()\r\n\r\n    while (where < packet.byteLength) {\r\n\r\n      // pid\r\n      const pid = view.getUint8(where)\r\n      where += 1\r\n\r\n      // entity count\r\n      const entityCount = view.getUint32(where)\r\n      where += 4\r\n\r\n      // component property\r\n      const prop = componentProps[pid]\r\n\r\n      // Get the entities and set their prop values\r\n      for (let i = 0; i < entityCount; i++) {\r\n        let eid = view.getUint32(where)\r\n        where += 4\r\n\r\n        let newEid = newEntities.get(eid)\r\n        if (newEid !== undefined) {\r\n          eid = newEid\r\n        }\r\n\r\n        // if this world hasn't seen this eid yet\r\n        if (!world[$entityEnabled][eid]) {\r\n          // make a new entity for the data\r\n          const newEid = addEntity(world)\r\n          newEntities.set(eid, newEid)\r\n          eid = newEid\r\n        }\r\n\r\n        const component = prop[$storeBase]()\r\n        if (!hasComponent(world, component, eid)) {\r\n          addComponent(world, component, eid)\r\n        }\r\n\r\n        if (component[$tagStore]) {\r\n          continue\r\n        }\r\n        \r\n        if (ArrayBuffer.isView(prop[eid])) {\r\n          const array = prop[eid]\r\n          const count = view[`get${array[$indexType]}`](where)\r\n          where += array[$indexBytes]\r\n\r\n          // iterate over count\r\n          for (let i = 0; i < count; i++) {\r\n            const index = view[`get${array[$indexType]}`](where)\r\n            where += array[$indexBytes]\r\n\r\n            const value = view[`get${array.constructor.name.replace('Array', '')}`](where)\r\n            where += array.BYTES_PER_ELEMENT\r\n\r\n            prop[eid][index] = value\r\n          }\r\n        } else {\r\n          const value = view[`get${prop.constructor.name.replace('Array', '')}`](where)\r\n          where += prop.BYTES_PER_ELEMENT\r\n\r\n          prop[eid] = value\r\n        }\r\n      }\r\n    }\r\n  }\r\n}", "import { $componentMap, resizeComponents } from './Component.js'\r\nimport { $queries, $queryMap, queryRemoveEntity } from './Query.js'\r\nimport { resize, resizeStore } from './Storage.js'\r\nimport { $size, $resizeThreshold, worlds, resizeWorlds } from './World.js'\r\nimport { setSerializationResized } from './Serialize.js'\r\n\r\nexport const $entityMasks = Symbol('entityMasks')\r\nexport const $entityEnabled = Symbol('entityEnabled')\r\nexport const $entityArray = Symbol('entityArray')\r\nexport const $entityIndices = Symbol('entityIndices')\r\nexport const $removedEntities = Symbol('removedEntities')\r\n\r\nconst NONE = 2**32\r\n\r\nexport const defaultSize = 100000\r\n\r\n// need a global EID cursor which all worlds and all components know about\r\n// so that world entities can posess entire rows spanning all component tables\r\nlet globalEntityCursor = 0\r\nlet globalSize = defaultSize\r\nlet resizeThreshold = () => globalSize - (globalSize / 5)\r\n\r\nexport const getGlobalSize = () => globalSize\r\n\r\n// removed eids should also be global to prevent memory leaks\r\nconst removed = []\r\n\r\nexport const resetGlobals = () => {\r\n  globalSize = defaultSize\r\n  globalEntityCursor = 0\r\n  removed.length = 0\r\n}\r\n\r\nexport const getEntityCursor = () => globalEntityCursor\r\nexport const getRemovedEntities = () => removed\r\n\r\nexport const eidToWorld = new Map()\r\n\r\nexport const addEntity = (world) => {\r\n  const enabled = world[$entityEnabled]\r\n  \r\n  const eid = removed.length > 0 ? removed.shift() : globalEntityCursor++\r\n  enabled[eid] = 1\r\n  world[$entityIndices][eid] = world[$entityArray].push(eid) - 1\r\n  eidToWorld.set(eid, world)\r\n\r\n  // if data stores are 80% full\r\n  if (globalEntityCursor >= resizeThreshold()) {\r\n    // grow by half the original size rounded up to a multiple of 4\r\n    const size = globalSize\r\n    const amount = Math.ceil((size/2) / 4) * 4\r\n    const newSize = size + amount\r\n    globalSize = newSize\r\n    resizeWorlds(newSize)\r\n    resizeComponents(newSize)\r\n    setSerializationResized(true)\r\n    console.info(`\uD83D\uDC7E bitECS - resizing all worlds from ${size} to ${size+amount}`)\r\n  }\r\n\r\n  return eid\r\n}\r\n\r\nconst popSwap = (world, eid) => {\r\n  // pop swap\r\n  const index = world[$entityIndices][eid]\r\n\r\n  const swapped = world[$entityArray].pop()\r\n  if (swapped !== eid) {\r\n    world[$entityArray][index] = swapped\r\n    world[$entityIndices][swapped] = index\r\n  }\r\n  world[$entityIndices][eid] = NONE\r\n}\r\n\r\nexport const removeEntity = (world, eid) => {\r\n  const enabled = world[$entityEnabled]\r\n\r\n  // Check if entity is already removed\r\n  if (enabled[eid] === 0) return\r\n\r\n  // Remove entity from all queries\r\n  // TODO: archetype graph\r\n  world[$queries].forEach(query => {\r\n    queryRemoveEntity(world, query, eid)\r\n  })\r\n\r\n  // Free the entity\r\n  removed.push(eid)\r\n  enabled[eid] = 0\r\n\r\n  // pop swap\r\n  popSwap(world, eid)\r\n\r\n  // Clear entity bitmasks\r\n  for (let i = 0; i < world[$entityMasks].length; i++) world[$entityMasks][i][eid] = 0\r\n}", "import { $queryShadow, $storeFlattened, $storeSize } from './Storage.js'\r\nimport { $componentMap, registerComponent } from './Component.js'\r\nimport { $entityMasks, $entityEnabled, getEntityCursor } from './Entity.js'\r\n\r\nexport function Not(c) { return function QueryNot() { return c } }\r\nexport function Changed(c) { return function QueryChanged() { return c } }\r\n\r\nexport const $queries = Symbol('queries')\r\nexport const $queryMap = Symbol('queryMap')\r\nexport const $dirtyQueries = Symbol('$dirtyQueries')\r\nexport const $queryComponents = Symbol('queryComponents')\r\nexport const $enterQuery = Symbol('enterQuery')\r\nexport const $exitQuery = Symbol('exitQuery')\r\n\r\nconst NONE = 2**32\r\n\r\nexport const enterQuery = query => world => {\r\n  if (!world[$queryMap].has(query)) registerQuery(world, query)\r\n  const q = world[$queryMap].get(query)\r\n  return q.entered.splice(0)\r\n}\r\n\r\nexport const exitQuery = query => world => {\r\n  if (!world[$queryMap].has(query)) registerQuery(world, query)\r\n  const q = world[$queryMap].get(query)\r\n  return q.exited.splice(0)\r\n}\r\n\r\nexport const registerQuery = (world, query) => {\r\n\r\n  let components = []\r\n  let notComponents = []\r\n  let changedComponents = []\r\n\r\n  query[$queryComponents].forEach(c => {\r\n    if (typeof c === 'function') {\r\n      if (c.name === 'QueryNot') {\r\n        notComponents.push(c())\r\n      }\r\n      if (c.name === 'QueryChanged') {\r\n        changedComponents.push(c())\r\n        components.push(c())\r\n      }\r\n    } else {\r\n      components.push(c)\r\n    }\r\n  })\r\n\r\n  const mapComponents = c => world[$componentMap].get(c)\r\n\r\n  const size = components.concat(notComponents).reduce((a,c) => c[$storeSize] > a ? c[$storeSize] : a, 0)\r\n\r\n  const entities = []\r\n  const changed = []\r\n  const indices = new Uint32Array(size).fill(NONE)\r\n  const enabled = new Uint8Array(size)\r\n  const generations = components\r\n    .concat(notComponents)\r\n    .map (c => {\r\n      if (!world[$componentMap].has(c)) registerComponent(world, c)\r\n      return c\r\n    })\r\n    .map(mapComponents)\r\n    .map(c => c.generationId)\r\n    .reduce((a,v) => {\r\n      if (a.includes(v)) return a\r\n      a.push(v)\r\n      return a\r\n    }, [])\r\n\r\n  const reduceBitmasks = (a,c) => {\r\n    if (!a[c.generationId]) a[c.generationId] = 0\r\n    a[c.generationId] |= c.bitflag\r\n    return a\r\n  }\r\n  const masks = components\r\n    .map(mapComponents)\r\n    .reduce(reduceBitmasks, {})\r\n\r\n  const notMasks = notComponents\r\n    .map(mapComponents)\r\n    .reduce((a,c) => {\r\n      if (!a[c.generationId]) {\r\n        a[c.generationId] = 0\r\n        a[c.generationId] |= c.bitflag\r\n      }\r\n      return a\r\n    }, {})\r\n\r\n  const flatProps = components\r\n    .map(c => Object.getOwnPropertySymbols(c).includes($storeFlattened) ? c[$storeFlattened] : [c])\r\n    .reduce((a,v) => a.concat(v), [])\r\n\r\n  const toRemove = []\r\n  const entered = []\r\n  const exited = []\r\n\r\n  world[$queryMap].set(query, { \r\n    entities,\r\n    changed,\r\n    enabled,\r\n    components,\r\n    notComponents,\r\n    changedComponents,\r\n    masks,\r\n    notMasks,\r\n    generations,\r\n    indices,\r\n    flatProps,\r\n    toRemove,\r\n    entered,\r\n    exited,\r\n  })\r\n  \r\n  world[$queries].add(query)\r\n\r\n  for (let eid = 0; eid < getEntityCursor(); eid++) {\r\n    if (!world[$entityEnabled][eid]) continue\r\n    if (queryCheckEntity(world, query, eid)) {\r\n      queryAddEntity(world, query, eid)\r\n    }\r\n  }\r\n}\r\n\r\nconst diff = (q) => {\r\n  q.changed.length = 0\r\n  const flat = q.flatProps\r\n  for (let i = 0; i < q.entities.length; i++) {\r\n    const eid = q.entities[i]\r\n    let dirty = false\r\n    for (let pid = 0; pid < flat.length; pid++) {\r\n      const prop = flat[pid]\r\n      if (ArrayBuffer.isView(prop[eid])) {\r\n        for (let i = 0; i < prop[eid].length; i++) {\r\n          if (prop[eid][i] !== prop[eid][$queryShadow][i]) {\r\n            dirty = true\r\n            prop[eid][$queryShadow][i] = prop[eid][i]\r\n          }\r\n        }\r\n      } else {\r\n        if (prop[eid] !== prop[$queryShadow][eid]) {\r\n          dirty = true\r\n          prop[$queryShadow][eid] = prop[eid]\r\n        }\r\n      }\r\n    }\r\n    if (dirty) q.changed.push(eid)\r\n  }\r\n  return q.changed\r\n}\r\n\r\nexport const defineQuery = (components) => {\r\n  const query = function (world) {\r\n    if (!world[$queryMap].has(query)) registerQuery(world, query)\r\n    const q = world[$queryMap].get(query) \r\n    // queryHooks(q)\r\n    queryCommitRemovals(world, q)\r\n    if (q.changedComponents.length) return diff(q)\r\n    return q.entities\r\n  }\r\n  query[$queryComponents] = components\r\n  return query\r\n}\r\n\r\n// TODO: archetype graph\r\nexport const queryCheckEntity = (world, query, eid) => {\r\n  const { masks, notMasks, generations } = world[$queryMap].get(query)\r\n  for (let i = 0; i < generations.length; i++) {\r\n    const generationId = generations[i]\r\n    const qMask = masks[generationId]\r\n    const qNotMask = notMasks[generationId]\r\n    const eMask = world[$entityMasks][generationId][eid]\r\n    if (qNotMask && (eMask & qNotMask) !== 0) {\r\n      return false\r\n    }\r\n    if (qMask && (eMask & qMask) !== qMask) {\r\n      return false\r\n    }\r\n  }\r\n  return true\r\n}\r\n\r\nexport const queryCheckComponent = (world, query, component) => {\r\n  const { generationId, bitflag } = world[$componentMap].get(component)\r\n  const { masks } = world[$queryMap].get(query)\r\n  const mask = masks[generationId]\r\n  return (mask & bitflag) === bitflag\r\n}\r\n\r\nexport const queryAddEntity = (world, query, eid) => {\r\n  const q = world[$queryMap].get(query)\r\n  if (q.enabled[eid]) return\r\n  q.enabled[eid] = true\r\n  q.entities.push(eid)\r\n  q.indices[eid] = q.entities.length - 1\r\n  // TODO: pop swap so dupes don't enter\r\n  q.entered.push(eid)\r\n}\r\n\r\nconst queryCommitRemovals = (world, q) => {\r\n  while (q.toRemove.length) {\r\n    const eid = q.toRemove.pop()\r\n    const index = q.indices[eid]\r\n    if (index === NONE) continue\r\n\r\n    const swapped = q.entities.pop()\r\n    if (swapped !== eid) {\r\n      q.entities[index] = swapped\r\n      q.indices[swapped] = index\r\n    }\r\n    q.indices[eid] = NONE\r\n  }\r\n  world[$dirtyQueries].delete(q)\r\n}\r\n\r\nexport const commitRemovals = (world) => {\r\n  world[$dirtyQueries].forEach(q => {\r\n    queryCommitRemovals(world, q)\r\n  })\r\n}\r\n\r\nexport const queryRemoveEntity = (world, query, eid) => {\r\n  const q = world[$queryMap].get(query)\r\n  if (!q.enabled[eid]) return\r\n  q.enabled[eid] = false\r\n  q.toRemove.push(eid)\r\n  world[$dirtyQueries].add(q)\r\n  // TODO: pop swap so dupes don't enter\r\n  q.exited.push(eid)\r\n}\r\n", "import { $storeSize, createStore, resetStoreFor, resizeStore } from './Storage.js'\r\nimport { $queries, queryAddEntity, queryRemoveEntity, queryCheckEntity, queryCheckComponent } from './Query.js'\r\nimport { $bitflag, $size } from './World.js'\r\nimport { $entityMasks, defaultSize } from './Entity.js'\r\n\r\nexport const $componentMap = Symbol('componentMap')\r\n\r\nexport const components = []\r\n\r\nexport const resizeComponents = (size) => {\r\n  components.forEach(component => resizeStore(component, size))\r\n}\r\n\r\nexport const defineComponent = (schema) => {\r\n  const component = createStore(schema, defaultSize)\r\n  if (schema && Object.keys(schema).length) components.push(component)\r\n  return component\r\n}\r\n\r\nexport const incrementBitflag = (world) => {\r\n  world[$bitflag] *= 2\r\n  if (world[$bitflag] >= 2**32) {\r\n    world[$bitflag] = 1\r\n    world[$entityMasks].push(new Uint32Array(world[$size]))\r\n  }\r\n}\r\n\r\nexport const registerComponent = (world, component) => {\r\n  world[$componentMap].set(component, { \r\n    generationId: world[$entityMasks].length - 1,\r\n    bitflag: world[$bitflag],\r\n    store: component\r\n  })\r\n\r\n  if (component[$storeSize] < world[$size]) {\r\n    resizeStore(component, world[$size])\r\n  }\r\n\r\n  incrementBitflag(world)\r\n}\r\n\r\nexport const registerComponents = (world, components) => {\r\n  components.forEach(c => registerComponent(world, c))\r\n}\r\n\r\nexport const hasComponent = (world, component, eid) => {\r\n  const registeredComponent = world[$componentMap].get(component)\r\n  if (!registeredComponent) return\r\n  const { generationId, bitflag } = registeredComponent\r\n  const mask = world[$entityMasks][generationId][eid]\r\n  return (mask & bitflag) === bitflag\r\n}\r\n\r\nexport const addComponent = (world, component, eid, reset=false) => {\r\n  if (!world[$componentMap].has(component)) registerComponent(world, component)\r\n  if (hasComponent(world, component, eid)) return\r\n  // Add bitflag to entity bitmask\r\n  const { generationId, bitflag } = world[$componentMap].get(component)\r\n  world[$entityMasks][generationId][eid] |= bitflag\r\n\r\n  // todo: archetype graph\r\n  world[$queries].forEach(query => {\r\n    if (!queryCheckComponent(world, query, component)) return\r\n    const match = queryCheckEntity(world, query, eid)\r\n    if (match) queryAddEntity(world, query, eid)\r\n  })\r\n  \r\n  // Zero out each property value\r\n  if (reset) resetStoreFor(component, eid)\r\n}\r\n\r\nexport const removeComponent = (world, component, eid, reset=true) => {\r\n  const { generationId, bitflag } = world[$componentMap].get(component)\r\n\r\n  if (!(world[$entityMasks][generationId][eid] & bitflag)) return\r\n\r\n  // todo: archetype graph\r\n  world[$queries].forEach(query => {\r\n    if (!queryCheckComponent(world, query, component)) return\r\n    const match = queryCheckEntity(world, query, eid)\r\n    if (match) queryRemoveEntity(world, query, eid)\r\n  })\r\n\r\n  // Remove flag from entity bitmask\r\n  world[$entityMasks][generationId][eid] &= ~bitflag\r\n  \r\n  // Zero out each property value\r\n  if (reset) resetStoreFor(component, eid)\r\n}\r\n", "import { $componentMap } from './Component.js'\r\nimport { $queryMap, $queries, $dirtyQueries } from './Query.js'\r\nimport { $entityArray, $entityIndices, $entityEnabled, $entityMasks, getGlobalSize } from './Entity.js'\r\nimport { resize } from './Storage.js'\r\n\r\nexport const $size = Symbol('size')\r\nexport const $resizeThreshold = Symbol('resizeThreshold')\r\nexport const $bitflag = Symbol('bitflag')\r\n\r\n\r\nexport const worlds = []\r\n\r\nexport const resizeWorlds = (size) => {\r\n  worlds.forEach(world => {\r\n    world[$size] = size\r\n    \r\n    world[$queryMap].forEach(q => {\r\n      q.indices = resize(q.indices, size)\r\n      q.enabled = resize(q.enabled, size)\r\n    })\r\n    \r\n    world[$entityEnabled] = resize(world[$entityEnabled], size)\r\n    world[$entityIndices] = resize(world[$entityIndices], size)\r\n    \r\n    for (let i = 0; i < world[$entityMasks].length; i++) {\r\n      const masks = world[$entityMasks][i];\r\n      world[$entityMasks][i] = resize(masks, size)\r\n    }\r\n    \r\n    world[$resizeThreshold] = world[$size] - (world[$size] / 5)\r\n  })\r\n}\r\n\r\nexport const createWorld = () => {\r\n  const world = {}\r\n  const size = getGlobalSize()\r\n\r\n  world[$size] = size\r\n\r\n  world[$entityEnabled] = new Uint8Array(size)\r\n  world[$entityMasks] = [new Uint32Array(size)]\r\n\r\n  world[$entityArray] = []\r\n  world[$entityIndices] = new Uint32Array(size)\r\n\r\n  world[$bitflag] = 1\r\n\r\n  world[$componentMap] = new Map()\r\n\r\n  world[$queryMap] = new Map()\r\n  world[$queries] = new Set()\r\n  world[$dirtyQueries] = new Set()\r\n\r\n  worlds.push(world)\r\n\r\n  return world\r\n}\r\n", "import { commitRemovals } from './Query.js'\r\n\r\nexport const defineSystem = (fn1, fn2) => {\r\n  const update = fn2 !== undefined ? fn2 : fn1\r\n  const create = fn2 !== undefined ? fn1 : undefined\r\n  const init = new Set()\r\n  const system = world => {\r\n    if (create && !init.has(world)) {\r\n      create(world)\r\n      init.add(world)\r\n    }\r\n    update(world)\r\n    commitRemovals(world)\r\n    return world\r\n  }\r\n\r\n  Object.defineProperty(system, 'name', {\r\n    value: (update.name || \"AnonymousSystem\") + \"_internal\",\r\n    configurable: true,\r\n  })\r\n\r\n  return system\r\n}", "import { createWorld } from './World.js'\r\nimport { addEntity, removeEntity } from './Entity.js'\r\nimport { defineComponent, registerComponent, registerComponents, hasComponent, addComponent, removeComponent } from './Component.js'\r\nimport { defineSystem } from './System.js'\r\nimport { defineQuery, enterQuery, exitQuery, Changed, Not, commitRemovals } from './Query.js'\r\nimport { defineSerializer, defineDeserializer } from './Serialize.js'\r\nimport { TYPES_ENUM } from './Storage.js'\r\n\r\nexport const pipe = (...fns) => input => {\r\n  if (!input || Array.isArray(input) && input.length === 0) return\r\n  fns = Array.isArray(fns[0]) ? fns[0] : fns\r\n  let tmp = input\r\n  for (let i = 0; i < fns.length; i++) {\r\n    const fn = fns[i]\r\n    if (Array.isArray(tmp)) {\r\n      tmp = tmp.reduce((a,v) => a.concat(fn(v)),[])\r\n    } else {\r\n      tmp = fn(tmp)\r\n    }\r\n  }\r\n  return tmp\r\n}\r\n\r\nexport const Types = TYPES_ENUM\r\n\r\nexport {\r\n\r\n  createWorld,\r\n  addEntity,\r\n  removeEntity,\r\n\r\n  registerComponent,\r\n  registerComponents,\r\n  defineComponent,\r\n  addComponent,\r\n  removeComponent,\r\n  hasComponent,\r\n  \r\n  defineQuery,\r\n  Changed,\r\n  Not,\r\n  enterQuery,\r\n  exitQuery,\r\n  commitRemovals,\r\n\r\n  defineSystem,\r\n  \r\n  defineSerializer,\r\n  defineDeserializer,\r\n\r\n}\r\n", "import { Types, defineComponent } from 'bitecs';\n\nconst QuadVertex = defineComponent({\n    v1: Types.ui32,\n    v2: Types.ui32,\n    v3: Types.ui32,\n    v4: Types.ui32\n});\n\nexport const QuadVertexComponent = QuadVertex;\n", "import { Types, defineComponent } from 'bitecs';\n\nconst Extent2D = defineComponent({\n    x: Types.f32,\n    y: Types.f32,\n    width: Types.f32,\n    height: Types.f32,\n    right: Types.f32,\n    bottom: Types.f32\n});\n\nexport const Extent2DComponent = Extent2D;\n", "import { Types, defineComponent } from 'bitecs';\n\nconst Dirty = defineComponent({\n    frame: Types.ui32,\n    transform: Types.ui32,\n    update: Types.ui32,\n    childCache: Types.ui32,\n    postRender: Types.ui32,\n    vertexColors: Types.ui32,\n    bounds: Types.ui32,\n    texture: Types.ui32,\n    textureFrame: Types.ui32,\n    alpha: Types.ui32,\n    child: Types.ui32\n});\n\nexport const DirtyComponent = Dirty;\n", "import { createWorld } from 'bitecs';\n\nconst world = createWorld();\n\nexport const GameObjectWorld = world;\n", "import { DirtyComponent } from './DirtyComponent';\nimport { GameObjectWorld } from '../GameObjectWorld';\nimport { addComponent } from 'bitecs';\n\nexport function AddDirtyComponent (id: number): void\n{\n    addComponent(GameObjectWorld, DirtyComponent, id);\n\n    DirtyComponent.frame[id] = 0;\n    DirtyComponent.transform[id] = 1;\n    DirtyComponent.update[id] = 1;\n    DirtyComponent.childCache[id] = 0;\n    DirtyComponent.postRender[id] = 0;\n    DirtyComponent.vertexColors[id] = 1;\n    DirtyComponent.bounds[id] = 1;\n    DirtyComponent.texture[id] = 0;\n    DirtyComponent.textureFrame[id] = 0;\n    DirtyComponent.alpha[id] = 0;\n    DirtyComponent.child[id] = 0;\n}\n", "import { DirtyComponent } from './DirtyComponent';\n\nexport function HasDirtyChildCache (id: number): boolean\n{\n    return Boolean(DirtyComponent.childCache[id]);\n}\n", "import { DirtyComponent } from './DirtyComponent';\n\nexport function HasDirtyTransform (id: number): boolean\n{\n    return Boolean(DirtyComponent.transform[id]);\n}\n", "import { DirtyComponent } from './DirtyComponent';\n\nexport function IsDirtyFrame (id: number, gameFrame: number): boolean\n{\n    return DirtyComponent.frame[id] >= gameFrame;\n}\n", "import { DirtyComponent } from './DirtyComponent';\n\nexport function SetDirtyChildCache (id: number): void\n{\n    DirtyComponent.childCache[id] = 1;\n}\n", "import { Game } from './Game';\n\nexport let instance: Game;\nexport let frame: number = 0;\nexport let elapsed: number = 0;\n\nexport const GameInstance =\n{\n    get: (): Game =>\n    {\n        return instance;\n    },\n\n    set: (game: Game | undefined): void =>\n    {\n        instance = game;\n    },\n\n    getFrame: (): number =>\n    {\n        return frame;\n    },\n\n    setFrame: (current: number): void =>\n    {\n        frame = current;\n    },\n\n    getElapsed: (): number =>\n    {\n        return elapsed;\n    },\n\n    setElapsed: (current: number): void =>\n    {\n        elapsed = current;\n    }\n\n};\n", "import { DirtyComponent } from './DirtyComponent';\n\nexport function SetDirtyTransform (id: number): void\n{\n    DirtyComponent.transform[id] = 1;\n}\n", "import { Extent2DComponent } from './Extent2DComponent';\nimport { SetDirtyTransform } from '../dirty';\n\n//  The area covered by this transform component + origin + size (usually from a Frame)\n\nexport function SetExtent (id: number, x: number, y: number, width: number, height: number): void\n{\n    Extent2DComponent.x[id] = x;\n    Extent2DComponent.y[id] = y;\n    Extent2DComponent.width[id] = width;\n    Extent2DComponent.height[id] = height;\n    Extent2DComponent.right[id] = x + width;\n    Extent2DComponent.bottom[id] = y + height;\n\n    SetDirtyTransform(id);\n}\n", "import { Types, defineComponent } from 'bitecs';\n\nconst Vertex = defineComponent({\n    x: Types.f32,\n    y: Types.f32,\n    z: Types.f32,\n    u: Types.f32,\n    v: Types.f32,\n    texture: Types.ui8,\n    tint: Types.ui32,\n    alpha: Types.f32,\n    color: Types.ui32\n});\n\nexport const VertexComponent = Vertex;\n", "import { VertexComponent } from './VertexComponent';\n\nexport function SetUV (id: number, u: number, v: number): void\n{\n    VertexComponent.u[id] = u;\n    VertexComponent.v[id] = v;\n}\n", "import { IContainer } from '../gameobjects/container/IContainer';\nimport { IFrame } from './IFrame';\nimport { QuadVertexComponent } from '../components/vertices/QuadVertexComponent';\nimport { SetExtent } from '../components/transform/SetExtent';\nimport { SetUV } from '../components/vertices/SetUV';\nimport { Texture } from './Texture';\nimport { Vertex } from '../components';\n\nexport class Frame implements IFrame\n{\n    texture: Texture;\n    key: string | number;\n\n    //  This is the actual area of the texture to draw to canvas / webgl, including any extruded data.\n    //  This is the same as the 'trimmed' + 'extruded' area from an atlas.\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n\n    trimmed: boolean = false;\n\n    //  Original size of the image before being trimmed or added to an atlas (which can add extrude data to it).\n    sourceSizeWidth: number;\n    sourceSizeHeight: number;\n\n    //  The size of the image having been trimmed, before being added to the atlas (i.e. doesn't have any extrusion values in it)\n    spriteSourceSizeX: number;\n    spriteSourceSizeY: number;\n    spriteSourceSizeWidth: number;\n    spriteSourceSizeHeight: number;\n\n    pivot: { x: number; y: number };\n\n    u0: number;\n    v0: number;\n    u1: number;\n    v1: number;\n\n    constructor (texture: Texture, key: string | number, x: number, y: number, width: number, height: number)\n    {\n        this.texture = texture;\n        this.key = key;\n\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n\n        this.sourceSizeWidth = width;\n        this.sourceSizeHeight = height;\n\n        this.updateUVs();\n    }\n\n    setPivot (x: number, y: number): void\n    {\n        this.pivot = { x, y };\n    }\n\n    setSize (width: number, height: number): void\n    {\n        this.width = width;\n        this.height = height;\n        this.sourceSizeWidth = width;\n        this.sourceSizeHeight = height;\n\n        this.updateUVs();\n    }\n\n    setSourceSize (width: number, height: number): void\n    {\n        this.sourceSizeWidth = width;\n        this.sourceSizeHeight = height;\n    }\n\n    setTrim (width: number, height: number, x: number, y: number, w: number, h: number): void\n    {\n        this.trimmed = true;\n\n        this.sourceSizeWidth = width;\n        this.sourceSizeHeight = height;\n\n        this.spriteSourceSizeX = x;\n        this.spriteSourceSizeY = y;\n        this.spriteSourceSizeWidth = w;\n        this.spriteSourceSizeHeight = h;\n    }\n\n    getExtent (originX: number, originY: number): { left: number; right: number; top: number; bottom: number }\n    {\n        const sourceSizeWidth = this.sourceSizeWidth;\n        const sourceSizeHeight = this.sourceSizeHeight;\n\n        let left: number;\n        let right: number;\n        let top: number;\n        let bottom: number;\n\n        if (this.trimmed)\n        {\n            left = this.spriteSourceSizeX - (originX * sourceSizeWidth);\n            right = left + this.spriteSourceSizeWidth;\n\n            top = this.spriteSourceSizeY - (originY * sourceSizeHeight);\n            bottom = top + this.spriteSourceSizeHeight;\n        }\n        else\n        {\n            left = -originX * sourceSizeWidth;\n            right = left + sourceSizeWidth;\n\n            top = -originY * sourceSizeHeight;\n            bottom = top + sourceSizeHeight;\n        }\n\n        return { left, right, top, bottom };\n    }\n\n    copyToExtent (child: IContainer): this\n    {\n        const originX = child.originX;\n        const originY = child.originY;\n\n        const sourceSizeWidth = this.sourceSizeWidth;\n        const sourceSizeHeight = this.sourceSizeHeight;\n\n        let x: number;\n        let y: number;\n        let width: number;\n        let height: number;\n\n        if (this.trimmed)\n        {\n            x = this.spriteSourceSizeX - (originX * sourceSizeWidth);\n            y = this.spriteSourceSizeY - (originY * sourceSizeHeight);\n\n            width = this.spriteSourceSizeWidth;\n            height = this.spriteSourceSizeHeight;\n        }\n        else\n        {\n            x = -originX * sourceSizeWidth;\n            y = -originY * sourceSizeHeight;\n\n            width = sourceSizeWidth;\n            height = sourceSizeHeight;\n        }\n\n        SetExtent(child.id, x, y, width, height);\n\n        return this;\n    }\n\n    copyToVertices (id: number): this\n    {\n        const { u0, u1, v0, v1 } = this;\n\n        //  TODO: Move to a system based on frame change\n        SetUV(QuadVertexComponent.v1[id], u0, v0);\n        SetUV(QuadVertexComponent.v2[id], u0, v1);\n        SetUV(QuadVertexComponent.v3[id], u1, v1);\n        SetUV(QuadVertexComponent.v4[id], u1, v0);\n\n        // vertices[offset + 0].setUV(u0, v0);\n        // vertices[offset + 1].setUV(u0, v1);\n        // vertices[offset + 2].setUV(u1, v1);\n        // vertices[offset + 3].setUV(u1, v0);\n\n        return this;\n    }\n\n    updateUVs (): void\n    {\n        const { x, y, width, height } = this;\n\n        const baseTextureWidth = this.texture.width;\n        const baseTextureHeight = this.texture.height;\n\n        this.u0 = x / baseTextureWidth;\n        this.v0 = y / baseTextureHeight;\n\n        this.u1 = (x + width) / baseTextureWidth;\n        this.v1 = (y + height) / baseTextureHeight;\n    }\n\n    destroy (): void\n    {\n        this.texture = null;\n    }\n}\n", "import { BindingQueue } from '../renderer/BindingQueue';\nimport { Frame } from './Frame';\nimport { IGLTextureBinding } from '../renderer/webgl1/textures/IGLTextureBinding';\nimport { IGLTextureBindingConfig } from '../renderer/webgl1/textures/IGLTextureBindingConfig';\nimport { ITexture } from './ITexture';\n\nexport class Texture implements ITexture\n{\n    //  Unique identifier of this Texture, if stored in the Texture Manager\n    key: string = '';\n\n    width: number;\n    height: number;\n\n    image: TexImageSource;\n\n    binding: IGLTextureBinding;\n\n    firstFrame: Frame;\n\n    frames: Map<string | number, Frame>;\n\n    data: unknown;\n\n    constructor (image?: TexImageSource, width?: number, height?: number, glConfig?: IGLTextureBindingConfig)\n    {\n        if (image)\n        {\n            width = image.width;\n            height = image.height;\n        }\n\n        this.image = image;\n\n        this.width = width;\n        this.height = height;\n\n        this.frames = new Map();\n\n        this.data = {};\n\n        this.addFrame('__BASE', 0, 0, width, height);\n\n        BindingQueue.add(this, glConfig);\n    }\n\n    addFrame (key: string | number, x: number, y: number, width: number, height: number): Frame\n    {\n        if (this.frames.has(key))\n        {\n            return null;\n        }\n\n        const frame = new Frame(this, key, x, y, width, height);\n\n        this.frames.set(key, frame);\n\n        if (!this.firstFrame || this.firstFrame.key === '__BASE')\n        {\n            this.firstFrame = frame;\n        }\n\n        return frame;\n    }\n\n    getFrame (key?: string | number | Frame): Frame\n    {\n        //  null, undefined, empty string, zero\n        if (!key)\n        {\n            return this.firstFrame;\n        }\n\n        if (key instanceof Frame)\n        {\n            key = key.key;\n        }\n\n        let frame: Frame = this.frames.get(key);\n\n        if (!frame)\n        {\n            console.warn(`Frame missing: ${key}`);\n\n            frame = this.firstFrame;\n        }\n\n        return frame;\n    }\n\n    setSize (width: number, height: number): void\n    {\n        this.width = width;\n        this.height = height;\n\n        const frame = this.frames.get('__BASE');\n\n        frame.setSize(width, height);\n    }\n\n    destroy (): void\n    {\n        if (this.binding)\n        {\n            this.binding.destroy();\n        }\n\n        this.frames.clear();\n\n        this.data = null;\n        this.image = null;\n        this.firstFrame = null;\n    }\n}\n", "import { GetHeight, GetResolution, GetWidth } from '../../../config/size/';\n\nimport { CreateAttributes } from './CreateAttributes';\nimport { CreateDepthBuffer } from '../fbo/CreateDepthBuffer';\nimport { CreateFramebuffer } from '../fbo/CreateFramebuffer';\nimport { CreateProgram } from './CreateProgram';\nimport { CreateShader } from './CreateShader';\nimport { CreateUniforms } from './CreateUniforms';\nimport { DefaultQuadAttributes } from './DefaultQuadAttributes';\nimport { DefaultQuadUniforms } from './DefaultQuadUniforms';\nimport { DeleteFramebuffer } from '../fbo/DeleteFramebuffer';\nimport { DeleteGLTexture } from '../textures/DeleteGLTexture';\nimport { DeleteShaders } from './DeleteShaders';\nimport { GLTextureBinding } from '../textures/GLTextureBinding';\nimport { IRenderPass } from '../renderpass/IRenderPass';\nimport { IShader } from './IShader';\nimport { IShaderConfig } from './IShaderConfig';\nimport { IVertexAttribPointer } from './IVertexAttribPointer';\nimport { SINGLE_QUAD_FRAG } from '../glsl/SINGLE_QUAD_FRAG';\nimport { SINGLE_QUAD_VERT } from '../glsl/SINGLE_QUAD_VERT';\nimport { Texture } from '../../../textures/Texture';\nimport { gl } from '../GL';\n\nexport class Shader implements IShader\n{\n    program: WebGLProgram;\n\n    attributes: Map<string, IVertexAttribPointer>;\n\n    uniforms: Map<string, unknown>;\n\n    uniformSetters: Map<string, Function>;\n\n    texture: Texture;\n\n    framebuffer: WebGLFramebuffer;\n\n    renderToFramebuffer: boolean = false;\n\n    renderToDepthbuffer: boolean = false;\n\n    constructor (config?: IShaderConfig)\n    {\n        if (config)\n        {\n            this.fromConfig(config);\n        }\n    }\n\n    fromConfig (config: IShaderConfig): void\n    {\n        const {\n            attributes = DefaultQuadAttributes,\n            fragmentShader = SINGLE_QUAD_FRAG,\n            height = GetHeight(),\n            renderToFramebuffer = false,\n            renderToDepthbuffer = false,\n            resolution = GetResolution(),\n            vertexShader = SINGLE_QUAD_VERT,\n            width = GetWidth(),\n            uniforms = DefaultQuadUniforms\n        } = config;\n\n        this.create(fragmentShader, vertexShader, uniforms, attributes);\n\n        if (renderToFramebuffer)\n        {\n            this.renderToFramebuffer = true;\n\n            const texture = new Texture(null, width * resolution, height * resolution);\n            const binding = new GLTextureBinding(texture);\n\n            texture.binding = binding;\n\n            binding.framebuffer = CreateFramebuffer(binding.texture);\n\n            if (renderToDepthbuffer)\n            {\n                this.renderToDepthbuffer = true;\n\n                binding.depthbuffer = CreateDepthBuffer(binding.framebuffer, texture.width, texture.height);\n            }\n\n            this.texture = texture;\n            this.framebuffer = binding.framebuffer;\n        }\n    }\n\n    create (fragmentShaderSource: string, vertexShaderSource: string, uniforms: {}, attribs: {}): void\n    {\n        const fragmentShader = CreateShader(fragmentShaderSource, gl.FRAGMENT_SHADER);\n        const vertexShader = CreateShader(vertexShaderSource, gl.VERTEX_SHADER);\n\n        if (!fragmentShader || !vertexShader)\n        {\n            return;\n        }\n\n        const program = CreateProgram(fragmentShader, vertexShader);\n\n        if (!program)\n        {\n            return;\n        }\n\n        const currentProgram = gl.getParameter(gl.CURRENT_PROGRAM);\n\n        gl.useProgram(program);\n\n        this.program = program;\n\n        this.uniformSetters = CreateUniforms(program);\n\n        this.uniforms = new Map();\n\n        //  Copy starting values from the config object to the uniforms map\n        for (const [ key, value ] of Object.entries(uniforms))\n        {\n            this.uniforms.set(key, value);\n        }\n\n        this.attributes = CreateAttributes(program, attribs);\n\n        gl.useProgram(currentProgram);\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    updateUniforms (renderPass: IRenderPass): void\n    {\n        //  Use this to set any extra uniform values prior to the bind\n    }\n\n    bind (renderPass: IRenderPass): boolean\n    {\n        const uniforms = this.uniforms;\n\n        uniforms.set('uProjectionMatrix', renderPass.projectionMatrix.data);\n        uniforms.set('uCameraMatrix', renderPass.cameraMatrix.data);\n\n        this.updateUniforms(renderPass);\n\n        return this.setUniforms(renderPass);\n    }\n\n    setUniform (key: string, value: unknown): void\n    {\n        const uniforms = this.uniforms;\n\n        if (uniforms.has(key))\n        {\n            uniforms.set(key, value);\n\n            const setter = this.uniformSetters.get(key);\n\n            setter(value);\n        }\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    setUniforms (renderPass: IRenderPass): boolean\n    {\n        if (!this.program)\n        {\n            return false;\n        }\n\n        gl.useProgram(this.program);\n\n        const uniforms = this.uniforms;\n\n        for (const [ name, setter ] of this.uniformSetters.entries())\n        {\n            setter(uniforms.get(name));\n        }\n\n        return true;\n    }\n\n    //  stride = vertexByteSize\n    setAttributes (renderPass: IRenderPass): void\n    {\n        if (this.program)\n        {\n            const stride = renderPass.currentVertexBuffer.vertexByteSize;\n\n            this.attributes.forEach(attrib =>\n            {\n                gl.vertexAttribPointer(attrib.index, attrib.size, attrib.type, attrib.normalized, stride, attrib.offset);\n            });\n        }\n    }\n\n    destroy (): void\n    {\n        DeleteShaders(this.program);\n        DeleteGLTexture(this.texture);\n        DeleteFramebuffer(this.framebuffer);\n\n        this.uniforms.clear();\n        this.uniformSetters.clear();\n        this.attributes.clear();\n\n        this.program = null;\n        this.texture = null;\n        this.framebuffer = null;\n    }\n}\n", "import { DefaultQuadAttributes } from './DefaultQuadAttributes';\nimport { IRenderPass } from '../renderpass/IRenderPass';\nimport { IShader } from './IShader';\nimport { IShaderConfig } from './IShaderConfig';\nimport { Shader } from './Shader';\n\nexport class QuadShader extends Shader implements IShader\n{\n    constructor (config: IShaderConfig = {})\n    {\n        const shaderConfig = config;\n\n        shaderConfig.attributes = (!shaderConfig.attributes) ? DefaultQuadAttributes : shaderConfig.attributes;\n\n        super(shaderConfig);\n    }\n\n    bind (renderPass: IRenderPass): boolean\n    {\n        const uniforms = this.uniforms;\n\n        uniforms.set('uProjectionMatrix', renderPass.projectionMatrix.data);\n        uniforms.set('uCameraMatrix', renderPass.cameraMatrix.data);\n\n        return super.bind(renderPass);\n    }\n}\n", "export const MULTI_QUAD_FRAG =\n`#define SHADER_NAME MULTI_QUAD_FRAG\n\nprecision highp float;\n\nvarying vec2 vTextureCoord;\nvarying float vTextureId;\nvarying vec4 vTintColor;\n\nuniform sampler2D uTexture[%count%];\n\nvoid main (void)\n{\n    vec4 color;\n\n    %forloop%\n\n    gl_FragColor = color * vec4(vTintColor.bgr * vTintColor.a, vTintColor.a);\n}`;\n", "import { GetMaxTextures } from '../../../config/maxtextures/GetMaxTextures';\nimport { IRenderPass } from '../renderpass/IRenderPass';\nimport { IShaderConfig } from './IShaderConfig';\nimport { MULTI_QUAD_FRAG } from '../glsl/MULTI_QUAD_FRAG';\nimport { QuadShader } from './QuadShader';\n\nexport class MultiTextureQuadShader extends QuadShader\n{\n    constructor (config: IShaderConfig = {})\n    {\n        if (!config.fragmentShader)\n        {\n            config.fragmentShader = MULTI_QUAD_FRAG;\n        }\n\n        super(config);\n    }\n\n    create (fragmentShaderSource: string, vertexShaderSource: string, uniforms: {}, attribs: {}): void\n    {\n        const maxTextures = GetMaxTextures();\n\n        let src = '';\n\n        for (let i = 1; i < maxTextures; i++)\n        {\n            if (i > 1)\n            {\n                src += '\\n\\telse ';\n            }\n\n            if (i < maxTextures - 1)\n            {\n                src += `if (vTextureId < ${i}.5)`;\n            }\n\n            src += '\\n\\t{';\n            src += `\\n\\t\\tcolor = texture2D(uTexture[${i}], vTextureCoord);`;\n            src += '\\n\\t}';\n        }\n\n        fragmentShaderSource = fragmentShaderSource.replace(/%count%/gi, `${maxTextures}`);\n        fragmentShaderSource = fragmentShaderSource.replace(/%forloop%/gi, src);\n\n        super.create(fragmentShaderSource, vertexShaderSource, uniforms, attribs);\n    }\n\n    bind (renderPass: IRenderPass): boolean\n    {\n        this.uniforms.set('uTexture', renderPass.textureIndex);\n\n        return super.bind(renderPass);\n    }\n}\n", "import { IRenderPass } from './IRenderPass';\n\nexport function SetDefaultBlendMode (renderPass: IRenderPass, enable: boolean, sfactor?: number, dfactor?: number): void\n{\n    const entry = { enable, sfactor, dfactor };\n\n    //  The default entry always goes into index zero\n    renderPass.blendModeStack[0] = entry;\n\n    renderPass.currentBlendMode = entry;\n    renderPass.defaultBlendMode = entry;\n}\n", "import { IRenderPass } from './IRenderPass';\nimport { Rectangle } from '../../../geom/rectangle/Rectangle';\n\nexport function SetDefaultFramebuffer (renderPass: IRenderPass, framebuffer: WebGLFramebuffer = null, viewport?: Rectangle): void\n{\n    const entry = { framebuffer, viewport };\n\n    //  The default entry always goes into index zero\n    renderPass.framebufferStack[0] = entry;\n\n    renderPass.currentFramebuffer = entry;\n    renderPass.defaultFramebuffer = entry;\n}\n", "import { IRenderPass } from './IRenderPass';\nimport { IShader } from '../shaders/IShader';\n\nexport function SetDefaultShader (renderPass: IRenderPass, shader: IShader, textureID?: number): void\n{\n    const entry = { shader, textureID };\n\n    //  The default entry always goes into index zero\n    renderPass.shaderStack[0] = entry;\n\n    renderPass.currentShader = entry;\n    renderPass.defaultShader = entry;\n}\n", "import { IRenderPass } from './IRenderPass';\nimport { IVertexBuffer } from '../buffers/IVertexBuffer';\n\nexport function SetDefaultVertexBuffer (renderPass: IRenderPass, buffer: IVertexBuffer): void\n{\n    //  The default entry always goes into index zero\n    renderPass.vertexBufferStack[0] = buffer;\n\n    renderPass.currentVertexBuffer = buffer;\n    renderPass.defaultVertexBuffer = buffer;\n}\n", "import { IRenderPass } from './IRenderPass';\nimport { Rectangle } from '../../../geom/rectangle/Rectangle';\n\nexport function SetDefaultViewport (renderPass: IRenderPass, x: number = 0, y: number = 0, width: number = 0, height: number = 0): void\n{\n    const entry = new Rectangle(x, y, width, height);\n\n    //  The default entry always goes into index zero\n    renderPass.viewportStack[0] = entry;\n\n    renderPass.currentViewport = entry;\n    renderPass.defaultViewport = entry;\n}\n", "import { Matrix4 } from './Matrix4';\n\nexport function Mat4Identity (matrix: Matrix4 = new Matrix4()): Matrix4\n{\n    return matrix.set(\n        1, 0, 0, 0,\n        0, 1, 0, 0,\n        0, 0, 1, 0,\n        0, 0, 0, 1\n    );\n}\n", "//  A Matrix2D contains six elements in a short-form of the 3x3 Matrix, with the last column ignored.\n\n//  |----|----|----|\n//  | a  | b  | 0  |\n//  |----|----|----|\n//  | c  | d  | 0  |\n//  |----|----|----|\n//  | tx | ty | 1  |\n//  |----|----|----|\n\nexport class Matrix2D\n{\n    a: number; // element 0\n    b: number; // element 1\n    c: number; // element 2\n    d: number; // element 3\n    tx: number; // element 4\n    ty: number; // element 5\n\n    /**\n     * Creates an instance of Matrix2D.\n     *\n     * @param {number} [a=1] - X scale.\n     * @param {number} [b=0] - X skew.\n     * @param {number} [c=0] - Y skew.\n     * @param {number} [d=1] - Y scale.\n     * @param {number} [tx=0] - X translation\n     * @param {number} [ty=0] - Y translation\n     * @memberof Matrix2D\n     */\n    constructor (a: number = 1, b: number = 0, c: number = 0, d: number = 1, tx: number = 0, ty: number = 0)\n    {\n        this.set(a, b, c, d, tx, ty);\n    }\n\n    set (a: number = 1, b: number = 0, c: number = 0, d: number = 1, tx: number = 0, ty: number = 0): this\n    {\n        this.a = a;\n        this.b = b;\n        this.c = c;\n        this.d = d;\n        this.tx = tx;\n        this.ty = ty;\n\n        return this;\n    }\n\n    identity (): this\n    {\n        return this.set();\n    }\n\n    toArray (): number[]\n    {\n        const  { a, b, c, d, tx, ty } = this;\n\n        return [ a, b, c, d, tx, ty ];\n    }\n\n    fromArray (src: number[]): Matrix2D\n    {\n        return this.set(src[0], src[1], src[2], src[3], src[4], src[5]);\n    }\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Find the angle of a segment from (x1, y1) -> (x2, y2).\n *\n * @function Phaser.Math.Angle.Between\n * @since 3.0.0\n *\n * @param {number} x1 - The x coordinate of the first point.\n * @param {number} y1 - The y coordinate of the first point.\n * @param {number} x2 - The x coordinate of the second point.\n * @param {number} y2 - The y coordinate of the second point.\n *\n * @return {number} The angle in radians.\n */\nexport function AngleBetween (x1: number, y1: number, x2: number, y2: number): number\n{\n    return Math.atan2(y2 - y1, x2 - x1);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Find the angle of a segment from (x1, y1) -> (x2, y2).\n *\n * The difference between this method and {@link Phaser.Math.Angle.Between} is that this assumes the y coordinate\n * travels down the screen.\n *\n * @function Phaser.Math.Angle.BetweenY\n * @since 3.0.0\n *\n * @param {number} x1 - The x coordinate of the first point.\n * @param {number} y1 - The y coordinate of the first point.\n * @param {number} x2 - The x coordinate of the second point.\n * @param {number} y2 - The y coordinate of the second point.\n *\n * @return {number} The angle in radians.\n */\nexport function AngleBetweenY (x1: number, y1: number, x2: number, y2: number): number\n{\n    return Math.atan2(x2 - x1, y2 - y1);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nexport const MATH_CONST = {\n\n    /**\n     * The value of PI * 2.\n     *\n     * @name Phaser.Math.PI2\n     * @type {number}\n     * @since 3.0.0\n     */\n    PI2: Math.PI * 2,\n\n    /**\n     * The value of PI * 2.\n     *\n     * @name Phaser.Math.HALF_PI\n     * @type {number}\n     * @since 3.0.0\n     */\n    HALF_PI: Math.PI * 0.5,\n\n    /**\n     * An epsilon value (1.0e-6)\n     *\n     * @name Phaser.Math.EPSILON\n     * @type {number}\n     * @since 3.0.0\n     */\n    EPSILON: 1.0e-6,\n\n    /**\n     * For converting degrees to radians (PI / 180)\n     *\n     * @name Phaser.Math.DEG_TO_RAD\n     * @type {number}\n     * @since 3.0.0\n     */\n    DEG_TO_RAD: Math.PI / 180,\n\n    /**\n     * For converting radians to degrees (180 / PI)\n     *\n     * @name Phaser.Math.RAD_TO_DEG\n     * @type {number}\n     * @since 3.0.0\n     */\n    RAD_TO_DEG: 180 / Math.PI,\n\n    /**\n     * The minimum safe integer this browser supports.\n     * We use a const for backward compatibility with Internet Explorer.\n     *\n     * @name Phaser.Math.MIN_SAFE_INTEGER\n     * @type {number}\n     * @since 3.21.0\n     */\n    MIN_SAFE_INTEGER: Number.MIN_SAFE_INTEGER || -9007199254740991,\n\n    /**\n     * The maximum safe integer this browser supports.\n     * We use a const for backward compatibility with Internet Explorer.\n     *\n     * @name Phaser.Math.MAX_SAFE_INTEGER\n     * @type {number}\n     * @since 3.21.0\n     */\n    MAX_SAFE_INTEGER: Number.MAX_SAFE_INTEGER || 9007199254740991\n\n};\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { MATH_CONST as CONST } from '../const';\n\n/**\n * Takes an angle in Phasers default clockwise format and converts it so that\n * 0 is North, 90 is West, 180 is South and 270 is East,\n * therefore running counter-clockwise instead of clockwise.\n * \n * You can pass in the angle from a Game Object using:\n * \n * ```javascript\n * var converted = CounterClockwise(gameobject.rotation);\n * ```\n * \n * All values for this function are in radians.\n *\n * @function Phaser.Math.Angle.CounterClockwise\n * @since 3.16.0\n *\n * @param {number} angle - The angle to convert, in radians.\n *\n * @return {number} The converted angle, in radians.\n */\nexport function CounterClockwise (angle: number): number\n{\n    if (angle > Math.PI)\n    {\n        angle -= CONST.PI2;\n    }\n\n    return Math.abs((((angle + CONST.HALF_PI) % CONST.PI2) - CONST.PI2) % CONST.PI2);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { MATH_CONST } from '../const';\n\n/**\n * Normalize an angle to the [0, 2pi] range.\n *\n * @function Phaser.Math.Angle.Normalize\n * @since 3.0.0\n *\n * @param {number} angle - The angle to normalize, in radians.\n *\n * @return {number} The normalized angle, in radians.\n */\nexport function NormalizeAngle (angle: number): number\n{\n    angle = angle % MATH_CONST.PI2;\n\n    if (angle >= 0)\n    {\n        return angle;\n    }\n    else\n    {\n        return angle + MATH_CONST.PI2;\n    }\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { NormalizeAngle } from './NormalizeAngle';\n\n/**\n * Reverse the given angle.\n *\n * @function Phaser.Math.Angle.Reverse\n * @since 3.0.0\n *\n * @param {number} angle - The angle to reverse, in radians.\n *\n * @return {number} The reversed angle, in radians.\n */\nexport function ReverseAngle (angle: number): number\n{\n    return NormalizeAngle(angle + Math.PI);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { MATH_CONST } from '../const';\n\n/**\n * Rotates `currentAngle` towards `targetAngle`, taking the shortest rotation distance. The `lerp` argument is the amount to rotate by in this call.\n *\n * @function Phaser.Math.Angle.RotateTo\n * @since 3.0.0\n *\n * @param {number} currentAngle - The current angle, in radians.\n * @param {number} targetAngle - The target angle to rotate to, in radians.\n * @param {number} [lerp=0.05] - The lerp value to add to the current angle.\n *\n * @return {number} The adjusted angle.\n */\nexport function RotateAngleTo (currentAngle: number, targetAngle: number, lerp: number = 0.05): number\n{\n    if (currentAngle === targetAngle)\n    {\n        return currentAngle;\n    }\n\n    if (Math.abs(targetAngle - currentAngle) <= lerp || Math.abs(targetAngle - currentAngle) >= (MATH_CONST.PI2 - lerp))\n    {\n        currentAngle = targetAngle;\n    }\n    else\n    {\n        if (Math.abs(targetAngle - currentAngle) > Math.PI)\n        {\n            if (targetAngle < currentAngle)\n            {\n                targetAngle += MATH_CONST.PI2;\n            }\n            else\n            {\n                targetAngle -= MATH_CONST.PI2;\n            }\n        }\n\n        if (targetAngle > currentAngle)\n        {\n            currentAngle += lerp;\n        }\n        else if (targetAngle < currentAngle)\n        {\n            currentAngle -= lerp;\n        }\n    }\n\n    return currentAngle;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Gets the shortest angle between `angle1` and `angle2`.\n *\n * Both angles must be in the range -180 to 180, which is the same clamped\n * range that `sprite.angle` uses, so you can pass in two sprite angles to\n * this method and get the shortest angle back between the two of them.\n *\n * The angle returned will be in the same range. If the returned angle is\n * greater than 0 then it's a counter-clockwise rotation, if < 0 then it's\n * a clockwise rotation.\n *\n * TODO: Wrap the angles in this function?\n *\n * @function Phaser.Math.Angle.ShortestBetween\n * @since 3.0.0\n *\n * @param {number} angle1 - The first angle in the range -180 to 180.\n * @param {number} angle2 - The second angle in the range -180 to 180.\n *\n * @return {number} The shortest angle, in degrees. If greater than zero it's a counter-clockwise rotation.\n */\nexport function ShortestAngleBetween (angle1: number, angle2: number): number\n{\n    const difference = angle2 - angle1;\n\n    if (difference === 0)\n    {\n        return 0;\n    }\n\n    const times = Math.floor((difference - (-180)) / 360);\n\n    return difference - (times * 360);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Wrap the given `value` between `min` and `max.\n *\n * @function Phaser.Math.Wrap\n * @since 3.0.0\n *\n * @param {number} value - The value to wrap.\n * @param {number} min - The minimum value.\n * @param {number} max - The maximum value.\n *\n * @return {number} The wrapped value.\n */\nexport function Wrap (value: number, min: number, max: number): number\n{\n    const range = max - min;\n\n    return (min + ((((value - min) % range) + range) % range));\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { Wrap } from '../Wrap';\n\n/**\n * Wrap an angle.\n *\n * Wraps the angle to a value in the range of -PI to PI.\n *\n * @function Phaser.Math.Angle.Wrap\n * @since 3.0.0\n *\n * @param {number} angle - The angle to wrap, in radians.\n *\n * @return {number} The wrapped angle, in radians.\n */\nexport function WrapAngle (angle: number): number\n{\n    return Wrap(angle, -Math.PI, Math.PI);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { Wrap } from '../Wrap';\n\n/**\n * Wrap an angle in degrees.\n *\n * Wraps the angle to a value in the range of -180 to 180.\n *\n * @function Phaser.Math.Angle.WrapDegrees\n * @since 3.0.0\n *\n * @param {number} angle - The angle to wrap, in degrees.\n *\n * @return {number} The wrapped angle, in degrees.\n */\nexport function WrapAngleDegrees (angle: number): number\n{\n    return Wrap(angle, -180, 180);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { AngleBetween } from './AngleBetween';\nimport { AngleBetweenY } from './AngleBetweenY';\nimport { CounterClockwise } from './CounterClockwise';\nimport { NormalizeAngle } from './NormalizeAngle';\nimport { ReverseAngle } from './ReverseAngle';\nimport { RotateAngleTo } from './RotateAngleTo';\nimport { ShortestAngleBetween } from './ShortestAngleBetween';\nimport { WrapAngle } from './WrapAngle';\nimport { WrapAngleDegrees } from './WrapAngleDegrees';\n\n/**\n * @namespace Phaser.Math.Angle\n */\n\nexport {\n    AngleBetween,\n    AngleBetweenY,\n    CounterClockwise,\n    NormalizeAngle,\n    ReverseAngle,\n    RotateAngleTo,\n    ShortestAngleBetween,\n    WrapAngle,\n    WrapAngleDegrees\n};\n", "import { GameInstance } from '../GameInstance';\nimport { IRenderer } from '../renderer/IRenderer';\nimport { IStaticCamera } from './IStaticCamera';\nimport { IStaticWorld } from '../world/IStaticWorld';\nimport { Mat4Identity } from '../math/mat4';\nimport { Matrix2D } from '../math/mat2d/Matrix2D';\nimport { Matrix4 } from '../math/mat4/Matrix4';\nimport { Rectangle } from '../geom/rectangle/Rectangle';\n\nexport class StaticCamera implements IStaticCamera\n{\n    world: IStaticWorld;\n    matrix: Matrix4;\n    renderer: IRenderer;\n    type: string;\n\n    width: number;\n    height: number;\n    bounds: Rectangle;\n\n    dirtyRender: boolean;\n    worldTransform: Matrix2D;\n\n    constructor ()\n    {\n        this.dirtyRender = true;\n\n        const game = GameInstance.get();\n\n        this.renderer = game.renderer;\n\n        this.matrix = Mat4Identity();\n\n        this.bounds = new Rectangle();\n\n        this.worldTransform = new Matrix2D();\n\n        this.reset();\n    }\n\n    reset (): void\n    {\n        const renderer = this.renderer;\n\n        if (renderer)\n        {\n            const width = renderer.width;\n            const height = renderer.height;\n\n            this.width = width;\n            this.height = height;\n        }\n\n        this.bounds.set(0, 0, this.width, this.height);\n    }\n\n    destroy (): void\n    {\n        this.world = null;\n        this.worldTransform = null;\n        this.renderer = null;\n        this.matrix = null;\n        this.bounds = null;\n    }\n}\n", "import { CreateTempTextures } from './CreateTempTextures';\nimport { GetBatchSize } from '../../../config/batchsize/GetBatchSize';\nimport { IBaseCamera } from '../../../camera/IBaseCamera';\nimport { IRenderPass } from './IRenderPass';\nimport { IShader } from '../shaders/IShader';\nimport { IVertexBuffer } from '../buffers/IVertexBuffer';\nimport { IWebGLRenderer } from '../IWebGLRenderer';\nimport { IndexedVertexBuffer } from '../buffers/IndexedVertexBuffer';\nimport { Mat4Ortho } from '../../../math/mat4/Mat4Ortho';\nimport { Matrix4 } from '../../../math/mat4/Matrix4';\nimport { MultiTextureQuadShader } from '../shaders';\nimport { QuadShader } from '../shaders/QuadShader';\nimport { Rectangle } from '../../../geom/rectangle/Rectangle';\nimport { SetDefaultBlendMode } from './SetDefaultBlendMode';\nimport { SetDefaultFramebuffer } from './SetDefaultFramebuffer';\nimport { SetDefaultShader } from './SetDefaultShader';\nimport { SetDefaultVertexBuffer } from './SetDefaultVertexBuffer';\nimport { SetDefaultViewport } from './SetDefaultViewport';\nimport { StaticCamera } from '../../../camera';\n\nexport type FramebufferStackEntry = {\n    framebuffer: WebGLFramebuffer;\n    viewport?: Rectangle;\n};\n\nexport type ShaderStackEntry = {\n    shader: IShader;\n    textureID?: number;\n};\n\nexport type BlendModeStackEntry = {\n    enable: boolean;\n    sfactor?: number;\n    dfactor?: number;\n};\n\nexport class RenderPass implements IRenderPass\n{\n    renderer: IWebGLRenderer;\n\n    projectionMatrix: Matrix4;\n    cameraMatrix: Matrix4;\n\n    count: number = 0;\n    prevCount: number = 0;\n    flushTotal: number = 0;\n\n    //  The maximum number of combined image units the GPU supports\n    //  According to the WebGL spec the minimum is 8\n    maxTextures: number = 0;\n    currentActiveTexture: number = 0;\n    startActiveTexture: number = 0;\n    tempTextures: WebGLTexture[] = [];\n    textureIndex: number[] = [];\n\n    //  FBO\n    framebufferStack: FramebufferStackEntry[] = [];\n    currentFramebuffer: FramebufferStackEntry = null;\n    defaultFramebuffer: FramebufferStackEntry = null;\n\n    //  VBO\n    vertexBufferStack: IVertexBuffer[] = [];\n    currentVertexBuffer: IVertexBuffer = null;\n    defaultVertexBuffer: IVertexBuffer = null;\n\n    //  Shader\n    shaderStack: ShaderStackEntry[] = [];\n    currentShader: ShaderStackEntry = null;\n    defaultShader: ShaderStackEntry = null;\n\n    //  Viewport\n    viewportStack: Rectangle[] = [];\n    currentViewport: Rectangle = null;\n    defaultViewport: Rectangle = null;\n\n    //  Blend Mode\n    blendModeStack: BlendModeStackEntry[] = [];\n    currentBlendMode: BlendModeStackEntry = null;\n    defaultBlendMode: BlendModeStackEntry = null;\n\n    //  Single Texture Quad Shader + Camera\n    quadShader: IShader;\n    quadBuffer: IVertexBuffer;\n    quadCamera: IBaseCamera;\n\n    //  Current 2D Camera\n    current2DCamera: IBaseCamera;\n\n    constructor (renderer: IWebGLRenderer)\n    {\n        this.renderer = renderer;\n\n        this.projectionMatrix = new Matrix4();\n\n        this.reset();\n    }\n\n    //  TODO - Call when context is lost and restored\n    reset (): void\n    {\n        const gl = this.renderer.gl;\n\n        const indexLayout = [ 0, 1, 2, 2, 3, 0 ];\n\n        //  TODO - If already created, delete shaders / buffers first (i.e. during context loss)\n\n        //  Default QuadShader (for FBO drawing)\n\n        this.quadShader = new QuadShader();\n        this.quadBuffer = new IndexedVertexBuffer({ isDynamic: false, indexLayout });\n        this.quadCamera = new StaticCamera();\n\n        //  Default settings\n\n        CreateTempTextures(this);\n\n        SetDefaultFramebuffer(this);\n        SetDefaultBlendMode(this, true, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n        SetDefaultVertexBuffer(this, new IndexedVertexBuffer({ batchSize: GetBatchSize(), indexLayout }));\n        SetDefaultShader(this, new MultiTextureQuadShader());\n    }\n\n    resize (width: number, height: number): void\n    {\n        //  TODO - -1 to 1?\n        Mat4Ortho(0, width, height, 0, -1000, 1000, this.projectionMatrix);\n\n        this.quadCamera.reset();\n\n        SetDefaultViewport(this, 0, 0, width, height);\n    }\n}\n", "import { IRenderPass } from './IRenderPass';\nimport { ShaderStackEntry } from '../shaders/ShaderStackEntry';\n\nexport function BindShader (renderPass: IRenderPass, entry?: ShaderStackEntry): void\n{\n    if (!entry)\n    {\n        entry = renderPass.currentShader;\n    }\n\n    const success = entry.shader.bind(renderPass, entry.textureID);\n\n    if (success)\n    {\n        entry.shader.setAttributes(renderPass);\n    }\n}\n", "import { BindShader } from './BindShader';\nimport { IBaseCamera } from '../../../camera/IBaseCamera';\nimport { IRenderPass } from './IRenderPass';\n\nexport function Begin (renderPass: IRenderPass, camera2D: IBaseCamera): void\n{\n    renderPass.current2DCamera = camera2D;\n    renderPass.cameraMatrix = camera2D.matrix;\n\n    BindShader(renderPass);\n}\n", "import { BlendModeStackEntry } from './RenderPass';\nimport { IRenderPass } from './IRenderPass';\nimport { gl } from '../GL';\n\nexport function BindBlendMode (renderPass: IRenderPass, entry?: BlendModeStackEntry): void\n{\n    if (!entry)\n    {\n        entry = renderPass.currentBlendMode;\n    }\n\n    //  TODO - Only set if different\n    if (entry.enable)\n    {\n        gl.enable(gl.BLEND);\n        gl.blendFunc(entry.sfactor, entry.dfactor);\n    }\n    else\n    {\n        gl.disable(gl.BLEND);\n    }\n}\n", "import { IRenderPass } from './IRenderPass';\nimport { IVertexBuffer } from '../buffers/IVertexBuffer';\nimport { gl } from '../GL';\n\nexport function BindVertexBuffer (renderPass: IRenderPass, buffer?: IVertexBuffer): void\n{\n    if (!buffer)\n    {\n        buffer = renderPass.currentVertexBuffer;\n    }\n\n    //  TODO - Only bind if different\n    const indexBuffer = (buffer.indexed) ? buffer.indexBuffer : null;\n\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer.vertexBuffer);\n}\n", "import { BufferEntry } from '../draw/BufferEntry';\nimport { Flush } from './Flush';\nimport { IRenderPass } from './IRenderPass';\n\nexport function GetVertexBufferEntry (renderPass: IRenderPass, addToCount: number = 0): BufferEntry\n{\n    const buffer = renderPass.currentVertexBuffer;\n\n    //  If batch cannot take the size of this entry, flush it first\n    if (renderPass.count + addToCount >= buffer.batchSize)\n    {\n        Flush(renderPass);\n    }\n\n    const offset = (buffer.indexed) ? renderPass.count * buffer.entryElementSize : renderPass.count * buffer.vertexElementSize;\n\n    renderPass.count += addToCount;\n\n    return {\n        buffer,\n        F32: buffer.vertexViewF32,\n        U32: buffer.vertexViewU32,\n        offset\n    };\n}\n", "import { Flush } from './Flush';\nimport { IRenderPass } from './IRenderPass';\nimport { ITexture } from '../../../textures/ITexture';\nimport { gl } from '../GL';\n\n//  request the next available texture and bind it\n//  returns the new ID\nexport function SetTexture (renderPass: IRenderPass, texture: ITexture): number\n{\n    const binding = texture.binding;\n    const currentActiveTexture = renderPass.currentActiveTexture;\n\n    if (binding.indexCounter < renderPass.startActiveTexture)\n    {\n        binding.indexCounter = renderPass.startActiveTexture;\n\n        if (currentActiveTexture < renderPass.maxTextures)\n        {\n            binding.setIndex(currentActiveTexture);\n\n            gl.activeTexture(gl.TEXTURE0 + currentActiveTexture);\n            gl.bindTexture(gl.TEXTURE_2D, binding.texture);\n\n            renderPass.currentActiveTexture++;\n        }\n        else\n        {\n            //  We're out of textures, so flush the batch and reset back to 1\n            Flush(renderPass);\n\n            renderPass.startActiveTexture++;\n\n            binding.indexCounter = renderPass.startActiveTexture;\n\n            binding.setIndex(1);\n\n            gl.activeTexture(gl.TEXTURE1);\n            gl.bindTexture(gl.TEXTURE_2D, binding.texture);\n\n            renderPass.currentActiveTexture = 2;\n        }\n    }\n\n    return binding.index;\n}\n", "import { BindBlendMode } from './BindBlendMode';\nimport { BindFramebuffer } from './BindFramebuffer';\nimport { BindVertexBuffer } from './BindVertexBuffer';\nimport { BindViewport } from './BindViewport';\nimport { IRenderPass } from './IRenderPass';\n\nexport function Start (renderPass: IRenderPass): void\n{\n    renderPass.current2DCamera = renderPass.quadCamera;\n    renderPass.cameraMatrix = renderPass.quadCamera.matrix;\n\n    renderPass.count = 0;\n    renderPass.flushTotal = 0;\n\n    BindFramebuffer(renderPass, false, renderPass.defaultFramebuffer);\n    BindBlendMode(renderPass, renderPass.defaultBlendMode);\n    BindViewport(renderPass, renderPass.defaultViewport);\n    BindVertexBuffer(renderPass, renderPass.defaultVertexBuffer);\n}\n", "import { WebGLRenderer } from './WebGLRenderer';\n\nexport let instance: WebGLRenderer;\n\nexport const WebGLRendererInstance =\n{\n    get: (): WebGLRenderer =>\n    {\n        return instance;\n    },\n\n    set: (renderer: WebGLRenderer | undefined): void =>\n    {\n        instance = renderer;\n    }\n};\n", "import { GetHeight, GetResolution, GetWidth } from '../../config/size/';\n\nimport { End } from './renderpass/End';\nimport { GL } from './GL';\nimport { GetBackgroundColor } from '../../config/backgroundcolor/GetBackgroundColor';\nimport { GetRGBArray } from './colors/GetRGBArray';\nimport { GetWebGLContext } from '../../config/webglcontext/GetWebGLContext';\nimport { IRenderPass } from './renderpass/IRenderPass';\nimport { ISceneRenderData } from '../../scenes/ISceneRenderData';\nimport { ProcessBindingQueue } from './renderpass/ProcessBindingQueue';\nimport { RenderPass } from './renderpass/RenderPass';\nimport { Start } from './renderpass';\nimport { WebGLRendererInstance } from './WebGLRendererInstance';\n\nexport class WebGLRenderer\n{\n    canvas: HTMLCanvasElement;\n    gl: WebGLRenderingContext;\n\n    renderPass: IRenderPass;\n\n    clearColor = [ 0, 0, 0, 1 ];\n\n    width: number;\n    height: number;\n    resolution: number;\n\n    clearBeforeRender: boolean = true;\n    optimizeRedraw: boolean = false;\n    autoResize: boolean = true;\n\n    contextLost: boolean = false;\n\n    constructor ()\n    {\n        this.width = GetWidth();\n        this.height = GetHeight();\n        this.resolution = GetResolution();\n\n        this.setBackgroundColor(GetBackgroundColor());\n\n        const canvas = document.createElement('canvas');\n\n        canvas.addEventListener('webglcontextlost', (event) => this.onContextLost(event), false);\n        canvas.addEventListener('webglcontextrestored', () => this.onContextRestored(), false);\n\n        this.canvas = canvas;\n\n        this.initContext();\n\n        //  By this stage the context is available\n        WebGLRendererInstance.set(this);\n\n        this.renderPass = new RenderPass(this);\n\n        this.resize(this.width, this.height, this.resolution);\n    }\n\n    initContext (): void\n    {\n        const gl = this.canvas.getContext('webgl', GetWebGLContext());\n\n        GL.set(gl);\n\n        this.gl = gl;\n\n        gl.disable(gl.DEPTH_TEST);\n        gl.disable(gl.CULL_FACE);\n    }\n\n    resize (width: number, height: number, resolution: number = 1): void\n    {\n        const calcWidth = width * resolution;\n        const calcHeight = height * resolution;\n\n        this.width = calcWidth;\n        this.height = calcHeight;\n        this.resolution = resolution;\n\n        const canvas = this.canvas;\n\n        canvas.width = calcWidth;\n        canvas.height = calcHeight;\n\n        if (this.autoResize)\n        {\n            canvas.style.width = width.toString() + 'px';\n            canvas.style.height = height.toString() + 'px';\n        }\n\n        this.renderPass.resize(calcWidth, calcHeight);\n    }\n\n    onContextLost (event: Event): void\n    {\n        event.preventDefault();\n\n        this.contextLost = true;\n    }\n\n    onContextRestored (): void\n    {\n        this.contextLost = false;\n\n        this.initContext();\n    }\n\n    setBackgroundColor (color: number): this\n    {\n        GetRGBArray(color, this.clearColor);\n\n        return this;\n    }\n\n    //  TODO - Remove?\n    reset (): void\n    {\n        // this.renderPass.reset();\n    }\n\n    render (renderData: ISceneRenderData): void\n    {\n        if (this.contextLost)\n        {\n            return;\n        }\n\n        const gl = this.gl;\n        const renderPass = this.renderPass;\n\n        //  This is only here because if we don't do _something_ with the context,\n        //  GL Spector can't see it!\n        gl.getContextAttributes();\n\n        ProcessBindingQueue();\n\n        //  Nothing dirty? Display the previous frame\n        if (this.optimizeRedraw && renderData.numDirtyFrames === 0 && renderData.numDirtyCameras === 0)\n        {\n            return;\n        }\n\n        if (this.clearBeforeRender)\n        {\n            const cls = this.clearColor;\n\n            gl.clearColor(cls[0], cls[1], cls[2], cls[3]);\n            gl.clear(gl.COLOR_BUFFER_BIT);\n        }\n\n        const worlds = renderData.worldData;\n\n        Start(renderPass);\n\n        for (let i: number = 0; i < worlds.length; i++)\n        {\n            const { world } = worlds[i];\n\n            world.renderGL(renderPass);\n\n            //  Stats sweep\n\n            world.postRenderGL(renderPass);\n        }\n\n        End(renderPass);\n\n        // eslint-disable-next-line no-debugger\n        // debugger;\n    }\n\n    destroy (): void\n    {\n        WebGLRendererInstance.set(undefined);\n    }\n}\n", "import { SetRenderer } from '../renderer/SetRenderer';\nimport { WebGLRenderer } from '../../renderer/webgl1/WebGLRenderer';\n\nexport function WebGL (): () => void\n{\n    return (): void =>\n    {\n        SetRenderer(WebGLRenderer);\n    };\n}\n", "import { CONFIG_DEFAULTS } from '../const';\nimport { ConfigStore } from '../ConfigStore';\n\nexport function SetWebGLContext (contextAttributes: WebGLContextAttributes): void\n{\n    ConfigStore.set(CONFIG_DEFAULTS.WEBGL_CONTEXT, contextAttributes);\n}\n", "import { TextureManager } from './TextureManager';\n\nlet instance: TextureManager;\n\nexport const TextureManagerInstance =\n{\n    get: (): TextureManager =>\n    {\n        return instance;\n    },\n\n    set: (manager: TextureManager | null): void =>\n    {\n        instance = manager;\n    }\n};\n", "import { Texture } from './Texture';\nimport { TextureManagerInstance } from './TextureManagerInstance';\n\nexport function GetTexture (key: string): Texture\n{\n    return TextureManagerInstance.get().get(key);\n}\n", "export function PackColor (rgb: number, alpha: number): number\n{\n    const ua = ((alpha * 255) | 0) & 0xFF;\n\n    return ((ua << 24) | rgb) >>> 0;\n}\n", "import { GetTexture } from '../../../textures/GetTexture';\nimport { GetVertexBufferEntry } from '../renderpass/GetVertexBufferEntry';\nimport { IRenderPass } from '../renderpass/IRenderPass';\nimport { PackColor } from '../colors/PackColor';\nimport { SetShader } from '../renderpass/SetShader';\nimport { SetTexture } from '../renderpass/SetTexture';\nimport { SetVertexBuffer } from '../renderpass/SetVertexBuffer';\n\nexport function FillLine (renderPass: IRenderPass, x0: number, y0: number, x1: number, y1: number, width: number, color: number, alpha: number = 1): void\n{\n    const { F32, U32, offset } = GetVertexBufferEntry(renderPass, 1);\n\n    const packedColor = PackColor(color, alpha);\n\n    const textureIndex = SetTexture(renderPass, GetTexture('__WHITE'));\n\n    const dx = x1 - x0;\n    const dy = y1 - y0;\n\n    const len = Math.sqrt(dx * dx + dy * dy);\n\n    const al0 = width * (y1 - y0) / len;\n    const al1 = width * (x0 - x1) / len;\n    const bl0 = width * (y1 - y0) / len;\n    const bl1 = width * (x0 - x1) / len;\n\n    F32[offset + 0] = x0 + al0;\n    F32[offset + 1] = y0 + al1;\n    F32[offset + 2] = 0;\n    F32[offset + 3] = 1;\n    F32[offset + 4] = textureIndex;\n    U32[offset + 5] = packedColor;\n\n    F32[offset + 6] = x0 - al0;\n    F32[offset + 7] = y0 - al1;\n    F32[offset + 8] = 0;\n    F32[offset + 9] = 0;\n    F32[offset + 10] = textureIndex;\n    U32[offset + 11] = packedColor;\n\n    F32[offset + 12] = x1 - bl0;\n    F32[offset + 13] = y1 - bl1;\n    F32[offset + 14] = 1;\n    F32[offset + 15] = 0;\n    F32[offset + 16] = textureIndex;\n    U32[offset + 17] = packedColor;\n\n    F32[offset + 18] = x1 + bl0;\n    F32[offset + 19] = y1 + bl1;\n    F32[offset + 20] = 1;\n    F32[offset + 21] = 1;\n    F32[offset + 22] = textureIndex;\n    U32[offset + 23] = packedColor;\n}\n", "import { GetElement } from './GetElement';\n\nexport function AddToDOM (element: HTMLElement, parent?: string | HTMLElement): HTMLElement\n{\n    const target: HTMLElement = GetElement(parent);\n\n    target.appendChild(element);\n\n    return element;\n}\n", "export function DOMContentLoaded (callback: () => void): void\n{\n    const readyState = document.readyState;\n\n    if (readyState === 'complete' || readyState === 'interactive')\n    {\n        callback();\n\n        return;\n    }\n\n    const check = (): void =>\n    {\n        document.removeEventListener('deviceready', check, true);\n        document.removeEventListener('DOMContentLoaded', check, true);\n        window.removeEventListener('load', check, true);\n\n        callback();\n    };\n\n    // TODO - Swap is IsCordova call\n\n    if (!document.body)\n    {\n        window.setTimeout(check, 20);\n    }\n    else if (window.hasOwnProperty('cordova'))\n    {\n        document.addEventListener('deviceready', check, true);\n    }\n    else\n    {\n        document.addEventListener('DOMContentLoaded', check, true);\n        window.addEventListener('load', check, true);\n    }\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Takes the given data string and parses it as XML using the native DOMParser interface.\n * The parsed XML object is returned, or `null` if there was an error while parsing the data.\n *\n * @function Phaser.DOM.ParseXML\n * @since 3.0.0\n *\n * @param {string} data - The XML source stored in a string.\n *\n * @return {?XMLDocument} The parsed XML data, or `null` if the data could not be parsed.\n */\nexport function ParseXML (data: string): XMLDocument | null\n{\n    let xml: XMLDocument;\n\n    try\n    {\n        const parser = new DOMParser();\n\n        xml = parser.parseFromString(data, 'text/xml');\n\n        if (!xml || !xml.documentElement || xml.getElementsByTagName('parsererror').length)\n        {\n            return null;\n        }\n        else\n        {\n            return xml;\n        }\n    }\n    catch (error)\n    {\n        return null;\n    }\n}\n", "import { IEventEmitter } from './IEventEmitter';\n\nexport function Emit (emitter: IEventEmitter, event: string, ...args: unknown[]): boolean\n{\n    if (emitter.events.size === 0 || !emitter.events.has(event))\n    {\n        return false;\n    }\n\n    const listeners = emitter.events.get(event);\n\n    for (const ee of listeners)\n    {\n        ee.callback.apply(ee.context, args);\n\n        if (ee.once)\n        {\n            listeners.delete(ee);\n        }\n    }\n\n    if (listeners.size === 0)\n    {\n        emitter.events.delete(event);\n    }\n\n    return true;\n}\n", "import { IEventInstance } from './IEventInstance';\n\nexport class EventEmitter\n{\n    events: Map<string, Set<IEventInstance>>;\n\n    constructor ()\n    {\n        this.events = new Map();\n    }\n}\n", "export class EventInstance\n{\n    callback: Function;\n    context: unknown;\n    once: boolean;\n\n    constructor (callback: Function, context: unknown, once: boolean = false)\n    {\n        this.callback = callback;\n        this.context = context;\n        this.once = once;\n    }\n}\n", "import { EventInstance } from './EventInstance';\nimport { IEventEmitter } from './IEventEmitter';\nimport { IEventInstance } from './IEventInstance';\n\nexport function Off (emitter: IEventEmitter, event: string, callback?: Function | IEventInstance, context?: unknown, once?: boolean): IEventEmitter\n{\n    const events = emitter.events;\n    const listeners = events.get(event);\n\n    if (!callback)\n    {\n        //  Remove all events matching the given key\n        events.delete(event);\n    }\n    else if (callback instanceof EventInstance)\n    {\n        listeners.delete(callback as IEventInstance);\n    }\n    else\n    {\n        const hasContext: boolean = !context;\n        const hasOnce: boolean = (once !== undefined);\n\n        for (const listener of listeners)\n        {\n            if (\n                (listener.callback === callback) &&\n                (hasContext && listener.context === context) &&\n                (hasOnce && listener.once === once)\n            )\n            {\n                listeners.delete(listener);\n            }\n        }\n    }\n\n    if (listeners.size === 0)\n    {\n        events.delete(event);\n    }\n\n    return emitter;\n}\n", "import { EventInstance } from './EventInstance';\nimport { IEventEmitter } from './IEventEmitter';\nimport { IEventInstance } from './IEventInstance';\n\nexport function On (emitter: IEventEmitter, event: string, callback: Function, context: unknown = emitter, once: boolean = false): IEventInstance\n{\n    if (typeof callback !== 'function')\n    {\n        throw new TypeError('Listener not a function');\n    }\n\n    const listener = new EventInstance(callback, context, once);\n    const listeners = emitter.events.get(event);\n\n    if (!listeners)\n    {\n        emitter.events.set(event, new Set([ listener ]));\n    }\n    else\n    {\n        listeners.add(listener);\n    }\n\n    return listener;\n}\n", "import { IEventEmitter } from './IEventEmitter';\nimport { IEventInstance } from './IEventInstance';\nimport { On } from './On';\n\nexport function Once (emitter: IEventEmitter, event: string, callback: Function, context: unknown = emitter): IEventInstance\n{\n    return On(emitter, event, callback, context, true);\n}\n", "import { CONFIG_DEFAULTS } from '../const';\nimport { ConfigStore } from '../ConfigStore';\n\nexport function GetBanner (): void\n{\n    const { title, version, url, color, background } = ConfigStore.get(CONFIG_DEFAULTS.BANNER);\n\n    if (title !== '')\n    {\n        const str = (version !== '') ? title + ' ' + version : title;\n\n        console.log(\n            `%c${str}%c ${url}`,\n            `padding: 4px 16px; color: ${color}; background: ${background}`,\n            ''\n        );\n    }\n}\n", "import { CONFIG_DEFAULTS } from '../const';\nimport { ConfigStore } from '../ConfigStore';\n\nexport function GetGlobalVar (): number\n{\n    return ConfigStore.get(CONFIG_DEFAULTS.GLOBAL_VAR);\n}\n", "import { CONFIG_DEFAULTS } from '../const';\nimport { ConfigStore } from '../ConfigStore';\n\nexport function GetParent (): string | HTMLElement | undefined\n{\n    return ConfigStore.get(CONFIG_DEFAULTS.PARENT);\n}\n", "import { CONFIG_DEFAULTS } from '../const';\nimport { ConfigStore } from '../ConfigStore';\nimport { IRendererConstructor } from '../../renderer/IRendererConstructor';\n\nexport function GetRenderer (): IRendererConstructor\n{\n    return ConfigStore.get(CONFIG_DEFAULTS.RENDERER);\n}\n", "import { ISceneRenderData } from './ISceneRenderData';\n\nexport function CreateSceneRenderData (): ISceneRenderData\n{\n    return {\n        gameFrame: 0,\n        numTotalFrames: 0,\n        numDirtyFrames: 0,\n        numDirtyCameras: 0,\n        worldData: []\n    };\n}\n", "import { CONFIG_DEFAULTS } from '../const';\nimport { ConfigStore } from '../ConfigStore';\nimport { ISceneConstructor } from '../../scenes/ISceneConstructor';\n\nexport function GetScenes (): ISceneConstructor[]\n{\n    return ConfigStore.get(CONFIG_DEFAULTS.SCENES);\n}\n", "import { ISceneRenderData } from './ISceneRenderData';\n\nexport function ResetSceneRenderData (renderData: ISceneRenderData, gameFrame: number = 0): void\n{\n    renderData.gameFrame = gameFrame;\n    renderData.numTotalFrames = 0;\n    renderData.numDirtyFrames = 0;\n    renderData.numDirtyCameras = 0;\n    renderData.worldData.length = 0;\n}\n", "import { SceneManager } from './SceneManager';\n\nlet instance: SceneManager;\n\nexport const SceneManagerInstance =\n{\n    get: (): SceneManager =>\n    {\n        return instance;\n    },\n\n    set: (manager: SceneManager | null): void =>\n    {\n        instance = manager;\n    }\n};\n", "import { Emit, Once } from '../events';\n\nimport { CreateSceneRenderData } from './CreateSceneRenderData';\nimport { Game } from '../Game';\nimport { GameInstance } from '../GameInstance';\nimport { GetScenes } from '../config/scenes';\nimport { IScene } from './IScene';\nimport { ISceneRenderData } from './ISceneRenderData';\nimport { ResetSceneRenderData } from './ResetSceneRenderData';\nimport { SceneManagerInstance } from './SceneManagerInstance';\n\nexport class SceneManager\n{\n    game: Game;\n\n    scenes: Map<string, IScene>  = new Map();\n\n    //  Used by Install to assign default scene keys when not specified\n    sceneIndex: number = 0;\n\n    //  Flush the cache\n    flush: boolean = false;\n\n    renderResult: ISceneRenderData = CreateSceneRenderData();\n\n    constructor ()\n    {\n        this.game = GameInstance.get();\n\n        SceneManagerInstance.set(this);\n\n        Once(this.game, 'boot', () => this.boot());\n    }\n\n    boot (): void\n    {\n        GetScenes().forEach(scene => new scene());\n    }\n\n    update (delta: number, time: number): void\n    {\n        for (const scene of this.scenes.values())\n        {\n            Emit(scene, 'update', delta, time);\n        }\n    }\n\n    render (gameFrame: number): ISceneRenderData\n    {\n        const results = this.renderResult;\n\n        ResetSceneRenderData(results, gameFrame);\n\n        for (const scene of this.scenes.values())\n        {\n            Emit(scene, 'render', results);\n        }\n\n        if (this.flush)\n        {\n            //  Invalidate the renderer cache\n            results.numDirtyFrames++;\n\n            //  And reset\n            this.flush = false;\n        }\n\n        return results;\n    }\n}\n", "import { SetBackgroundColor } from './backgroundcolor/SetBackgroundColor';\nimport { SetBanner } from './banner/SetBanner';\nimport { SetBatchSize } from './batchsize/SetBatchSize';\nimport { SetDefaultOrigin } from './defaultorigin/SetDefaultOrigin';\nimport { SetMaxTextures } from './maxtextures/SetMaxTextures';\nimport { SetSize } from './size/SetSize';\nimport { SetWebGLContext } from './webglcontext';\n\n//  Phaser 4 defaults\n\nexport function SetConfigDefaults (): void\n{\n    SetBackgroundColor(0);\n    SetBatchSize(4096);\n    SetBanner('Phaser', '4.0.0', 'https://phaser4.io');\n    SetMaxTextures(0);\n    SetDefaultOrigin(0.5, 0.5);\n    SetSize(800, 600, 1);\n    SetWebGLContext({\n        antialias: true,\n        desynchronized: true,\n        preserveDrawingBuffer: true\n    });\n}\n", "export function CreateCanvas (width: number, height: number): CanvasRenderingContext2D\n{\n    const canvas = document.createElement('canvas');\n\n    canvas.width = width;\n    canvas.height = height;\n\n    return canvas.getContext('2d');\n}\n", "import { CreateCanvas } from './CreateCanvas';\nimport { IGLTextureBindingConfig } from '../renderer/webgl1/textures/IGLTextureBindingConfig';\nimport { Texture } from './Texture';\nimport { TextureManagerInstance } from './TextureManagerInstance';\n\nexport class TextureManager\n{\n    textures: Map<string, Texture>;\n\n    constructor ()\n    {\n        this.textures = new Map();\n\n        this.createDefaultTextures();\n\n        TextureManagerInstance.set(this);\n    }\n\n    private createDefaultTextures (): void\n    {\n        this.add('__BLANK', new Texture(CreateCanvas(32, 32).canvas));\n\n        const missing = CreateCanvas(32, 32);\n\n        missing.strokeStyle = '#0f0';\n        missing.moveTo(0, 0);\n        missing.lineTo(32, 32);\n        missing.stroke();\n        missing.strokeRect(0.5, 0.5, 31, 31);\n\n        this.add('__MISSING', new Texture(missing.canvas));\n\n        const white = CreateCanvas(32, 32);\n\n        white.fillStyle = '#fff';\n        white.fillRect(0, 0, 32, 32);\n\n        this.add('__WHITE', new Texture(white.canvas));\n    }\n\n    get (key: string): Texture\n    {\n        const textures = this.textures;\n\n        if (textures.has(key))\n        {\n            return textures.get(key);\n        }\n        else\n        {\n            return textures.get('__MISSING');\n        }\n    }\n\n    has (key: string): boolean\n    {\n        return this.textures.has(key);\n    }\n\n    add (key: string, source: Texture | HTMLImageElement, glConfig?: IGLTextureBindingConfig): Texture\n    {\n        let texture: Texture;\n        const textures = this.textures;\n\n        if (!textures.has(key))\n        {\n            if (source instanceof Texture)\n            {\n                texture = source;\n            }\n            else\n            {\n                texture = new Texture(source, 0, 0, glConfig);\n            }\n\n            texture.key = key;\n\n            textures.set(key, texture);\n        }\n\n        return texture;\n    }\n}\n", "import { AddToDOM, DOMContentLoaded } from './dom';\nimport { Emit, EventEmitter } from './events';\n\nimport { GameInstance } from './GameInstance';\nimport { GetBanner } from './config/banner';\nimport { GetGlobalVar } from './config/globalvar';\nimport { GetParent } from './config/parent';\nimport { GetRenderer } from './config/renderer';\nimport { IRenderer } from './renderer/IRenderer';\nimport { SceneManager } from './scenes/SceneManager';\nimport { SetConfigDefaults } from './config/SetConfigDefaults';\nimport { TextureManager } from './textures/TextureManager';\n\nexport class Game extends EventEmitter\n{\n    readonly VERSION: string = '4.0.0-beta1';\n\n    isBooted: boolean = false;\n    isPaused: boolean = false;\n\n    willUpdate: boolean = true;\n    willRender: boolean = true;\n\n    lastTick: number = 0;\n    elapsed: number = 0;\n\n    //  The current game frame\n    frame: number = 0;\n\n    renderer: IRenderer;\n    textureManager: TextureManager;\n    sceneManager: SceneManager;\n\n    constructor (...settings: { (): void }[])\n    {\n        super();\n\n        GameInstance.set(this);\n\n        SetConfigDefaults();\n\n        DOMContentLoaded(() => this.boot(settings));\n    }\n\n    boot (settings: { (): void }[]): void\n    {\n        //  Activate the settings post DOM Content Loaded\n        settings.forEach(setting => setting());\n\n        const renderer = GetRenderer();\n\n        this.renderer = new renderer();\n        this.textureManager = new TextureManager();\n        this.sceneManager = new SceneManager();\n\n        //  Only add to the DOM if they either didn't set a Parent, or expressly set it to be non-null\n        //  Otherwise we'll let them add the canvas to the DOM themselves\n        const parent = GetParent();\n\n        if (parent)\n        {\n            AddToDOM(this.renderer.canvas, parent);\n        }\n\n        const globalVar = GetGlobalVar();\n\n        if (globalVar && window)\n        {\n            (window as unknown)[globalVar] = this;\n        }\n\n        this.isBooted = true;\n\n        GetBanner();\n\n        Emit(this, 'boot');\n\n        this.lastTick = performance.now();\n\n        this.step(this.lastTick);\n    }\n\n    pause (): void\n    {\n        this.isPaused = true;\n    }\n\n    resume (): void\n    {\n        this.isPaused = false;\n\n        this.lastTick = performance.now();\n    }\n\n    step (time: number): void\n    {\n        //  Note that privacy.resistFingerprinting can round this value to 100ms or more!\n        const delta = time - this.lastTick;\n\n        this.lastTick = time;\n        this.elapsed += delta;\n\n        if (!this.isPaused)\n        {\n            if (this.willUpdate)\n            {\n                this.sceneManager.update(delta, time);\n\n                Emit(this, 'update', delta, time);\n            }\n\n            if (this.willRender)\n            {\n                this.renderer.render(this.sceneManager.render(this.frame));\n            }\n        }\n\n        //  The frame always advances by 1 each step (even when paused)\n        this.frame++;\n\n        GameInstance.setFrame(this.frame);\n        GameInstance.setElapsed(this.elapsed);\n\n        requestAnimationFrame(now => this.step(now));\n    }\n\n    destroy (): void\n    {\n        //  TODO - Code destroy function\n    }\n}\n", "import { ISceneConfig } from './ISceneConfig';\n\nexport function GetConfigValue<Property extends keyof ISceneConfig> (config: ISceneConfig, property: Property, defaultValue: ISceneConfig[Property]): ISceneConfig[Property]\n{\n    if (Object.prototype.hasOwnProperty.call(config, property))\n    {\n        return config[property];\n    }\n    else\n    {\n        return defaultValue;\n    }\n}\n", "import { GetConfigValue } from './GetConfigValue';\nimport { IScene } from './IScene';\nimport { ISceneConfig } from './ISceneConfig';\nimport { SceneManagerInstance } from './SceneManagerInstance';\n\nexport function Install (scene: IScene, config: string | ISceneConfig = {}): void\n{\n    const sceneManager = SceneManagerInstance.get();\n\n    const size = sceneManager.scenes.size;\n    const sceneIndex = sceneManager.sceneIndex;\n    const firstScene = (size === 0);\n\n    if (typeof config === 'string')\n    {\n        scene.key = config;\n    }\n    else if (config || (!config && firstScene))\n    {\n        scene.key = GetConfigValue(config, 'key', 'scene' + sceneIndex.toString());\n    }\n\n    if (sceneManager.scenes.has(scene.key))\n    {\n        console.warn('Scene key already in use: ' + scene.key);\n    }\n    else\n    {\n        sceneManager.scenes.set(scene.key, scene);\n\n        sceneManager.flush = true;\n\n        sceneManager.sceneIndex++;\n    }\n}\n", "// import { Emit } from '../events/Emit';\n\nimport { Game } from '../Game';\nimport { GameInstance } from '../GameInstance';\nimport { IEventEmitter } from '../events/IEventEmitter';\nimport { IEventInstance } from '../events/IEventInstance';\nimport { IScene } from './IScene';\nimport { ISceneConfig } from './ISceneConfig';\nimport { Install } from './Install';\n\nexport class Scene implements IScene, IEventEmitter\n{\n    key: string;\n    game: Game;\n    events: Map<string, Set<IEventInstance>>;\n\n    constructor (config?: string | ISceneConfig)\n    {\n        this.game = GameInstance.get();\n        this.events = new Map();\n\n        Install(this, config);\n    }\n\n    // shutdown (): void\n    // {\n    //     Emit(this, 'shutdown');\n    // }\n\n    // destroy (): void\n    // {\n    //     Emit(this, 'destroy');\n\n    //     this.events.clear();\n\n    //     this.game = null;\n    //     this.events = null;\n    // }\n}\n", "import { IBaseWorld } from '../../world/IBaseWorld';\nimport { IGameObject } from '../IGameObject';\n\nexport const AddedToWorldEvent: string = 'addedtoworld';\n\nexport type AddedToWorldEventHandler = <T extends IGameObject, U extends IBaseWorld> (child: T, world: U) => void;\n", "import { IGameObject } from '../IGameObject';\n\nexport const DestroyEvent: string = 'destroy';\n\nexport type DestroyEventHandler = <T extends IGameObject> (child: T) => void;\n", "import { IGameObject } from '../IGameObject';\n\nexport const PostUpdateEvent: string = 'postupdate';\n\nexport type PostUpdateEventHandler = <T extends IGameObject> (delta: number, time: number, child: T) => void;\n", "import { IBaseWorld } from '../../world/IBaseWorld';\nimport { IGameObject } from '../IGameObject';\n\nexport const RemovedFromWorldEvent: string = 'removedfromworld';\n\nexport type RemovedFromWorldEventHandler = <T extends IGameObject, U extends IBaseWorld> (child: T, world: U) => void;\n", "import { IGameObject } from '../IGameObject';\n\nexport const UpdateEvent: string = 'update';\n\nexport type UpdateEventHandler = <T extends IGameObject> (delta: number, time: number, child: T) => void;\n", "import { IBaseWorld } from '../IBaseWorld';\nimport { IRenderPass } from '../../renderer/webgl1/renderpass/IRenderPass';\n\nexport const WorldPostRenderEvent: string = 'worldpostrender';\n\nexport type WorldPostRenderEventHandler = (renderPass: IRenderPass, world: IBaseWorld) => void;\n", "import { IBaseWorld } from '../IBaseWorld';\nimport { IWorldRenderData } from '../IWorldRenderData';\n\nexport const WorldRenderEvent: string = 'worldrender';\n\nexport type WorldRenderEventHandler = (renderData: IWorldRenderData, world: IBaseWorld) => void;\n", "import { IBaseWorld } from '../IBaseWorld';\n\nexport const WorldShutdownEvent: string = 'worldshutdown';\n\nexport type WorldShutdownEventHandler = (world: IBaseWorld) => void;\n", "import { Types, defineComponent } from 'bitecs';\n\nconst LocalMatrix2D = defineComponent({\n    a: Types.f32,\n    b: Types.f32,\n    c: Types.f32,\n    d: Types.f32,\n    tx: Types.f32,\n    ty: Types.f32\n});\n\nexport const LocalMatrix2DComponent = LocalMatrix2D;\n", "import { Types, defineComponent } from 'bitecs';\n\nconst Transform2D = defineComponent({\n    x: Types.f32,\n    y: Types.f32,\n    rotation: Types.f32,\n    scaleX: Types.f32,\n    scaleY: Types.f32,\n    skewX: Types.f32,\n    skewY: Types.f32,\n    originX: Types.f32,\n    originY: Types.f32\n});\n\nexport const Transform2DComponent = Transform2D;\n", "import { Types, defineComponent } from 'bitecs';\n\nconst WorldMatrix2D = defineComponent({\n    a: Types.f32,\n    b: Types.f32,\n    c: Types.f32,\n    d: Types.f32,\n    tx: Types.f32,\n    ty: Types.f32\n});\n\nexport const WorldMatrix2DComponent = WorldMatrix2D;\n", "import { Extent2DComponent } from './Extent2DComponent';\nimport { GameObjectWorld } from '../GameObjectWorld';\nimport { LocalMatrix2DComponent } from './LocalMatrix2DComponent';\nimport { Transform2DComponent } from './Transform2DComponent';\nimport { WorldMatrix2DComponent } from './WorldMatrix2DComponent';\nimport { addComponent } from 'bitecs';\n\nexport function AddTransform2DComponent (id: number, x: number = 0, y: number = 0, originX: number = 0, originY: number = 0): void\n{\n    addComponent(GameObjectWorld, Transform2DComponent, id);\n    addComponent(GameObjectWorld, Extent2DComponent, id);\n    addComponent(GameObjectWorld, LocalMatrix2DComponent, id);\n    addComponent(GameObjectWorld, WorldMatrix2DComponent, id);\n\n    //  Component defaults to zero, so we only need to set the other values\n\n    Transform2DComponent.x[id] = x;\n    Transform2DComponent.y[id] = y;\n    Transform2DComponent.scaleX[id] = 1;\n    Transform2DComponent.scaleY[id] = 1;\n    Transform2DComponent.originX[id] = originX;\n    Transform2DComponent.originY[id] = originY;\n\n    LocalMatrix2DComponent.a[id] = 1;\n    LocalMatrix2DComponent.d[id] = 1;\n    LocalMatrix2DComponent.tx[id] = x;\n    LocalMatrix2DComponent.ty[id] = y;\n\n    WorldMatrix2DComponent.a[id] = 1;\n    WorldMatrix2DComponent.d[id] = 1;\n    WorldMatrix2DComponent.tx[id] = x;\n    WorldMatrix2DComponent.ty[id] = y;\n}\n", "import { IWorldRenderData } from './IWorldRenderData';\nimport { IsDirtyFrame } from '../components/dirty';\nimport { SearchEntry } from '../display/SearchEntryType';\n\nexport function CalculateTotalRenderable (entry: SearchEntry, renderData: IWorldRenderData): void\n{\n    renderData.numRendered++;\n    renderData.numRenderable++;\n\n    if (IsDirtyFrame(entry.node.id, renderData.gameFrame))\n    {\n        renderData.dirtyFrame++;\n    }\n\n    entry.children.forEach(child =>\n    {\n        if (child.children.length > 0)\n        {\n            CalculateTotalRenderable(child, renderData);\n        }\n    });\n}\n", "import { HasDirtyChildCache, HasDirtyTransform } from '../components/dirty';\n\nimport { SearchEntry } from '../display/SearchEntryType';\n\nexport function HasDirtyChildren (parent: SearchEntry): boolean\n{\n    if (HasDirtyChildCache(parent.node.id))\n    {\n        return true;\n    }\n\n    const stack = [ parent ];\n\n    while (stack.length > 0)\n    {\n        const entry = stack.pop();\n\n        if (HasDirtyTransform(entry.node.id))\n        {\n            return true;\n        }\n\n        const numChildren = entry.children.length;\n\n        if (numChildren > 0)\n        {\n            for (let i = 0; i < numChildren; i++)\n            {\n                stack.push(entry.children[i]);\n            }\n        }\n    }\n\n    stack.length = 0;\n\n    return false;\n}\n", "import { HasDirtyChildren } from './HasDirtyChildren';\nimport { SearchEntry } from '../display/SearchEntryType';\nimport { SetDirtyChildCache } from '../components/dirty';\n\nexport function UpdateCachedLayers (cachedLayers: SearchEntry[], dirtyCamera: boolean): void\n{\n    cachedLayers.forEach(layer =>\n    {\n        if (dirtyCamera || HasDirtyChildren(layer))\n        {\n            //  Camera is dirty, or layer has at least one dirty child\n            SetDirtyChildCache(layer.node.id);\n        }\n        else\n        {\n            //  Camera is clean and no dirty children, so we can re-use layer cache\n            //  So let's remove the children for this layer\n            layer.children.length = 0;\n        }\n    });\n}\n", "import { Types, defineComponent } from 'bitecs';\n\nconst Permissions = defineComponent({\n    willUpdate: Types.ui8,\n    willUpdateChildren: Types.ui8,\n    willRender: Types.ui8,\n    willRenderChildren: Types.ui8,\n    willCacheChildren: Types.ui8,\n    willTransformChildren: Types.ui8\n});\n\nexport const PermissionsComponent = Permissions;\n", "import { GameObjectWorld } from '../GameObjectWorld';\nimport { PermissionsComponent } from './PermissionsComponent';\nimport { addComponent } from 'bitecs';\n\nexport function AddPermissionsComponent (id: number): void\n{\n    addComponent(GameObjectWorld, PermissionsComponent, id);\n\n    PermissionsComponent.willUpdate[id] = 1;\n    PermissionsComponent.willUpdateChildren[id] = 1;\n    PermissionsComponent.willRender[id] = 1;\n    PermissionsComponent.willRenderChildren[id] = 1;\n    PermissionsComponent.willCacheChildren[id] = 0;\n    PermissionsComponent.willTransformChildren[id] = 1;\n}\n", "import { PermissionsComponent } from './PermissionsComponent';\n\nexport function WillCacheChildren (id: number): boolean\n{\n    return Boolean(PermissionsComponent.willCacheChildren[id]);\n}\n", "import { PermissionsComponent } from './PermissionsComponent';\n\nexport function WillRender (id: number): boolean\n{\n    return Boolean(PermissionsComponent.willRender[id]);\n}\n", "import { PermissionsComponent } from './PermissionsComponent';\n\nexport function WillRenderChildren (id: number): boolean\n{\n    return Boolean(PermissionsComponent.willRenderChildren[id]);\n}\n", "import { PermissionsComponent } from './PermissionsComponent';\n\nexport function WillUpdate (id: number): boolean\n{\n    return Boolean(PermissionsComponent.willUpdate[id]);\n}\n", "import { PermissionsComponent } from './PermissionsComponent';\n\nexport function WillUpdateChildren (id: number): boolean\n{\n    return Boolean(PermissionsComponent.willUpdateChildren[id]);\n}\n", "import { WillCacheChildren, WillRenderChildren } from '../components/permissions';\n\nimport { IGameObject } from '../gameobjects/IGameObject';\nimport { SearchEntry } from '../display/SearchEntryType';\n\nexport function WorldDepthFirstSearch (cachedLayers: SearchEntry[], parent: IGameObject, output: SearchEntry[] = []): SearchEntry[]\n{\n    for (let i = 0; i < parent.numChildren; i++)\n    {\n        const node = parent.children[i];\n\n        if (node.isRenderable())\n        {\n            const children: SearchEntry[] = [];\n\n            const entry = { node, children };\n\n            output.push(entry);\n\n            if (node.numChildren > 0 && WillRenderChildren(node.id))\n            {\n                if (WillCacheChildren(node.id))\n                {\n                    cachedLayers.push(entry);\n                }\n\n                WorldDepthFirstSearch(cachedLayers, node, children);\n            }\n        }\n    }\n\n    return output;\n}\n", "import { CalculateTotalRenderable } from './CalculateTotalRenderable';\nimport { IBaseWorld } from './IBaseWorld';\nimport { IsDirtyFrame } from '../components/dirty';\nimport { SearchEntry } from '../display/SearchEntryType';\nimport { UpdateCachedLayers } from './UpdateCachedLayers';\nimport { WorldDepthFirstSearch } from './WorldDepthFirstSearch';\n\nexport function BuildRenderList (world: IBaseWorld): void\n{\n    const cachedLayers: SearchEntry[] = [];\n    const stack: SearchEntry[] = [];\n\n    //  entries is now populated with the n-tree search results, only containing nodes that will actually render\n    const entries = WorldDepthFirstSearch(cachedLayers, world, stack);\n\n    const renderData = world.renderData;\n\n    //  We can now sweep through the entries and purge non-dirty children of cached layers,\n    //  before finally building the render list. We can only do this if the camera is clean.\n\n    if (cachedLayers.length > 0)\n    {\n        UpdateCachedLayers(cachedLayers, world.camera.dirtyRender);\n    }\n\n    //  TODO: numRenderable probably needs to move to the search function\n    entries.forEach(entry =>\n    {\n        if (entry.children.length > 0)\n        {\n            CalculateTotalRenderable(entry, renderData);\n        }\n        else\n        {\n            renderData.numRendered++;\n            renderData.numRenderable++;\n\n            if (IsDirtyFrame(entry.node.id, renderData.gameFrame))\n            {\n                renderData.dirtyFrame++;\n            }\n        }\n    });\n\n    world.renderList = entries;\n\n    if (world.forceRefresh)\n    {\n        renderData.dirtyFrame++;\n\n        world.forceRefresh = false;\n    }\n\n    // console.log(entries);\n    // console.log(renderData);\n    // eslint-disable-next-line no-debugger\n    // debugger;\n}\n", "export const DIRTY_CONST = {\n\n    CLEAR: 0,\n    TRANSFORM: 1,\n    UPDATE: 2,\n    CHILD_CACHE: 4,\n    POST_RENDER: 8,\n    COLORS: 16,\n    BOUNDS: 32,\n    TEXTURE: 64,\n    FRAME: 128,\n    ALPHA: 256,\n    CHILD: 512,\n\n    //  Special combinations\n    DEFAULT: 1 + 2 + 16 + 32,\n\n    //  Reserved for future use:\n    //  1024\n    //  2048\n    //  4096\n    //  8192\n    //  16384\n    //  32768\n    //  65536\n    //  131072\n    //  262144\n    //  524288\n    //  1048576\n    //  2097152\n    //  4194304\n    //  8388608\n    //  16777216\n    //  33554432\n    //  67108864\n    //  134217728\n    //  268435456\n\n    //  Reserved for user use\n    USER1: 536870912,\n    USER2: 1073741824,\n    USER3: 2147483648,\n    USER4: 4294967296\n\n};\n", "import { Changed, defineQuery, defineSystem } from 'bitecs';\n\nimport { LocalMatrix2DComponent } from './LocalMatrix2DComponent';\nimport { Transform2DComponent } from './Transform2DComponent';\n\nconst changedLocalTransformQuery = defineQuery([ Changed(Transform2DComponent) ]);\n\nconst updateLocalTransformSystem = defineSystem(world =>\n{\n    const entities = changedLocalTransformQuery(world);\n\n    for (let i = 0; i < entities.length; i++)\n    {\n        const id = entities[i];\n\n        const x = Transform2DComponent.x[id];\n        const y = Transform2DComponent.y[id];\n        const rotation = Transform2DComponent.rotation[id];\n        const scaleX = Transform2DComponent.scaleX[id];\n        const scaleY = Transform2DComponent.scaleY[id];\n        const skewX = Transform2DComponent.skewX[id];\n        const skewY = Transform2DComponent.skewY[id];\n\n        LocalMatrix2DComponent.a[id] = Math.cos(rotation + skewY) * scaleX;\n        LocalMatrix2DComponent.b[id] = Math.sin(rotation + skewY) * scaleX;\n        LocalMatrix2DComponent.c[id] = -Math.sin(rotation - skewX) * scaleY;\n        LocalMatrix2DComponent.d[id] = Math.cos(rotation - skewX) * scaleY;\n        LocalMatrix2DComponent.tx[id] = x;\n        LocalMatrix2DComponent.ty[id] = y;\n    }\n});\n\nexport const UpdateLocalTransform2DSystem = updateLocalTransformSystem;\n", "import { LocalMatrix2DComponent } from './LocalMatrix2DComponent';\nimport { WorldMatrix2DComponent } from './WorldMatrix2DComponent';\n\nexport function CopyLocalToWorld (source: number, target: number): void\n{\n    WorldMatrix2DComponent.a[target] = LocalMatrix2DComponent.a[source];\n    WorldMatrix2DComponent.b[target] = LocalMatrix2DComponent.b[source];\n    WorldMatrix2DComponent.c[target] = LocalMatrix2DComponent.c[source];\n    WorldMatrix2DComponent.d[target] = LocalMatrix2DComponent.d[source];\n    WorldMatrix2DComponent.tx[target] = LocalMatrix2DComponent.tx[source];\n    WorldMatrix2DComponent.ty[target] = LocalMatrix2DComponent.ty[source];\n}\n", "import { WorldMatrix2DComponent } from './WorldMatrix2DComponent';\n\nexport function CopyWorldToWorld (source: number, target: number): void\n{\n    WorldMatrix2DComponent.a[target] = WorldMatrix2DComponent.a[source];\n    WorldMatrix2DComponent.b[target] = WorldMatrix2DComponent.b[source];\n    WorldMatrix2DComponent.c[target] = WorldMatrix2DComponent.c[source];\n    WorldMatrix2DComponent.d[target] = WorldMatrix2DComponent.d[source];\n    WorldMatrix2DComponent.tx[target] = WorldMatrix2DComponent.tx[source];\n    WorldMatrix2DComponent.ty[target] = WorldMatrix2DComponent.ty[source];\n}\n", "export const GameObjectCache = new Map();\n", "import { LocalMatrix2DComponent } from './LocalMatrix2DComponent';\nimport { WorldMatrix2DComponent } from './WorldMatrix2DComponent';\n\nexport function MultiplyLocalWithWorld (parentID: number, id: number): void\n{\n    const pa = WorldMatrix2DComponent.a[parentID];\n    const pb = WorldMatrix2DComponent.b[parentID];\n    const pc = WorldMatrix2DComponent.c[parentID];\n    const pd = WorldMatrix2DComponent.d[parentID];\n    const ptx = WorldMatrix2DComponent.tx[parentID];\n    const pty = WorldMatrix2DComponent.ty[parentID];\n\n    const a = LocalMatrix2DComponent.a[id];\n    const b = LocalMatrix2DComponent.b[id];\n    const c = LocalMatrix2DComponent.c[id];\n    const d = LocalMatrix2DComponent.d[id];\n    const tx = LocalMatrix2DComponent.tx[id];\n    const ty = LocalMatrix2DComponent.ty[id];\n\n    WorldMatrix2DComponent.a[id] = a * pa + b * pc;\n    WorldMatrix2DComponent.b[id] = a * pb + b * pd;\n    WorldMatrix2DComponent.c[id] = c * pa + d * pc;\n    WorldMatrix2DComponent.d[id] = c * pb + d * pd;\n    WorldMatrix2DComponent.tx[id] = tx * pa + ty * pc + ptx;\n    WorldMatrix2DComponent.ty[id] = tx * pb + ty * pd + pty;\n}\n", "import { PermissionsComponent } from './PermissionsComponent';\n\nexport function WillTransformChildren (id: number): boolean\n{\n    return Boolean(PermissionsComponent.willTransformChildren[id]);\n}\n", "import { Changed, defineQuery, defineSystem } from 'bitecs';\n\nimport { CopyLocalToWorld } from './CopyLocalToWorld';\nimport { CopyWorldToWorld } from './CopyWorldToWorld';\nimport { GameObjectCache } from '../../gameobjects/GameObjectCache';\nimport { LocalMatrix2DComponent } from './LocalMatrix2DComponent';\nimport { MultiplyLocalWithWorld } from './MultiplyLocalWithWorld';\nimport { WillTransformChildren } from '../permissions/WillTransformChildren';\n\nconst changedWorldTransformQuery = defineQuery([ Changed(LocalMatrix2DComponent) ]);\n\nconst updateWorldTransformSystem = defineSystem(world =>\n{\n    const entities = changedWorldTransformQuery(world);\n\n    for (let i = 0; i < entities.length; i++)\n    {\n        const id = entities[i];\n        const gameObject = GameObjectCache.get(id);\n        const parent = gameObject.parent;\n\n        if (!parent)\n        {\n            CopyLocalToWorld(id, id);\n        }\n        else if (!WillTransformChildren(id))\n        {\n            CopyWorldToWorld(parent.id, id);\n        }\n        else\n        {\n            MultiplyLocalWithWorld(parent.id, id);\n        }\n    }\n});\n\nexport const UpdateWorldTransform2DSystem = updateWorldTransformSystem;\n", "import { createWorld } from 'bitecs';\n\nconst world = createWorld();\n\nexport const VertexWorld = world;\n", "import { IGameObject } from '../gameobjects/IGameObject';\n\nexport function RemoveChildrenBetween (parent: IGameObject, beginIndex: number = 0, endIndex?: number): IGameObject[]\n{\n    const children = parent.children;\n\n    if (endIndex === undefined)\n    {\n        endIndex = children.length;\n    }\n\n    const range = endIndex - beginIndex;\n\n    if (range > 0 && range <= endIndex)\n    {\n        const removed = children.splice(beginIndex, range);\n\n        removed.forEach(child =>\n        {\n            child.parent = null;\n        });\n\n        return removed;\n    }\n    else\n    {\n        return [];\n    }\n}\n", "import { IGameObject } from '../gameobjects/IGameObject';\nimport { RemoveChildrenBetween } from './RemoveChildrenBetween';\n\nexport function DestroyChildren (parent: IGameObject, beginIndex: number = 0, endIndex?: number): void\n{\n    const removed = RemoveChildrenBetween(parent, beginIndex, endIndex);\n\n    removed.forEach(child =>\n    {\n        child.destroy();\n    });\n}\n", "import { IGameObject } from '../gameobjects/IGameObject';\n\n//  Returns all children of the parent, no matter what depth they go to, using an iterative search.\n//  Does NOT include the parent in the results.\n\nexport function DepthFirstSearch (parent: IGameObject): IGameObject[]\n{\n    const stack: IGameObject[] = [ parent ];\n    const output: IGameObject[] = [];\n\n    while (stack.length > 0)\n    {\n        const node = stack.shift();\n\n        output.push(node);\n\n        const numChildren = node.numChildren;\n\n        if (numChildren > 0)\n        {\n            for (let i = numChildren - 1; i >= 0; i--)\n            {\n                stack.unshift(node.children[i]);\n            }\n        }\n    }\n\n    //  Remove the parent from the results\n    output.shift();\n\n    return output;\n}\n", "import { IGameObject } from '../gameobjects/IGameObject';\n\nexport function GetChildIndex (parent: IGameObject, child: IGameObject): number\n{\n    return parent.children.indexOf(child);\n}\n", "import { IGameObject } from '../gameobjects/IGameObject';\n\nexport function RemoveChildAt (parent: IGameObject, index: number): IGameObject | undefined\n{\n    const children = parent.children;\n    let child: IGameObject;\n\n    if (index >= 0 && index < children.length)\n    {\n        const removed = children.splice(index, 1);\n\n        if (removed[0])\n        {\n            child = removed[0];\n            child.parent = null;\n        }\n    }\n\n    return child;\n}\n", "import { GetChildIndex } from './GetChildIndex';\nimport { IGameObject } from '../gameobjects/IGameObject';\nimport { RemoveChildAt } from './RemoveChildAt';\n\nexport function RemoveChild <T extends IGameObject> (parent: IGameObject, child: T): T\n{\n    const currentIndex = GetChildIndex(parent, child);\n\n    if (currentIndex > -1)\n    {\n        RemoveChildAt(parent, currentIndex);\n    }\n\n    return child;\n}\n", "import { AddedToWorldEvent, RemovedFromWorldEvent } from '../gameobjects/events';\n\nimport { Emit } from '../events/Emit';\nimport { IBaseWorld } from '../world/IBaseWorld';\nimport { IGameObject } from '../gameobjects/IGameObject';\n\nexport function SetWorld (world: IBaseWorld, ...children: IGameObject[]): IGameObject[]\n{\n    children.forEach(child =>\n    {\n        if (child.world)\n        {\n            Emit(child.world, RemovedFromWorldEvent, child, child.world);\n            Emit(child, RemovedFromWorldEvent, child, child.world);\n        }\n\n        child.world = world;\n\n        Emit(world, AddedToWorldEvent, child, world);\n        Emit(child, AddedToWorldEvent, child, world);\n    });\n\n    return children;\n}\n", "import { DepthFirstSearch } from './DepthFirstSearch';\nimport { IGameObject } from '../gameobjects/IGameObject';\nimport { RemoveChild } from './RemoveChild';\nimport { SetWorld } from './SetWorld';\n\nexport function SetParent (parent: IGameObject, ...children: IGameObject[]): IGameObject[]\n{\n    children.forEach(child =>\n    {\n        if (child.parent)\n        {\n            RemoveChild(child.parent, child);\n        }\n\n        child.parent = parent;\n    });\n\n    const parentWorld = parent.world;\n\n    if (parentWorld)\n    {\n        //  Full list of all children, including sub-children\n        SetWorld(parentWorld, ...DepthFirstSearch(parent));\n    }\n\n    return children;\n}\n", "import { IGameObject } from '../gameobjects/IGameObject';\nimport { RemoveChildrenBetween } from './RemoveChildrenBetween';\nimport { SetParent } from './SetParent';\n\nexport function ReparentChildren (parent: IGameObject, newParent: IGameObject, beginIndex: number = 0, endIndex?: number): IGameObject[]\n{\n    const moved = RemoveChildrenBetween(parent, beginIndex, endIndex);\n\n    SetParent(newParent, ...moved);\n\n    moved.forEach(child =>\n    {\n        child.updateWorldTransform();\n    });\n\n    return moved;\n}\n", "import { AddPermissionsComponent, WillRender, WillUpdate, WillUpdateChildren } from '../components/permissions';\n\nimport { AddDirtyComponent } from '../components/dirty/AddDirtyComponent';\nimport { DestroyChildren } from '../display/DestroyChildren';\nimport { DestroyEvent } from './events/DestroyEvent';\nimport { Emit } from '../events/Emit';\nimport { GameObjectCache } from './GameObjectCache';\nimport { GameObjectWorld } from '../components/GameObjectWorld';\nimport { IBaseWorld } from '../world/IBaseWorld';\nimport { ICanvasRenderer } from '../renderer/canvas/ICanvasRenderer';\nimport { IEventInstance } from '../events/IEventInstance';\nimport { IGameObject } from './IGameObject';\nimport { IRenderPass } from '../renderer/webgl1/renderpass/IRenderPass';\nimport { ReparentChildren } from '../display/ReparentChildren';\nimport { addEntity } from 'bitecs';\n\nexport class GameObject implements IGameObject\n{\n    readonly id: number = addEntity(GameObjectWorld);\n\n    name: string = '';\n\n    //  The World this Game Object belongs to. A Game Object can only belong to one World instance at any one time.\n    world: IBaseWorld;\n\n    //  The direct parent of this Game Object in the scene graph (if any)\n    parent: IGameObject;\n\n    children: IGameObject[];\n\n    events: Map<string, Set<IEventInstance>>;\n\n    // vertices: Vertex[];\n\n    visible: boolean = true;\n\n    constructor ()\n    {\n        this.children = [];\n        // this.vertices = [];\n\n        this.events = new Map();\n\n        // const id = addEntity(GameObjectWorld);\n\n        AddPermissionsComponent(this.id);\n        AddDirtyComponent(this.id);\n\n        GameObjectCache.set(this.id, this);\n    }\n\n    isRenderable (): boolean\n    {\n        return (this.visible && WillRender(this.id));\n    }\n\n    /*\n    isDirty (flag: number): boolean\n    {\n        return (this.dirty & flag) !== 0;\n    }\n\n    clearDirty (flag: number): this\n    {\n        if (this.isDirty(flag))\n        {\n            this.dirty ^= flag;\n        }\n\n        return this;\n    }\n\n    setDirty (flag: number, flag2?: number): this\n    {\n        if (!this.isDirty(flag))\n        {\n            this.dirty ^= flag;\n            this.dirtyFrame = GameInstance.getFrame();\n        }\n\n        if (!this.isDirty(flag2))\n        {\n            this.dirty ^= flag2;\n        }\n\n        return this;\n    }\n    */\n\n    update (delta: number, time: number): void\n    {\n        if (WillUpdateChildren(this.id))\n        {\n            const children = this.children;\n\n            for (let i = 0; i < children.length; i++)\n            {\n                const child = children[i];\n\n                if (child && WillUpdate(child.id))\n                {\n                    child.update(delta, time);\n                }\n            }\n        }\n\n        this.postUpdate(delta, time);\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    postUpdate (delta: number, time: number): void\n    {\n        //  Empty for parent classes to use.\n        //  Called after this GameObject and all of its children have been updated.\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    renderGL <T extends IRenderPass> (renderPass: T): void\n    {\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    renderCanvas <T extends ICanvasRenderer> (renderer: T): void\n    {\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    postRenderGL <T extends IRenderPass> (renderPass: T): void\n    {\n        //  Called after this GameObject and all of its children have been rendered.\n        //  If it doesn't have any children, this method is never called.\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    postRenderCanvas <T extends ICanvasRenderer> (renderer: T): void\n    {\n        //  Called after this GameObject and all of its children have been rendered.\n        //  If it doesn't have any children, this method is never called.\n    }\n\n    get numChildren (): number\n    {\n        return this.children.length;\n    }\n\n    destroy (reparentChildren?: IGameObject): void\n    {\n        if (reparentChildren)\n        {\n            ReparentChildren(this, reparentChildren);\n        }\n        else\n        {\n            DestroyChildren(this);\n        }\n\n        Emit(this, DestroyEvent, this);\n\n        this.events.clear();\n\n        this.world = null;\n        this.parent = null;\n        this.children = null;\n        this.events = null;\n    }\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Force a value within the boundaries by clamping it to the range `min`, `max`.\n *\n * @function Phaser.Math.Clamp\n * @since 3.0.0\n *\n * @param {number} value - The value to be clamped.\n * @param {number} min - The minimum bounds.\n * @param {number} max - The maximum bounds.\n *\n * @return {number} The clamped value.\n */\nexport function Clamp (value: number, min: number, max: number): number\n{\n    return Math.max(min, Math.min(max, value));\n}\n", "import { IMatrix2D } from './IMatrix2D';\n\n//  Compares the a and b matrix and returns if they are equal.\n\nexport function Mat2dEquals (a: IMatrix2D, b: IMatrix2D): boolean\n{\n    return (\n        a.a === b.a &&\n        a.b === b.b &&\n        a.c === b.c &&\n        a.d === b.d &&\n        a.tx === b.tx &&\n        a.ty === b.ty\n    );\n}\n", "import { ISceneRenderData } from '../scenes/ISceneRenderData';\nimport { IWorldRenderData } from './IWorldRenderData';\n\nexport function MergeRenderData (sceneRenderData: ISceneRenderData, worldRenderData: IWorldRenderData): void\n{\n    sceneRenderData.numDirtyFrames += worldRenderData.dirtyFrame;\n    sceneRenderData.numTotalFrames += worldRenderData.numRendered;\n\n    if (worldRenderData.camera.dirtyRender)\n    {\n        sceneRenderData.numDirtyCameras++;\n    }\n\n    sceneRenderData.worldData.push(worldRenderData);\n}\n", "import { IGameObject } from '../gameobjects/IGameObject';\nimport { RemoveChild } from './RemoveChild';\n\nexport function RemoveChildren (parent: IGameObject, ...children: IGameObject[]): IGameObject[]\n{\n    children.forEach(child =>\n    {\n        RemoveChild(parent, child);\n    });\n\n    return children;\n}\n", "import { IWorldRenderData } from './IWorldRenderData';\n\nexport function ResetWorldRenderData (renderData: IWorldRenderData, gameFrame: number): void\n{\n    renderData.gameFrame = gameFrame;\n    renderData.dirtyFrame = 0;\n    renderData.numRendered = 0;\n    renderData.numRenderable = 0;\n}\n", "import { Changed, defineQuery, defineSystem } from 'bitecs';\n\nimport { Extent2DComponent } from '../transform/Extent2DComponent';\nimport { QuadVertexComponent } from './QuadVertexComponent';\nimport { VertexComponent } from './VertexComponent';\nimport { WorldMatrix2DComponent } from '../transform/WorldMatrix2DComponent';\n\nconst changedWorldExtentQuery = defineQuery([\n    Changed(WorldMatrix2DComponent),\n    Changed(Extent2DComponent)\n]);\n\nconst updateVertexPositionSystem = defineSystem(world =>\n{\n    const entities = changedWorldExtentQuery(world);\n\n    for (let i = 0; i < entities.length; i++)\n    {\n        const id = entities[i];\n\n        const a = WorldMatrix2DComponent.a[id];\n        const b = WorldMatrix2DComponent.b[id];\n        const c = WorldMatrix2DComponent.c[id];\n        const d = WorldMatrix2DComponent.d[id];\n        const tx = WorldMatrix2DComponent.tx[id];\n        const ty = WorldMatrix2DComponent.ty[id];\n\n        const x = Extent2DComponent.x[id];\n        const y = Extent2DComponent.y[id];\n        const right = Extent2DComponent.right[id];\n        const bottom = Extent2DComponent.bottom[id];\n\n        const v1 = QuadVertexComponent.v1[id];\n        const v2 = QuadVertexComponent.v2[id];\n        const v3 = QuadVertexComponent.v3[id];\n        const v4 = QuadVertexComponent.v4[id];\n\n        VertexComponent.x[v1] = (x * a) + (y * c) + tx;\n        VertexComponent.y[v1] = (x * b) + (y * d) + ty;\n\n        VertexComponent.x[v2] = (x * a) + (bottom * c) + tx;\n        VertexComponent.y[v2] = (x * b) + (bottom * d) + ty;\n\n        VertexComponent.x[v3] = (right * a) + (bottom * c) + tx;\n        VertexComponent.y[v3] = (right * b) + (bottom * d) + ty;\n\n        VertexComponent.x[v4] = (right * a) + (y * c) + tx;\n        VertexComponent.y[v4] = (right * b) + (y * d) + ty;\n    }\n});\n\nexport const UpdateVertexPositionSystem = updateVertexPositionSystem;\n", "import * as GameObjectEvents from '../gameobjects/events';\nimport * as WorldEvents from './events';\n\nimport { Begin, Flush } from '../renderer/webgl1/renderpass';\nimport { Emit, Off, On, Once } from '../events';\n\nimport { AddTransform2DComponent } from '../components/transform/AddTransform2DComponent';\nimport { BuildRenderList } from './BuildRenderList';\nimport { GameObject } from '../gameobjects';\nimport { GameObjectWorld } from '../components/GameObjectWorld';\nimport { IBaseCamera } from '../camera/IBaseCamera';\nimport { IBaseWorld } from './IBaseWorld';\nimport { IEventInstance } from '../events/IEventInstance';\nimport { IGameObject } from '../gameobjects/IGameObject';\nimport { IRenderPass } from '../renderer/webgl1/renderpass/IRenderPass';\nimport { IScene } from '../scenes/IScene';\nimport { ISceneRenderData } from '../scenes/ISceneRenderData';\nimport { IWorldRenderData } from './IWorldRenderData';\nimport { Mat2dEquals } from '../math/mat2d/Mat2dEquals';\nimport { MergeRenderData } from './MergeRenderData';\nimport { RemoveChildren } from '../display';\nimport { ResetWorldRenderData } from './ResetWorldRenderData';\nimport { SearchEntry } from '../display/SearchEntryType';\nimport { UpdateLocalTransform2DSystem } from '../components/transform/UpdateLocalTransform2DSystem';\nimport { UpdateVertexPositionSystem } from '../components/vertices/UpdateVertexPositionSystem';\nimport { UpdateWorldTransform2DSystem } from '../components/transform/UpdateWorldTransform2DSystem';\nimport { WillUpdate } from '../components/permissions';\n\nexport class BaseWorld extends GameObject implements IBaseWorld\n{\n    scene: IScene;\n\n    camera: IBaseCamera;\n\n    renderData: IWorldRenderData;\n\n    forceRefresh: boolean = false;\n\n    is3D: boolean = false;\n\n    renderList: SearchEntry[];\n\n    private _updateListener: IEventInstance;\n    private _renderListener: IEventInstance;\n    private _shutdownListener: IEventInstance;\n\n    constructor (scene: IScene)\n    {\n        super();\n\n        this.scene = scene;\n\n        this.world = this;\n\n        this.renderList = [];\n\n        this._updateListener = On(scene, 'update', (delta: number, time: number) => this.update(delta, time));\n        this._renderListener = On(scene, 'render', (renderData: ISceneRenderData) => this.render(renderData));\n        this._shutdownListener = On(scene, 'shutdown', () => this.shutdown());\n\n        AddTransform2DComponent(this.id);\n\n        Once(scene, 'destroy', () => this.destroy());\n    }\n\n    update (delta: number, time: number): void\n    {\n        if (!WillUpdate(this.id))\n        {\n            return;\n        }\n\n        //  Go through and update all dirty LocalTransforms\n        //  TODO - Make this return the updated IDs so we can then update their World Transforms properly?\n        UpdateLocalTransform2DSystem(GameObjectWorld);\n        UpdateWorldTransform2DSystem(GameObjectWorld);\n        UpdateVertexPositionSystem(GameObjectWorld);\n\n        Emit(this, GameObjectEvents.UpdateEvent, delta, time, this);\n\n        super.update(delta, time);\n    }\n\n    postUpdate (delta: number, time: number): void\n    {\n        Emit(this, GameObjectEvents.PostUpdateEvent, delta, time, this);\n    }\n\n    render (sceneRenderData: ISceneRenderData): void\n    {\n        const renderData = this.renderData;\n\n        ResetWorldRenderData(renderData, sceneRenderData.gameFrame);\n\n        if (!this.isRenderable())\n        {\n            return;\n        }\n\n        BuildRenderList(this);\n\n        Emit(this, WorldEvents.WorldRenderEvent, renderData, this);\n\n        MergeRenderData(sceneRenderData, renderData);\n\n        this.camera.dirtyRender = false;\n    }\n\n    renderGL <T extends IRenderPass> (renderPass: T): void\n    {\n        const currentCamera = renderPass.current2DCamera;\n        const camera = this.camera;\n\n        if (!currentCamera || !Mat2dEquals(camera.worldTransform, currentCamera.worldTransform))\n        {\n            Flush(renderPass);\n        }\n\n        Begin(renderPass, camera);\n\n        this.renderList.forEach(entry =>\n        {\n            if (entry.children.length > 0)\n            {\n                this.renderNode(entry, renderPass);\n            }\n            else\n            {\n                entry.node.renderGL(renderPass);\n            }\n        });\n    }\n\n    renderNode (entry: SearchEntry, renderPass: IRenderPass): void\n    {\n        entry.node.renderGL(renderPass);\n\n        entry.children.forEach(child =>\n        {\n            if (child.children.length > 0)\n            {\n                this.renderNode(child, renderPass);\n            }\n            else\n            {\n                child.node.renderGL(renderPass);\n            }\n        });\n\n        entry.node.postRenderGL(renderPass);\n    }\n\n    postRenderGL <T extends IRenderPass> (renderPass: T): void\n    {\n        Emit(this, WorldEvents.WorldPostRenderEvent, renderPass, this);\n    }\n\n    shutdown (): void\n    {\n        const scene = this.scene;\n\n        Off(scene, 'update', this._updateListener);\n        Off(scene, 'render', this._renderListener);\n        Off(scene, 'shutdown', this._shutdownListener);\n\n        //  Clear the display list and reset the camera, but leave\n        //  everything in place so we can return to this World again\n        //  at a later stage\n\n        RemoveChildren(this);\n\n        Emit(this, WorldEvents.WorldShutdownEvent, this);\n\n        ResetWorldRenderData(this.renderData, 0);\n\n        if (this.camera)\n        {\n            this.camera.reset();\n        }\n    }\n\n    destroy (reparentChildren?: IGameObject): void\n    {\n        super.destroy(reparentChildren);\n\n        ResetWorldRenderData(this.renderData, 0);\n\n        if (this.camera)\n        {\n            this.camera.destroy();\n        }\n\n        this.camera = null;\n        this.renderData = null;\n    }\n}\n", "import { IBaseCamera } from '../camera/IBaseCamera';\nimport { IBaseWorld } from './IBaseWorld';\nimport { IWorldRenderData } from './IWorldRenderData';\n\nexport function CreateWorldRenderData (world: IBaseWorld, camera: IBaseCamera): IWorldRenderData\n{\n    return {\n        world,\n        camera,\n        gameFrame: 0,\n        dirtyFrame: 0,\n        numRendered: 0,\n        numRenderable: 0\n    };\n}\n", "import { BaseWorld } from './BaseWorld';\nimport { CreateWorldRenderData } from './CreateWorldRenderData';\nimport { IScene } from '../scenes/IScene';\nimport { IStaticCamera } from '../camera/IStaticCamera';\nimport { IStaticWorld } from './IStaticWorld';\nimport { StaticCamera } from '../camera/StaticCamera';\n\n//  A Static World is designed specifically to have a bounds of a fixed size\n//  and a camera that doesn't move at all (no scrolling, rotation, etc)\n//  Because it has a fixed size, there is no camera culling enabled.\n//  Games that use this kind of world include Pacman, Bejeweled and 2048.\n\nexport class StaticWorld extends BaseWorld implements IStaticWorld\n{\n    camera: IStaticCamera;\n\n    constructor (scene: IScene)\n    {\n        super(scene);\n\n        this.camera = new StaticCamera();\n\n        this.renderData = CreateWorldRenderData(this, this.camera);\n    }\n}\n", "import { BackgroundColor, GlobalVar, Parent, Scenes, WebGL } from '../../../../phaser-genesis/src/config';\n\nimport { FillLine } from '../../../../phaser-genesis/src/renderer/webgl1/draw/FillLine';\nimport { Game } from '../../../../phaser-genesis/src/Game';\nimport { IRenderPass } from '../../../../phaser-genesis/src/renderer/webgl1/renderpass/IRenderPass';\nimport { On } from '../../../../phaser-genesis/src/events/On';\nimport { Scene } from '../../../../phaser-genesis/src/scenes/Scene';\nimport { StaticWorld } from '../../../../phaser-genesis/src/world/StaticWorld';\nimport { WorldPostRenderEvent } from '../../../../phaser-genesis/src/world/events';\n\nclass Demo extends Scene\n{\n    constructor ()\n    {\n        super();\n\n        const world = new StaticWorld(this);\n\n        On(world, WorldPostRenderEvent, (renderPass: IRenderPass) => {\n\n            FillLine(renderPass, 100, 100, 300, 300, 1, 0x00ff00);\n\n        });\n    }\n}\n\nnew Game(\n    WebGL(),\n    Parent('gameParent'),\n    GlobalVar('Phaser4'),\n    BackgroundColor(0x2d2d2d),\n    Scenes(Demo)\n);\n"],
  "mappings": "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",
  "names": []
}
