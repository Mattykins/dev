{
  "version": 3,
  "sources": ["../../../../phaser-genesis/src/config/const.ts", "../../../../phaser-genesis/src/config/ConfigStore.ts", "../../../../phaser-genesis/src/config/backgroundcolor/SetBackgroundColor.ts", "../../../../phaser-genesis/src/config/backgroundcolor/BackgroundColor.ts", "../../../../phaser-genesis/src/config/banner/SetBanner.ts", "../../../../phaser-genesis/src/config/batchsize/SetBatchSize.ts", "../../../../phaser-genesis/src/config/size/GetHeight.ts", "../../../../phaser-genesis/src/config/size/GetResolution.ts", "../../../../phaser-genesis/src/config/size/GetWidth.ts", "../../../../phaser-genesis/src/config/size/SetSize.ts", "../../../../phaser-genesis/src/renderer/BindingQueue.ts", "../../../../phaser-genesis/src/config/backgroundcolor/GetBackgroundColor.ts", "../../../../phaser-genesis/src/config/renderer/SetRenderer.ts", "../../../../phaser-genesis/src/config/defaultorigin/SetDefaultOrigin.ts", "../../../../phaser-genesis/src/config/globalvar/SetGlobalVar.ts", "../../../../phaser-genesis/src/config/globalvar/GlobalVar.ts", "../../../../phaser-genesis/src/config/maxtextures/SetMaxTextures.ts", "../../../../phaser-genesis/src/dom/GetElement.ts", "../../../../phaser-genesis/src/config/parent/SetParent.ts", "../../../../phaser-genesis/src/config/parent/Parent.ts", "../../../../phaser-genesis/src/config/scenes/SetScenes.ts", "../../../../phaser-genesis/src/config/scenes/Scenes.ts", "../../../../phaser-genesis/src/geom/rectangle/RectangleContains.ts", "../../../../phaser-genesis/src/geom/rectangle/Rectangle.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/AddViewport.ts", "../../../../phaser-genesis/src/renderer/webgl1/GL.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/BindViewport.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/SetViewport.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/BindFramebuffer.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/PopViewport.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/PopFramebuffer.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/AddFramebuffer.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/SetFramebuffer.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/Draw.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/Flush.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/End.ts", "../../../../phaser-genesis/src/renderer/webgl1/colors/GetRGBArray.ts", "../../../../phaser-genesis/src/config/webglcontext/GetWebGLContext.ts", "../../../../phaser-genesis/src/renderer/webgl1/textures/CreateGLTexture.ts", "../../../../phaser-genesis/src/renderer/webgl1/fbo/DeleteFramebuffer.ts", "../../../../phaser-genesis/src/renderer/webgl1/textures/DeleteGLTexture.ts", "../../../../phaser-genesis/src/math/pow2/IsSizePowerOfTwo.ts", "../../../../phaser-genesis/src/renderer/webgl1/textures/SetGLTextureFilterMode.ts", "../../../../phaser-genesis/src/renderer/webgl1/textures/UpdateGLTexture.ts", "../../../../phaser-genesis/src/renderer/webgl1/textures/GLTextureBinding.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/ProcessBindingQueue.ts", "../../../../phaser-genesis/src/config/maxtextures/GetMaxTextures.ts", "../../../../phaser-genesis/src/renderer/webgl1/shaders/CheckShaderMaxIfStatements.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/CreateTempTextures.ts", "../../../../phaser-genesis/src/config/batchsize/GetBatchSize.ts", "../../../../phaser-genesis/src/renderer/webgl1/buffers/DeleteGLBuffer.ts", "../../../../phaser-genesis/src/renderer/webgl1/buffers/VertexBuffer.ts", "../../../../phaser-genesis/src/renderer/webgl1/buffers/IndexedVertexBuffer.ts", "../../../../phaser-genesis/src/utils/array/matrix/CheckMatrix.ts", "../../../../phaser-genesis/src/utils/array/matrix/MatrixToString.ts", "../../../../phaser-genesis/src/utils/array/matrix/ReverseColumns.ts", "../../../../phaser-genesis/src/utils/array/matrix/ReverseRows.ts", "../../../../phaser-genesis/src/utils/array/matrix/TransposeMatrix.ts", "../../../../phaser-genesis/src/utils/array/matrix/RotateMatrix.ts", "../../../../phaser-genesis/src/utils/array/matrix/Rotate180.ts", "../../../../phaser-genesis/src/utils/array/matrix/RotateLeft.ts", "../../../../phaser-genesis/src/utils/array/matrix/RotateRight.ts", "../../../../phaser-genesis/src/utils/array/NumberArray.ts", "../../../../phaser-genesis/src/math/RoundAwayFromZero.ts", "../../../../phaser-genesis/src/utils/array/NumberArrayStep.ts", "../../../../phaser-genesis/src/utils/base64/ArrayBufferToBase64.ts", "../../../../phaser-genesis/src/utils/base64/Base64ToArrayBuffer.ts", "../../../../phaser-genesis/src/utils/string/RemoveAt.ts", "../../../../phaser-genesis/src/utils/string/Reverse.ts", "../../../../phaser-genesis/src/utils/string/UppercaseFirst.ts", "../../../../phaser-genesis/src/utils/NOOP.ts", "../../../../phaser-genesis/src/math/mat4/Matrix4.ts", "../../../../phaser-genesis/src/math/mat4/Mat4Ortho.ts", "../../../../phaser-genesis/src/renderer/webgl1/shaders/CreateAttributes.ts", "../../../../phaser-genesis/src/renderer/webgl1/shaders/DeleteShaders.ts", "../../../../phaser-genesis/src/renderer/webgl1/shaders/CreateProgram.ts", "../../../../phaser-genesis/src/renderer/webgl1/shaders/CreateShader.ts", "../../../../phaser-genesis/src/renderer/webgl1/shaders/CreateUniformSetter.ts", "../../../../phaser-genesis/src/renderer/webgl1/shaders/CreateUniforms.ts", "../../../../phaser-genesis/src/renderer/webgl1/GL_CONST.ts", "../../../../phaser-genesis/src/renderer/webgl1/shaders/DefaultQuadAttributes.ts", "../../../../phaser-genesis/src/renderer/webgl1/shaders/DefaultQuadUniforms.ts", "../../../../phaser-genesis/src/renderer/webgl1/fbo/CreateDepthBuffer.ts", "../../../../phaser-genesis/src/renderer/webgl1/fbo/CreateFramebuffer.ts", "../../../../phaser-genesis/src/renderer/webgl1/glsl/SINGLE_QUAD_FRAG.ts", "../../../../phaser-genesis/src/renderer/webgl1/glsl/SINGLE_QUAD_VERT.ts", "../../../../phaser-genesis/node_modules/bitecs/src/Storage.js", "../../../../phaser-genesis/node_modules/bitecs/src/Serialize.js", "../../../../phaser-genesis/node_modules/bitecs/src/Entity.js", "../../../../phaser-genesis/node_modules/bitecs/src/Query.js", "../../../../phaser-genesis/node_modules/bitecs/src/Component.js", "../../../../phaser-genesis/node_modules/bitecs/src/World.js", "../../../../phaser-genesis/node_modules/bitecs/src/System.js", "../../../../phaser-genesis/node_modules/bitecs/src/index.js", "../../../../phaser-genesis/src/components/vertices/QuadVertexComponent.ts", "../../../../phaser-genesis/src/components/transform/Extent2DComponent.ts", "../../../../phaser-genesis/src/components/dirty/DirtyComponent.ts", "../../../../phaser-genesis/src/GameObjectWorld.ts", "../../../../phaser-genesis/src/components/dirty/AddDirtyComponent.ts", "../../../../phaser-genesis/src/components/dirty/ClearDirtyDisplayList.ts", "../../../../phaser-genesis/src/components/dirty/HasDirtyDisplayList.ts", "../../../../phaser-genesis/src/components/dirty/SetDirtyAlpha.ts", "../../../../phaser-genesis/src/components/dirty/SetDirtyDisplayList.ts", "../../../../phaser-genesis/src/GameInstance.ts", "../../../../phaser-genesis/src/components/dirty/SetDirtyTransform.ts", "../../../../phaser-genesis/src/components/dirty/SetDirtyVertexColors.ts", "../../../../phaser-genesis/src/components/transform/SetExtent.ts", "../../../../phaser-genesis/src/components/vertices/VertexComponent.ts", "../../../../phaser-genesis/src/components/vertices/SetUV.ts", "../../../../phaser-genesis/src/textures/Frame.ts", "../../../../phaser-genesis/src/textures/Texture.ts", "../../../../phaser-genesis/src/renderer/webgl1/shaders/Shader.ts", "../../../../phaser-genesis/src/renderer/webgl1/shaders/QuadShader.ts", "../../../../phaser-genesis/src/renderer/webgl1/glsl/MULTI_QUAD_FRAG.ts", "../../../../phaser-genesis/src/renderer/webgl1/shaders/MultiTextureQuadShader.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/SetDefaultBlendMode.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/SetDefaultFramebuffer.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/SetDefaultShader.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/SetDefaultVertexBuffer.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/SetDefaultViewport.ts", "../../../../phaser-genesis/src/math/vec3/Vec3.ts", "../../../../phaser-genesis/src/math/mat4/Mat4Identity.ts", "../../../../phaser-genesis/src/math/mat2d/Matrix2D.ts", "../../../../phaser-genesis/src/math/angle/AngleBetween.ts", "../../../../phaser-genesis/src/math/angle/AngleBetweenY.ts", "../../../../phaser-genesis/src/math/const.ts", "../../../../phaser-genesis/src/math/angle/CounterClockwise.ts", "../../../../phaser-genesis/src/math/angle/NormalizeAngle.ts", "../../../../phaser-genesis/src/math/angle/ReverseAngle.ts", "../../../../phaser-genesis/src/math/angle/RotateAngleTo.ts", "../../../../phaser-genesis/src/math/angle/ShortestAngleBetween.ts", "../../../../phaser-genesis/src/math/Wrap.ts", "../../../../phaser-genesis/src/math/angle/WrapAngle.ts", "../../../../phaser-genesis/src/math/angle/WrapAngleDegrees.ts", "../../../../phaser-genesis/src/math/angle/index.ts", "../../../../phaser-genesis/src/camera/StaticCamera.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/RenderPass.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/BindShader.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/Begin.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/BindBlendMode.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/BindVertexBuffer.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/GetVertexBufferEntry.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/SetTexture.ts", "../../../../phaser-genesis/src/renderer/webgl1/renderpass/Start.ts", "../../../../phaser-genesis/src/renderer/webgl1/WebGLRendererInstance.ts", "../../../../phaser-genesis/src/world/WorldList.ts", "../../../../phaser-genesis/src/renderer/webgl1/WebGLRenderer.ts", "../../../../phaser-genesis/src/config/webgl/WebGL.ts", "../../../../phaser-genesis/src/config/webglcontext/SetWebGLContext.ts", "../../../../phaser-genesis/src/config/worldsize/SetWorldSize.ts", "../../../../phaser-genesis/src/components/hierarchy/HierarchyComponent.ts", "../../../../phaser-genesis/src/components/hierarchy/AddHierarchyComponent.ts", "../../../../phaser-genesis/src/components/hierarchy/ClearWorldAndParentID.ts", "../../../../phaser-genesis/src/gameobjects/GameObjectCache.ts", "../../../../phaser-genesis/src/gameobjects/GameObjectTree.ts", "../../../../phaser-genesis/src/components/hierarchy/GetChildren.ts", "../../../../phaser-genesis/src/components/hierarchy/GetNumChildren.ts", "../../../../phaser-genesis/src/components/hierarchy/GetParentGameObject.ts", "../../../../phaser-genesis/src/components/hierarchy/GetParentID.ts", "../../../../phaser-genesis/src/components/hierarchy/GetWorldID.ts", "../../../../phaser-genesis/src/components/hierarchy/SetParentID.ts", "../../../../phaser-genesis/src/components/hierarchy/SetWorldAndParentID.ts", "../../../../phaser-genesis/src/components/hierarchy/SetWorldID.ts", "../../../../phaser-genesis/src/components/hierarchy/UpdateNumChildren.ts", "../../../../phaser-genesis/src/gameobjects/DIRTY_CONST.ts", "../../../../phaser-genesis/src/components/transform/GetVertices.ts", "../../../../phaser-genesis/src/components/permissions/PermissionsComponent.ts", "../../../../phaser-genesis/src/components/permissions/AddPermissionsComponent.ts", "../../../../phaser-genesis/src/components/permissions/WillRender.ts", "../../../../phaser-genesis/src/components/permissions/WillRenderChildren.ts", "../../../../phaser-genesis/src/components/permissions/WillUpdate.ts", "../../../../phaser-genesis/src/components/permissions/WillUpdateChildren.ts", "../../../../phaser-genesis/src/components/transform/LocalMatrix2DComponent.ts", "../../../../phaser-genesis/src/components/transform/Transform2DComponent.ts", "../../../../phaser-genesis/src/components/transform/WorldMatrix2DComponent.ts", "../../../../phaser-genesis/src/components/transform/AddTransform2DComponent.ts", "../../../../phaser-genesis/src/math/vec2/Vec2.ts", "../../../../phaser-genesis/src/renderer/webgl1/colors/PackColors.ts", "../../../../phaser-genesis/src/components/transform/UpdateVertices.ts", "../../../../phaser-genesis/src/components/transform/PreRenderVertices.ts", "../../../../phaser-genesis/src/components/transform/UpdateExtent.ts", "../../../../phaser-genesis/src/components/transform/UpdateLocalTransform2DSystem.ts", "../../../../phaser-genesis/src/components/transform/CopyLocalToWorld.ts", "../../../../phaser-genesis/src/components/transform/CopyWorldToWorld.ts", "../../../../phaser-genesis/src/components/transform/MultiplyLocalWithWorld.ts", "../../../../phaser-genesis/src/world/RenderDataComponent.ts", "../../../../phaser-genesis/src/world/ResetWorldRenderData.ts", "../../../../phaser-genesis/src/components/permissions/WillTransformChildren.ts", "../../../../phaser-genesis/src/components/transform/UpdateWorldTransform.ts", "../../../../phaser-genesis/src/components/transform/UpdateWorldTransform2DSystem.ts", "../../../../phaser-genesis/src/components/vertices/VertexWorld.ts", "../../../../phaser-genesis/src/components/vertices/AddVertex.ts", "../../../../phaser-genesis/src/components/vertices/UpdateVertexPositionSystem.ts", "../../../../phaser-genesis/src/renderer/webgl1/draw/AddVertexToBatch.ts", "../../../../phaser-genesis/src/renderer/webgl1/draw/BatchTexturedQuad.ts", "../../../../phaser-genesis/src/config/defaultorigin/GetDefaultOriginX.ts", "../../../../phaser-genesis/src/config/defaultorigin/GetDefaultOriginY.ts", "../../../../phaser-genesis/src/display/RemoveChildrenBetween.ts", "../../../../phaser-genesis/src/display/DestroyChildren.ts", "../../../../phaser-genesis/src/gameobjects/events/DestroyEvent.ts", "../../../../phaser-genesis/src/events/Emit.ts", "../../../../phaser-genesis/src/display/DepthFirstSearch.ts", "../../../../phaser-genesis/src/display/GetChildIndex.ts", "../../../../phaser-genesis/src/display/RemoveChildAt.ts", "../../../../phaser-genesis/src/display/RemoveChild.ts", "../../../../phaser-genesis/src/display/SetWorld.ts", "../../../../phaser-genesis/src/display/SetParent.ts", "../../../../phaser-genesis/src/display/ReparentChildren.ts", "../../../../phaser-genesis/src/gameobjects/GameObject.ts", "../../../../phaser-genesis/src/gameobjects/container/Container.ts", "../../../../phaser-genesis/src/renderer/canvas/draw/DrawImage.ts", "../../../../phaser-genesis/src/gameobjects/sprite/SetFrame.ts", "../../../../phaser-genesis/src/textures/TextureManagerInstance.ts", "../../../../phaser-genesis/src/textures/GetTexture.ts", "../../../../phaser-genesis/src/gameobjects/sprite/SetTexture.ts", "../../../../phaser-genesis/src/gameobjects/sprite/Sprite.ts", "../../../../phaser-genesis/src/math/Clamp.ts", "../../../../phaser-genesis/src/textures/CreateCanvas.ts", "../../../../phaser-genesis/src/display/IsValidParent.ts", "../../../../phaser-genesis/src/display/AddChild.ts", "../../../../phaser-genesis/src/display/RemoveChildren.ts", "../../../../phaser-genesis/src/math/easing/back/In.ts", "../../../../phaser-genesis/src/math/easing/back/InOut.ts", "../../../../phaser-genesis/src/math/easing/back/Out.ts", "../../../../phaser-genesis/src/math/easing/bounce/In.ts", "../../../../phaser-genesis/src/math/easing/bounce/InOut.ts", "../../../../phaser-genesis/src/math/easing/bounce/Out.ts", "../../../../phaser-genesis/src/math/easing/circular/In.ts", "../../../../phaser-genesis/src/math/easing/circular/InOut.ts", "../../../../phaser-genesis/src/math/easing/circular/Out.ts", "../../../../phaser-genesis/src/math/easing/cubic/In.ts", "../../../../phaser-genesis/src/math/easing/cubic/InOut.ts", "../../../../phaser-genesis/src/math/easing/cubic/Out.ts", "../../../../phaser-genesis/src/math/easing/elastic/In.ts", "../../../../phaser-genesis/src/math/easing/elastic/InOut.ts", "../../../../phaser-genesis/src/math/easing/elastic/Out.ts", "../../../../phaser-genesis/src/math/easing/expo/In.ts", "../../../../phaser-genesis/src/math/easing/expo/InOut.ts", "../../../../phaser-genesis/src/math/easing/expo/Out.ts", "../../../../phaser-genesis/src/math/easing/quadratic/In.ts", "../../../../phaser-genesis/src/math/easing/quadratic/InOut.ts", "../../../../phaser-genesis/src/math/easing/quadratic/Out.ts", "../../../../phaser-genesis/src/math/easing/quartic/In.ts", "../../../../phaser-genesis/src/math/easing/quartic/InOut.ts", "../../../../phaser-genesis/src/math/easing/quartic/Out.ts", "../../../../phaser-genesis/src/math/easing/quintic/In.ts", "../../../../phaser-genesis/src/math/easing/quintic/InOut.ts", "../../../../phaser-genesis/src/math/easing/quintic/Out.ts", "../../../../phaser-genesis/src/math/easing/sine/In.ts", "../../../../phaser-genesis/src/math/easing/sine/InOut.ts", "../../../../phaser-genesis/src/math/easing/sine/Out.ts", "../../../../phaser-genesis/src/math/easing/Linear.ts", "../../../../phaser-genesis/src/math/easing/Stepped.ts", "../../../../phaser-genesis/src/math/easing/GetEase.ts", "../../../../phaser-genesis/src/math/fuzzy/FuzzyCeil.ts", "../../../../phaser-genesis/src/math/fuzzy/FuzzyEqual.ts", "../../../../phaser-genesis/src/math/fuzzy/FuzzyFloor.ts", "../../../../phaser-genesis/src/math/fuzzy/FuzzyGreaterThan.ts", "../../../../phaser-genesis/src/math/fuzzy/FuzzyLessThan.ts", "../../../../phaser-genesis/src/math/fuzzy/index.ts", "../../../../phaser-genesis/src/math/Factorial.ts", "../../../../phaser-genesis/src/math/Bernstein.ts", "../../../../phaser-genesis/src/math/interpolation/BezierInterpolation.ts", "../../../../phaser-genesis/src/math/interpolation/CatmullRomInterpolation.ts", "../../../../phaser-genesis/src/math/interpolation/CubicBezierInterpolation.ts", "../../../../phaser-genesis/src/math/Linear.ts", "../../../../phaser-genesis/src/math/interpolation/LinearInterpolation.ts", "../../../../phaser-genesis/src/math/interpolation/QuadraticBezierInterpolation.ts", "../../../../phaser-genesis/src/math/SmoothStep.ts", "../../../../phaser-genesis/src/math/interpolation/SmoothStepInterpolation.ts", "../../../../phaser-genesis/src/math/SmootherStep.ts", "../../../../phaser-genesis/src/math/interpolation/SmootherStepInterpolation.ts", "../../../../phaser-genesis/src/math/interpolation/index.ts", "../../../../phaser-genesis/src/math/mat2d/Mat2dAppend.ts", "../../../../phaser-genesis/src/math/mat2d/Mat2dEquals.ts", "../../../../phaser-genesis/src/math/mat2d/Mat2dGlobalToLocal.ts", "../../../../phaser-genesis/src/math/pow2/GetPowerOfTwo.ts", "../../../../phaser-genesis/src/math/pow2/IsValuePowerOfTwo.ts", "../../../../phaser-genesis/src/math/vec3/Vec3Backward.ts", "../../../../phaser-genesis/src/math/vec3/Vec3Down.ts", "../../../../phaser-genesis/src/math/vec3/Vec3Forward.ts", "../../../../phaser-genesis/src/math/vec3/Vec3Left.ts", "../../../../phaser-genesis/src/math/vec3/Vec3Right.ts", "../../../../phaser-genesis/src/math/vec3/Vec3Up.ts", "../../../../phaser-genesis/src/math/vec3/Vec3Zero.ts", "../../../../phaser-genesis/src/math/vec3/const.ts", "../../../../phaser-genesis/src/math/vec3/Vec3Project.ts", "../../../../phaser-genesis/src/math/vec3/Vec3Unproject.ts", "../../../../phaser-genesis/src/math/snap/SnapCeil.ts", "../../../../phaser-genesis/src/math/snap/SnapFloor.ts", "../../../../phaser-genesis/src/math/snap/SnapTo.ts", "../../../../phaser-genesis/src/math/snap/index.ts", "../../../../phaser-genesis/src/math/Average.ts", "../../../../phaser-genesis/src/math/Between.ts", "../../../../phaser-genesis/src/math/CeilTo.ts", "../../../../phaser-genesis/src/math/DegToRad.ts", "../../../../phaser-genesis/src/math/Difference.ts", "../../../../phaser-genesis/src/math/FloorTo.ts", "../../../../phaser-genesis/src/math/FromPercent.ts", "../../../../phaser-genesis/src/math/GetSpeed.ts", "../../../../phaser-genesis/src/math/MaxAdd.ts", "../../../../phaser-genesis/src/math/MinSub.ts", "../../../../phaser-genesis/src/math/Percent.ts", "../../../../phaser-genesis/src/math/RadToDeg.ts", "../../../../phaser-genesis/src/math/RoundTo.ts", "../../../../phaser-genesis/src/math/SinCosTableGenerator.ts", "../../../../phaser-genesis/src/math/Within.ts", "../../../../phaser-genesis/src/dom/AddToDOM.ts", "../../../../phaser-genesis/src/dom/DOMContentLoaded.ts", "../../../../phaser-genesis/src/dom/ParseXML.ts", "../../../../phaser-genesis/src/events/EventEmitter.ts", "../../../../phaser-genesis/src/events/EventInstance.ts", "../../../../phaser-genesis/src/events/On.ts", "../../../../phaser-genesis/src/events/Once.ts", "../../../../phaser-genesis/src/config/banner/GetBanner.ts", "../../../../phaser-genesis/src/config/globalvar/GetGlobalVar.ts", "../../../../phaser-genesis/src/config/parent/GetParent.ts", "../../../../phaser-genesis/src/scenes/RenderStatsComponent.ts", "../../../../phaser-genesis/src/scenes/AddRenderStatsComponent.ts", "../../../../phaser-genesis/src/scenes/GameObjectRenderList.ts", "../../../../phaser-genesis/src/scenes/GetConfigValue.ts", "../../../../phaser-genesis/src/scenes/SceneManagerInstance.ts", "../../../../phaser-genesis/src/scenes/GetRenderStatsAsObject.ts", "../../../../phaser-genesis/src/scenes/Install.ts", "../../../../phaser-genesis/src/scenes/ResetRenderStats.ts", "../../../../phaser-genesis/src/scenes/Scene.ts", "../../../../phaser-genesis/src/config/scenes/GetScenes.ts", "../../../../phaser-genesis/src/scenes/SceneManager.ts", "../../../../phaser-genesis/src/config/renderer/GetRenderer.ts", "../../../../phaser-genesis/src/config/SetConfigDefaults.ts", "../../../../phaser-genesis/src/textures/TextureManager.ts", "../../../../phaser-genesis/src/Game.ts", "../../../../phaser-genesis/src/loader/File.ts", "../../../../phaser-genesis/src/loader/GetURL.ts", "../../../../phaser-genesis/src/loader/ImageLoader.ts", "../../../../phaser-genesis/src/loader/files/ImageFile.ts", "../../../../phaser-genesis/src/cache/Cache.ts", "../../../../phaser-genesis/src/loader/Loader.ts", "../../../../phaser-genesis/src/input/mouse/Mouse.ts", "../../../../phaser-genesis/src/world/events/WorldAfterUpdateEvent.ts", "../../../../phaser-genesis/src/world/events/WorldBeforeUpdateEvent.ts", "../../../../phaser-genesis/src/world/events/WorldPostRenderEvent.ts", "../../../../phaser-genesis/src/world/events/WorldRenderEvent.ts", "../../../../phaser-genesis/src/world/events/WorldShutdownEvent.ts", "../../../../phaser-genesis/src/world/events/WorldUpdateEvent.ts", "../../../../phaser-genesis/src/world/AddRenderDataComponent.ts", "../../../../phaser-genesis/src/world/CheckDirtyTransforms.ts", "../../../../phaser-genesis/src/config/worldsize/GetWorldSize.ts", "../../../../phaser-genesis/src/world/RebuildWorldList.ts", "../../../../phaser-genesis/src/world/RebuildWorldTransforms.ts", "../../../../phaser-genesis/src/scenes/events/SceneDestroyEvent.ts", "../../../../phaser-genesis/src/world/BaseWorld.ts", "../../../../phaser-genesis/src/world/CreateWorldRenderData.ts", "../../../../phaser-genesis/src/world/StaticWorld.ts", "../../src/display/world transform stats.ts"],
  "sourcesContent": ["export const CONFIG_DEFAULTS = {\n    AUTO: 'Auto',\n    BACKGROUND_COLOR: 'BackgroundColor',\n    BANNER: 'Banner',\n    BATCH_SIZE: 'BatchSize',\n    CANVAS_CONTEXT: 'CanvasContext',\n    CANVAS: 'Canvas',\n    DEFAULT_ORIGIN: 'DefaultOrigin',\n    GLOBAL_VAR: 'GlobalVar',\n    MAX_TEXTURES: 'MaxTextures',\n    PARENT: 'Parent',\n    RENDERER: 'Renderer',\n    SCENES: 'Scenes',\n    SIZE: 'Size',\n    WEBGL_CONTEXT: 'WebGLContext',\n    WEBGL: 'WebGL',\n    WORLD_SIZE: 'WorldSize'\n};\n", "export const ConfigStore = new Map();\n", "import { CONFIG_DEFAULTS } from '../const';\nimport { ConfigStore } from '../ConfigStore';\n\nexport function SetBackgroundColor (color: number): void\n{\n    ConfigStore.set(CONFIG_DEFAULTS.BACKGROUND_COLOR, color);\n}\n", "import { SetBackgroundColor } from './SetBackgroundColor';\n\nexport function BackgroundColor (color: number): () => void\n{\n    return (): void =>\n    {\n        SetBackgroundColor(color);\n    };\n}\n", "import { CONFIG_DEFAULTS } from '../const';\nimport { ConfigStore } from '../ConfigStore';\n\nexport function SetBanner (title: string = '', version: string = '', url: string = '', color: string = '#fff', background: string = 'linear-gradient(#3e0081 40%, #00bcc3)'): void\n{\n    ConfigStore.set(CONFIG_DEFAULTS.BANNER, { title, version, url, color, background });\n}\n", "import { CONFIG_DEFAULTS } from '../const';\nimport { ConfigStore } from '../ConfigStore';\n\nexport function SetBatchSize (size: number): void\n{\n    ConfigStore.set(CONFIG_DEFAULTS.BATCH_SIZE, size);\n}\n", "import { CONFIG_DEFAULTS } from '../const';\nimport { ConfigStore } from '../ConfigStore';\n\nexport function GetHeight (): number\n{\n    return ConfigStore.get(CONFIG_DEFAULTS.SIZE).height;\n}\n", "import { CONFIG_DEFAULTS } from '../const';\nimport { ConfigStore } from '../ConfigStore';\n\nexport function GetResolution (): number\n{\n    return ConfigStore.get(CONFIG_DEFAULTS.SIZE).resolution;\n}\n", "import { CONFIG_DEFAULTS } from '../const';\nimport { ConfigStore } from '../ConfigStore';\n\nexport function GetWidth (): number\n{\n    return ConfigStore.get(CONFIG_DEFAULTS.SIZE).width;\n}\n", "import { CONFIG_DEFAULTS } from '../const';\nimport { ConfigStore } from '../ConfigStore';\n\nexport function SetSize (width: number = 800, height: number = 600, resolution: number = 1): void\n{\n    if (resolution === 0)\n    {\n        resolution = window.devicePixelRatio;\n    }\n\n    ConfigStore.set(CONFIG_DEFAULTS.SIZE, { width, height, resolution });\n}\n", "import { IGLTextureBindingConfig } from './webgl1/textures/IGLTextureBindingConfig';\nimport { ITexture } from '../textures/ITexture';\n\nexport type BindingQueueEntry = {\n    texture: ITexture,\n    glConfig: IGLTextureBindingConfig\n};\n\nconst queue: BindingQueueEntry[] = [];\n\nexport const BindingQueue =\n{\n    add: (texture: ITexture, glConfig?: IGLTextureBindingConfig): void =>\n    {\n        queue.push({ texture, glConfig });\n    },\n\n    get: (): BindingQueueEntry[] =>\n    {\n        return queue;\n    },\n\n    clear: (): void =>\n    {\n        queue.length = 0;\n    }\n};\n", "import { CONFIG_DEFAULTS } from '../const';\nimport { ConfigStore } from '../ConfigStore';\n\nexport function GetBackgroundColor (): number\n{\n    return ConfigStore.get(CONFIG_DEFAULTS.BACKGROUND_COLOR);\n}\n", "import { CONFIG_DEFAULTS } from '../const';\nimport { ConfigStore } from '../ConfigStore';\nimport { IRendererConstructor } from '../../renderer/IRendererConstructor';\n\nexport function SetRenderer (renderer: IRendererConstructor): void\n{\n    ConfigStore.set(CONFIG_DEFAULTS.RENDERER, renderer);\n}\n", "import { CONFIG_DEFAULTS } from '../const';\nimport { ConfigStore } from '../ConfigStore';\n\nexport function SetDefaultOrigin (x: number = 0.5, y: number = x): void\n{\n    ConfigStore.set(CONFIG_DEFAULTS.DEFAULT_ORIGIN, { x, y });\n}\n", "import { CONFIG_DEFAULTS } from '../const';\nimport { ConfigStore } from '../ConfigStore';\n\nexport function SetGlobalVar (name: string): void\n{\n    ConfigStore.set(CONFIG_DEFAULTS.GLOBAL_VAR, name);\n}\n", "import { SetGlobalVar } from './SetGlobalVar';\n\nexport function GlobalVar (name: string): () => void\n{\n    return (): void =>\n    {\n        SetGlobalVar(name);\n    };\n}\n", "import { CONFIG_DEFAULTS } from '../const';\nimport { ConfigStore } from '../ConfigStore';\n\nexport function SetMaxTextures (max: number): void\n{\n    ConfigStore.set(CONFIG_DEFAULTS.MAX_TEXTURES, max);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Attempts to get the target DOM element based on the given value, which can be either\n * a string, in which case it will be looked-up by ID, or an element node. If nothing\n * can be found it will return a reference to the document.body.\n *\n * @function Phaser.DOM.GetElement\n * @since 4.0.0\n *\n * @param {(string | HTMLElement)} [target] - The DOM element to look-up.\n * \n * @returns {HTMLElement} The HTML Element that was found.\n */\nexport function GetElement (target?: string | HTMLElement): HTMLElement\n{\n    let element: HTMLElement;\n\n    if (target)\n    {\n        if (typeof target === 'string')\n        {\n            //  Hopefully an element ID\n            element = document.getElementById(target);\n        }\n        else if (typeof target === 'object' && target.nodeType === 1)\n        {\n            //  Quick test for a HTMLElement\n            element = target;\n        }\n    }\n\n    if (!element)\n    {\n        element = document.body;\n    }\n\n    return element;\n}\n", "import { CONFIG_DEFAULTS } from '../const';\nimport { ConfigStore } from '../ConfigStore';\nimport { GetElement } from '../../dom/GetElement';\n\nexport function SetParent (parentElement?: string | HTMLElement): void\n{\n    //  If this function was called and `null` *wasn't* given as the parent\n    //  then we try to figure it out, or fallback to the document body\n    if (parentElement)\n    {\n        ConfigStore.set(CONFIG_DEFAULTS.PARENT, GetElement(parentElement));\n    }\n}\n", "import { SetParent } from './SetParent';\n\nexport function Parent (parentElement?: string | HTMLElement): () => void\n{\n    return (): void =>\n    {\n        SetParent(parentElement);\n    };\n}\n", "import { CONFIG_DEFAULTS } from '../const';\nimport { ConfigStore } from '../ConfigStore';\nimport { ISceneConstructor } from '../../scenes/ISceneConstructor';\n\nexport function SetScenes (scenes?: ISceneConstructor | Array<ISceneConstructor>): void\n{\n    ConfigStore.set(CONFIG_DEFAULTS.SCENES, [].concat(scenes));\n}\n", "import { ISceneConstructor } from '../../scenes/ISceneConstructor';\nimport { SetScenes } from './SetScenes';\n\nexport function Scenes (scenes?: ISceneConstructor | Array<ISceneConstructor>): () => void\n{\n    return (): void =>\n    {\n        SetScenes(scenes);\n    };\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { IRectangle } from './IRectangle';\n\n/**\n * Checks if a given point is inside a Rectangle's bounds.\n */\nexport function RectangleContains (rect: IRectangle, x: number, y: number): boolean\n{\n    if (rect.width <= 0 || rect.height <= 0)\n    {\n        return false;\n    }\n\n    return (rect.x <= x && rect.x + rect.width >= x && rect.y <= y && rect.y + rect.height >= y);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { RectangleContains } from './RectangleContains';\n\nexport class Rectangle\n{\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n\n    constructor (x: number = 0, y: number = 0, width: number = 0, height: number = 0)\n    {\n        this.set(x, y, width, height);\n    }\n\n    set (x: number = 0, y: number = 0, width: number = 0, height: number = 0): this\n    {\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n\n        return this;\n    }\n\n    contains (x: number, y: number): boolean\n    {\n        return RectangleContains(this, x, y);\n    }\n\n    set right (value: number)\n    {\n        if (value <= this.x)\n        {\n            this.width = 0;\n        }\n        else\n        {\n            this.width = value - this.x;\n        }\n    }\n\n    get right (): number\n    {\n        return this.x + this.width;\n    }\n\n    set bottom (value: number)\n    {\n        if (value <= this.y)\n        {\n            this.height = 0;\n        }\n        else\n        {\n            this.height = value - this.y;\n        }\n    }\n\n    get bottom (): number\n    {\n        return this.y + this.height;\n    }\n}\n", "import { IRenderPass } from './IRenderPass';\nimport { Rectangle } from '../../../geom/rectangle/Rectangle';\n\nexport function AddViewport (renderPass: IRenderPass, x: number = 0, y: number = 0, width: number = 0, height: number = 0): Rectangle\n{\n    const viewport = new Rectangle(x, y, width, height);\n\n    renderPass.viewportStack.push(viewport);\n\n    return viewport;\n}\n", "export let gl: WebGLRenderingContext;\n\nexport const GL =\n{\n    get: (): WebGLRenderingContext =>\n    {\n        return gl;\n    },\n\n    set: (context: WebGLRenderingContext | undefined): void =>\n    {\n        gl = context;\n    }\n};\n", "import { IRenderPass } from './IRenderPass';\nimport { Rectangle } from '../../../geom/rectangle';\nimport { gl } from '../GL';\n\nexport function BindViewport (renderPass: IRenderPass, viewport?: Rectangle): void\n{\n    if (!viewport)\n    {\n        viewport = renderPass.currentViewport;\n\n        if (!viewport)\n        {\n            return;\n        }\n    }\n\n    const glv = gl.getParameter(gl.VIEWPORT);\n\n    if (glv[0] !== viewport.x || glv[1] !== viewport.y || glv[2] !== viewport.width || glv[3] !== viewport.height)\n    {\n        gl.viewport(viewport.x, viewport.y, viewport.width, viewport.height);\n    }\n}\n", "import { AddViewport } from './AddViewport';\nimport { BindViewport } from './BindViewport';\nimport { IRenderPass } from './IRenderPass';\n\nexport function SetViewport (renderPass: IRenderPass, x: number = 0, y: number = 0, width: number = 0, height: number = 0): void\n{\n    const entry = AddViewport(renderPass, x, y, width, height);\n\n    BindViewport(renderPass, entry);\n\n    renderPass.currentViewport = entry;\n}\n", "import { FramebufferStackEntry } from './RenderPass';\nimport { IRenderPass } from './IRenderPass';\nimport { SetViewport } from './SetViewport';\nimport { gl } from '../GL';\n\nexport function BindFramebuffer (renderPass: IRenderPass, clear: boolean = true, entry?: FramebufferStackEntry): void\n{\n    if (!entry)\n    {\n        entry = renderPass.currentFramebuffer;\n    }\n\n    const { framebuffer, viewport } = entry;\n\n    if (renderPass.currentFramebuffer.framebuffer !== framebuffer)\n    {\n        gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n    }\n\n    if (clear)\n    {\n        gl.clearColor(0, 0, 0, 0);\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n    }\n\n    if (viewport)\n    {\n        SetViewport(renderPass, viewport.x, viewport.y, viewport.width, viewport.height);\n    }\n}\n", "import { BindViewport } from './BindViewport';\nimport { IRenderPass } from './IRenderPass';\n\nexport function PopViewport (renderPass: IRenderPass): void\n{\n    const stack = renderPass.viewportStack;\n\n    //  > 1 because index 0 contains the default, which we don't want to remove\n    if (stack.length > 1)\n    {\n        stack.pop();\n    }\n\n    renderPass.currentViewport = stack[ stack.length - 1 ];\n\n    BindViewport(renderPass);\n}\n", "import { BindFramebuffer } from './BindFramebuffer';\nimport { IRenderPass } from './IRenderPass';\nimport { PopViewport } from './PopViewport';\n\nexport function PopFramebuffer (renderPass: IRenderPass): void\n{\n    const stack = renderPass.framebufferStack;\n\n    //  > 1 because index 0 contains the default, which we don't want to remove\n    if (stack.length > 1)\n    {\n        if (renderPass.currentFramebuffer.viewport)\n        {\n            PopViewport(renderPass);\n        }\n\n        stack.pop();\n    }\n\n    renderPass.currentFramebuffer = stack[ stack.length - 1 ];\n\n    BindFramebuffer(renderPass, false);\n}\n", "import { FramebufferStackEntry } from './RenderPass';\nimport { IRenderPass } from './IRenderPass';\nimport { Rectangle } from '../../../geom/rectangle/Rectangle';\n\nexport function AddFramebuffer (renderPass: IRenderPass, framebuffer: WebGLFramebuffer, viewport?: Rectangle): FramebufferStackEntry\n{\n    const entry = { framebuffer, viewport };\n\n    renderPass.framebufferStack.push(entry);\n\n    return entry;\n}\n", "import { AddFramebuffer } from './AddFramebuffer';\nimport { BindFramebuffer } from './BindFramebuffer';\nimport { IRenderPass } from './IRenderPass';\nimport { Rectangle } from '../../../geom/rectangle';\n\nexport function SetFramebuffer (renderPass: IRenderPass, framebuffer: WebGLFramebuffer, clear: boolean = true, viewport?: Rectangle): void\n{\n    const entry = AddFramebuffer(renderPass, framebuffer, viewport);\n\n    BindFramebuffer(renderPass, clear, entry);\n\n    renderPass.currentFramebuffer = entry;\n}\n", "import { IRenderPass } from './IRenderPass';\nimport { PopFramebuffer } from './PopFramebuffer';\nimport { SetFramebuffer } from './SetFramebuffer';\nimport { gl } from '../GL';\n\nexport function Draw (renderPass: IRenderPass): void\n{\n    const count = renderPass.count;\n\n    if (count === 0)\n    {\n        return;\n    }\n\n    const currentBuffer = renderPass.currentVertexBuffer;\n    const currentShader = renderPass.currentShader;\n\n    const renderToFramebuffer = currentShader.shader.renderToFramebuffer;\n\n    if (renderToFramebuffer)\n    {\n        SetFramebuffer(renderPass, currentShader.shader.framebuffer, true);\n    }\n\n    if (count === currentBuffer.batchSize)\n    {\n        const type = (currentBuffer.isDynamic) ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW;\n\n        gl.bufferData(gl.ARRAY_BUFFER, currentBuffer.data, type);\n    }\n    else\n    {\n        const subsize = (currentBuffer.indexed) ? count * currentBuffer.entryElementSize : count * currentBuffer.vertexElementSize;\n\n        const view = currentBuffer.vertexViewF32.subarray(0, subsize);\n\n        gl.bufferSubData(gl.ARRAY_BUFFER, 0, view);\n    }\n\n    if (currentBuffer.indexed)\n    {\n        gl.drawElements(gl.TRIANGLES, count * currentBuffer.entryIndexSize, gl.UNSIGNED_SHORT, 0);\n    }\n    else\n    {\n        gl.drawArrays(gl.TRIANGLES, 0, count);\n    }\n\n    if (renderToFramebuffer)\n    {\n        PopFramebuffer(renderPass);\n    }\n}\n", "import { Draw } from './Draw';\nimport { IRenderPass } from './IRenderPass';\n\nexport function Flush (renderPass: IRenderPass, forceCount?: number): boolean\n{\n    if (forceCount)\n    {\n        renderPass.count = forceCount;\n    }\n\n    const count = renderPass.count;\n\n    if (count === 0)\n    {\n        return false;\n    }\n\n    Draw(renderPass);\n\n    renderPass.prevCount = count;\n\n    renderPass.count = 0;\n\n    renderPass.flushTotal++;\n\n    return true;\n}\n", "import { Flush } from './Flush';\nimport { IRenderPass } from './IRenderPass';\n\nexport function End (renderPass: IRenderPass): void\n{\n    Flush(renderPass);\n}\n", "export function GetRGBArray (color: number, output: number[] = []): number[]\n{\n    const r: number = color >> 16 & 0xFF;\n    const g: number = color >> 8 & 0xFF;\n    const b: number = color & 0xFF;\n    const a: number = (color > 16777215) ? color >>> 24 : 255;\n\n    output[0] = r / 255;\n    output[1] = g / 255;\n    output[2] = b / 255;\n    output[3] = a / 255;\n\n    return output;\n}\n", "import { CONFIG_DEFAULTS } from '../const';\nimport { ConfigStore } from '../ConfigStore';\n\nexport function GetWebGLContext (): WebGLContextAttributes\n{\n    return ConfigStore.get(CONFIG_DEFAULTS.WEBGL_CONTEXT);\n}\n", "import { IGLTextureBinding } from './IGLTextureBinding';\nimport { gl } from '../GL';\n\nexport function CreateGLTexture <T extends IGLTextureBinding> (binding: T): WebGLTexture\n{\n    const { parent, flipY, unpackPremultiplyAlpha, minFilter, magFilter, wrapS, wrapT, generateMipmap, isPOT } = binding;\n\n    const source = parent.image;\n\n    let width = parent.width;\n    let height = parent.height;\n\n    const glTexture: WebGLTexture = gl.createTexture();\n\n    gl.activeTexture(gl.TEXTURE0);\n    gl.bindTexture(gl.TEXTURE_2D, glTexture);\n\n    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, flipY);\n    gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, unpackPremultiplyAlpha);\n\n    if (source)\n    {\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, source);\n\n        width = source.width;\n        height = source.height;\n    }\n    else\n    {\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n    }\n\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, minFilter);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, magFilter);\n\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, wrapS);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, wrapT);\n\n    if (generateMipmap && isPOT)\n    {\n        gl.generateMipmap(gl.TEXTURE_2D);\n    }\n\n    binding.texture = glTexture;\n\n    return glTexture;\n}\n", "import { gl } from '../GL';\n\nexport function DeleteFramebuffer (framebuffer: WebGLFramebuffer): void\n{\n    if (gl && gl.isFramebuffer(framebuffer))\n    {\n        gl.deleteFramebuffer(framebuffer);\n    }\n}\n", "import { gl } from '../GL';\n\nexport function DeleteGLTexture (texture: WebGLTexture): void\n{\n    if (gl.isTexture(texture))\n    {\n        gl.deleteTexture(texture);\n    }\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Checks if the given `width` and `height` are a power of two.\n * Useful for checking texture dimensions.\n *\n * @function Phaser.Math.Pow2.IsSize\n * @since 3.0.0\n *\n * @param {number} width - The width.\n * @param {number} height - The height.\n *\n * @return {boolean} `true` if `width` and `height` are a power of two, otherwise `false`.\n */\nexport function IsSizePowerOfTwo (width: number, height: number): boolean\n{\n    if (width < 1 || height < 1)\n    {\n        return false;\n    }\n\n    return ((width & (width - 1)) === 0) && ((height & (height - 1)) === 0);\n}\n", "import { gl } from '../GL';\n\nexport function SetGLTextureFilterMode (texture: WebGLTexture, linear: boolean = true): void\n{\n    gl.activeTexture(gl.TEXTURE0);\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n\n    const mode = (linear) ? gl.LINEAR : gl.NEAREST;\n\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, mode);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, mode);\n}\n", "import { IGLTextureBinding } from './IGLTextureBinding';\nimport { gl } from '../GL';\n\nexport function UpdateGLTexture <T extends IGLTextureBinding> (binding: T): WebGLTexture\n{\n    const source = binding.parent.image;\n    const width = source.width;\n    const height = source.height;\n\n    if (width > 0 && height > 0)\n    {\n        gl.activeTexture(gl.TEXTURE0);\n        gl.bindTexture(gl.TEXTURE_2D, binding.texture);\n\n        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, binding.flipY);\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, source);\n    }\n\n    return binding.texture;\n}\n", "import { CreateGLTexture } from './CreateGLTexture';\nimport { DeleteFramebuffer } from '../fbo/DeleteFramebuffer';\nimport { DeleteGLTexture } from './DeleteGLTexture';\nimport { IGLTextureBinding } from './IGLTextureBinding';\nimport { IGLTextureBindingConfig } from './IGLTextureBindingConfig';\nimport { ITexture } from '../../../textures/ITexture';\nimport { IsSizePowerOfTwo } from '../../../math/pow2/IsSizePowerOfTwo';\nimport { SetGLTextureFilterMode } from './SetGLTextureFilterMode';\nimport { UpdateGLTexture } from './UpdateGLTexture';\nimport { gl } from '../GL';\n\nexport class GLTextureBinding implements IGLTextureBinding\n{\n    parent: ITexture;\n\n    texture: WebGLTexture;\n    framebuffer: WebGLFramebuffer;\n    depthbuffer: WebGLRenderbuffer;\n\n    index: number = 0;\n    indexCounter: number = -1;\n\n    dirtyIndex: boolean = true;\n    unpackPremultiplyAlpha: boolean = true;\n\n    minFilter: GLenum;\n    magFilter: GLenum;\n    wrapS: GLenum;\n    wrapT: GLenum;\n\n    flipY: boolean = false;\n    isPOT: boolean = false;\n    generateMipmap: boolean = false;\n\n    constructor (parent: ITexture, config: IGLTextureBindingConfig = {})\n    {\n        this.parent = parent;\n\n        this.isPOT = IsSizePowerOfTwo(parent.width, parent.height);\n\n        const {\n            texture = null,\n            framebuffer = null,\n            depthbuffer = null,\n            unpackPremultiplyAlpha = true,\n            minFilter = (this.isPOT) ? gl.LINEAR_MIPMAP_LINEAR : gl.LINEAR,\n            magFilter = gl.LINEAR,\n            wrapS = gl.CLAMP_TO_EDGE,\n            wrapT = gl.CLAMP_TO_EDGE,\n            generateMipmap = this.isPOT,\n            flipY = false\n        } = config;\n\n        this.minFilter = minFilter;\n        this.magFilter = magFilter;\n        this.wrapS = wrapS;\n        this.wrapT = wrapT;\n        this.generateMipmap = generateMipmap;\n        this.flipY = flipY;\n        this.unpackPremultiplyAlpha = unpackPremultiplyAlpha;\n\n        if (framebuffer)\n        {\n            this.framebuffer = framebuffer;\n        }\n\n        if (depthbuffer)\n        {\n            this.depthbuffer = depthbuffer;\n        }\n\n        if (texture)\n        {\n            this.texture = texture;\n        }\n        else\n        {\n            CreateGLTexture(this);\n        }\n    }\n\n    //  Needed?\n    setFilter (linear: boolean): void\n    {\n        if (this.texture)\n        {\n            SetGLTextureFilterMode(this.texture, linear);\n        }\n    }\n\n    create (): WebGLTexture\n    {\n        const texture = this.texture;\n\n        if (texture)\n        {\n            DeleteGLTexture(texture);\n        }\n\n        return CreateGLTexture(this);\n    }\n\n    update (): WebGLTexture\n    {\n        const texture = this.texture;\n\n        if (!texture)\n        {\n            return CreateGLTexture(this);\n        }\n        else\n        {\n            return UpdateGLTexture(this);\n        }\n    }\n\n    setIndex (index: number): void\n    {\n        this.dirtyIndex = (index !== this.index);\n        this.index = index;\n    }\n\n    destroy (): void\n    {\n        DeleteGLTexture(this.texture);\n        DeleteFramebuffer(this.framebuffer);\n\n        this.parent = null;\n        this.texture = null;\n        this.framebuffer = null;\n    }\n}\n", "import { BindingQueue } from '../../BindingQueue';\nimport { GLTextureBinding } from '../textures/GLTextureBinding';\n\nexport function ProcessBindingQueue (): void\n{\n    const queue = BindingQueue.get();\n\n    queue.forEach(entry =>\n    {\n        const { texture, glConfig } = entry;\n\n        if (!texture.binding)\n        {\n            texture.binding = new GLTextureBinding(texture, glConfig);\n        }\n    });\n\n    BindingQueue.clear();\n}\n", "import { CONFIG_DEFAULTS } from '../const';\nimport { ConfigStore } from '../ConfigStore';\n\nexport function GetMaxTextures (): number\n{\n    return ConfigStore.get(CONFIG_DEFAULTS.MAX_TEXTURES);\n}\n", "import { gl } from '../GL';\n\n//  From Pixi v5\n\nconst fragTemplate = [\n    'precision mediump float;',\n    'void main(void){',\n    'float test = 0.1;',\n    '%forloop%',\n    'gl_FragColor = vec4(0.0);',\n    '}'\n].join('\\n');\n\nfunction GenerateSrc (maxIfs: number): string\n{\n    let src = '';\n\n    for (let i = 0; i < maxIfs; ++i)\n    {\n        if (i > 0)\n        {\n            src += '\\nelse ';\n        }\n\n        if (i < maxIfs - 1)\n        {\n            src += `if(test == ${i}.0){}`;\n        }\n    }\n\n    return src;\n}\n\nexport function CheckShaderMaxIfStatements (maxIfs: number): number\n{\n    const shader = gl.createShader(gl.FRAGMENT_SHADER);\n\n    // eslint-disable-next-line no-constant-condition\n    while (true)\n    {\n        const fragmentSrc = fragTemplate.replace(/%forloop%/gi, GenerateSrc(maxIfs));\n\n        gl.shaderSource(shader, fragmentSrc);\n        gl.compileShader(shader);\n\n        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS))\n        {\n            maxIfs = (maxIfs / 2) | 0;\n        }\n        else\n        {\n            // valid!\n            break;\n        }\n    }\n\n    return maxIfs;\n}\n", "import { GetMaxTextures, SetMaxTextures } from '../../../config/maxtextures/';\n\nimport { CheckShaderMaxIfStatements } from '../shaders/CheckShaderMaxIfStatements';\nimport { IRenderPass } from './IRenderPass';\nimport { gl } from '../GL';\n\n//  As per the WebGL spec, the browser should always support at least 8 texture units\n\nexport function CreateTempTextures (renderPass: IRenderPass): void\n{\n    let maxGPUTextures: number = CheckShaderMaxIfStatements(gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS));\n\n    const maxConfigTextures = GetMaxTextures();\n\n    if (maxConfigTextures === 0 || (maxConfigTextures > 0 && maxConfigTextures > maxGPUTextures))\n    {\n        //  Insert gpu limit into config value\n        SetMaxTextures(maxGPUTextures);\n    }\n    else if (maxConfigTextures > 0 && maxConfigTextures < maxGPUTextures)\n    {\n        //  Limit to config setting, or 8, whichever is higher\n        maxGPUTextures = Math.max(8, maxConfigTextures);\n    }\n\n    const tempTextures = renderPass.tempTextures;\n\n    if (tempTextures.length)\n    {\n        tempTextures.forEach(texture =>\n        {\n            gl.deleteTexture(texture);\n        });\n    }\n\n    const index = [];\n\n    //  Create temp textures to stop WebGL errors on mac os\n    for (let texturesIndex: number = 0; texturesIndex < maxGPUTextures; texturesIndex++)\n    {\n        const tempTexture = gl.createTexture();\n\n        gl.activeTexture(gl.TEXTURE0 + texturesIndex);\n\n        gl.bindTexture(gl.TEXTURE_2D, tempTexture);\n\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, new Uint8Array([ 0, 0, 255, 255 ]));\n\n        tempTextures[texturesIndex] = tempTexture;\n\n        index.push(texturesIndex);\n    }\n\n    renderPass.maxTextures = maxGPUTextures;\n\n    renderPass.textureIndex = index;\n\n    //  ID Zero is reserved for FBO Textures\n    renderPass.currentActiveTexture = 1;\n}\n", "import { CONFIG_DEFAULTS } from '../const';\nimport { ConfigStore } from '../ConfigStore';\n\nexport function GetBatchSize (): number\n{\n    return ConfigStore.get(CONFIG_DEFAULTS.BATCH_SIZE);\n}\n", "import { gl } from '../GL';\n\nexport function DeleteGLBuffer (buffer: WebGLBuffer): void\n{\n    if (gl.isBuffer(buffer))\n    {\n        gl.deleteBuffer(buffer);\n    }\n}\n", "import { DeleteGLBuffer } from './DeleteGLBuffer';\nimport { IVertexBuffer } from './IVertexBuffer';\nimport { IVertexBufferConfig } from './IVertexBufferConfig';\nimport { gl } from '../GL';\n\nexport class VertexBuffer implements IVertexBuffer\n{\n    /**\n     * Maximum number of entries per batch before a flush takes place.\n     * For a Mesh, this is the number of triangles / faces in the vertex buffer.\n     * Typically each face consists of 3 verticies.\n     *\n     * @type {number}\n     */\n    batchSize: number;\n\n    /**\n     * The size, in bytes, per entry in the array buffer.\n     *\n     * @type {number}\n     */\n    dataSize: number;\n\n    /**\n     * The amount of elements / floats a single vertex consists of.\n     *\n     * The default is 6:\n     *\n     * position (x,y - 2 floats)\n     * texture coord (x,y - 2 floats)\n     * texture index (uint)\n     * packed color (uint)\n     *\n     * @type {number}\n     */\n    vertexElementSize: number;\n\n    /**\n     * The size, in bytes, of a single vertex in the array buffer.\n     *\n     * This is `vertexElementSize * dataSize`.\n     *\n     * @type {number}\n     */\n    vertexByteSize: number;\n\n    /**\n     * The size, in bytes, of a single entry in the array buffer.\n     *\n     * This is `vertexByteSize * 4` for a quad.\n     *\n     * @type {number}\n     */\n    entryByteSize: number;\n\n    /**\n     * The size, in bytes, of the Array Buffer.\n     *\n     * This is `batchSize * entryByteSize`\n     *\n     * @type {number}\n     */\n    bufferByteSize: number;\n\n    /**\n     * The Array Buffer.\n     *\n     * @type {ArrayBuffer}\n     */\n    data: ArrayBuffer;\n\n    /**\n     * Float32 View of the Array Buffer.\n     *\n     * @type {Float32Array}\n     */\n    vertexViewF32: Float32Array;\n\n    /**\n     * Uint32 View of the Array Buffer.\n     *\n     * @type {Uint32Array}\n     */\n    vertexViewU32: Uint32Array;\n\n    /**\n     * The data array buffer.\n     *\n     * @type {WebGLBuffer}\n     */\n    vertexBuffer: WebGLBuffer;\n\n    indexed: boolean = false;\n\n    isDynamic: boolean = false;\n\n    /**\n     * The total number of entries added to the buffer so far, or reserved to be added.\n     *\n     * This is the total number of indices / verticies, not faces.\n     * Typically there are 3 verts per face, so this value is usually batchSize x 3 for a Mesh.\n     *\n     * @type {number}\n     */\n    count: number = 0;\n\n    /**\n     * The current buffer offset.\n     *\n     * @type {number}\n     */\n    offset: number = 0;\n\n    elementsPerEntry: number;\n\n    isBound: boolean = false;\n\n    constructor (config: IVertexBufferConfig = {})\n    {\n        const {\n            batchSize = 1,\n            dataSize = 4,\n            isDynamic = true,\n            elementsPerEntry = 4,\n            vertexElementSize = 6\n        } = config;\n\n        this.batchSize = batchSize;\n        this.dataSize = dataSize;\n        this.vertexElementSize = vertexElementSize;\n        this.isDynamic = isDynamic;\n        this.elementsPerEntry = elementsPerEntry;\n\n        //  Derive the remaining values\n        this.vertexByteSize = vertexElementSize * dataSize;\n        this.entryByteSize = this.vertexByteSize * elementsPerEntry;\n        this.bufferByteSize = batchSize * this.entryByteSize;\n\n        this.create();\n    }\n\n    resize (batchSize: number): void\n    {\n        this.batchSize = batchSize;\n        this.bufferByteSize = batchSize * this.entryByteSize;\n\n        if (this.vertexBuffer)\n        {\n            DeleteGLBuffer(this.vertexBuffer);\n        }\n\n        this.create();\n    }\n\n    create (): void\n    {\n        const data = new ArrayBuffer(this.bufferByteSize);\n\n        this.data = data;\n\n        this.vertexViewF32 = new Float32Array(data);\n        this.vertexViewU32 = new Uint32Array(data);\n\n        this.vertexBuffer = gl.createBuffer();\n\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);\n\n        const type = (this.isDynamic) ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW;\n\n        gl.bufferData(gl.ARRAY_BUFFER, data, type);\n\n        gl.bindBuffer(gl.ARRAY_BUFFER, null);\n\n        this.isBound = false;\n    }\n\n    add (count: number): void\n    {\n        this.count += count;\n        this.offset += (this.vertexElementSize * count);\n    }\n\n    reset (): void\n    {\n        this.count = 0;\n        this.offset = 0;\n    }\n\n    canContain (count: number): boolean\n    {\n        return ((this.count + count) <= this.batchSize);\n    }\n\n    free (): number\n    {\n        return Math.max(0, 1 - (this.count / this.batchSize));\n    }\n\n    bind (): void\n    {\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);\n    }\n\n    destroy (): void\n    {\n        DeleteGLBuffer(this.vertexBuffer);\n\n        this.data = null;\n        this.vertexViewF32 = null;\n        this.vertexViewU32 = null;\n        this.vertexBuffer = null;\n    }\n}\n", "import { DeleteGLBuffer } from './DeleteGLBuffer';\nimport { IIndexedVertexBuffer } from './IIndexedVertexBuffer';\nimport { IVertexBufferConfig } from './IVertexBufferConfig';\nimport { VertexBuffer } from './VertexBuffer';\nimport { gl } from '../GL';\n\nexport class IndexedVertexBuffer extends VertexBuffer implements IIndexedVertexBuffer\n{\n    /**\n     * The size, in bytes, per entry in the element index array.\n     *\n     * @type {number}\n     */\n    indexSize: number;\n\n    /**\n     * The size, in quantity of elements, of a single entry in the element index array.\n     *\n     * This is `vertexElementSize * 4` for a quad.\n     *\n     * @type {number}\n     */\n    entryElementSize: number;\n\n    /**\n     * The total number of entries per entry in the element index array.\n     *\n     * For a quad, the IBO contains 6 entries per entry:\n     *\n     * 0, 1, 2\n     * 2, 3, 0\n     *\n     * @type {number}\n     */\n    entryIndexSize: number;\n\n    /**\n     * The Element Array Buffer.\n     *\n     * @type {Uint16Array}\n     */\n    index: Uint16Array;\n\n    /**\n     * The element array buffer.\n     *\n     * @type {WebGLBuffer}\n     */\n    indexBuffer: WebGLBuffer;\n\n    indexLayout: number[];\n\n    constructor (config: IVertexBufferConfig = {})\n    {\n        super(config);\n\n        const {\n            indexSize = 4,\n            entryIndexSize = 6,\n            indexLayout = null\n        } = config;\n\n        this.indexed = true;\n\n        this.indexSize = indexSize;\n        this.entryIndexSize = entryIndexSize;\n\n        //  Derive the remaining values\n        this.entryElementSize = this.vertexElementSize * this.elementsPerEntry;\n\n        const seededIndexBuffer = [];\n\n        if (indexLayout)\n        {\n            this.indexLayout = indexLayout;\n\n            //  Seed the index buffer\n            for (let i = 0; i < (this.batchSize * indexSize); i += indexSize)\n            {\n                for (let c = 0; c < indexLayout.length; c++)\n                {\n                    seededIndexBuffer.push(i + indexLayout[c]);\n                }\n            }\n        }\n\n        this.create();\n        this.createIndexBuffer(seededIndexBuffer);\n    }\n\n    createIndexBuffer (seededIndex: number[]): void\n    {\n        this.index = new Uint16Array(seededIndex);\n\n        this.indexBuffer = gl.createBuffer();\n\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, this.index, gl.STATIC_DRAW);\n\n        //  Free memory\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\n        seededIndex = [];\n    }\n\n    bind (): void\n    {\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);\n    }\n\n    destroy (): void\n    {\n        super.destroy();\n\n        DeleteGLBuffer(this.indexBuffer);\n\n        this.index = null;\n        this.indexLayout = null;\n        this.indexBuffer = null;\n    }\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Checks if an array can be used as a matrix.\n *\n * A matrix is a two-dimensional array (array of arrays), where all sub-arrays (rows) have the same length. There must be at least two rows:\n *\n * ```\n *    [\n *        [ 1, 1, 1, 1, 1, 1 ],\n *        [ 2, 0, 0, 0, 0, 4 ],\n *        [ 2, 0, 1, 2, 0, 4 ],\n *        [ 2, 0, 3, 4, 0, 4 ],\n *        [ 2, 0, 0, 0, 0, 4 ],\n *        [ 3, 3, 3, 3, 3, 3 ]\n *    ]\n * ```\n */\nexport function CheckMatrix (matrix: unknown[][]): boolean\n{\n    if (!Array.isArray(matrix) || matrix.length < 2 || !Array.isArray(matrix[0]))\n    {\n        return false;\n    }\n\n    //  How long is the first row?\n    const size = matrix[0].length;\n\n    //  Validate the rest of the rows are the same length\n    for (let i = 1; i < matrix.length; i++)\n    {\n        if (matrix[i].length !== size)\n        {\n            return false;\n        }\n    }\n\n    return true;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { CheckMatrix } from './CheckMatrix';\n\n/**\n * Generates a string (which you can pass to console.log) from the given Array Matrix.\n */\nexport function MatrixToString (matrix: unknown[][]): string\n{\n    let str = '';\n\n    if (!CheckMatrix(matrix))\n    {\n        return str;\n    }\n\n    for (let r = 0; r < matrix.length; r++)\n    {\n        for (let c = 0; c < matrix[r].length; c++)\n        {\n            const cell = matrix[r][c].toString();\n\n            if (cell !== 'undefined')\n            {\n                str = str.padEnd(2, cell);\n            }\n            else\n            {\n                str += '?';\n            }\n\n            if (c < matrix[r].length - 1)\n            {\n                str += ' |';\n            }\n        }\n\n        if (r < matrix.length - 1)\n        {\n            str += '\\n';\n\n            for (let i = 0; i < matrix[r].length; i++)\n            {\n                str += '---';\n\n                if (i < matrix[r].length - 1)\n                {\n                    str += '+';\n                }\n            }\n\n            str += '\\n';\n        }\n\n    }\n\n    return str;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Reverses the columns in the given Array Matrix.\n */\nexport function ReverseColumns (matrix: unknown[][]): unknown[][]\n{\n    return matrix.reverse();\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Reverses the rows in the given Array Matrix.\n */\nexport function ReverseRows (matrix: unknown[][]): unknown[][]\n{\n    for (let i = 0; i < matrix.length; i++)\n    {\n        matrix[i].reverse();\n    }\n\n    return matrix;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Transposes the elements of the given matrix (array of arrays).\n *\n * The transpose of a matrix is a new matrix whose rows are the columns of the original.\n */\nexport function TransposeMatrix (matrix: unknown[][]): unknown[][]\n{\n    const sourceRowCount = matrix.length;\n    const sourceColCount = matrix[0].length;\n\n    const result = new Array(sourceColCount);\n\n    for (let i = 0; i < sourceColCount; i++)\n    {\n        result[i] = new Array(sourceRowCount);\n\n        for (let j = sourceRowCount - 1; j > -1; j--)\n        {\n            result[i][j] = matrix[j][i];\n        }\n    }\n\n    return result;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { CheckMatrix } from './CheckMatrix';\nimport { TransposeMatrix } from './TransposeMatrix';\n\n/**\n * Rotates the array matrix based on the given rotation value.\n *\n * The value can be given in degrees: 90, -90, 270, -270 or 180,\n * or a string command: `rotateLeft`, `rotateRight` or `rotate180`.\n *\n * Based on the routine from {@link http://jsfiddle.net/MrPolywhirl/NH42z/}.\n */\nexport function RotateMatrix (matrix: unknown[][], direction: number | string = 90): unknown[][]\n{\n    if (!CheckMatrix(matrix))\n    {\n        return matrix;\n    }\n\n    if (typeof direction !== 'string')\n    {\n        direction = ((direction % 360) + 360) % 360;\n    }\n\n    if (direction === 90 || direction === -270 || direction === 'rotateLeft')\n    {\n        matrix = TransposeMatrix(matrix);\n        matrix.reverse();\n    }\n    else if (direction === -90 || direction === 270 || direction === 'rotateRight')\n    {\n        matrix.reverse();\n        matrix = TransposeMatrix(matrix);\n    }\n    else if (Math.abs(direction as number) === 180 || direction === 'rotate180')\n    {\n        for (let i = 0; i < matrix.length; i++)\n        {\n            matrix[i].reverse();\n        }\n\n        matrix.reverse();\n    }\n\n    return matrix;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { RotateMatrix } from './RotateMatrix';\n\n/**\n * Rotates the array matrix 180 degrees.\n *\n * @function Phaser.Utils.Array.Matrix.Rotate180\n * @since 3.0.0\n *\n * @generic T\n * @genericUse {T[][]} - [matrix,$return]\n *\n * @param {T[][]} [matrix] - The array to rotate.\n *\n * @return {T[][]} The rotated matrix array. The source matrix should be discard for the returned matrix.\n */\nexport function Rotate180 (matrix: unknown[][]): unknown[][]\n{\n    return RotateMatrix(matrix, 180);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { RotateMatrix } from './RotateMatrix';\n\n/**\n * Rotates the array matrix to the left (or 90 degrees)\n *\n * @function Phaser.Utils.Array.Matrix.RotateLeft\n * @since 3.0.0\n *\n * @generic T\n * @genericUse {T[][]} - [matrix,$return]\n *\n * @param {T[][]} [matrix] - The array to rotate.\n *\n * @return {T[][]} The rotated matrix array. The source matrix should be discard for the returned matrix.\n */\nexport function RotateLeft (matrix: unknown[][]): unknown[][]\n{\n    return RotateMatrix(matrix, 90);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { RotateMatrix } from './RotateMatrix';\n\n/**\n * Rotates the array matrix to the left (or -90 degrees)\n *\n * @function Phaser.Utils.Array.Matrix.RotateRight\n * @since 3.0.0\n *\n * @generic T\n * @genericUse {T[][]} - [matrix,$return]\n *\n * @param {T[][]} [matrix] - The array to rotate.\n *\n * @return {T[][]} The rotated matrix array. The source matrix should be discard for the returned matrix.\n */\nexport function RotateRight (matrix: unknown[][]): unknown[][]\n{\n    return RotateMatrix(matrix, -90);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Create an array representing the range of numbers (usually integers), between, and inclusive of,\n * the given `start` and `end` arguments. For example:\n *\n * `var array = numberArray(2, 4); // array = [2, 3, 4]`\n * `var array = numberArray(0, 9); // array = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]`\n *\n * This is equivalent to `numberArrayStep(start, end, 1)`.\n *\n * You can optionally provide a prefix and / or suffix string. If given the array will contain\n * strings, not integers. For example:\n *\n * `var array = numberArray(1, 4, 'Level '); // array = [\"Level 1\", \"Level 2\", \"Level 3\", \"Level 4\"]`\n * `var array = numberArray(5, 7, 'HD-', '.png'); // array = [\"HD-5.png\", \"HD-6.png\", \"HD-7.png\"]`\n *\n * @param {number} start - The minimum value the array starts with.\n * @param {number} end - The maximum value the array contains.\n * @param {string} [prefix] - Optional prefix to place before the number. If provided the array will contain strings, not integers.\n * @param {string} [suffix] - Optional suffix to place after the number. If provided the array will contain strings, not integers.\n *\n * @return {(number[]|string[])} The array of number values, or strings if a prefix or suffix was provided.\n */\nexport function NumberArray (start: number, end: number, prefix?: string, suffix?: string): (string | number)[]\n{\n    const result: (string | number)[] = [];\n\n    for (let i = start; i <= end; i++)\n    {\n        if (prefix || suffix)\n        {\n            let key = (prefix) ? prefix + i.toString() : i.toString();\n\n            if (suffix)\n            {\n                key = key.concat(suffix);\n            }\n\n            result.push(key);\n        }\n        else\n        {\n            result.push(i);\n        }\n    }\n\n    return result;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Round a given number so it is further away from zero. That is, positive numbers are rounded up, and negative numbers are rounded down.\n *\n * @function Phaser.Math.RoundAwayFromZero\n * @since 3.0.0\n *\n * @param {number} value - The number to round.\n *\n * @return {number} The rounded number, rounded away from zero.\n */\nexport function RoundAwayFromZero (value: number): number\n{\n    // \"Opposite\" of truncate.\n    return (value > 0) ? Math.ceil(value) : Math.floor(value);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { RoundAwayFromZero } from '../../math/RoundAwayFromZero';\n\n/**\n * Create an array of numbers (positive and/or negative) progressing from `start`\n * up to but not including `end` by advancing by `step`.\n *\n * If `start` is less than `end` a zero-length range is created unless a negative `step` is specified.\n *\n * Certain values for `start` and `end` (eg. NaN/undefined/null) are currently coerced to 0;\n * for forward compatibility make sure to pass in actual numbers.\n *\n * @example\n * NumberArrayStep(4);\n * // => [0, 1, 2, 3]\n *\n * NumberArrayStep(1, 5);\n * // => [1, 2, 3, 4]\n *\n * NumberArrayStep(0, 20, 5);\n * // => [0, 5, 10, 15]\n *\n * NumberArrayStep(0, -4, -1);\n * // => [0, -1, -2, -3]\n *\n * NumberArrayStep(1, 4, 0);\n * // => [1, 1, 1]\n *\n * NumberArrayStep(0);\n * // => []\n *\n * @param {number} [start=0] - The start of the range.\n * @param {number} [end=null] - The end of the range.\n * @param {number} [step=1] - The value to increment or decrement by.\n *\n * @return {number[]} The array of number values.\n */\nexport function NumberArrayStep (start: number, end: number, step: number): number[]\n{\n    const result: number[] = [];\n\n    const total = Math.max(RoundAwayFromZero((end - start) / (step || 1)), 0);\n\n    for (let i = 0; i < total; i++)\n    {\n        result.push(start);\n\n        start += step;\n    }\n\n    return result;\n}\n", "/**\n * @author       Niklas von Hertzen (https://github.com/niklasvh/base64-arraybuffer)\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nconst chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\n/**\n * Converts an ArrayBuffer into a base64 string.\n *\n * The resulting string can optionally be a data uri if the `mediaType` argument is provided.\n *\n * See https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs for more details.\n *\n * @function Phaser.Utils.Base64.ArrayBufferToBase64\n * @since 3.18.0\n *\n * @param {ArrayBuffer} arrayBuffer - The Array Buffer to encode.\n * @param {string} [mediaType] - An optional media type, i.e. `audio/ogg` or `image/jpeg`. If included the resulting string will be a data URI.\n *\n * @return {string} The base64 encoded Array Buffer.\n */\nexport function ArrayBufferToBase64 (arrayBuffer: ArrayBuffer, mediaType: string): string\n{\n    const bytes = new Uint8Array(arrayBuffer);\n    const len = bytes.length;\n\n    let base64 = (mediaType) ? 'data:' + mediaType + ';base64,' : '';\n\n    for (let i = 0; i < len; i += 3)\n    {\n        base64 += chars[bytes[i] >> 2];\n        base64 += chars[((bytes[i] & 3) << 4) | (bytes[i + 1] >> 4)];\n        base64 += chars[((bytes[i + 1] & 15) << 2) | (bytes[i + 2] >> 6)];\n        base64 += chars[bytes[i + 2] & 63];\n    }\n\n    if ((len % 3) === 2)\n    {\n        base64 = base64.substring(0, base64.length - 1) + '=';\n    }\n    else if (len % 3 === 1)\n    {\n        base64 = base64.substring(0, base64.length - 2) + '==';\n    }\n\n    return base64;\n}\n", "/**\n * @author       Niklas von Hertzen (https://github.com/niklasvh/base64-arraybuffer)\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nconst chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\n//  Use a lookup table to find the index.\nconst lookup = new Uint8Array(256);\n\nfor (let i = 0; i < chars.length; i++)\n{\n    lookup[chars.charCodeAt(i)] = i;\n}\n\n/**\n * Converts a base64 string, either with or without a data uri, into an Array Buffer.\n *\n * @function Phaser.Utils.Base64.Base64ToArrayBuffer\n * @since 3.18.0\n *\n * @param {string} base64 - The base64 string to be decoded. Can optionally contain a data URI header, which will be stripped out prior to decoding.\n *\n * @return {ArrayBuffer} An ArrayBuffer decoded from the base64 data.\n */\nexport function Base64ToArrayBuffer (base64: string): ArrayBuffer\n{\n    //  Is it a data uri? if so, strip the header away\n    base64 = base64.substr(base64.indexOf(',') + 1);\n\n    const len = base64.length;\n    let bufferLength = len * 0.75;\n    let p = 0;\n    let encoded1;\n    let encoded2;\n    let encoded3;\n    let encoded4;\n\n    if (base64[len - 1] === '=')\n    {\n        bufferLength--;\n\n        if (base64[len - 2] === '=')\n        {\n            bufferLength--;\n        }\n    }\n\n    const arrayBuffer = new ArrayBuffer(bufferLength);\n    const bytes = new Uint8Array(arrayBuffer);\n\n    for (let i = 0; i < len; i += 4)\n    {\n        encoded1 = lookup[base64.charCodeAt(i)];\n        encoded2 = lookup[base64.charCodeAt(i + 1)];\n        encoded3 = lookup[base64.charCodeAt(i + 2)];\n        encoded4 = lookup[base64.charCodeAt(i + 3)];\n\n        bytes[p++] = (encoded1 << 2) | (encoded2 >> 4);\n        bytes[p++] = ((encoded2 & 15) << 4) | (encoded3 >> 2);\n        bytes[p++] = ((encoded3 & 3) << 6) | (encoded4 & 63);\n    }\n\n    return arrayBuffer;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Takes a string and removes the character at the given index.\n *\n * @function Phaser.Utils.String.RemoveAt\n * @since 3.50.0\n *\n * @param {string} string - The string to be worked on.\n * @param {number} index - The index of the character to be removed.\n *\n * @return {string} The modified string.\n */\nexport function RemoveAt (string: string, index: number): string\n{\n    if (index === 0)\n    {\n        return string.slice(1);\n    }\n    else\n    {\n        return string.slice(0, index - 1) + string.slice(index);\n    }\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Takes the given string and reverses it, returning the reversed string.\n * For example if given the string `Atari 520ST` it would return `TS025 iratA`.\n *\n * @function Phaser.Utils.String.Reverse\n * @since 3.0.0\n *\n * @param {string} string - The string to be reversed.\n *\n * @return {string} The reversed string.\n */\nexport function Reverse (string: string): string\n{\n    return string.split('').reverse().join('');\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Capitalizes the first letter of a string if there is one.\n * @example\n * UppercaseFirst('abc');\n * // returns 'Abc'\n * @example\n * UppercaseFirst('the happy family');\n * // returns 'The happy family'\n * @example\n * UppercaseFirst('');\n * // returns ''\n *\n * @function Phaser.Utils.String.UppercaseFirst\n * @since 3.0.0\n *\n * @param {string} str - The string to capitalize.\n *\n * @return {string} A new string, same as the first, but with the first letter capitalized.\n */\nexport function UppercaseFirst (str: string): string\n{\n    return str && str[0].toUpperCase() + str.slice(1);\n}\n", "export function NOOP (): void\n{\n    //  No-op\n}\n", "import { NOOP } from '../../utils';\n\n//  4x4 Matrix in column-major format\n\n/**\n * data[0] = m00\n * data[1] = m01\n * data[2] = m02\n * data[3] = m03\n * data[4] = m10\n * data[5] = m11\n * data[6] = m12\n * data[7] = m13\n * data[8] = m20\n * data[9] = m21\n * data[10] = m22\n * data[11] = m23\n * data[12] = m30\n * data[13] = m31\n * data[14] = m32\n * data[15] = m33\n */\n\nexport class Matrix4\n{\n    data: Float32Array;\n\n    onChange: (mat4: Matrix4) => void;\n\n    constructor (src?: Matrix4 | Float32List)\n    {\n        const data = new Float32Array(16);\n\n        this.data = data;\n        this.onChange = NOOP;\n\n        if (src)\n        {\n            if (Array.isArray(src))\n            {\n                this.fromArray(src);\n            }\n            else\n            {\n                this.fromArray((src as Matrix4).data);\n            }\n        }\n        else\n        {\n            data[0] = 1;\n            data[5] = 1;\n            data[10] = 1;\n            data[15] = 1;\n        }\n    }\n\n    /**\n     * @param m00 - 1st value of 1st row\n     * @param m01 - 2nd value of 1st row\n     * @param m02 - 3rd value of 1st row\n     * @param m03 - 4th value of 1st row\n     * @param m10 - 1st value of 2nd row\n     * @param m11 - 2nd value of 2nd row\n     * @param m12 - 3rd value of 2nd row\n     * @param m13 - 4th value of 2nd row\n     * @param m20 - 1st value of 3rd row\n     * @param m21 - 2nd value of 3rd row\n     * @param m22 - 3rd value of 3rd row\n     * @param m23 - 4th value of 3rd row\n     * @param m30 - 1st value of 4th row\n     * @param m31 - 2nd value of 4th row\n     * @param m32 - 3rd value of 4th row\n     * @param m33 - 4th value of 4th row\n     */\n    set (m00: number, m01: number, m02: number, m03: number, m10: number, m11: number, m12: number, m13: number, m20: number, m21: number, m22: number, m23: number, m30: number, m31: number, m32: number, m33: number): this\n    {\n        const data = this.data;\n\n        data[ 0 ] = m00;\n        data[ 1 ] = m01;\n        data[ 2 ] = m02;\n        data[ 3 ] = m03;\n\n        data[ 4 ] = m10;\n        data[ 5 ] = m11;\n        data[ 6 ] = m12;\n        data[ 7 ] = m13;\n\n        data[ 8 ] = m20;\n        data[ 9 ] = m21;\n        data[ 10 ] = m22;\n        data[ 11 ] = m23;\n\n        data[ 12 ] = m30;\n        data[ 13 ] = m31;\n        data[ 14 ] = m32;\n        data[ 15 ] = m33;\n\n        this.onChange(this);\n\n        return this;\n    }\n\n    toArray (dst: Float32List = [], index: number = 0): Float32List\n    {\n        const data = this.data;\n\n        for (let i = 0; i < 16; i++)\n        {\n            dst[ index + i ] = data[i];\n        }\n\n        return dst;\n    }\n\n    fromArray (src: Float32List, index: number = 0): this\n    {\n        const data = this.data;\n\n        for (let i = 0; i < 16; i++)\n        {\n            data[i] = src[ index + i ];\n        }\n\n        this.onChange(this);\n\n        return this;\n    }\n\n    toString (): string\n    {\n        return '[ mat4=' + this.data.join(', ') + ' ]';\n    }\n\n    destroy (): void\n    {\n        this.onChange = NOOP;\n        this.data = null;\n    }\n}\n", "import { Matrix4 } from './Matrix4';\n\n// Generates a orthogonal projection matrix with the given bounds\n\nexport function Mat4Ortho (left: number, right: number, bottom: number, top: number, near: number, far: number, out: Matrix4 = new Matrix4()): Matrix4\n{\n    const lr = 1 / (left - right);\n    const bt = 1 / (bottom - top);\n    const nf = 1 / (near - far);\n\n    return out.set(\n        -2 * lr,\n        0,\n        0,\n        0,\n        0,\n        -2 * bt,\n        0,\n        0,\n        0,\n        0,\n        2 * nf,\n        0,\n        (left + right) * lr,\n        (top + bottom) * bt,\n        (far + near) * nf,\n        1\n    );\n}\n", "import { IVertexAttribPointer } from './IVertexAttribPointer';\nimport { gl } from '../GL';\n\nexport function CreateAttributes (program: WebGLProgram, config: Object): Map<string, IVertexAttribPointer>\n{\n    const attributes = new Map();\n\n    const defaultSettings =\n    {\n        size: 1,\n        type: gl.FLOAT,\n        normalized: false,\n        stride: 0,\n        offset: 0\n    };\n\n    const total = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);\n\n    for (let i = 0; i < total; i++)\n    {\n        const attrib = gl.getActiveAttrib(program, i);\n\n        if (!attrib)\n        {\n            break;\n        }\n\n        const name = attrib.name;\n\n        const index = gl.getAttribLocation(program, name);\n\n        gl.enableVertexAttribArray(index);\n\n        const setting = config.hasOwnProperty(name) ? config[name] : {};\n\n        const {\n\n            size = defaultSettings.size,\n            type = defaultSettings.type,\n            normalized = defaultSettings.normalized,\n            stride = defaultSettings.stride,\n            offset = defaultSettings.offset\n\n        } = setting;\n\n        attributes.set(name, { index, size, type, normalized, stride, offset });\n    }\n\n    return attributes;\n}\n", "import { gl } from '../GL';\n\nexport function DeleteShaders (...shaders: WebGLShader[]): void\n{\n    shaders.forEach(shader =>\n    {\n        gl.deleteShader(shader);\n    });\n}\n", "import { DeleteShaders } from './DeleteShaders';\nimport { gl } from '../GL';\n\nexport function CreateProgram (...shaders: WebGLShader[]): WebGLProgram\n{\n    const program = gl.createProgram();\n\n    shaders.forEach(shader =>\n    {\n        gl.attachShader(program, shader);\n    });\n\n    gl.linkProgram(program);\n\n    const status = gl.getProgramParameter(program, gl.LINK_STATUS);\n\n    if (!status)\n    {\n        const info = gl.getProgramInfoLog(program);\n\n        console.error(`Error linking program: ${info}`);\n\n        gl.deleteProgram(program);\n\n        DeleteShaders(...shaders);\n\n        return null;\n    }\n\n    return program;\n}\n", "import { gl } from '../GL';\n\nexport function CreateShader (source: string, type: GLenum): WebGLShader | null\n{\n    const shader = gl.createShader(type);\n\n    gl.shaderSource(shader, source);\n\n    gl.compileShader(shader);\n\n    const status = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n\n    if (!status)\n    {\n        const info = gl.getShaderInfoLog(shader);\n\n        //  Adding line numbers idea borrowed from Gregg Tavares!\n        const sourceLines = source.split('\\n').map((line, index) =>\n        {\n            return `${index}: ${line}`;\n        });\n\n        console.error(`Error compiling shader: ${info}`, sourceLines.join('\\n'));\n\n        gl.deleteShader(shader);\n\n        return null;\n    }\n\n    return shader;\n}\n", "import { gl } from '../GL';\n\nexport type FloatSetter = (v: number) => void;\nexport type F32Setter = (v: Float32List) => void;\nexport type I32Setter = (v: Int32List) => void;\n\nexport function CreateUniformSetter (uniform: WebGLActiveInfo, location: WebGLUniformLocation, isArray: boolean = false): FloatSetter | F32Setter | I32Setter\n{\n    switch (uniform.type)\n    {\n        case gl.INT:\n        case gl.BOOL:\n        {\n            if (isArray)\n            {\n                return (v: Int32List): void =>\n                {\n                    gl.uniform1iv(location, v);\n                };\n            }\n            else\n            {\n                return (v: number): void =>\n                {\n                    gl.uniform1i(location, v);\n                };\n            }\n        }\n\n        case gl.INT_VEC2:\n        case gl.BOOL_VEC2:\n        {\n            return (v: Int32List): void =>\n            {\n                gl.uniform2iv(location, v);\n            };\n        }\n\n        case gl.INT_VEC3:\n        case gl.BOOL_VEC3:\n        {\n            return (v: Int32List): void =>\n            {\n                gl.uniform3iv(location, v);\n            };\n        }\n\n        case gl.INT_VEC4:\n        case gl.BOOL_VEC4:\n        {\n            return (v: Int32List): void =>\n            {\n                gl.uniform4iv(location, v);\n            };\n        }\n\n        case gl.FLOAT:\n        {\n            if (isArray)\n            {\n                return (v: Float32List): void =>\n                {\n                    gl.uniform1fv(location, v);\n                };\n            }\n            else\n            {\n                return (v: number): void =>\n                {\n                    gl.uniform1f(location, v);\n                };\n            }\n        }\n\n        case gl.FLOAT_VEC2:\n        {\n            return (v: Float32List): void =>\n            {\n                gl.uniform2fv(location, v);\n            };\n        }\n\n        case gl.FLOAT_VEC3:\n        {\n            return (v: Float32List): void =>\n            {\n                gl.uniform3fv(location, v);\n            };\n        }\n\n        case gl.FLOAT_VEC4:\n        {\n            return (v: Float32List): void =>\n            {\n                gl.uniform4fv(location, v);\n            };\n        }\n\n        case gl.FLOAT_MAT2:\n        {\n            return (v: Float32List): void =>\n            {\n                gl.uniformMatrix2fv(location, false, v);\n            };\n        }\n\n        case gl.FLOAT_MAT3:\n        {\n            return (v: Float32List): void =>\n            {\n                gl.uniformMatrix3fv(location, false, v);\n            };\n        }\n\n        case gl.FLOAT_MAT4:\n        {\n            return (v: Float32List): void =>\n            {\n                gl.uniformMatrix4fv(location, false, v);\n            };\n        }\n\n        case gl.SAMPLER_2D:\n        case gl.SAMPLER_CUBE:\n        {\n            if (uniform.size > 1)\n            {\n                return (v: Int32List): void =>\n                {\n                    gl.uniform1iv(location, v);\n                };\n            }\n            else\n            {\n                return (v: number): void =>\n                {\n                    gl.uniform1i(location, v);\n                };\n            }\n        }\n    }\n}\n", "import { CreateUniformSetter } from './CreateUniformSetter';\nimport { gl } from '../GL';\n\nexport function CreateUniforms (program: WebGLProgram): Map<string, Function>\n{\n    const uniforms = new Map();\n\n    const total = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);\n\n    for (let i = 0; i < total; i++)\n    {\n        const uniform = gl.getActiveUniform(program, i);\n\n        let name = uniform.name;\n\n        if (name.startsWith('gl_') || name.startsWith('webgl_'))\n        {\n            //  Skip built-in uniforms\n            continue;\n        }\n\n        const location = gl.getUniformLocation(program, uniform.name);\n\n        if (location)\n        {\n            let isArray = false;\n\n            //  If uniform name has [0] at the end, remove it\n            if (name.substr(-3) === '[0]')\n            {\n                name = name.substr(0, name.length - 3);\n\n                isArray = (uniform.size > 1);\n            }\n\n            uniforms.set(name, CreateUniformSetter(uniform, location, isArray));\n        }\n    }\n\n    return uniforms;\n}\n", "const BYTE                   = 0x1400;\nconst UNSIGNED_BYTE          = 0x1401;\nconst SHORT                  = 0x1402;\nconst UNSIGNED_SHORT         = 0x1403;\nconst INT                    = 0x1404;\nconst UNSIGNED_INT           = 0x1405;\nconst FLOAT                  = 0x1406;\nconst REPEAT                 = 0x2901;  // eslint-disable-line\nconst CLAMP_TO_EDGE          = 0x812F;\nconst MIRRORED_REPEAT        = 0x8370;  // eslint-disable-line\nconst NEAREST                = 0x2600;  // eslint-disable-line\nconst LINEAR                 = 0x2601;\nconst NEAREST_MIPMAP_NEAREST = 0x2700;  // eslint-disable-line\nconst LINEAR_MIPMAP_NEAREST  = 0x2701;  // eslint-disable-line\nconst NEAREST_MIPMAP_LINEAR  = 0x2702;  // eslint-disable-line\nconst LINEAR_MIPMAP_LINEAR   = 0x2703;  // eslint-disable-line\n\nexport {\n    BYTE,\n    UNSIGNED_BYTE,\n    SHORT,\n    UNSIGNED_SHORT,\n    INT,\n    UNSIGNED_INT,\n    FLOAT,\n    REPEAT,\n    CLAMP_TO_EDGE,\n    MIRRORED_REPEAT,\n    NEAREST,\n    LINEAR,\n    NEAREST_MIPMAP_NEAREST,\n    LINEAR_MIPMAP_NEAREST,\n    NEAREST_MIPMAP_LINEAR,\n    LINEAR_MIPMAP_LINEAR\n};\n", "import * as GL_CONST from '../GL_CONST';\n\n// size = 8\n// size = 8, offset = position\n// size = 4, offset = position + tex coord\n// size = 4, offset = position + tex coord + index\n\nexport const DefaultQuadAttributes =\n{\n    aVertexPosition: { size: 2, type: GL_CONST.FLOAT, normalized: false, offset: 0 },\n    aTextureCoord: { size: 2, type: GL_CONST.FLOAT, normalized: false, offset: 8 },\n    aTextureId: { size: 1, type: GL_CONST.FLOAT, normalized: false, offset: 16 },\n    aTintColor: { size: 4, type: GL_CONST.UNSIGNED_BYTE, normalized: true, offset: 20 }\n};\n", "export const DefaultQuadUniforms =\n{\n    uProjectionMatrix: new Float32Array(),\n    uCameraMatrix: new Float32Array(),\n    uTexture: 0\n};\n", "import { gl } from '../GL';\n\nexport function CreateDepthBuffer (framebuffer: WebGLFramebuffer, textureWidth: number, textureHeight: number): WebGLRenderbuffer\n{\n    gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n\n    const depthBuffer = gl.createRenderbuffer();\n\n    gl.bindRenderbuffer(gl.RENDERBUFFER, depthBuffer);\n\n    gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, textureWidth, textureHeight);\n\n    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, depthBuffer);\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\n    return depthBuffer;\n}\n", "import { gl } from '../GL';\n\nexport function CreateFramebuffer (texture: WebGLTexture, attachment?: GLenum): WebGLFramebuffer\n{\n    if (!attachment)\n    {\n        attachment = gl.COLOR_ATTACHMENT0;\n    }\n\n    const framebuffer = gl.createFramebuffer();\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, attachment, gl.TEXTURE_2D, texture, 0);\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\n    return framebuffer;\n}\n", "export const SINGLE_QUAD_FRAG =\n`#define SHADER_NAME SINGLE_QUAD_FRAG\n\nprecision highp float;\n\nvarying vec2 vTextureCoord;\nvarying float vTextureId;\nvarying vec4 vTintColor;\n\nuniform sampler2D uTexture;\n\nvoid main (void)\n{\n    vec4 color = texture2D(uTexture, vTextureCoord);\n\n    gl_FragColor = color * vec4(vTintColor.bgr * vTintColor.a, vTintColor.a);\n}`;\n", "export const SINGLE_QUAD_VERT =\n`#define SHADER_NAME SINGLE_QUAD_VERT\n\nprecision highp float;\n\nattribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\nattribute float aTextureId;\nattribute vec4 aTintColor;\n\nuniform mat4 uProjectionMatrix;\nuniform mat4 uCameraMatrix;\n\nvarying vec2 vTextureCoord;\nvarying float vTextureId;\nvarying vec4 vTintColor;\n\nvoid main (void)\n{\n    vTextureCoord = aTextureCoord;\n    vTextureId = aTextureId;\n    vTintColor = aTintColor;\n\n    gl_Position = uProjectionMatrix * uCameraMatrix * vec4(aVertexPosition, 0.0, 1.0);\n}`;\n", "export const TYPES_ENUM = {\r\n  i8: 'i8',\r\n  ui8: 'ui8',\r\n  ui8c: 'ui8c',\r\n  i16: 'i16',\r\n  ui16: 'ui16',\r\n  i32: 'i32',\r\n  ui32: 'ui32',\r\n  f32: 'f32',\r\n  f64: 'f64'\r\n}\r\n\r\nexport const TYPES_NAMES = {\r\n  i8: 'Int8',\r\n  ui8: 'Uint8',\r\n  ui8c: 'Uint8Clamped',\r\n  i16: 'Int16',\r\n  ui16: 'Uint16',\r\n  i32: 'Int32',\r\n  ui32: 'Uint32',\r\n  f32: 'Float32',\r\n  f64: 'Float64'\r\n}\r\n\r\nexport const TYPES = {\r\n  i8: Int8Array,\r\n  ui8: Uint8Array,\r\n  ui8c: Uint8ClampedArray,\r\n  i16: Int16Array,\r\n  ui16: Uint16Array,\r\n  i32: Int32Array,\r\n  ui32: Uint32Array,\r\n  f32: Float32Array,\r\n  f64: Float64Array\r\n}\r\n\r\nconst UNSIGNED_MAX = {\r\n  uint8: 2**8,\r\n  uint16: 2**16,\r\n  uint32: 2**32\r\n}\r\n\r\nconst roundToMultiple4 = x => Math.ceil(x / 4) * 4\r\n\r\nexport const $storeRef = Symbol('storeRef')\r\nexport const $storeSize = Symbol('storeSize')\r\nexport const $storeMaps = Symbol('storeMaps')\r\nexport const $storeFlattened = Symbol('storeFlattened')\r\nexport const $storeBase = Symbol('storeBase')\r\nexport const $storeType = Symbol('storeType')\r\n\r\nexport const $storeArrayCounts = Symbol('storeArrayCount')\r\nexport const $storeSubarrays = Symbol('storeSubarrays')\r\nexport const $storeCursor = Symbol('storeCursor')\r\nexport const $subarrayCursors = Symbol('subarrayCursors')\r\nexport const $subarray = Symbol('subarray')\r\nexport const $parentArray = Symbol('subStore')\r\nexport const $tagStore = Symbol('tagStore')\r\n\r\nexport const $queryShadow = Symbol('queryShadow')\r\nexport const $serializeShadow = Symbol('serializeShadow')\r\n\r\nexport const $indexType = Symbol('indexType')\r\nexport const $indexBytes = Symbol('indexBytes')\r\n\r\nconst stores = {}\r\n\r\nexport const resize = (ta, size) => {\r\n  const newBuffer = new ArrayBuffer(size * ta.BYTES_PER_ELEMENT)\r\n  const newTa = new ta.constructor(newBuffer)\r\n  newTa.set(ta, 0)\r\n  return newTa\r\n}\r\n\r\nconst resizeSubarray = (metadata, store, size) => {\r\n  const cursors = metadata[$subarrayCursors]\r\n  const type = store[$storeType]\r\n  const length = store[0].length\r\n  const indexType =\r\n    length <= UNSIGNED_MAX.uint8\r\n      ? 'ui8'\r\n      : length <= UNSIGNED_MAX.uint16\r\n        ? 'ui16'\r\n        : 'ui32'\r\n        \r\n  const arrayCount = metadata[$storeArrayCounts][type]\r\n  const summedLength = Array(arrayCount).fill(0).reduce((a, p) => a + length, 0)\r\n  \r\n  // for threaded impl\r\n  // const summedBytesPerElement = Array(arrayCount).fill(0).reduce((a, p) => a + TYPES[type].BYTES_PER_ELEMENT, 0)\r\n  // const totalBytes = roundToMultiple4(summedBytesPerElement * summedLength * size)\r\n  // const buffer = new ArrayBuffer(totalBytes)\r\n\r\n  const array = new TYPES[type](summedLength * size)\r\n\r\n  array.set(metadata[$storeSubarrays][type])\r\n  \r\n  metadata[$storeSubarrays][type] = array\r\n  metadata[$storeSubarrays][type][$queryShadow] = array.slice(0)\r\n  metadata[$storeSubarrays][type][$serializeShadow] = array.slice(0)\r\n  \r\n  array[$indexType] = TYPES_NAMES[indexType]\r\n  array[$indexBytes] = TYPES[indexType].BYTES_PER_ELEMENT\r\n\r\n  const start = cursors[type]\r\n  let end = 0\r\n  for (let eid = 0; eid < size; eid++) {\r\n    const from = cursors[type] + (eid * length)\r\n    const to = from + length\r\n\r\n    store[eid] = metadata[$storeSubarrays][type].subarray(from, to)\r\n    \r\n    store[eid].from = from\r\n    store[eid].to = to\r\n    store[eid][$queryShadow] = metadata[$storeSubarrays][type][$queryShadow].subarray(from, to)\r\n    store[eid][$serializeShadow] = metadata[$storeSubarrays][type][$serializeShadow].subarray(from, to)\r\n    store[eid][$subarray] = true\r\n    store[eid][$indexType] = array[$indexType]\r\n    store[eid][$indexBytes] = array[$indexBytes]\r\n    \r\n    end = to\r\n  }\r\n\r\n  cursors[type] = end\r\n\r\n  store[$parentArray] = metadata[$storeSubarrays][type].subarray(start, end)\r\n}\r\n\r\nconst resizeRecursive = (metadata, store, size) => {\r\n  Object.keys(store).forEach(key => {\r\n    const ta = store[key]\r\n    if (Array.isArray(ta)) {\r\n      resizeSubarray(metadata, ta, size)\r\n      store[$storeFlattened].push(ta)\r\n    } else if (ArrayBuffer.isView(ta)) {\r\n      store[key] = resize(ta, size)\r\n      store[$storeFlattened].push(store[key])\r\n      store[key][$queryShadow] = resize(ta[$queryShadow], size)\r\n      store[key][$serializeShadow] = resize(ta[$serializeShadow], size)\r\n    } else if (typeof ta === 'object') {\r\n      resizeRecursive(metadata, store[key], size)\r\n    }\r\n  })\r\n}\r\n\r\nexport const resizeStore = (store, size) => {\r\n  if (store[$tagStore]) return\r\n  store[$storeSize] = size\r\n  store[$storeFlattened].length = 0\r\n  Object.keys(store[$subarrayCursors]).forEach(k => {\r\n    store[$subarrayCursors][k] = 0\r\n  })\r\n  resizeRecursive(store, store, size)\r\n}\r\n\r\nexport const resetStore = store => {\r\n  if (store[$storeFlattened]) {\r\n    store[$storeFlattened].forEach(ta => {\r\n      ta.fill(0)\r\n    })\r\n    Object.keys(store[$storeSubarrays]).forEach(key => {\r\n      store[$storeSubarrays][key].fill(0)\r\n    })\r\n  }\r\n}\r\n\r\nexport const resetStoreFor = (store, eid) => {\r\n  if (store[$storeFlattened]) {\r\n    store[$storeFlattened].forEach(ta => {\r\n      if (ArrayBuffer.isView(ta)) ta[eid] = 0\r\n      else ta[eid].fill(0)\r\n    })\r\n  }\r\n}\r\n\r\nconst createTypeStore = (type, length) => {\r\n  const totalBytes = length * TYPES[type].BYTES_PER_ELEMENT\r\n  const buffer = new ArrayBuffer(totalBytes)\r\n  return new TYPES[type](buffer)\r\n}\r\n\r\nexport const contiguousArray = store => store[$parentArray]\r\n\r\nconst createArrayStore = (metadata, type, length) => {\r\n  const size = metadata[$storeSize]\r\n  const store = Array(size).fill(0)\r\n  store[$storeType] = type\r\n\r\n  const cursors = metadata[$subarrayCursors]\r\n  const indexType =\r\n    length < UNSIGNED_MAX.uint8\r\n      ? 'ui8'\r\n      : length < UNSIGNED_MAX.uint16\r\n        ? 'ui16'\r\n        : 'ui32'\r\n\r\n  if (!length) throw new Error('\u274C Must define a length for component array.')\r\n  if (!TYPES[type]) throw new Error(`\u274C Invalid component array property type ${type}.`)\r\n\r\n  // create buffer for type if it does not already exist\r\n  if (!metadata[$storeSubarrays][type]) {\r\n    const arrayCount = metadata[$storeArrayCounts][type]\r\n    const summedLength = Array(arrayCount).fill(0).reduce((a, p) => a + length, 0)\r\n    \r\n    // for threaded impl\r\n    // const summedBytesPerElement = Array(arrayCount).fill(0).reduce((a, p) => a + TYPES[type].BYTES_PER_ELEMENT, 0)\r\n    // const totalBytes = roundToMultiple4(summedBytesPerElement * summedLength * size)\r\n    // const buffer = new ArrayBuffer(totalBytes)\r\n\r\n    const array = new TYPES[type](summedLength * size)\r\n\r\n    metadata[$storeSubarrays][type] = array\r\n    metadata[$storeSubarrays][type][$queryShadow] = array.slice(0)\r\n    metadata[$storeSubarrays][type][$serializeShadow] = array.slice(0)\r\n    \r\n    array[$indexType] = TYPES_NAMES[indexType]\r\n    array[$indexBytes] = TYPES[indexType].BYTES_PER_ELEMENT\r\n  }\r\n\r\n  // pre-generate subarrays for each eid\r\n  const start = cursors[type]\r\n  let end = 0\r\n  for (let eid = 0; eid < size; eid++) {\r\n    const from = cursors[type] + (eid * length)\r\n    const to = from + length\r\n\r\n    store[eid] = metadata[$storeSubarrays][type].subarray(from, to)\r\n    \r\n    store[eid].from = from\r\n    store[eid].to = to\r\n    store[eid][$queryShadow] = metadata[$storeSubarrays][type][$queryShadow].subarray(from, to)\r\n    store[eid][$serializeShadow] = metadata[$storeSubarrays][type][$serializeShadow].subarray(from, to)\r\n    store[eid][$subarray] = true\r\n    store[eid][$indexType] = TYPES_NAMES[indexType]\r\n    store[eid][$indexBytes] = TYPES[indexType].BYTES_PER_ELEMENT\r\n    \r\n    end = to\r\n  }\r\n\r\n  cursors[type] = end\r\n\r\n  store[$parentArray] = metadata[$storeSubarrays][type].subarray(start, end)\r\n\r\n  return store\r\n}\r\n\r\nconst createShadows = (store) => {\r\n  store[$queryShadow] = store.slice(0)\r\n  store[$serializeShadow] = store.slice(0)\r\n}\r\n\r\nconst isArrayType = x => Array.isArray(x) && typeof x[0] === 'string' && typeof x[1] === 'number'\r\n\r\nexport const createStore = (schema, size) => {\r\n  const $store = Symbol('store')\r\n\r\n  if (!schema || !Object.keys(schema).length) {\r\n    // tag component\r\n    stores[$store] = {\r\n      [$storeSize]: size,\r\n      [$tagStore]: true,\r\n      [$storeBase]: () => stores[$store]\r\n    }\r\n    return stores[$store]\r\n  }\r\n\r\n  schema = JSON.parse(JSON.stringify(schema))\r\n\r\n  const arrayCounts = {}\r\n  const collectArrayCounts = s => {\r\n    const keys = Object.keys(s)\r\n    for (const k of keys) {\r\n      if (isArrayType(s[k])) {\r\n        if (!arrayCounts[s[k][0]]) arrayCounts[s[k][0]] = 0\r\n        arrayCounts[s[k][0]]++\r\n      } else if (s[k] instanceof Object) {\r\n        collectArrayCounts(s[k])\r\n      }\r\n    }\r\n  }\r\n  collectArrayCounts(schema)\r\n\r\n  const metadata = {\r\n    [$storeSize]: size,\r\n    [$storeMaps]: {},\r\n    [$storeSubarrays]: {},\r\n    [$storeRef]: $store,\r\n    [$storeCursor]: 0,\r\n    [$subarrayCursors]: Object.keys(TYPES).reduce((a, type) => ({ ...a, [type]: 0 }), {}),\r\n    [$storeFlattened]: [],\r\n    [$storeArrayCounts]: arrayCounts\r\n  }\r\n\r\n  if (schema instanceof Object && Object.keys(schema).length) {\r\n\r\n    const recursiveTransform = (a, k) => {\r\n\r\n      if (typeof a[k] === 'string') {\r\n\r\n        a[k] = createTypeStore(a[k], size)\r\n        createShadows(a[k])\r\n        a[k][$storeBase] = () => stores[$store]\r\n        metadata[$storeFlattened].push(a[k])\r\n\r\n      } else if (isArrayType(a[k])) {\r\n        \r\n        const [type, length] = a[k]\r\n        a[k] = createArrayStore(metadata, type, length)\r\n        a[k][$storeBase] = () => stores[$store]\r\n        metadata[$storeFlattened].push(a[k])\r\n        // Object.seal(a[k])\r\n\r\n      } else if (a[k] instanceof Object) {\r\n        \r\n        a[k] = Object.keys(a[k]).reduce(recursiveTransform, a[k])\r\n        // Object.seal(a[k])\r\n        \r\n      }\r\n\r\n      return a\r\n    }\r\n\r\n    stores[$store] = Object.assign(Object.keys(schema).reduce(recursiveTransform, schema), metadata)\r\n    stores[$store][$storeBase] = () => stores[$store]\r\n\r\n    // Object.seal(stores[$store])\r\n\r\n    return stores[$store]\r\n\r\n  }\r\n}\r\n\r\nexport const free = (store) => {\r\n  delete stores[store[$storeRef]]\r\n}", "import { $indexBytes, $indexType, $serializeShadow, $storeBase, $storeFlattened, $tagStore } from \"./Storage.js\"\r\nimport { $componentMap, addComponent, hasComponent } from \"./Component.js\"\r\nimport { $entityArray, $entityEnabled, addEntity, eidToWorld } from \"./Entity.js\"\r\n\r\nlet resized = false\r\n\r\nexport const setSerializationResized = v => { resized = v }\r\n\r\nconst canonicalize = (target) => {\r\n  let componentProps = []\r\n  let changedProps = new Set()\r\n  if (Array.isArray(target)) {\r\n    componentProps = target\r\n      .map(p => {\r\n        if (typeof p === 'function' && p.name === 'QueryChanged') {\r\n          p()[$storeFlattened].forEach(prop => {\r\n            changedProps.add(prop)\r\n          })\r\n          return p()[$storeFlattened]\r\n        }\r\n        if (Object.getOwnPropertySymbols(p).includes($storeFlattened)) {\r\n          return p[$storeFlattened]\r\n        }\r\n        if (Object.getOwnPropertySymbols(p).includes($storeBase)) {\r\n          return p\r\n        }\r\n      })\r\n      .reduce((a,v) => a.concat(v), [])\r\n  }\r\n  return [componentProps, changedProps]\r\n}\r\n\r\nexport const defineSerializer = (target, maxBytes = 20000000) => {\r\n  const isWorld = Object.getOwnPropertySymbols(target).includes($componentMap)\r\n\r\n  let [componentProps, changedProps] = canonicalize(target)\r\n\r\n  // TODO: calculate max bytes based on target\r\n\r\n  const buffer = new ArrayBuffer(maxBytes)\r\n  const view = new DataView(buffer)\r\n\r\n  return (ents) => {\r\n\r\n    if (resized) {\r\n      [componentProps, changedProps] = canonicalize(target)\r\n      resized = false\r\n    }\r\n\r\n    if (isWorld) {\r\n      componentProps = []\r\n      target[$componentMap].forEach((c, component) => {\r\n        if (component[$storeFlattened])\r\n          componentProps.push(...component[$storeFlattened])\r\n        else componentProps.push(component)\r\n      })\r\n    }\r\n    \r\n    let world\r\n    if (Object.getOwnPropertySymbols(ents).includes($componentMap)) {\r\n      world = ents\r\n      ents = ents[$entityArray]\r\n    } else {\r\n      world = eidToWorld.get(ents[0])\r\n    }\r\n\r\n    if (!ents.length) return\r\n\r\n    let where = 0\r\n\r\n    // iterate over component props\r\n    for (let pid = 0; pid < componentProps.length; pid++) {\r\n      const prop = componentProps[pid]\r\n      const diff = changedProps.has(prop)\r\n      \r\n      // write pid\r\n      view.setUint8(where, pid)\r\n      where += 1\r\n\r\n      // save space for entity count\r\n      const countWhere = where\r\n      where += 4\r\n      \r\n      let count = 0\r\n      // write eid,val\r\n      for (let i = 0; i < ents.length; i++) {\r\n        const eid = ents[i]\r\n\r\n        // skip if entity doesn't have this component\r\n        if (!hasComponent(world, prop[$storeBase](), eid)) {\r\n          continue\r\n        }\r\n\r\n        // skip if diffing and no change\r\n        if (diff && prop[eid] === prop[$serializeShadow][eid]) {\r\n          continue\r\n        }\r\n        \r\n        count++\r\n\r\n        // write eid\r\n        view.setUint32(where, eid)\r\n        where += 4\r\n\r\n        if (prop[$tagStore]) {\r\n          continue\r\n        }\r\n\r\n        // if property is an array\r\n        if (ArrayBuffer.isView(prop[eid])) {\r\n          const type = prop[eid].constructor.name.replace('Array', '')\r\n          const indexType = prop[eid][$indexType]\r\n          const indexBytes = prop[eid][$indexBytes]\r\n\r\n          // add space for count of dirty array elements\r\n          const countWhere2 = where\r\n          where += 1\r\n\r\n          let count2 = 0\r\n\r\n          // write index,value\r\n          for (let i = 0; i < prop[eid].length; i++) {\r\n            const value = prop[eid][i]\r\n\r\n            if (diff && prop[eid][i] === prop[eid][$serializeShadow][i]) {\r\n              continue\r\n            }\r\n\r\n            // write array index\r\n            view[`set${indexType}`](where, i)\r\n            where += indexBytes\r\n\r\n            // write value at that index\r\n            view[`set${type}`](where, value)\r\n            where += prop[eid].BYTES_PER_ELEMENT\r\n            count2++\r\n          }\r\n\r\n          // write total element count\r\n          view[`set${indexType}`](countWhere2, count2)\r\n\r\n        } else {\r\n          // regular property values\r\n          const type = prop.constructor.name.replace('Array', '')\r\n          // set value next [type] bytes\r\n          view[`set${type}`](where, prop[eid])\r\n          where += prop.BYTES_PER_ELEMENT\r\n\r\n          // sync shadow state\r\n          prop[$serializeShadow][eid] = prop[eid]\r\n        }\r\n      }\r\n\r\n      view.setUint32(countWhere, count)\r\n    }\r\n    return buffer.slice(0, where)\r\n  }\r\n}\r\n\r\nconst newEntities = new Map()\r\n\r\nexport const defineDeserializer = (target) => {\r\n  const isWorld = Object.getOwnPropertySymbols(target).includes($componentMap)\r\n  let [componentProps] = canonicalize(target)\r\n  return (world, packet, overwrite=true) => {\r\n\r\n    newEntities.clear()\r\n    \r\n    if (resized) {\r\n      [componentProps] = canonicalize(target)\r\n      resized = false\r\n    }\r\n\r\n    if (isWorld) {\r\n      componentProps = []\r\n      target[$componentMap].forEach((c, component) => {\r\n        if (component[$storeFlattened])\r\n          componentProps.push(...component[$storeFlattened])\r\n        else componentProps.push(component)\r\n      })\r\n    }\r\n\r\n    const view = new DataView(packet)\r\n    let where = 0\r\n\r\n    while (where < packet.byteLength) {\r\n\r\n      // pid\r\n      const pid = view.getUint8(where)\r\n      where += 1\r\n\r\n      // entity count\r\n      const entityCount = view.getUint32(where)\r\n      where += 4\r\n\r\n      // component property\r\n      const prop = componentProps[pid]\r\n\r\n      // Get the entities and set their prop values\r\n      for (let i = 0; i < entityCount; i++) {\r\n        let eid = view.getUint32(where)\r\n        where += 4\r\n\r\n        let newEid = newEntities.get(eid)\r\n        if (newEid !== undefined) {\r\n          eid = newEid\r\n        }\r\n\r\n        // if this world hasn't seen this eid yet, or if not overwriting\r\n        if (!world[$entityEnabled][eid] || !overwrite) {\r\n          // make a new entity for the data\r\n          const newEid = addEntity(world)\r\n          newEntities.set(eid, newEid)\r\n          eid = newEid\r\n        }\r\n\r\n        const component = prop[$storeBase]()\r\n        if (!hasComponent(world, component, eid)) {\r\n          addComponent(world, component, eid)\r\n        }\r\n\r\n        if (component[$tagStore]) {\r\n          continue\r\n        }\r\n        \r\n        if (ArrayBuffer.isView(prop[eid])) {\r\n          const array = prop[eid]\r\n          const count = view[`get${array[$indexType]}`](where)\r\n          where += array[$indexBytes]\r\n\r\n          // iterate over count\r\n          for (let i = 0; i < count; i++) {\r\n            const index = view[`get${array[$indexType]}`](where)\r\n            where += array[$indexBytes]\r\n\r\n            const value = view[`get${array.constructor.name.replace('Array', '')}`](where)\r\n            where += array.BYTES_PER_ELEMENT\r\n\r\n            prop[eid][index] = value\r\n          }\r\n        } else {\r\n          const value = view[`get${prop.constructor.name.replace('Array', '')}`](where)\r\n          where += prop.BYTES_PER_ELEMENT\r\n\r\n          prop[eid] = value\r\n        }\r\n      }\r\n    }\r\n  }\r\n}", "import { $componentMap, resizeComponents } from './Component.js'\r\nimport { $queries, $queryMap, queryRemoveEntity } from './Query.js'\r\nimport { resize, resizeStore } from './Storage.js'\r\nimport { $size, $resizeThreshold, worlds, resizeWorlds } from './World.js'\r\nimport { setSerializationResized } from './Serialize.js'\r\n\r\nexport const $entityMasks = Symbol('entityMasks')\r\nexport const $entityEnabled = Symbol('entityEnabled')\r\nexport const $entityArray = Symbol('entityArray')\r\nexport const $entityIndices = Symbol('entityIndices')\r\nexport const $removedEntities = Symbol('removedEntities')\r\n\r\nconst NONE = 2**32 - 1\r\n\r\nlet defaultSize = 100000\r\n\r\n// need a global EID cursor which all worlds and all components know about\r\n// so that world entities can posess entire rows spanning all component tables\r\nlet globalEntityCursor = 0\r\nlet globalSize = defaultSize\r\nlet resizeThreshold = () => globalSize - (globalSize / 5)\r\n\r\nexport const getGlobalSize = () => globalSize\r\n\r\n// removed eids should also be global to prevent memory leaks\r\nconst removed = []\r\n\r\nexport const resetGlobals = () => {\r\n  globalSize = defaultSize\r\n  globalEntityCursor = 0\r\n  removed.length = 0\r\n}\r\n\r\nexport const getDefaultSize = () => defaultSize\r\nexport const setDefaultSize = x => { \r\n  defaultSize = x\r\n  resetGlobals()\r\n}\r\n\r\nexport const getEntityCursor = () => globalEntityCursor\r\nexport const getRemovedEntities = () => removed\r\n\r\nexport const eidToWorld = new Map()\r\n\r\nexport const addEntity = (world) => {\r\n  const enabled = world[$entityEnabled]\r\n  \r\n  const eid = removed.length > 0 ? removed.shift() : globalEntityCursor++\r\n  enabled[eid] = 1\r\n  world[$entityIndices][eid] = world[$entityArray].push(eid) - 1\r\n  eidToWorld.set(eid, world)\r\n\r\n  // if data stores are 80% full\r\n  if (globalEntityCursor >= resizeThreshold()) {\r\n    // grow by half the original size rounded up to a multiple of 4\r\n    const size = globalSize\r\n    const amount = Math.ceil((size/2) / 4) * 4\r\n    const newSize = size + amount\r\n    globalSize = newSize\r\n    resizeWorlds(newSize)\r\n    resizeComponents(newSize)\r\n    setSerializationResized(true)\r\n    console.info(`\uD83D\uDC7E bitECS - resizing all worlds from ${size} to ${size+amount}`)\r\n  }\r\n\r\n  return eid\r\n}\r\n\r\nconst popSwap = (world, eid) => {\r\n  // pop swap\r\n  const index = world[$entityIndices][eid]\r\n\r\n  const swapped = world[$entityArray].pop()\r\n  if (swapped !== eid) {\r\n    world[$entityArray][index] = swapped\r\n    world[$entityIndices][swapped] = index\r\n  }\r\n  world[$entityIndices][eid] = NONE\r\n}\r\n\r\nexport const removeEntity = (world, eid) => {\r\n  const enabled = world[$entityEnabled]\r\n\r\n  // Check if entity is already removed\r\n  if (enabled[eid] === 0) return\r\n\r\n  // Remove entity from all queries\r\n  // TODO: archetype graph\r\n  world[$queries].forEach(query => {\r\n    queryRemoveEntity(world, query, eid)\r\n  })\r\n\r\n  // Free the entity\r\n  removed.push(eid)\r\n  enabled[eid] = 0\r\n\r\n  // pop swap\r\n  popSwap(world, eid)\r\n\r\n  // Clear entity bitmasks\r\n  for (let i = 0; i < world[$entityMasks].length; i++) world[$entityMasks][i][eid] = 0\r\n}", "import { $queryShadow, $storeFlattened, $storeSize } from './Storage.js'\r\nimport { $componentMap, registerComponent } from './Component.js'\r\nimport { $entityMasks, $entityEnabled, getEntityCursor, $entityArray } from './Entity.js'\r\n\r\nexport function Not(c) { return function QueryNot() { return c } }\r\nexport function Changed(c) { return function QueryChanged() { return c } }\r\n\r\nexport const $queries = Symbol('queries')\r\nexport const $queryMap = Symbol('queryMap')\r\nexport const $dirtyQueries = Symbol('$dirtyQueries')\r\nexport const $queryComponents = Symbol('queryComponents')\r\nexport const $enterQuery = Symbol('enterQuery')\r\nexport const $exitQuery = Symbol('exitQuery')\r\n\r\nconst NONE = 2**32 - 1\r\n\r\nexport const enterQuery = query => world => {\r\n  if (!world[$queryMap].has(query)) registerQuery(world, query)\r\n  const q = world[$queryMap].get(query)\r\n  return q.entered.splice(0)\r\n}\r\n\r\nexport const exitQuery = query => world => {\r\n  if (!world[$queryMap].has(query)) registerQuery(world, query)\r\n  const q = world[$queryMap].get(query)\r\n  return q.exited.splice(0)\r\n}\r\n\r\nexport const registerQuery = (world, query) => {\r\n\r\n  let components = []\r\n  let notComponents = []\r\n  let changedComponents = []\r\n\r\n  query[$queryComponents].forEach(c => {\r\n    if (typeof c === 'function') {\r\n      if (c.name === 'QueryNot') {\r\n        notComponents.push(c())\r\n      }\r\n      if (c.name === 'QueryChanged') {\r\n        changedComponents.push(c())\r\n        components.push(c())\r\n      }\r\n    } else {\r\n      components.push(c)\r\n    }\r\n  })\r\n\r\n  const mapComponents = c => world[$componentMap].get(c)\r\n\r\n  const size = components.concat(notComponents).reduce((a,c) => c[$storeSize] > a ? c[$storeSize] : a, 0)\r\n\r\n  const entities = []\r\n  const changed = []\r\n  const indices = new Uint32Array(size).fill(NONE)\r\n  const enabled = new Uint8Array(size)\r\n  const generations = components\r\n    .concat(notComponents)\r\n    .map (c => {\r\n      if (!world[$componentMap].has(c)) registerComponent(world, c)\r\n      return c\r\n    })\r\n    .map(mapComponents)\r\n    .map(c => c.generationId)\r\n    .reduce((a,v) => {\r\n      if (a.includes(v)) return a\r\n      a.push(v)\r\n      return a\r\n    }, [])\r\n\r\n  const reduceBitmasks = (a,c) => {\r\n    if (!a[c.generationId]) a[c.generationId] = 0\r\n    a[c.generationId] |= c.bitflag\r\n    return a\r\n  }\r\n  const masks = components\r\n    .map(mapComponents)\r\n    .reduce(reduceBitmasks, {})\r\n\r\n  const notMasks = notComponents\r\n    .map(mapComponents)\r\n    .reduce((a,c) => {\r\n      if (!a[c.generationId]) {\r\n        a[c.generationId] = 0\r\n        a[c.generationId] |= c.bitflag\r\n      }\r\n      return a\r\n    }, {})\r\n\r\n  const flatProps = components\r\n    .map(c => Object.getOwnPropertySymbols(c).includes($storeFlattened) ? c[$storeFlattened] : [c])\r\n    .reduce((a,v) => a.concat(v), [])\r\n\r\n  const toRemove = []\r\n  const entered = []\r\n  const exited = []\r\n\r\n  world[$queryMap].set(query, { \r\n    entities,\r\n    changed,\r\n    enabled,\r\n    components,\r\n    notComponents,\r\n    changedComponents,\r\n    masks,\r\n    notMasks,\r\n    generations,\r\n    indices,\r\n    flatProps,\r\n    toRemove,\r\n    entered,\r\n    exited,\r\n  })\r\n  \r\n  world[$queries].add(query)\r\n\r\n  for (let eid = 0; eid < getEntityCursor(); eid++) {\r\n    if (!world[$entityEnabled][eid]) continue\r\n    if (queryCheckEntity(world, query, eid)) {\r\n      queryAddEntity(world, query, eid)\r\n    }\r\n  }\r\n}\r\n\r\nconst diff = (q, clearDiff) => {\r\n  if (clearDiff) q.changed.length = 0\r\n  const flat = q.flatProps\r\n  for (let i = 0; i < q.entities.length; i++) {\r\n    const eid = q.entities[i]\r\n    let dirty = false\r\n    for (let pid = 0; pid < flat.length; pid++) {\r\n      const prop = flat[pid]\r\n      if (ArrayBuffer.isView(prop[eid])) {\r\n        for (let i = 0; i < prop[eid].length; i++) {\r\n          if (prop[eid][i] !== prop[eid][$queryShadow][i]) {\r\n            dirty = true\r\n            prop[eid][$queryShadow][i] = prop[eid][i]\r\n          }\r\n        }\r\n      } else {\r\n        if (prop[eid] !== prop[$queryShadow][eid]) {\r\n          dirty = true\r\n          prop[$queryShadow][eid] = prop[eid]\r\n        }\r\n      }\r\n    }\r\n    if (dirty) q.changed.push(eid)\r\n  }\r\n  return q.changed\r\n}\r\n\r\nexport const defineQuery = (components) => {\r\n  if (components === undefined || components[$componentMap] !== undefined) {\r\n    return world => world ? world[$entityArray] : components[$entityArray]\r\n  }\r\n\r\n  const query = function (world, clearDiff=true) {\r\n    if (!world[$queryMap].has(query)) registerQuery(world, query)\r\n\r\n    const q = world[$queryMap].get(query)\r\n\r\n    queryCommitRemovals(world, q)\r\n\r\n    if (q.changedComponents.length) return diff(q, clearDiff)\r\n\r\n    return q.entities\r\n  }\r\n  query[$queryComponents] = components\r\n  return query\r\n}\r\n\r\n// TODO: archetype graph\r\nexport const queryCheckEntity = (world, query, eid) => {\r\n  const { masks, notMasks, generations } = world[$queryMap].get(query)\r\n  for (let i = 0; i < generations.length; i++) {\r\n    const generationId = generations[i]\r\n    const qMask = masks[generationId]\r\n    const qNotMask = notMasks[generationId]\r\n    const eMask = world[$entityMasks][generationId][eid]\r\n    if (qNotMask && (eMask & qNotMask) !== 0) {\r\n      return false\r\n    }\r\n    if (qMask && (eMask & qMask) !== qMask) {\r\n      return false\r\n    }\r\n  }\r\n  return true\r\n}\r\n\r\nexport const queryCheckComponent = (world, query, component) => {\r\n  const { generationId, bitflag } = world[$componentMap].get(component)\r\n  const { masks } = world[$queryMap].get(query)\r\n  const mask = masks[generationId]\r\n  return (mask & bitflag) === bitflag\r\n}\r\n\r\nexport const queryAddEntity = (world, query, eid) => {\r\n  const q = world[$queryMap].get(query)\r\n  if (q.enabled[eid]) return\r\n  q.enabled[eid] = true\r\n  q.entities.push(eid)\r\n  q.indices[eid] = q.entities.length - 1\r\n  // TODO: pop swap so dupes don't enter\r\n  q.entered.push(eid)\r\n}\r\n\r\nconst queryCommitRemovals = (world, q) => {\r\n  while (q.toRemove.length) {\r\n    const eid = q.toRemove.pop()\r\n    const index = q.indices[eid]\r\n    if (index === NONE) continue\r\n\r\n    const swapped = q.entities.pop()\r\n    if (swapped !== eid) {\r\n      q.entities[index] = swapped\r\n      q.indices[swapped] = index\r\n    }\r\n    q.indices[eid] = NONE\r\n  }\r\n  world[$dirtyQueries].delete(q)\r\n}\r\n\r\nexport const commitRemovals = (world) => {\r\n  world[$dirtyQueries].forEach(q => {\r\n    queryCommitRemovals(world, q)\r\n  })\r\n}\r\n\r\nexport const queryRemoveEntity = (world, query, eid) => {\r\n  const q = world[$queryMap].get(query)\r\n  if (!q.enabled[eid]) return\r\n  q.enabled[eid] = false\r\n  q.toRemove.push(eid)\r\n  world[$dirtyQueries].add(q)\r\n  // TODO: pop swap so dupes don't enter (in the case where an EID is removed twice before query is called again)\r\n  q.exited.push(eid)\r\n}\r\n", "import { $storeSize, createStore, resetStoreFor, resizeStore } from './Storage.js'\r\nimport { $queries, queryAddEntity, queryRemoveEntity, queryCheckEntity, queryCheckComponent } from './Query.js'\r\nimport { $bitflag, $size } from './World.js'\r\nimport { $entityMasks, getDefaultSize, eidToWorld } from './Entity.js'\r\n\r\nexport const $componentMap = Symbol('componentMap')\r\n\r\nexport const components = []\r\n\r\nexport const resizeComponents = (size) => {\r\n  components.forEach(component => resizeStore(component, size))\r\n}\r\n\r\nexport const defineComponent = (schema) => {\r\n  const component = createStore(schema, getDefaultSize())\r\n  if (schema && Object.keys(schema).length) components.push(component)\r\n  return component\r\n}\r\n\r\nexport const incrementBitflag = (world) => {\r\n  world[$bitflag] *= 2\r\n  if (world[$bitflag] >= 2**32) {\r\n    world[$bitflag] = 1\r\n    world[$entityMasks].push(new Uint32Array(world[$size]))\r\n  }\r\n}\r\n\r\nexport const registerComponent = (world, component) => {\r\n  world[$componentMap].set(component, { \r\n    generationId: world[$entityMasks].length - 1,\r\n    bitflag: world[$bitflag],\r\n    store: component\r\n  })\r\n\r\n  if (component[$storeSize] < world[$size]) {\r\n    resizeStore(component, world[$size])\r\n  }\r\n\r\n  incrementBitflag(world)\r\n}\r\n\r\nexport const registerComponents = (world, components) => {\r\n  components.forEach(c => registerComponent(world, c))\r\n}\r\n\r\nexport const hasComponent = (world, component, eid) => {\r\n  const registeredComponent = world[$componentMap].get(component)\r\n  if (!registeredComponent) return\r\n  const { generationId, bitflag } = registeredComponent\r\n  const mask = world[$entityMasks][generationId][eid]\r\n  return (mask & bitflag) === bitflag\r\n}\r\n\r\nexport const addComponent = (world, component, eid, reset=false) => {\r\n  if (!Number.isInteger(eid)) {\r\n    component = world\r\n    world = eidToWorld.get(eid)\r\n    reset = eid || reset\r\n  }\r\n  if (!world[$componentMap].has(component)) registerComponent(world, component)\r\n  if (hasComponent(world, component, eid)) return\r\n  // Add bitflag to entity bitmask\r\n  const { generationId, bitflag } = world[$componentMap].get(component)\r\n  world[$entityMasks][generationId][eid] |= bitflag\r\n\r\n  // todo: archetype graph\r\n  world[$queries].forEach(query => {\r\n    if (!queryCheckComponent(world, query, component)) return\r\n    const match = queryCheckEntity(world, query, eid)\r\n    if (match) queryAddEntity(world, query, eid)\r\n  })\r\n  \r\n  // Zero out each property value\r\n  if (reset) resetStoreFor(component, eid)\r\n}\r\n\r\nexport const removeComponent = (world, component, eid, reset=true) => {\r\n  if (!Number.isInteger(eid)) {\r\n    component = world\r\n    world = eidToWorld.get(eid)\r\n    reset = eid || reset\r\n  }\r\n  const { generationId, bitflag } = world[$componentMap].get(component)\r\n\r\n  if (!(world[$entityMasks][generationId][eid] & bitflag)) return\r\n\r\n  // todo: archetype graph\r\n  world[$queries].forEach(query => {\r\n    if (!queryCheckComponent(world, query, component)) return\r\n    const match = queryCheckEntity(world, query, eid)\r\n    if (match) queryRemoveEntity(world, query, eid)\r\n  })\r\n\r\n  // Remove flag from entity bitmask\r\n  world[$entityMasks][generationId][eid] &= ~bitflag\r\n  \r\n  // Zero out each property value\r\n  if (reset) resetStoreFor(component, eid)\r\n}\r\n", "import { $componentMap } from './Component.js'\r\nimport { $queryMap, $queries, $dirtyQueries } from './Query.js'\r\nimport { $entityArray, $entityIndices, $entityEnabled, $entityMasks, getGlobalSize } from './Entity.js'\r\nimport { resize } from './Storage.js'\r\n\r\nexport const $size = Symbol('size')\r\nexport const $resizeThreshold = Symbol('resizeThreshold')\r\nexport const $bitflag = Symbol('bitflag')\r\n\r\n\r\nexport const worlds = []\r\n\r\nexport const resizeWorlds = (size) => {\r\n  worlds.forEach(world => {\r\n    world[$size] = size\r\n    \r\n    world[$queryMap].forEach(q => {\r\n      q.indices = resize(q.indices, size)\r\n      q.enabled = resize(q.enabled, size)\r\n    })\r\n    \r\n    world[$entityEnabled] = resize(world[$entityEnabled], size)\r\n    world[$entityIndices] = resize(world[$entityIndices], size)\r\n    \r\n    for (let i = 0; i < world[$entityMasks].length; i++) {\r\n      const masks = world[$entityMasks][i];\r\n      world[$entityMasks][i] = resize(masks, size)\r\n    }\r\n    \r\n    world[$resizeThreshold] = world[$size] - (world[$size] / 5)\r\n  })\r\n}\r\n\r\nexport const createWorld = () => {\r\n  const world = {}\r\n  const size = getGlobalSize()\r\n\r\n  world[$size] = size\r\n\r\n  world[$entityEnabled] = new Uint8Array(size)\r\n  world[$entityMasks] = [new Uint32Array(size)]\r\n\r\n  world[$entityArray] = []\r\n  world[$entityIndices] = new Uint32Array(size)\r\n\r\n  world[$bitflag] = 1\r\n\r\n  world[$componentMap] = new Map()\r\n\r\n  world[$queryMap] = new Map()\r\n  world[$queries] = new Set()\r\n  world[$dirtyQueries] = new Set()\r\n\r\n  worlds.push(world)\r\n\r\n  return world\r\n}\r\n", "import { commitRemovals } from './Query.js'\r\n\r\nexport const defineSystem = (fn1, fn2) => {\r\n  const update = fn2 !== undefined ? fn2 : fn1\r\n  const create = fn2 !== undefined ? fn1 : undefined\r\n  const init = new Set()\r\n  const system = (world, ...args) => {\r\n    if (create && !init.has(world)) {\r\n      create(world, ...args)\r\n      init.add(world)\r\n    }\r\n    update(world, ...args)\r\n    commitRemovals(world)\r\n    return world\r\n  }\r\n\r\n  Object.defineProperty(system, 'name', {\r\n    value: (update.name || \"AnonymousSystem\") + \"_internal\",\r\n    configurable: true,\r\n  })\r\n\r\n  return system\r\n}", "import { createWorld } from './World.js'\r\nimport { addEntity, removeEntity, setDefaultSize } from './Entity.js'\r\nimport { defineComponent, registerComponent, registerComponents, hasComponent, addComponent, removeComponent } from './Component.js'\r\nimport { defineSystem } from './System.js'\r\nimport { defineQuery, enterQuery, exitQuery, Changed, Not, commitRemovals } from './Query.js'\r\nimport { defineSerializer, defineDeserializer } from './Serialize.js'\r\nimport { TYPES_ENUM, contiguousArray } from './Storage.js'\r\n\r\nexport const pipe = (...fns) => input => {\r\n  if (!input || Array.isArray(input) && input.length === 0) return\r\n  fns = Array.isArray(fns[0]) ? fns[0] : fns\r\n  let tmp = input\r\n  for (let i = 0; i < fns.length; i++) {\r\n    const fn = fns[i]\r\n    if (Array.isArray(tmp)) {\r\n      // tmp = tmp.reduce((a,v) => a.concat(fn(v)),[])\r\n      tmp = fn(...tmp)\r\n    } else {\r\n      tmp = fn(tmp)\r\n    }\r\n  }\r\n  return tmp\r\n}\r\n\r\nexport const Types = TYPES_ENUM\r\n\r\nexport {\r\n\r\n  setDefaultSize,\r\n  createWorld,\r\n  addEntity,\r\n  removeEntity,\r\n\r\n  registerComponent,\r\n  registerComponents,\r\n  defineComponent,\r\n  addComponent,\r\n  removeComponent,\r\n  hasComponent,\r\n  \r\n  defineQuery,\r\n  Changed,\r\n  Not,\r\n  enterQuery,\r\n  exitQuery,\r\n  commitRemovals,\r\n\r\n  defineSystem,\r\n  \r\n  defineSerializer,\r\n  defineDeserializer,\r\n\r\n  contiguousArray,\r\n\r\n\r\n}\r\n", "import { Types, defineComponent } from 'bitecs';\n\nconst QuadVertex = defineComponent({\n    v1: Types.ui32,\n    v2: Types.ui32,\n    v3: Types.ui32,\n    v4: Types.ui32\n});\n\nexport const QuadVertexComponent = QuadVertex;\n", "import { Types, defineComponent } from 'bitecs';\n\nconst Extent2D = defineComponent({\n    x: Types.f32,\n    y: Types.f32,\n    width: Types.f32,\n    height: Types.f32,\n    right: Types.f32,\n    bottom: Types.f32\n});\n\nexport const Extent2DComponent = Extent2D;\n", "import { Types, defineComponent } from 'bitecs';\n\nconst Dirty = defineComponent({\n    frame: Types.ui32,\n    transform: Types.ui32,\n    update: Types.ui32,\n    childCache: Types.ui32,\n    postRender: Types.ui32,\n    vertexColors: Types.ui32,\n    bounds: Types.ui32,\n    texture: Types.ui32,\n    textureFrame: Types.ui32,\n    alpha: Types.ui32,\n    child: Types.ui32,\n    displayList: Types.ui32\n});\n\nexport const DirtyComponent = Dirty;\n", "import { createWorld } from 'bitecs';\n\nconst world = createWorld();\n\nexport const GameObjectWorld = world;\n", "import { DirtyComponent } from './DirtyComponent';\nimport { GameObjectWorld } from '../../GameObjectWorld';\nimport { addComponent } from 'bitecs';\n\nexport function AddDirtyComponent (id: number): void\n{\n    addComponent(GameObjectWorld, DirtyComponent, id);\n\n    DirtyComponent.frame[id] = 0;\n    DirtyComponent.transform[id] = 1;\n    DirtyComponent.update[id] = 1;\n    DirtyComponent.childCache[id] = 0;\n    DirtyComponent.postRender[id] = 0;\n    DirtyComponent.vertexColors[id] = 1;\n    DirtyComponent.bounds[id] = 1;\n    DirtyComponent.texture[id] = 0;\n    DirtyComponent.textureFrame[id] = 0;\n    DirtyComponent.alpha[id] = 0;\n    DirtyComponent.child[id] = 0;\n    DirtyComponent.displayList[id] = 0;\n}\n", "import { DirtyComponent } from './DirtyComponent';\n\nexport function ClearDirtyDisplayList (id: number): void\n{\n    DirtyComponent.displayList[id] = 0;\n}\n", "import { DirtyComponent } from './DirtyComponent';\n\nexport function HasDirtyDisplayList (id: number): boolean\n{\n    return Boolean(DirtyComponent.displayList[id]);\n}\n", "import { DirtyComponent } from './DirtyComponent';\n\nexport function SetDirtyAlpha (id: number): void\n{\n    DirtyComponent.alpha[id] = 1;\n}\n", "import { DirtyComponent } from './DirtyComponent';\n\nexport function SetDirtyDisplayList (id: number): void\n{\n    DirtyComponent.displayList[id] = 1;\n}\n", "import { Game } from './Game';\n\nexport let instance: Game;\nexport let frame: number = 0;\nexport let elapsed: number = 0;\n\nexport const GameInstance =\n{\n    get: (): Game =>\n    {\n        return instance;\n    },\n\n    set: (game: Game | undefined): void =>\n    {\n        instance = game;\n    },\n\n    getFrame: (): number =>\n    {\n        return frame;\n    },\n\n    setFrame: (current: number): void =>\n    {\n        frame = current;\n    },\n\n    getElapsed: (): number =>\n    {\n        return elapsed;\n    },\n\n    setElapsed: (current: number): void =>\n    {\n        elapsed = current;\n    }\n\n};\n", "import { DirtyComponent } from './DirtyComponent';\n\nexport function SetDirtyTransform (id: number): void\n{\n    DirtyComponent.transform[id] = 1;\n}\n", "import { DirtyComponent } from './DirtyComponent';\n\nexport function SetDirtyVertexColors (id: number): void\n{\n    DirtyComponent.vertexColors[id] = 1;\n}\n", "import { Extent2DComponent } from './Extent2DComponent';\nimport { SetDirtyTransform } from '../dirty';\n\n//  The area covered by this transform component + origin + size (usually from a Frame)\n\nexport function SetExtent (id: number, x: number, y: number, width: number, height: number): void\n{\n    Extent2DComponent.x[id] = x;\n    Extent2DComponent.y[id] = y;\n    Extent2DComponent.width[id] = width;\n    Extent2DComponent.height[id] = height;\n    Extent2DComponent.right[id] = x + width;\n    Extent2DComponent.bottom[id] = y + height;\n\n    SetDirtyTransform(id);\n}\n", "import { Types, defineComponent } from 'bitecs';\n\nconst Vertex = defineComponent({\n    x: Types.f32,\n    y: Types.f32,\n    z: Types.f32,\n    u: Types.f32,\n    v: Types.f32,\n    texture: Types.ui8,\n    tint: Types.ui32,\n    alpha: Types.f32,\n    color: Types.ui32,\n    offset: Types.f32\n});\n\nexport const VertexComponent = Vertex;\n", "import { VertexComponent } from './VertexComponent';\n\nexport function SetUV (id: number, u: number, v: number): void\n{\n    VertexComponent.u[id] = u;\n    VertexComponent.v[id] = v;\n}\n", "import { IContainer } from '../gameobjects/container/IContainer';\nimport { IFrame } from './IFrame';\nimport { QuadVertexComponent } from '../components/vertices/QuadVertexComponent';\nimport { SetExtent } from '../components/transform/SetExtent';\nimport { SetUV } from '../components/vertices/SetUV';\nimport { Texture } from './Texture';\nimport { Vertex } from '../components';\n\nexport class Frame implements IFrame\n{\n    texture: Texture;\n    key: string | number;\n\n    //  This is the actual area of the texture to draw to canvas / webgl, including any extruded data.\n    //  This is the same as the 'trimmed' + 'extruded' area from an atlas.\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n\n    trimmed: boolean = false;\n\n    //  Original size of the image before being trimmed or added to an atlas (which can add extrude data to it).\n    sourceSizeWidth: number;\n    sourceSizeHeight: number;\n\n    //  The size of the image having been trimmed, before being added to the atlas (i.e. doesn't have any extrusion values in it)\n    spriteSourceSizeX: number;\n    spriteSourceSizeY: number;\n    spriteSourceSizeWidth: number;\n    spriteSourceSizeHeight: number;\n\n    pivot: { x: number; y: number };\n\n    u0: number;\n    v0: number;\n    u1: number;\n    v1: number;\n\n    constructor (texture: Texture, key: string | number, x: number, y: number, width: number, height: number)\n    {\n        this.texture = texture;\n        this.key = key;\n\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n\n        this.sourceSizeWidth = width;\n        this.sourceSizeHeight = height;\n\n        this.updateUVs();\n    }\n\n    setPivot (x: number, y: number): void\n    {\n        this.pivot = { x, y };\n    }\n\n    setSize (width: number, height: number): void\n    {\n        this.width = width;\n        this.height = height;\n        this.sourceSizeWidth = width;\n        this.sourceSizeHeight = height;\n\n        this.updateUVs();\n    }\n\n    setSourceSize (width: number, height: number): void\n    {\n        this.sourceSizeWidth = width;\n        this.sourceSizeHeight = height;\n    }\n\n    setTrim (width: number, height: number, x: number, y: number, w: number, h: number): void\n    {\n        this.trimmed = true;\n\n        this.sourceSizeWidth = width;\n        this.sourceSizeHeight = height;\n\n        this.spriteSourceSizeX = x;\n        this.spriteSourceSizeY = y;\n        this.spriteSourceSizeWidth = w;\n        this.spriteSourceSizeHeight = h;\n    }\n\n    getExtent (originX: number, originY: number): { left: number; right: number; top: number; bottom: number }\n    {\n        const sourceSizeWidth = this.sourceSizeWidth;\n        const sourceSizeHeight = this.sourceSizeHeight;\n\n        let left: number;\n        let right: number;\n        let top: number;\n        let bottom: number;\n\n        if (this.trimmed)\n        {\n            left = this.spriteSourceSizeX - (originX * sourceSizeWidth);\n            right = left + this.spriteSourceSizeWidth;\n\n            top = this.spriteSourceSizeY - (originY * sourceSizeHeight);\n            bottom = top + this.spriteSourceSizeHeight;\n        }\n        else\n        {\n            left = -originX * sourceSizeWidth;\n            right = left + sourceSizeWidth;\n\n            top = -originY * sourceSizeHeight;\n            bottom = top + sourceSizeHeight;\n        }\n\n        return { left, right, top, bottom };\n    }\n\n    copyToExtent (child: IContainer): this\n    {\n        const originX = child.originX;\n        const originY = child.originY;\n\n        const sourceSizeWidth = this.sourceSizeWidth;\n        const sourceSizeHeight = this.sourceSizeHeight;\n\n        let x: number;\n        let y: number;\n        let width: number;\n        let height: number;\n\n        if (this.trimmed)\n        {\n            x = this.spriteSourceSizeX - (originX * sourceSizeWidth);\n            y = this.spriteSourceSizeY - (originY * sourceSizeHeight);\n\n            width = this.spriteSourceSizeWidth;\n            height = this.spriteSourceSizeHeight;\n        }\n        else\n        {\n            x = -originX * sourceSizeWidth;\n            y = -originY * sourceSizeHeight;\n\n            width = sourceSizeWidth;\n            height = sourceSizeHeight;\n        }\n\n        SetExtent(child.id, x, y, width, height);\n\n        return this;\n    }\n\n    copyToVertices (id: number): this\n    {\n        const { u0, u1, v0, v1 } = this;\n\n        //  TODO: Move to a system based on frame change\n        SetUV(QuadVertexComponent.v1[id], u0, v0);\n        SetUV(QuadVertexComponent.v2[id], u0, v1);\n        SetUV(QuadVertexComponent.v3[id], u1, v1);\n        SetUV(QuadVertexComponent.v4[id], u1, v0);\n\n        // vertices[offset + 0].setUV(u0, v0);\n        // vertices[offset + 1].setUV(u0, v1);\n        // vertices[offset + 2].setUV(u1, v1);\n        // vertices[offset + 3].setUV(u1, v0);\n\n        return this;\n    }\n\n    updateUVs (): void\n    {\n        const { x, y, width, height } = this;\n\n        const baseTextureWidth = this.texture.width;\n        const baseTextureHeight = this.texture.height;\n\n        this.u0 = x / baseTextureWidth;\n        this.v0 = y / baseTextureHeight;\n\n        this.u1 = (x + width) / baseTextureWidth;\n        this.v1 = (y + height) / baseTextureHeight;\n    }\n\n    destroy (): void\n    {\n        this.texture = null;\n    }\n}\n", "import { BindingQueue } from '../renderer/BindingQueue';\nimport { Frame } from './Frame';\nimport { IGLTextureBinding } from '../renderer/webgl1/textures/IGLTextureBinding';\nimport { IGLTextureBindingConfig } from '../renderer/webgl1/textures/IGLTextureBindingConfig';\nimport { ITexture } from './ITexture';\n\nexport class Texture implements ITexture\n{\n    //  Unique identifier of this Texture, if stored in the Texture Manager\n    key: string = '';\n\n    width: number;\n    height: number;\n\n    image: TexImageSource;\n\n    binding: IGLTextureBinding;\n\n    firstFrame: Frame;\n\n    frames: Map<string | number, Frame>;\n\n    data: unknown;\n\n    constructor (image?: TexImageSource, width?: number, height?: number, glConfig?: IGLTextureBindingConfig)\n    {\n        if (image)\n        {\n            width = image.width;\n            height = image.height;\n        }\n\n        this.image = image;\n\n        this.width = width;\n        this.height = height;\n\n        this.frames = new Map();\n\n        this.data = {};\n\n        this.addFrame('__BASE', 0, 0, width, height);\n\n        BindingQueue.add(this, glConfig);\n    }\n\n    addFrame (key: string | number, x: number, y: number, width: number, height: number): Frame\n    {\n        if (this.frames.has(key))\n        {\n            return null;\n        }\n\n        const frame = new Frame(this, key, x, y, width, height);\n\n        this.frames.set(key, frame);\n\n        if (!this.firstFrame || this.firstFrame.key === '__BASE')\n        {\n            this.firstFrame = frame;\n        }\n\n        return frame;\n    }\n\n    getFrame (key?: string | number | Frame): Frame\n    {\n        //  null, undefined, empty string, zero\n        if (!key)\n        {\n            return this.firstFrame;\n        }\n\n        if (key instanceof Frame)\n        {\n            key = key.key;\n        }\n\n        let frame: Frame = this.frames.get(key);\n\n        if (!frame)\n        {\n            console.warn(`Frame missing: ${key}`);\n\n            frame = this.firstFrame;\n        }\n\n        return frame;\n    }\n\n    setSize (width: number, height: number): void\n    {\n        this.width = width;\n        this.height = height;\n\n        const frame = this.frames.get('__BASE');\n\n        frame.setSize(width, height);\n    }\n\n    destroy (): void\n    {\n        if (this.binding)\n        {\n            this.binding.destroy();\n        }\n\n        this.frames.clear();\n\n        this.data = null;\n        this.image = null;\n        this.firstFrame = null;\n    }\n}\n", "import { GetHeight, GetResolution, GetWidth } from '../../../config/size/';\n\nimport { CreateAttributes } from './CreateAttributes';\nimport { CreateDepthBuffer } from '../fbo/CreateDepthBuffer';\nimport { CreateFramebuffer } from '../fbo/CreateFramebuffer';\nimport { CreateProgram } from './CreateProgram';\nimport { CreateShader } from './CreateShader';\nimport { CreateUniforms } from './CreateUniforms';\nimport { DefaultQuadAttributes } from './DefaultQuadAttributes';\nimport { DefaultQuadUniforms } from './DefaultQuadUniforms';\nimport { DeleteFramebuffer } from '../fbo/DeleteFramebuffer';\nimport { DeleteGLTexture } from '../textures/DeleteGLTexture';\nimport { DeleteShaders } from './DeleteShaders';\nimport { GLTextureBinding } from '../textures/GLTextureBinding';\nimport { IRenderPass } from '../renderpass/IRenderPass';\nimport { IShader } from './IShader';\nimport { IShaderConfig } from './IShaderConfig';\nimport { IVertexAttribPointer } from './IVertexAttribPointer';\nimport { SINGLE_QUAD_FRAG } from '../glsl/SINGLE_QUAD_FRAG';\nimport { SINGLE_QUAD_VERT } from '../glsl/SINGLE_QUAD_VERT';\nimport { Texture } from '../../../textures/Texture';\nimport { gl } from '../GL';\n\nexport class Shader implements IShader\n{\n    program: WebGLProgram;\n\n    attributes: Map<string, IVertexAttribPointer>;\n\n    uniforms: Map<string, unknown>;\n\n    uniformSetters: Map<string, Function>;\n\n    texture: Texture;\n\n    framebuffer: WebGLFramebuffer;\n\n    renderToFramebuffer: boolean = false;\n\n    renderToDepthbuffer: boolean = false;\n\n    isActive: boolean = false;\n\n    constructor (config?: IShaderConfig)\n    {\n        if (config)\n        {\n            this.fromConfig(config);\n        }\n    }\n\n    fromConfig (config: IShaderConfig): void\n    {\n        const {\n            attributes = DefaultQuadAttributes,\n            fragmentShader = SINGLE_QUAD_FRAG,\n            height = GetHeight(),\n            renderToFramebuffer = false,\n            renderToDepthbuffer = false,\n            resolution = GetResolution(),\n            vertexShader = SINGLE_QUAD_VERT,\n            width = GetWidth(),\n            uniforms = DefaultQuadUniforms\n        } = config;\n\n        this.create(fragmentShader, vertexShader, uniforms, attributes);\n\n        if (renderToFramebuffer)\n        {\n            this.renderToFramebuffer = true;\n\n            const texture = new Texture(null, width * resolution, height * resolution);\n            const binding = new GLTextureBinding(texture);\n\n            texture.binding = binding;\n\n            binding.framebuffer = CreateFramebuffer(binding.texture);\n\n            if (renderToDepthbuffer)\n            {\n                this.renderToDepthbuffer = true;\n\n                binding.depthbuffer = CreateDepthBuffer(binding.framebuffer, texture.width, texture.height);\n            }\n\n            this.texture = texture;\n            this.framebuffer = binding.framebuffer;\n        }\n    }\n\n    create (fragmentShaderSource: string, vertexShaderSource: string, uniforms: {}, attribs: {}): void\n    {\n        const fragmentShader = CreateShader(fragmentShaderSource, gl.FRAGMENT_SHADER);\n        const vertexShader = CreateShader(vertexShaderSource, gl.VERTEX_SHADER);\n\n        if (!fragmentShader || !vertexShader)\n        {\n            return;\n        }\n\n        const program = CreateProgram(fragmentShader, vertexShader);\n\n        if (!program)\n        {\n            return;\n        }\n\n        const currentProgram = gl.getParameter(gl.CURRENT_PROGRAM);\n\n        gl.useProgram(program);\n\n        this.program = program;\n\n        this.uniformSetters = CreateUniforms(program);\n\n        this.uniforms = new Map();\n\n        //  Copy starting values from the config object to the uniforms map\n        for (const [ key, value ] of Object.entries(uniforms))\n        {\n            this.uniforms.set(key, value);\n        }\n\n        this.attributes = CreateAttributes(program, attribs);\n\n        gl.useProgram(currentProgram);\n\n        this.isActive = false;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    updateUniforms (renderPass: IRenderPass): void\n    {\n        //  Use this to set any extra uniform values prior to the bind\n    }\n\n    bind (renderPass: IRenderPass): boolean\n    {\n        const uniforms = this.uniforms;\n\n        uniforms.set('uProjectionMatrix', renderPass.projectionMatrix.data);\n        uniforms.set('uCameraMatrix', renderPass.cameraMatrix.data);\n\n        this.updateUniforms(renderPass);\n\n        return this.setUniforms(renderPass);\n    }\n\n    setUniform (key: string, value: unknown): void\n    {\n        const uniforms = this.uniforms;\n\n        if (uniforms.has(key))\n        {\n            uniforms.set(key, value);\n\n            const setter = this.uniformSetters.get(key);\n\n            setter(value);\n        }\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    setUniforms (renderPass: IRenderPass): boolean\n    {\n        if (!this.program)\n        {\n            return false;\n        }\n\n        gl.useProgram(this.program);\n\n        this.isActive = true;\n\n        const uniforms = this.uniforms;\n\n        for (const [ name, setter ] of this.uniformSetters.entries())\n        {\n            setter(uniforms.get(name));\n        }\n\n        return true;\n    }\n\n    //  stride = vertexByteSize\n    setAttributes (renderPass: IRenderPass): void\n    {\n        if (this.program)\n        {\n            const stride = renderPass.currentVertexBuffer.vertexByteSize;\n\n            this.attributes.forEach(attrib =>\n            {\n                gl.vertexAttribPointer(attrib.index, attrib.size, attrib.type, attrib.normalized, stride, attrib.offset);\n            });\n        }\n    }\n\n    destroy (): void\n    {\n        DeleteShaders(this.program);\n        DeleteGLTexture(this.texture);\n        DeleteFramebuffer(this.framebuffer);\n\n        this.uniforms.clear();\n        this.uniformSetters.clear();\n        this.attributes.clear();\n\n        this.program = null;\n        this.texture = null;\n        this.framebuffer = null;\n    }\n}\n", "import { DefaultQuadAttributes } from './DefaultQuadAttributes';\nimport { IRenderPass } from '../renderpass/IRenderPass';\nimport { IShader } from './IShader';\nimport { IShaderConfig } from './IShaderConfig';\nimport { Shader } from './Shader';\n\nexport class QuadShader extends Shader implements IShader\n{\n    constructor (config: IShaderConfig = {})\n    {\n        const shaderConfig = config;\n\n        shaderConfig.attributes = (!shaderConfig.attributes) ? DefaultQuadAttributes : shaderConfig.attributes;\n\n        super(shaderConfig);\n    }\n\n    bind (renderPass: IRenderPass): boolean\n    {\n        const uniforms = this.uniforms;\n\n        uniforms.set('uProjectionMatrix', renderPass.projectionMatrix.data);\n        uniforms.set('uCameraMatrix', renderPass.cameraMatrix.data);\n\n        return super.bind(renderPass);\n    }\n}\n", "export const MULTI_QUAD_FRAG =\n`#define SHADER_NAME MULTI_QUAD_FRAG\n\nprecision highp float;\n\nvarying vec2 vTextureCoord;\nvarying float vTextureId;\nvarying vec4 vTintColor;\n\nuniform sampler2D uTexture[%count%];\n\nvoid main (void)\n{\n    vec4 color;\n\n    %forloop%\n\n    gl_FragColor = color * vec4(vTintColor.bgr * vTintColor.a, vTintColor.a);\n}`;\n", "import { GetMaxTextures } from '../../../config/maxtextures/GetMaxTextures';\nimport { IRenderPass } from '../renderpass/IRenderPass';\nimport { IShaderConfig } from './IShaderConfig';\nimport { MULTI_QUAD_FRAG } from '../glsl/MULTI_QUAD_FRAG';\nimport { QuadShader } from './QuadShader';\n\nexport class MultiTextureQuadShader extends QuadShader\n{\n    constructor (config: IShaderConfig = {})\n    {\n        if (!config.fragmentShader)\n        {\n            config.fragmentShader = MULTI_QUAD_FRAG;\n        }\n\n        super(config);\n    }\n\n    create (fragmentShaderSource: string, vertexShaderSource: string, uniforms: {}, attribs: {}): void\n    {\n        const maxTextures = GetMaxTextures();\n\n        let src = '';\n\n        for (let i = 1; i < maxTextures; i++)\n        {\n            if (i > 1)\n            {\n                src += '\\n\\telse ';\n            }\n\n            if (i < maxTextures - 1)\n            {\n                src += `if (vTextureId < ${i}.5)`;\n            }\n\n            src += '\\n\\t{';\n            src += `\\n\\t\\tcolor = texture2D(uTexture[${i}], vTextureCoord);`;\n            src += '\\n\\t}';\n        }\n\n        fragmentShaderSource = fragmentShaderSource.replace(/%count%/gi, `${maxTextures}`);\n        fragmentShaderSource = fragmentShaderSource.replace(/%forloop%/gi, src);\n\n        super.create(fragmentShaderSource, vertexShaderSource, uniforms, attribs);\n    }\n\n    bind (renderPass: IRenderPass): boolean\n    {\n        this.uniforms.set('uTexture', renderPass.textureIndex);\n\n        return super.bind(renderPass);\n    }\n}\n", "import { IRenderPass } from './IRenderPass';\n\nexport function SetDefaultBlendMode (renderPass: IRenderPass, enable: boolean, sfactor?: number, dfactor?: number): void\n{\n    const entry = { enable, sfactor, dfactor };\n\n    //  The default entry always goes into index zero\n    renderPass.blendModeStack[0] = entry;\n\n    renderPass.currentBlendMode = entry;\n    renderPass.defaultBlendMode = entry;\n}\n", "import { IRenderPass } from './IRenderPass';\nimport { Rectangle } from '../../../geom/rectangle/Rectangle';\n\nexport function SetDefaultFramebuffer (renderPass: IRenderPass, framebuffer: WebGLFramebuffer = null, viewport?: Rectangle): void\n{\n    const entry = { framebuffer, viewport };\n\n    //  The default entry always goes into index zero\n    renderPass.framebufferStack[0] = entry;\n\n    renderPass.currentFramebuffer = entry;\n    renderPass.defaultFramebuffer = entry;\n}\n", "import { IRenderPass } from './IRenderPass';\nimport { IShader } from '../shaders/IShader';\n\nexport function SetDefaultShader (renderPass: IRenderPass, shader: IShader, textureID?: number): void\n{\n    const entry = { shader, textureID };\n\n    //  The default entry always goes into index zero\n    renderPass.shaderStack[0] = entry;\n\n    renderPass.currentShader = entry;\n    renderPass.defaultShader = entry;\n}\n", "import { IRenderPass } from './IRenderPass';\nimport { IVertexBuffer } from '../buffers/IVertexBuffer';\n\nexport function SetDefaultVertexBuffer (renderPass: IRenderPass, buffer: IVertexBuffer): void\n{\n    //  The default entry always goes into index zero\n    renderPass.vertexBufferStack[0] = buffer;\n\n    renderPass.currentVertexBuffer = buffer;\n    renderPass.defaultVertexBuffer = buffer;\n}\n", "import { IRenderPass } from './IRenderPass';\nimport { Rectangle } from '../../../geom/rectangle/Rectangle';\n\nexport function SetDefaultViewport (renderPass: IRenderPass, x: number = 0, y: number = 0, width: number = 0, height: number = 0): void\n{\n    const entry = new Rectangle(x, y, width, height);\n\n    //  The default entry always goes into index zero\n    renderPass.viewportStack[0] = entry;\n\n    renderPass.currentViewport = entry;\n    renderPass.defaultViewport = entry;\n}\n", "export class Vec3\n{\n    x: number;\n    y: number;\n    z: number;\n\n    constructor (x: number = 0, y: number = 0, z: number = 0)\n    {\n        this.set(x, y, z);\n    }\n\n    set (x: number = 0, y: number = 0, z: number = 0): this\n    {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n\n        return this;\n    }\n\n    toArray (dst: Float32List = [], index: number = 0): Float32List\n    {\n        const { x, y, z } = this;\n\n        dst[ index ] = x;\n        dst[ index + 1 ] = y;\n        dst[ index + 2 ] = z;\n\n        return dst;\n    }\n\n    fromArray (src: Float32List, index: number = 0): this\n    {\n        return this.set(\n            src[ index ],\n            src[ index + 1 ],\n            src[ index + 2 ]\n        );\n    }\n\n    toString (): string\n    {\n        const { x, y, z } = this;\n\n        return `{ x=${x}, y=${y}, z=${z} }`;\n    }\n}\n", "import { Matrix4 } from './Matrix4';\n\nexport function Mat4Identity (matrix: Matrix4 = new Matrix4()): Matrix4\n{\n    return matrix.set(\n        1, 0, 0, 0,\n        0, 1, 0, 0,\n        0, 0, 1, 0,\n        0, 0, 0, 1\n    );\n}\n", "//  A Matrix2D contains six elements in a short-form of the 3x3 Matrix, with the last column ignored.\n\n//  |----|----|----|\n//  | a  | b  | 0  |\n//  |----|----|----|\n//  | c  | d  | 0  |\n//  |----|----|----|\n//  | tx | ty | 1  |\n//  |----|----|----|\n\nexport class Matrix2D\n{\n    a: number; // element 0\n    b: number; // element 1\n    c: number; // element 2\n    d: number; // element 3\n    tx: number; // element 4\n    ty: number; // element 5\n\n    /**\n     * Creates an instance of Matrix2D.\n     *\n     * @param {number} [a=1] - X scale.\n     * @param {number} [b=0] - X skew.\n     * @param {number} [c=0] - Y skew.\n     * @param {number} [d=1] - Y scale.\n     * @param {number} [tx=0] - X translation\n     * @param {number} [ty=0] - Y translation\n     * @memberof Matrix2D\n     */\n    constructor (a: number = 1, b: number = 0, c: number = 0, d: number = 1, tx: number = 0, ty: number = 0)\n    {\n        this.set(a, b, c, d, tx, ty);\n    }\n\n    set (a: number = 1, b: number = 0, c: number = 0, d: number = 1, tx: number = 0, ty: number = 0): this\n    {\n        this.a = a;\n        this.b = b;\n        this.c = c;\n        this.d = d;\n        this.tx = tx;\n        this.ty = ty;\n\n        return this;\n    }\n\n    identity (): this\n    {\n        return this.set();\n    }\n\n    toArray (): number[]\n    {\n        const  { a, b, c, d, tx, ty } = this;\n\n        return [ a, b, c, d, tx, ty ];\n    }\n\n    fromArray (src: number[]): Matrix2D\n    {\n        return this.set(src[0], src[1], src[2], src[3], src[4], src[5]);\n    }\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Find the angle of a segment from (x1, y1) -> (x2, y2).\n *\n * @function Phaser.Math.Angle.Between\n * @since 3.0.0\n *\n * @param {number} x1 - The x coordinate of the first point.\n * @param {number} y1 - The y coordinate of the first point.\n * @param {number} x2 - The x coordinate of the second point.\n * @param {number} y2 - The y coordinate of the second point.\n *\n * @return {number} The angle in radians.\n */\nexport function AngleBetween (x1: number, y1: number, x2: number, y2: number): number\n{\n    return Math.atan2(y2 - y1, x2 - x1);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Find the angle of a segment from (x1, y1) -> (x2, y2).\n *\n * The difference between this method and {@link Phaser.Math.Angle.Between} is that this assumes the y coordinate\n * travels down the screen.\n *\n * @function Phaser.Math.Angle.BetweenY\n * @since 3.0.0\n *\n * @param {number} x1 - The x coordinate of the first point.\n * @param {number} y1 - The y coordinate of the first point.\n * @param {number} x2 - The x coordinate of the second point.\n * @param {number} y2 - The y coordinate of the second point.\n *\n * @return {number} The angle in radians.\n */\nexport function AngleBetweenY (x1: number, y1: number, x2: number, y2: number): number\n{\n    return Math.atan2(x2 - x1, y2 - y1);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nexport const MATH_CONST = {\n\n    /**\n     * The value of PI * 2.\n     *\n     * @name Phaser.Math.PI2\n     * @type {number}\n     * @since 3.0.0\n     */\n    PI2: Math.PI * 2,\n\n    /**\n     * The value of PI * 2.\n     *\n     * @name Phaser.Math.HALF_PI\n     * @type {number}\n     * @since 3.0.0\n     */\n    HALF_PI: Math.PI * 0.5,\n\n    /**\n     * An epsilon value (1.0e-6)\n     *\n     * @name Phaser.Math.EPSILON\n     * @type {number}\n     * @since 3.0.0\n     */\n    EPSILON: 1.0e-6,\n\n    /**\n     * For converting degrees to radians (PI / 180)\n     *\n     * @name Phaser.Math.DEG_TO_RAD\n     * @type {number}\n     * @since 3.0.0\n     */\n    DEG_TO_RAD: Math.PI / 180,\n\n    /**\n     * For converting radians to degrees (180 / PI)\n     *\n     * @name Phaser.Math.RAD_TO_DEG\n     * @type {number}\n     * @since 3.0.0\n     */\n    RAD_TO_DEG: 180 / Math.PI,\n\n    /**\n     * The minimum safe integer this browser supports.\n     * We use a const for backward compatibility with Internet Explorer.\n     *\n     * @name Phaser.Math.MIN_SAFE_INTEGER\n     * @type {number}\n     * @since 3.21.0\n     */\n    MIN_SAFE_INTEGER: Number.MIN_SAFE_INTEGER || -9007199254740991,\n\n    /**\n     * The maximum safe integer this browser supports.\n     * We use a const for backward compatibility with Internet Explorer.\n     *\n     * @name Phaser.Math.MAX_SAFE_INTEGER\n     * @type {number}\n     * @since 3.21.0\n     */\n    MAX_SAFE_INTEGER: Number.MAX_SAFE_INTEGER || 9007199254740991\n\n};\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { MATH_CONST as CONST } from '../const';\n\n/**\n * Takes an angle in Phasers default clockwise format and converts it so that\n * 0 is North, 90 is West, 180 is South and 270 is East,\n * therefore running counter-clockwise instead of clockwise.\n * \n * You can pass in the angle from a Game Object using:\n * \n * ```javascript\n * var converted = CounterClockwise(gameobject.rotation);\n * ```\n * \n * All values for this function are in radians.\n *\n * @function Phaser.Math.Angle.CounterClockwise\n * @since 3.16.0\n *\n * @param {number} angle - The angle to convert, in radians.\n *\n * @return {number} The converted angle, in radians.\n */\nexport function CounterClockwise (angle: number): number\n{\n    if (angle > Math.PI)\n    {\n        angle -= CONST.PI2;\n    }\n\n    return Math.abs((((angle + CONST.HALF_PI) % CONST.PI2) - CONST.PI2) % CONST.PI2);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { MATH_CONST } from '../const';\n\n/**\n * Normalize an angle to the [0, 2pi] range.\n *\n * @function Phaser.Math.Angle.Normalize\n * @since 3.0.0\n *\n * @param {number} angle - The angle to normalize, in radians.\n *\n * @return {number} The normalized angle, in radians.\n */\nexport function NormalizeAngle (angle: number): number\n{\n    angle = angle % MATH_CONST.PI2;\n\n    if (angle >= 0)\n    {\n        return angle;\n    }\n    else\n    {\n        return angle + MATH_CONST.PI2;\n    }\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { NormalizeAngle } from './NormalizeAngle';\n\n/**\n * Reverse the given angle.\n *\n * @function Phaser.Math.Angle.Reverse\n * @since 3.0.0\n *\n * @param {number} angle - The angle to reverse, in radians.\n *\n * @return {number} The reversed angle, in radians.\n */\nexport function ReverseAngle (angle: number): number\n{\n    return NormalizeAngle(angle + Math.PI);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { MATH_CONST } from '../const';\n\n/**\n * Rotates `currentAngle` towards `targetAngle`, taking the shortest rotation distance. The `lerp` argument is the amount to rotate by in this call.\n *\n * @function Phaser.Math.Angle.RotateTo\n * @since 3.0.0\n *\n * @param {number} currentAngle - The current angle, in radians.\n * @param {number} targetAngle - The target angle to rotate to, in radians.\n * @param {number} [lerp=0.05] - The lerp value to add to the current angle.\n *\n * @return {number} The adjusted angle.\n */\nexport function RotateAngleTo (currentAngle: number, targetAngle: number, lerp: number = 0.05): number\n{\n    if (currentAngle === targetAngle)\n    {\n        return currentAngle;\n    }\n\n    if (Math.abs(targetAngle - currentAngle) <= lerp || Math.abs(targetAngle - currentAngle) >= (MATH_CONST.PI2 - lerp))\n    {\n        currentAngle = targetAngle;\n    }\n    else\n    {\n        if (Math.abs(targetAngle - currentAngle) > Math.PI)\n        {\n            if (targetAngle < currentAngle)\n            {\n                targetAngle += MATH_CONST.PI2;\n            }\n            else\n            {\n                targetAngle -= MATH_CONST.PI2;\n            }\n        }\n\n        if (targetAngle > currentAngle)\n        {\n            currentAngle += lerp;\n        }\n        else if (targetAngle < currentAngle)\n        {\n            currentAngle -= lerp;\n        }\n    }\n\n    return currentAngle;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Gets the shortest angle between `angle1` and `angle2`.\n *\n * Both angles must be in the range -180 to 180, which is the same clamped\n * range that `sprite.angle` uses, so you can pass in two sprite angles to\n * this method and get the shortest angle back between the two of them.\n *\n * The angle returned will be in the same range. If the returned angle is\n * greater than 0 then it's a counter-clockwise rotation, if < 0 then it's\n * a clockwise rotation.\n *\n * TODO: Wrap the angles in this function?\n *\n * @function Phaser.Math.Angle.ShortestBetween\n * @since 3.0.0\n *\n * @param {number} angle1 - The first angle in the range -180 to 180.\n * @param {number} angle2 - The second angle in the range -180 to 180.\n *\n * @return {number} The shortest angle, in degrees. If greater than zero it's a counter-clockwise rotation.\n */\nexport function ShortestAngleBetween (angle1: number, angle2: number): number\n{\n    const difference = angle2 - angle1;\n\n    if (difference === 0)\n    {\n        return 0;\n    }\n\n    const times = Math.floor((difference - (-180)) / 360);\n\n    return difference - (times * 360);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Wrap the given `value` between `min` and `max.\n *\n * @function Phaser.Math.Wrap\n * @since 3.0.0\n *\n * @param {number} value - The value to wrap.\n * @param {number} min - The minimum value.\n * @param {number} max - The maximum value.\n *\n * @return {number} The wrapped value.\n */\nexport function Wrap (value: number, min: number, max: number): number\n{\n    const range = max - min;\n\n    return (min + ((((value - min) % range) + range) % range));\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { Wrap } from '../Wrap';\n\n/**\n * Wrap an angle.\n *\n * Wraps the angle to a value in the range of -PI to PI.\n *\n * @function Phaser.Math.Angle.Wrap\n * @since 3.0.0\n *\n * @param {number} angle - The angle to wrap, in radians.\n *\n * @return {number} The wrapped angle, in radians.\n */\nexport function WrapAngle (angle: number): number\n{\n    return Wrap(angle, -Math.PI, Math.PI);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { Wrap } from '../Wrap';\n\n/**\n * Wrap an angle in degrees.\n *\n * Wraps the angle to a value in the range of -180 to 180.\n *\n * @function Phaser.Math.Angle.WrapDegrees\n * @since 3.0.0\n *\n * @param {number} angle - The angle to wrap, in degrees.\n *\n * @return {number} The wrapped angle, in degrees.\n */\nexport function WrapAngleDegrees (angle: number): number\n{\n    return Wrap(angle, -180, 180);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { AngleBetween } from './AngleBetween';\nimport { AngleBetweenY } from './AngleBetweenY';\nimport { CounterClockwise } from './CounterClockwise';\nimport { NormalizeAngle } from './NormalizeAngle';\nimport { ReverseAngle } from './ReverseAngle';\nimport { RotateAngleTo } from './RotateAngleTo';\nimport { ShortestAngleBetween } from './ShortestAngleBetween';\nimport { WrapAngle } from './WrapAngle';\nimport { WrapAngleDegrees } from './WrapAngleDegrees';\n\n/**\n * @namespace Phaser.Math.Angle\n */\n\nexport {\n    AngleBetween,\n    AngleBetweenY,\n    CounterClockwise,\n    NormalizeAngle,\n    ReverseAngle,\n    RotateAngleTo,\n    ShortestAngleBetween,\n    WrapAngle,\n    WrapAngleDegrees\n};\n", "import { GameInstance } from '../GameInstance';\nimport { IRenderer } from '../renderer/IRenderer';\nimport { IStaticCamera } from './IStaticCamera';\nimport { IStaticWorld } from '../world/IStaticWorld';\nimport { Mat4Identity } from '../math/mat4';\nimport { Matrix2D } from '../math/mat2d/Matrix2D';\nimport { Matrix4 } from '../math/mat4/Matrix4';\nimport { Rectangle } from '../geom/rectangle/Rectangle';\n\nexport class StaticCamera implements IStaticCamera\n{\n    world: IStaticWorld;\n    matrix: Matrix4;\n    renderer: IRenderer;\n    type: string;\n\n    width: number;\n    height: number;\n    bounds: Rectangle;\n\n    dirtyRender: boolean;\n    worldTransform: Matrix2D;\n\n    constructor ()\n    {\n        this.dirtyRender = true;\n\n        const game = GameInstance.get();\n\n        this.renderer = game.renderer;\n\n        this.matrix = Mat4Identity();\n\n        this.bounds = new Rectangle();\n\n        this.worldTransform = new Matrix2D();\n\n        this.reset();\n    }\n\n    reset (): void\n    {\n        const renderer = this.renderer;\n\n        if (renderer)\n        {\n            const width = renderer.width;\n            const height = renderer.height;\n\n            this.width = width;\n            this.height = height;\n        }\n\n        this.bounds.set(0, 0, this.width, this.height);\n    }\n\n    destroy (): void\n    {\n        this.world = null;\n        this.worldTransform = null;\n        this.renderer = null;\n        this.matrix = null;\n        this.bounds = null;\n    }\n}\n", "import { CreateTempTextures } from './CreateTempTextures';\nimport { GetBatchSize } from '../../../config/batchsize/GetBatchSize';\nimport { IBaseCamera } from '../../../camera/IBaseCamera';\nimport { IRenderPass } from './IRenderPass';\nimport { IShader } from '../shaders/IShader';\nimport { IVertexBuffer } from '../buffers/IVertexBuffer';\nimport { IWebGLRenderer } from '../IWebGLRenderer';\nimport { IndexedVertexBuffer } from '../buffers/IndexedVertexBuffer';\nimport { Mat4Ortho } from '../../../math/mat4/Mat4Ortho';\nimport { Matrix4 } from '../../../math/mat4/Matrix4';\nimport { MultiTextureQuadShader } from '../shaders';\nimport { QuadShader } from '../shaders/QuadShader';\nimport { Rectangle } from '../../../geom/rectangle/Rectangle';\nimport { SetDefaultBlendMode } from './SetDefaultBlendMode';\nimport { SetDefaultFramebuffer } from './SetDefaultFramebuffer';\nimport { SetDefaultShader } from './SetDefaultShader';\nimport { SetDefaultVertexBuffer } from './SetDefaultVertexBuffer';\nimport { SetDefaultViewport } from './SetDefaultViewport';\nimport { StaticCamera } from '../../../camera';\n\nexport type FramebufferStackEntry = {\n    framebuffer: WebGLFramebuffer;\n    viewport?: Rectangle;\n};\n\nexport type ShaderStackEntry = {\n    shader: IShader;\n    textureID?: number;\n};\n\nexport type BlendModeStackEntry = {\n    enable: boolean;\n    sfactor?: number;\n    dfactor?: number;\n};\n\nexport class RenderPass implements IRenderPass\n{\n    renderer: IWebGLRenderer;\n\n    projectionMatrix: Matrix4;\n    cameraMatrix: Matrix4;\n\n    count: number = 0;\n    prevCount: number = 0;\n    flushTotal: number = 0;\n\n    //  The maximum number of combined image units the GPU supports\n    //  According to the WebGL spec the minimum is 8\n    maxTextures: number = 0;\n    currentActiveTexture: number = 0;\n    startActiveTexture: number = 0;\n    tempTextures: WebGLTexture[] = [];\n    textureIndex: number[] = [];\n\n    //  FBO\n    framebufferStack: FramebufferStackEntry[] = [];\n    currentFramebuffer: FramebufferStackEntry = null;\n    defaultFramebuffer: FramebufferStackEntry = null;\n\n    //  VBO\n    vertexBufferStack: IVertexBuffer[] = [];\n    currentVertexBuffer: IVertexBuffer = null;\n    defaultVertexBuffer: IVertexBuffer = null;\n\n    //  Shader\n    shaderStack: ShaderStackEntry[] = [];\n    currentShader: ShaderStackEntry = null;\n    defaultShader: ShaderStackEntry = null;\n\n    //  Viewport\n    viewportStack: Rectangle[] = [];\n    currentViewport: Rectangle = null;\n    defaultViewport: Rectangle = null;\n\n    //  Blend Mode\n    blendModeStack: BlendModeStackEntry[] = [];\n    currentBlendMode: BlendModeStackEntry = null;\n    defaultBlendMode: BlendModeStackEntry = null;\n\n    //  Single Texture Quad Shader + Camera\n    quadShader: IShader;\n    quadBuffer: IVertexBuffer;\n    quadCamera: IBaseCamera;\n\n    //  Current 2D Camera\n    current2DCamera: IBaseCamera;\n\n    constructor (renderer: IWebGLRenderer)\n    {\n        this.renderer = renderer;\n\n        this.projectionMatrix = new Matrix4();\n\n        this.reset();\n    }\n\n    //  TODO - Call when context is lost and restored\n    reset (): void\n    {\n        const gl = this.renderer.gl;\n\n        const indexLayout = [ 0, 1, 2, 2, 3, 0 ];\n\n        //  TODO - If already created, delete shaders / buffers first (i.e. during context loss)\n\n        //  Default QuadShader (for FBO drawing)\n\n        this.quadShader = new QuadShader();\n        this.quadBuffer = new IndexedVertexBuffer({ isDynamic: false, indexLayout });\n        this.quadCamera = new StaticCamera();\n\n        //  Default settings\n\n        CreateTempTextures(this);\n\n        SetDefaultFramebuffer(this);\n        SetDefaultBlendMode(this, true, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n        SetDefaultVertexBuffer(this, new IndexedVertexBuffer({ batchSize: GetBatchSize(), indexLayout }));\n        SetDefaultShader(this, new MultiTextureQuadShader());\n    }\n\n    resize (width: number, height: number): void\n    {\n        //  TODO - -1 to 1?\n        Mat4Ortho(0, width, height, 0, -1000, 1000, this.projectionMatrix);\n\n        this.quadCamera.reset();\n\n        SetDefaultViewport(this, 0, 0, width, height);\n    }\n}\n", "import { IRenderPass } from './IRenderPass';\nimport { ShaderStackEntry } from '../shaders/ShaderStackEntry';\n\nexport function BindShader (renderPass: IRenderPass, entry?: ShaderStackEntry): void\n{\n    let prevShader;\n\n    if (!entry)\n    {\n        entry = renderPass.currentShader;\n    }\n    else\n    {\n        prevShader = renderPass.currentShader.shader;\n    }\n\n    if (!entry.shader.isActive)\n    {\n        const success = entry.shader.bind(renderPass, entry.textureID);\n\n        if (success)\n        {\n            entry.shader.setAttributes(renderPass);\n\n            if (prevShader && prevShader !== entry.shader)\n            {\n                prevShader.isActive = false;\n            }\n        }\n    }\n}\n", "import { BindShader } from './BindShader';\nimport { IBaseCamera } from '../../../camera/IBaseCamera';\nimport { IRenderPass } from './IRenderPass';\n\nexport function Begin (renderPass: IRenderPass, camera2D: IBaseCamera): void\n{\n    renderPass.current2DCamera = camera2D;\n    renderPass.cameraMatrix = camera2D.matrix;\n\n    BindShader(renderPass);\n}\n", "import { BlendModeStackEntry } from './RenderPass';\nimport { IRenderPass } from './IRenderPass';\nimport { gl } from '../GL';\n\nexport function BindBlendMode (renderPass: IRenderPass, entry?: BlendModeStackEntry): void\n{\n    if (!entry)\n    {\n        entry = renderPass.currentBlendMode;\n    }\n\n    if (entry.enable)\n    {\n        if (!gl.isEnabled(gl.BLEND) || (renderPass.currentBlendMode.sfactor !== entry.sfactor || renderPass.currentBlendMode.dfactor !== entry.dfactor))\n        {\n            gl.enable(gl.BLEND);\n            gl.blendFunc(entry.sfactor, entry.dfactor);\n        }\n    }\n    else\n    {\n        gl.disable(gl.BLEND);\n    }\n}\n", "import { IRenderPass } from './IRenderPass';\nimport { IVertexBuffer } from '../buffers/IVertexBuffer';\nimport { gl } from '../GL';\n\nexport function BindVertexBuffer (renderPass: IRenderPass, buffer?: IVertexBuffer): void\n{\n    if (buffer)\n    {\n        buffer.isBound = false;\n    }\n    else\n    {\n        buffer = renderPass.currentVertexBuffer;\n    }\n\n    if (!buffer.isBound)\n    {\n        const indexBuffer = (buffer.indexed) ? buffer.indexBuffer : null;\n\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);\n\n        gl.bindBuffer(gl.ARRAY_BUFFER, buffer.vertexBuffer);\n\n        buffer.isBound = true;\n    }\n}\n", "import { BufferEntry } from '../draw/BufferEntry';\nimport { Flush } from './Flush';\nimport { IRenderPass } from './IRenderPass';\n\nexport function GetVertexBufferEntry (renderPass: IRenderPass, addToCount: number = 0): BufferEntry\n{\n    const buffer = renderPass.currentVertexBuffer;\n\n    //  If batch cannot take the size of this entry, flush it first\n    if (renderPass.count + addToCount >= buffer.batchSize)\n    {\n        Flush(renderPass);\n    }\n\n    const offset = (buffer.indexed) ? renderPass.count * buffer.entryElementSize : renderPass.count * buffer.vertexElementSize;\n\n    renderPass.count += addToCount;\n\n    return {\n        buffer,\n        F32: buffer.vertexViewF32,\n        U32: buffer.vertexViewU32,\n        offset\n    };\n}\n", "import { Flush } from './Flush';\nimport { IRenderPass } from './IRenderPass';\nimport { ITexture } from '../../../textures/ITexture';\nimport { gl } from '../GL';\n\n//  request the next available texture and bind it\n//  returns the new ID\nexport function SetTexture (renderPass: IRenderPass, texture: ITexture): number\n{\n    const binding = texture.binding;\n    const currentActiveTexture = renderPass.currentActiveTexture;\n\n    if (binding.indexCounter < renderPass.startActiveTexture)\n    {\n        binding.indexCounter = renderPass.startActiveTexture;\n\n        if (currentActiveTexture < renderPass.maxTextures)\n        {\n            binding.setIndex(currentActiveTexture);\n\n            gl.activeTexture(gl.TEXTURE0 + currentActiveTexture);\n            gl.bindTexture(gl.TEXTURE_2D, binding.texture);\n\n            renderPass.currentActiveTexture++;\n        }\n        else\n        {\n            //  We're out of textures, so flush the batch and reset back to 1\n            Flush(renderPass);\n\n            renderPass.startActiveTexture++;\n\n            binding.indexCounter = renderPass.startActiveTexture;\n\n            binding.setIndex(1);\n\n            gl.activeTexture(gl.TEXTURE1);\n            gl.bindTexture(gl.TEXTURE_2D, binding.texture);\n\n            renderPass.currentActiveTexture = 2;\n        }\n    }\n\n    return binding.index;\n}\n", "import { BindBlendMode } from './BindBlendMode';\nimport { BindFramebuffer } from './BindFramebuffer';\nimport { BindVertexBuffer } from './BindVertexBuffer';\nimport { BindViewport } from './BindViewport';\nimport { IRenderPass } from './IRenderPass';\n\nexport function Start (renderPass: IRenderPass): void\n{\n    //  Rather than doing Bind object comparisons each bind can store an integer that is checked\n\n    renderPass.current2DCamera = renderPass.quadCamera;\n    renderPass.cameraMatrix = renderPass.quadCamera.matrix;\n\n    renderPass.count = 0;\n    renderPass.flushTotal = 0;\n\n    BindFramebuffer(renderPass, false, renderPass.defaultFramebuffer);\n    BindBlendMode(renderPass, renderPass.defaultBlendMode);\n    BindViewport(renderPass, renderPass.defaultViewport);\n    BindVertexBuffer(renderPass, renderPass.defaultVertexBuffer);\n}\n", "import { WebGLRenderer } from './WebGLRenderer';\n\nexport let instance: WebGLRenderer;\n\nexport const WebGLRendererInstance =\n{\n    get: (): WebGLRenderer =>\n    {\n        return instance;\n    },\n\n    set: (renderer: WebGLRenderer | undefined): void =>\n    {\n        instance = renderer;\n    }\n};\n", "import { IBaseWorld } from './IBaseWorld';\nimport { IScene } from '../scenes/IScene';\n\nexport const WorldList: Map<IScene, IBaseWorld[]> = new Map();\n", "import { GetHeight, GetResolution, GetWidth } from '../../config/size/';\n\nimport { End } from './renderpass/End';\nimport { GL } from './GL';\nimport { GetBackgroundColor } from '../../config/backgroundcolor/GetBackgroundColor';\nimport { GetRGBArray } from './colors/GetRGBArray';\nimport { GetWebGLContext } from '../../config/webglcontext/GetWebGLContext';\nimport { IRenderPass } from './renderpass/IRenderPass';\nimport { IScene } from '../../scenes/IScene';\nimport { ProcessBindingQueue } from './renderpass/ProcessBindingQueue';\nimport { RenderPass } from './renderpass/RenderPass';\nimport { Start } from './renderpass';\nimport { WebGLRendererInstance } from './WebGLRendererInstance';\nimport { WorldList } from '../../world/WorldList';\n\nexport class WebGLRenderer\n{\n    canvas: HTMLCanvasElement;\n    gl: WebGLRenderingContext;\n\n    renderPass: IRenderPass;\n\n    clearColor = [ 0, 0, 0, 1 ];\n\n    width: number;\n    height: number;\n    resolution: number;\n\n    clearBeforeRender: boolean = true;\n    optimizeRedraw: boolean = true;\n    autoResize: boolean = true;\n\n    contextLost: boolean = false;\n\n    constructor ()\n    {\n        this.width = GetWidth();\n        this.height = GetHeight();\n        this.resolution = GetResolution();\n\n        this.setBackgroundColor(GetBackgroundColor());\n\n        const canvas = document.createElement('canvas');\n\n        canvas.addEventListener('webglcontextlost', (event) => this.onContextLost(event), false);\n        canvas.addEventListener('webglcontextrestored', () => this.onContextRestored(), false);\n\n        this.canvas = canvas;\n\n        this.initContext();\n\n        //  By this stage the context is available\n        WebGLRendererInstance.set(this);\n\n        this.renderPass = new RenderPass(this);\n\n        this.resize(this.width, this.height, this.resolution);\n    }\n\n    initContext (): void\n    {\n        const gl = this.canvas.getContext('webgl', GetWebGLContext());\n\n        GL.set(gl);\n\n        this.gl = gl;\n\n        gl.disable(gl.DEPTH_TEST);\n        gl.disable(gl.CULL_FACE);\n    }\n\n    resize (width: number, height: number, resolution: number = 1): void\n    {\n        const calcWidth = width * resolution;\n        const calcHeight = height * resolution;\n\n        this.width = calcWidth;\n        this.height = calcHeight;\n        this.resolution = resolution;\n\n        const canvas = this.canvas;\n\n        canvas.width = calcWidth;\n        canvas.height = calcHeight;\n\n        if (this.autoResize)\n        {\n            canvas.style.width = width.toString() + 'px';\n            canvas.style.height = height.toString() + 'px';\n        }\n\n        this.renderPass.resize(calcWidth, calcHeight);\n    }\n\n    onContextLost (event: Event): void\n    {\n        event.preventDefault();\n\n        this.contextLost = true;\n    }\n\n    onContextRestored (): void\n    {\n        this.contextLost = false;\n\n        this.initContext();\n    }\n\n    setBackgroundColor (color: number): this\n    {\n        GetRGBArray(color, this.clearColor);\n\n        return this;\n    }\n\n    //  TODO - Remove?\n    reset (): void\n    {\n        // this.renderPass.reset();\n    }\n\n    render (willRedraw: boolean, scenes: Map<string, IScene>): void\n    {\n        if (this.contextLost)\n        {\n            return;\n        }\n\n        const gl = this.gl;\n        const renderPass = this.renderPass;\n\n        //  This is only here because if we don't do _something_ with the context,\n        //  GL Spector can't see it!\n        gl.getContextAttributes();\n\n        ProcessBindingQueue();\n\n        //  Nothing dirty? Display the previous frame\n        if (this.optimizeRedraw && !willRedraw)\n        {\n            // return;\n        }\n\n        if (this.clearBeforeRender)\n        {\n            const cls = this.clearColor;\n\n            gl.clearColor(cls[0], cls[1], cls[2], cls[3]);\n            gl.clear(gl.COLOR_BUFFER_BIT);\n        }\n\n        Start(renderPass);\n\n        for (const scene of scenes.values())\n        {\n            const worlds = WorldList.get(scene);\n\n            for (const world of worlds)\n            {\n                if (world.runRender)\n                {\n                    world.renderGL(renderPass);\n\n                    //  Stats sweep\n\n                    world.postRenderGL(renderPass);\n                }\n            }\n        }\n\n        End(renderPass);\n\n        // eslint-disable-next-line no-debugger\n        // debugger;\n    }\n\n    destroy (): void\n    {\n        WebGLRendererInstance.set(undefined);\n    }\n}\n", "import { SetRenderer } from '../renderer/SetRenderer';\nimport { WebGLRenderer } from '../../renderer/webgl1/WebGLRenderer';\n\nexport function WebGL (): () => void\n{\n    return (): void =>\n    {\n        SetRenderer(WebGLRenderer);\n    };\n}\n", "import { CONFIG_DEFAULTS } from '../const';\nimport { ConfigStore } from '../ConfigStore';\n\nexport function SetWebGLContext (contextAttributes: WebGLContextAttributes): void\n{\n    ConfigStore.set(CONFIG_DEFAULTS.WEBGL_CONTEXT, contextAttributes);\n}\n", "import { CONFIG_DEFAULTS } from '../const';\nimport { ConfigStore } from '../ConfigStore';\n\nexport function SetWorldSize (size: number): void\n{\n    ConfigStore.set(CONFIG_DEFAULTS.WORLD_SIZE, size);\n}\n", "import { Types, defineComponent } from 'bitecs';\n\nconst Hierarchy = defineComponent({\n    worldID: Types.ui32,\n    parentID: Types.ui32,\n    numChildren: Types.ui32,\n    depth: Types.ui32\n});\n\nexport const HierarchyComponent = Hierarchy;\n", "import { GameObjectWorld } from '../../GameObjectWorld';\nimport { HierarchyComponent } from './HierarchyComponent';\nimport { addComponent } from 'bitecs';\n\nexport function AddHierarchyComponent (id: number): void\n{\n    addComponent(GameObjectWorld, HierarchyComponent, id);\n}\n", "import { HierarchyComponent } from './HierarchyComponent';\n\nexport function ClearWorldAndParentID (id: number): void\n{\n    HierarchyComponent.worldID[id] = 0;\n    HierarchyComponent.parentID[id] = 0;\n}\n", "import { IGameObject } from './IGameObject';\n\nexport const GameObjectCache: Map<number, IGameObject> = new Map();\n", "export const GameObjectTree: Map<number, number[]> = new Map();\n", "import { GameObjectCache } from '../../gameobjects/GameObjectCache';\nimport { GameObjectTree } from '../../gameobjects/GameObjectTree';\nimport { IGameObject } from '../../gameobjects/IGameObject';\n\nexport function GetChildren (id: number): IGameObject[]\n{\n    const out: IGameObject[] = [];\n\n    GameObjectTree.get(id).forEach(childID =>\n    {\n        out.push(GameObjectCache.get(childID));\n    });\n\n    return out;\n}\n", "import { HierarchyComponent } from './HierarchyComponent';\n\nexport function GetNumChildren (id: number): number\n{\n    return HierarchyComponent.numChildren[id];\n}\n", "import { GameObjectCache } from '../../gameobjects/GameObjectCache';\nimport { HierarchyComponent } from './HierarchyComponent';\nimport { IGameObject } from '../../gameobjects/IGameObject';\n\nexport function GetParentGameObject (id: number): IGameObject\n{\n    return GameObjectCache.get(HierarchyComponent.parentID[id]);\n}\n", "import { HierarchyComponent } from './HierarchyComponent';\n\nexport function GetParentID (id: number): number\n{\n    return HierarchyComponent.parentID[id];\n}\n", "import { HierarchyComponent } from './HierarchyComponent';\n\nexport function GetWorldID (id: number): number\n{\n    return HierarchyComponent.worldID[id];\n}\n", "import { HierarchyComponent } from './HierarchyComponent';\n\nexport function SetParentID (childID: number, parentID: number): void\n{\n    HierarchyComponent.parentID[childID] = parentID;\n}\n", "import { HierarchyComponent } from './HierarchyComponent';\n\nexport function SetWorldAndParentID (id: number, worldID: number, parentID: number): void\n{\n    HierarchyComponent.worldID[id] = worldID;\n    HierarchyComponent.parentID[id] = parentID;\n}\n", "import { HierarchyComponent } from './HierarchyComponent';\n\nexport function SetWorldID (id: number, worldID: number): void\n{\n    HierarchyComponent.worldID[id] = worldID;\n}\n", "import { GameObjectTree } from '../../gameobjects/GameObjectTree';\nimport { HierarchyComponent } from './HierarchyComponent';\n\nexport function UpdateNumChildren (id: number): void\n{\n    HierarchyComponent.numChildren[id] = GameObjectTree.get(id).length;\n}\n", "export const DIRTY_CONST = {\n\n    CLEAR: 0,\n    TRANSFORM: 1,\n    UPDATE: 2,\n    CHILD_CACHE: 4,\n    POST_RENDER: 8,\n    COLORS: 16,\n    BOUNDS: 32,\n    TEXTURE: 64,\n    FRAME: 128,\n    ALPHA: 256,\n    CHILD: 512,\n\n    //  Special combinations\n    DEFAULT: 1 + 2 + 16 + 32,\n\n    //  Reserved for future use:\n    //  1024\n    //  2048\n    //  4096\n    //  8192\n    //  16384\n    //  32768\n    //  65536\n    //  131072\n    //  262144\n    //  524288\n    //  1048576\n    //  2097152\n    //  4194304\n    //  8388608\n    //  16777216\n    //  33554432\n    //  67108864\n    //  134217728\n    //  268435456\n\n    //  Reserved for user use\n    USER1: 536870912,\n    USER2: 1073741824,\n    USER3: 2147483648,\n    USER4: 4294967296\n\n};\n", "import { Matrix2D } from '../../math/mat2d';\nimport { Rectangle } from '../../geom/rectangle';\nimport { Vertices } from './Vertices';\n\nexport function GetVertices (worldTransform: Matrix2D, transformExtent: Rectangle): Vertices\n{\n    const { a, b, c, d, tx, ty } = worldTransform;\n    const { x, y, right, bottom } = transformExtent;\n\n    const x0 = (x * a) + (y * c) + tx;\n    const y0 = (x * b) + (y * d) + ty;\n\n    const x1 = (x * a) + (bottom * c) + tx;\n    const y1 = (x * b) + (bottom * d) + ty;\n\n    const x2 = (right * a) + (bottom * c) + tx;\n    const y2 = (right * b) + (bottom * d) + ty;\n\n    const x3 = (right * a) + (y * c) + tx;\n    const y3 = (right * b) + (y * d) + ty;\n\n    return { x0, y0, x1, y1, x2, y2, x3, y3 };\n}\n", "import { Types, defineComponent } from 'bitecs';\n\nconst Permissions = defineComponent({\n    visible: Types.ui8,\n    visibleChildren: Types.ui8,\n    willUpdate: Types.ui8,\n    willUpdateChildren: Types.ui8,\n    willRender: Types.ui8,\n    willRenderChildren: Types.ui8,\n    willCacheChildren: Types.ui8,\n    willTransformChildren: Types.ui8\n});\n\nexport const PermissionsComponent = Permissions;\n", "import { GameObjectWorld } from '../../GameObjectWorld';\nimport { PermissionsComponent } from './PermissionsComponent';\nimport { addComponent } from 'bitecs';\n\nexport function AddPermissionsComponent (id: number): void\n{\n    addComponent(GameObjectWorld, PermissionsComponent, id);\n\n    PermissionsComponent.visible[id] = 1;\n    PermissionsComponent.visibleChildren[id] = 1;\n    PermissionsComponent.willUpdate[id] = 1;\n    PermissionsComponent.willUpdateChildren[id] = 1;\n    PermissionsComponent.willRender[id] = 1;\n    PermissionsComponent.willRenderChildren[id] = 1;\n    PermissionsComponent.willCacheChildren[id] = 0;\n    PermissionsComponent.willTransformChildren[id] = 1;\n}\n", "import { PermissionsComponent } from './PermissionsComponent';\n\nexport function WillRender (id: number): boolean\n{\n    return Boolean(PermissionsComponent.visible[id]) && Boolean(PermissionsComponent.willRender[id]);\n}\n", "import { PermissionsComponent } from './PermissionsComponent';\n\nexport function WillRenderChildren (id: number): boolean\n{\n    return Boolean(PermissionsComponent.visibleChildren[id]) && Boolean(PermissionsComponent.willRenderChildren[id]);\n}\n", "import { PermissionsComponent } from './PermissionsComponent';\n\nexport function WillUpdate (id: number): boolean\n{\n    return Boolean(PermissionsComponent.willUpdate[id]);\n}\n", "import { PermissionsComponent } from './PermissionsComponent';\n\nexport function WillUpdateChildren (id: number): boolean\n{\n    return Boolean(PermissionsComponent.willUpdateChildren[id]);\n}\n", "import { Types, defineComponent } from 'bitecs';\n\nconst LocalMatrix2D = defineComponent({\n    a: Types.f32,\n    b: Types.f32,\n    c: Types.f32,\n    d: Types.f32,\n    tx: Types.f32,\n    ty: Types.f32\n});\n\nexport const LocalMatrix2DComponent = LocalMatrix2D;\n", "import { Types, defineComponent } from 'bitecs';\n\nconst Transform2D = defineComponent({\n    x: Types.f32,\n    y: Types.f32,\n    rotation: Types.f32,\n    scaleX: Types.f32,\n    scaleY: Types.f32,\n    skewX: Types.f32,\n    skewY: Types.f32,\n    originX: Types.f32,\n    originY: Types.f32\n});\n\nexport const Transform2DComponent = Transform2D;\n", "import { Types, defineComponent } from 'bitecs';\n\nconst WorldMatrix2D = defineComponent({\n    a: Types.f32,\n    b: Types.f32,\n    c: Types.f32,\n    d: Types.f32,\n    tx: Types.f32,\n    ty: Types.f32\n});\n\nexport const WorldMatrix2DComponent = WorldMatrix2D;\n", "import { Extent2DComponent } from './Extent2DComponent';\nimport { GameObjectWorld } from '../../GameObjectWorld';\nimport { LocalMatrix2DComponent } from './LocalMatrix2DComponent';\nimport { Transform2DComponent } from './Transform2DComponent';\nimport { WorldMatrix2DComponent } from './WorldMatrix2DComponent';\nimport { addComponent } from 'bitecs';\n\nexport function AddTransform2DComponent (id: number, x: number = 0, y: number = 0, originX: number = 0, originY: number = 0): void\n{\n    addComponent(GameObjectWorld, Transform2DComponent, id);\n    addComponent(GameObjectWorld, Extent2DComponent, id);\n    addComponent(GameObjectWorld, LocalMatrix2DComponent, id);\n    addComponent(GameObjectWorld, WorldMatrix2DComponent, id);\n\n    //  Component defaults to zero, so we only need to set the other values\n\n    Transform2DComponent.x[id] = x;\n    Transform2DComponent.y[id] = y;\n    Transform2DComponent.scaleX[id] = 1;\n    Transform2DComponent.scaleY[id] = 1;\n    Transform2DComponent.originX[id] = originX;\n    Transform2DComponent.originY[id] = originY;\n\n    LocalMatrix2DComponent.a[id] = 1;\n    LocalMatrix2DComponent.d[id] = 1;\n    LocalMatrix2DComponent.tx[id] = x;\n    LocalMatrix2DComponent.ty[id] = y;\n\n    WorldMatrix2DComponent.a[id] = 1;\n    WorldMatrix2DComponent.d[id] = 1;\n    WorldMatrix2DComponent.tx[id] = x;\n    WorldMatrix2DComponent.ty[id] = y;\n}\n", "export class Vec2\n{\n    x: number;\n    y: number;\n\n    constructor (x: number = 0, y: number = 0)\n    {\n        this.set(x, y);\n    }\n\n    set (x: number = 0, y: number = 0): this\n    {\n        this.x = x;\n        this.y = y;\n\n        return this;\n    }\n\n    toArray (dst: Float32List = [], index: number = 0): Float32List\n    {\n        const { x, y } = this;\n\n        dst[ index ] = x;\n        dst[ index + 1 ] = y;\n\n        return dst;\n    }\n\n    fromArray (src: Float32List, index: number = 0): this\n    {\n        return this.set(\n            src[ index ],\n            src[ index + 1 ]\n        );\n    }\n\n    toString (): string\n    {\n        const { x, y } = this;\n\n        return `{ x=${x}, y=${y} }`;\n    }\n}\n", "import { Vertex } from '../../../components/Vertex';\n\nexport function PackColors (vertices: Vertex[]): void\n{\n    vertices.forEach(vertex =>\n    {\n        vertex.packColor();\n    });\n}\n", "import { GetVertices } from './GetVertices';\nimport { Matrix2D } from '../../math/mat2d/Matrix2D';\nimport { Rectangle } from '../../geom/rectangle/Rectangle';\nimport { Vertex } from '../Vertex';\n\nexport function UpdateVertices (vertices: Vertex[], worldTransform: Matrix2D, transformExtent: Rectangle): void\n{\n    const { x0, y0, x1, y1, x2, y2, x3, y3 } = GetVertices(worldTransform, transformExtent);\n\n    vertices[0].setPosition(x0, y0);\n    vertices[1].setPosition(x1, y1);\n    vertices[2].setPosition(x2, y2);\n    vertices[3].setPosition(x3, y3);\n}\n", "import { DIRTY_CONST } from '../../gameobjects/DIRTY_CONST';\nimport { IGameObject } from '../../gameobjects/IGameObject';\nimport { PackColors } from '../../renderer/webgl1/colors/PackColors';\nimport { UpdateVertices } from './UpdateVertices';\n\nexport function PreRenderVertices <T extends IGameObject> (gameObject: T): T\n{\n    const vertices = gameObject.vertices;\n\n    if (gameObject.isDirty(DIRTY_CONST.COLORS))\n    {\n        PackColors(vertices);\n\n        gameObject.clearDirty(DIRTY_CONST.COLORS);\n    }\n\n    if (gameObject.isDirty(DIRTY_CONST.TRANSFORM))\n    {\n        UpdateVertices(vertices, gameObject.worldTransform, gameObject.transformExtent);\n\n        gameObject.clearDirty(DIRTY_CONST.TRANSFORM);\n    }\n\n    return gameObject;\n}\n", "import { Extent2DComponent } from './Extent2DComponent';\nimport { SetDirtyTransform } from '../dirty';\nimport { Transform2DComponent } from './Transform2DComponent';\n\nexport function UpdateExtent (id: number, width: number, height: number): void\n{\n    const x = -(Transform2DComponent.originX[id]) * width;\n    const y = -(Transform2DComponent.originY[id]) * height;\n\n    Extent2DComponent.x[id] = x;\n    Extent2DComponent.y[id] = y;\n    Extent2DComponent.width[id] = width;\n    Extent2DComponent.height[id] = height;\n    Extent2DComponent.right[id] = x + width;\n    Extent2DComponent.bottom[id] = y + height;\n\n    SetDirtyTransform(id);\n}\n", "import { Changed, IWorld, defineQuery, defineSystem } from 'bitecs';\n\nimport { LocalMatrix2DComponent } from './LocalMatrix2DComponent';\nimport { Transform2DComponent } from './Transform2DComponent';\n\nconst changedLocalTransformQuery = defineQuery([ Changed(Transform2DComponent) ]);\n\nlet entities: number[];\n\nconst updateLocalTransformSystem = defineSystem(world =>\n{\n    for (let i = 0; i < entities.length; i++)\n    {\n        const id = entities[i];\n\n        const x = Transform2DComponent.x[id];\n        const y = Transform2DComponent.y[id];\n        const rotation = Transform2DComponent.rotation[id];\n        const scaleX = Transform2DComponent.scaleX[id];\n        const scaleY = Transform2DComponent.scaleY[id];\n        const skewX = Transform2DComponent.skewX[id];\n        const skewY = Transform2DComponent.skewY[id];\n\n        LocalMatrix2DComponent.a[id] = Math.cos(rotation + skewY) * scaleX;\n        LocalMatrix2DComponent.b[id] = Math.sin(rotation + skewY) * scaleX;\n        LocalMatrix2DComponent.c[id] = -Math.sin(rotation - skewX) * scaleY;\n        LocalMatrix2DComponent.d[id] = Math.cos(rotation - skewX) * scaleY;\n        LocalMatrix2DComponent.tx[id] = x;\n        LocalMatrix2DComponent.ty[id] = y;\n    }\n\n    return world;\n});\n\nexport const UpdateLocalTransform2DSystem = (world: IWorld): number[] =>\n{\n    entities = changedLocalTransformQuery(world);\n\n    updateLocalTransformSystem(world);\n\n    return entities;\n};\n", "import { LocalMatrix2DComponent } from './LocalMatrix2DComponent';\nimport { WorldMatrix2DComponent } from './WorldMatrix2DComponent';\n\nexport function CopyLocalToWorld (source: number, target: number): void\n{\n    WorldMatrix2DComponent.a[target] = LocalMatrix2DComponent.a[source];\n    WorldMatrix2DComponent.b[target] = LocalMatrix2DComponent.b[source];\n    WorldMatrix2DComponent.c[target] = LocalMatrix2DComponent.c[source];\n    WorldMatrix2DComponent.d[target] = LocalMatrix2DComponent.d[source];\n    WorldMatrix2DComponent.tx[target] = LocalMatrix2DComponent.tx[source];\n    WorldMatrix2DComponent.ty[target] = LocalMatrix2DComponent.ty[source];\n}\n", "import { WorldMatrix2DComponent } from './WorldMatrix2DComponent';\n\nexport function CopyWorldToWorld (source: number, target: number): void\n{\n    WorldMatrix2DComponent.a[target] = WorldMatrix2DComponent.a[source];\n    WorldMatrix2DComponent.b[target] = WorldMatrix2DComponent.b[source];\n    WorldMatrix2DComponent.c[target] = WorldMatrix2DComponent.c[source];\n    WorldMatrix2DComponent.d[target] = WorldMatrix2DComponent.d[source];\n    WorldMatrix2DComponent.tx[target] = WorldMatrix2DComponent.tx[source];\n    WorldMatrix2DComponent.ty[target] = WorldMatrix2DComponent.ty[source];\n}\n", "import { LocalMatrix2DComponent } from './LocalMatrix2DComponent';\nimport { WorldMatrix2DComponent } from './WorldMatrix2DComponent';\n\nexport function MultiplyLocalWithWorld (parentID: number, id: number): void\n{\n    const pa = WorldMatrix2DComponent.a[parentID];\n    const pb = WorldMatrix2DComponent.b[parentID];\n    const pc = WorldMatrix2DComponent.c[parentID];\n    const pd = WorldMatrix2DComponent.d[parentID];\n    const ptx = WorldMatrix2DComponent.tx[parentID];\n    const pty = WorldMatrix2DComponent.ty[parentID];\n\n    const a = LocalMatrix2DComponent.a[id];\n    const b = LocalMatrix2DComponent.b[id];\n    const c = LocalMatrix2DComponent.c[id];\n    const d = LocalMatrix2DComponent.d[id];\n    const tx = LocalMatrix2DComponent.tx[id];\n    const ty = LocalMatrix2DComponent.ty[id];\n\n    WorldMatrix2DComponent.a[id] = a * pa + b * pc;\n    WorldMatrix2DComponent.b[id] = a * pb + b * pd;\n    WorldMatrix2DComponent.c[id] = c * pa + d * pc;\n    WorldMatrix2DComponent.d[id] = c * pb + d * pd;\n    WorldMatrix2DComponent.tx[id] = tx * pa + ty * pc + ptx;\n    WorldMatrix2DComponent.ty[id] = tx * pb + ty * pd + pty;\n}\n", "import { Types, defineComponent } from 'bitecs';\n\nconst RenderData = defineComponent({\n    gameFrame: Types.ui32,\n    dirtyFrame: Types.ui32,\n    numRendered: Types.ui32,\n    numRenderable: Types.ui32\n});\n\nexport const RenderDataComponent = RenderData;\n", "import { RenderDataComponent } from './RenderDataComponent';\n\nlet numWorldTransforms: number = 0;\n\nexport function ResetWorldRenderData (id: number, gameFrame: number): void\n{\n    numWorldTransforms = 0;\n\n    RenderDataComponent.gameFrame[id] = gameFrame;\n    RenderDataComponent.dirtyFrame[id] = 0;\n    RenderDataComponent.numRendered[id] = 0;\n    RenderDataComponent.numRenderable[id] = 0;\n}\n\nexport function UpdateNumWorldTransforms (): void\n{\n    numWorldTransforms++;\n}\n\nexport function GetNumWorldTransforms (): number\n{\n    return numWorldTransforms;\n}\n", "import { PermissionsComponent } from './PermissionsComponent';\n\nexport function WillTransformChildren (id: number): boolean\n{\n    return Boolean(PermissionsComponent.willTransformChildren[id]);\n}\n", "import { CopyLocalToWorld } from './CopyLocalToWorld';\nimport { CopyWorldToWorld } from './CopyWorldToWorld';\nimport { GetParentID } from '../hierarchy';\nimport { MultiplyLocalWithWorld } from './MultiplyLocalWithWorld';\nimport { UpdateNumWorldTransforms } from '../../world/ResetWorldRenderData';\nimport { WillTransformChildren } from '../permissions/WillTransformChildren';\n\nexport function UpdateWorldTransform (id: number): void\n{\n    const parentID = GetParentID(id);\n\n    if (parentID === 0)\n    {\n        CopyLocalToWorld(id, id);\n    }\n    else if (!WillTransformChildren(id))\n    {\n        CopyWorldToWorld(parentID, id);\n    }\n    else\n    {\n        MultiplyLocalWithWorld(parentID, id);\n    }\n\n    UpdateNumWorldTransforms();\n}\n", "import { Changed, defineQuery, defineSystem } from 'bitecs';\n\nimport { CopyLocalToWorld } from './CopyLocalToWorld';\nimport { CopyWorldToWorld } from './CopyWorldToWorld';\nimport { GameObjectCache } from '../../gameobjects/GameObjectCache';\nimport { LocalMatrix2DComponent } from './LocalMatrix2DComponent';\nimport { MultiplyLocalWithWorld } from './MultiplyLocalWithWorld';\nimport { WillTransformChildren } from '../permissions/WillTransformChildren';\n\nconst changedWorldTransformQuery = defineQuery([ Changed(LocalMatrix2DComponent) ]);\n\nconst updateWorldTransformSystem = defineSystem(world =>\n{\n    const entities = changedWorldTransformQuery(world);\n\n    for (let i = 0; i < entities.length; i++)\n    {\n        const id = entities[i];\n        const gameObject = GameObjectCache.get(id);\n        const parent = gameObject.parent;\n\n        if (!parent)\n        {\n            CopyLocalToWorld(id, id);\n        }\n        else if (!WillTransformChildren(id))\n        {\n            CopyWorldToWorld(parent.id, id);\n        }\n        else\n        {\n            MultiplyLocalWithWorld(parent.id, id);\n        }\n    }\n});\n\nexport const UpdateWorldTransform2DSystem = updateWorldTransformSystem;\n", "import { createWorld } from 'bitecs';\n\nconst world = createWorld();\n\nexport const VertexWorld = world;\n", "import { addComponent, addEntity } from 'bitecs';\n\nimport { VertexComponent } from './VertexComponent';\nimport { VertexWorld } from './VertexWorld';\n\nexport function AddVertex (): number\n{\n    const vertexID = addEntity(VertexWorld);\n\n    addComponent(VertexWorld, VertexComponent, vertexID);\n\n    VertexComponent.alpha[vertexID] = 1;\n    VertexComponent.tint[vertexID] = 0xffffff;\n    VertexComponent.color[vertexID] = 4294967295;\n\n    return vertexID;\n}\n", "import { Changed, IWorld, defineQuery, defineSystem } from 'bitecs';\n\nimport { Extent2DComponent } from '../transform/Extent2DComponent';\nimport { QuadVertexComponent } from './QuadVertexComponent';\nimport { VertexComponent } from './VertexComponent';\nimport { WorldMatrix2DComponent } from '../transform/WorldMatrix2DComponent';\n\nconst changedWorldExtentQuery = defineQuery([\n    Changed(WorldMatrix2DComponent),\n    Changed(Extent2DComponent)\n]);\n\nlet entities: number[];\n\nconst updateVertexPositionSystem = defineSystem(world =>\n{\n    for (let i = 0; i < entities.length; i++)\n    {\n        const id = entities[i];\n\n        const a = WorldMatrix2DComponent.a[id];\n        const b = WorldMatrix2DComponent.b[id];\n        const c = WorldMatrix2DComponent.c[id];\n        const d = WorldMatrix2DComponent.d[id];\n        const tx = WorldMatrix2DComponent.tx[id];\n        const ty = WorldMatrix2DComponent.ty[id];\n\n        const x = Extent2DComponent.x[id];\n        const y = Extent2DComponent.y[id];\n        const right = Extent2DComponent.right[id];\n        const bottom = Extent2DComponent.bottom[id];\n\n        const v1 = QuadVertexComponent.v1[id];\n        const v2 = QuadVertexComponent.v2[id];\n        const v3 = QuadVertexComponent.v3[id];\n        const v4 = QuadVertexComponent.v4[id];\n\n        VertexComponent.x[v1] = (x * a) + (y * c) + tx;\n        VertexComponent.y[v1] = (x * b) + (y * d) + ty;\n\n        VertexComponent.x[v2] = (x * a) + (bottom * c) + tx;\n        VertexComponent.y[v2] = (x * b) + (bottom * d) + ty;\n\n        VertexComponent.x[v3] = (right * a) + (bottom * c) + tx;\n        VertexComponent.y[v3] = (right * b) + (bottom * d) + ty;\n\n        VertexComponent.x[v4] = (right * a) + (y * c) + tx;\n        VertexComponent.y[v4] = (right * b) + (y * d) + ty;\n    }\n\n    return world;\n});\n\nexport const UpdateVertexPositionSystem = (world: IWorld): number[] =>\n{\n    entities = changedWorldExtentQuery(world);\n\n    updateVertexPositionSystem(world);\n\n    return entities;\n};\n\n", "import { VertexComponent } from '../../../components/vertices/VertexComponent';\n\nexport function AddVertexToBatch (id: number, offset: number, textureIndex: number, F32: WebGLBuffer, U32: WebGLBuffer): number\n{\n    VertexComponent.offset[id] = offset;\n\n    F32[offset + 0] = VertexComponent.x[id];\n    F32[offset + 1] = VertexComponent.y[id];\n    F32[offset + 2] = VertexComponent.u[id];\n    F32[offset + 3] = VertexComponent.v[id];\n    F32[offset + 4] = textureIndex;\n    U32[offset + 5] = VertexComponent.color[id];\n\n    return offset + 6;\n}\n", "import { AddVertexToBatch } from './AddVertexToBatch';\nimport { GetVertexBufferEntry } from '../renderpass/GetVertexBufferEntry';\nimport { IRenderPass } from '../renderpass/IRenderPass';\nimport { ITexture } from '../../../textures/ITexture';\nimport { QuadVertexComponent } from '../../../components/vertices/QuadVertexComponent';\nimport { SetTexture } from '../renderpass/SetTexture';\nimport { Vertex } from '../../../components';\nimport { VertexComponent } from '../../../components/vertices/VertexComponent';\n\nexport function BatchTexturedQuad <T extends ITexture> (texture: T, id: number, renderPass: IRenderPass): void\n{\n    const { F32, U32, offset } = GetVertexBufferEntry(renderPass, 1);\n\n    const textureIndex = SetTexture(renderPass, texture);\n\n    let vertOffset = AddVertexToBatch(QuadVertexComponent.v1[id], offset, textureIndex, F32, U32);\n    vertOffset = AddVertexToBatch(QuadVertexComponent.v2[id], vertOffset, textureIndex, F32, U32);\n    vertOffset = AddVertexToBatch(QuadVertexComponent.v3[id], vertOffset, textureIndex, F32, U32);\n    AddVertexToBatch(QuadVertexComponent.v4[id], vertOffset, textureIndex, F32, U32);\n\n    // vertices.forEach(vertex =>\n    // {\n    //     F32[vertOffset + 0] = vertex.x;\n    //     F32[vertOffset + 1] = vertex.y;\n    //     F32[vertOffset + 2] = vertex.u;\n    //     F32[vertOffset + 3] = vertex.v;\n    //     F32[vertOffset + 4] = textureIndex;\n    //     U32[vertOffset + 5] = vertex.color;\n\n    //     vertOffset += 6;\n    // });\n}\n\n/*\n    vertexData array structure:\n\n    0 = topLeft.x\n    1 = topLeft.y\n    2 = frame.u0\n    3 = frame.v0\n    4 = textureIndex\n    5 = topLeft.packedColor\n\n    6 = bottomLeft.x\n    7 = bottomLeft.y\n    8 = frame.u0\n    9 = frame.v1\n    10 = textureIndex\n    11 = bottomLeft.packedColor\n\n    12 = bottomRight.x\n    13 = bottomRight.y\n    14 = frame.u1\n    15 = frame.v1\n    16 = textureIndex\n    17 = bottomRight.packedColor\n\n    18 = topRight.x\n    19 = topRight.y\n    20 = frame.u1\n    21 = frame.v0\n    22 = textureIndex\n    23 = topRight.packedColor\n*/\n", "import { CONFIG_DEFAULTS } from '../const';\nimport { ConfigStore } from '../ConfigStore';\n\nexport function GetDefaultOriginX (): number\n{\n    return ConfigStore.get(CONFIG_DEFAULTS.DEFAULT_ORIGIN).x;\n}\n", "import { CONFIG_DEFAULTS } from '../const';\nimport { ConfigStore } from '../ConfigStore';\n\nexport function GetDefaultOriginY (): number\n{\n    return ConfigStore.get(CONFIG_DEFAULTS.DEFAULT_ORIGIN).y;\n}\n", "import { IGameObject } from '../gameobjects/IGameObject';\n\nexport function RemoveChildrenBetween (parent: IGameObject, beginIndex: number = 0, endIndex?: number): IGameObject[]\n{\n    const children = parent.children;\n\n    if (endIndex === undefined)\n    {\n        endIndex = children.length;\n    }\n\n    const range = endIndex - beginIndex;\n\n    if (range > 0 && range <= endIndex)\n    {\n        const removed = children.splice(beginIndex, range);\n\n        removed.forEach(child =>\n        {\n            child.parent = null;\n        });\n\n        return removed;\n    }\n    else\n    {\n        return [];\n    }\n}\n", "import { IGameObject } from '../gameobjects/IGameObject';\nimport { RemoveChildrenBetween } from './RemoveChildrenBetween';\n\nexport function DestroyChildren (parent: IGameObject, beginIndex: number = 0, endIndex?: number): void\n{\n    const removed = RemoveChildrenBetween(parent, beginIndex, endIndex);\n\n    removed.forEach(child =>\n    {\n        child.destroy();\n    });\n}\n", "import { IGameObject } from '../IGameObject';\n\nexport const DestroyEvent: string = 'destroy';\n\nexport type DestroyEventHandler = <T extends IGameObject> (child: T) => void;\n", "import { IEventEmitter } from './IEventEmitter';\nimport { IEventInstance } from './IEventInstance';\n\nexport function Emit (emitter: IEventEmitter, event: string, ...args: unknown[]): boolean\n{\n    if (emitter.events.size === 0 || !emitter.events.has(event))\n    {\n        return false;\n    }\n\n    const listeners: Set<IEventInstance> = emitter.events.get(event);\n\n    //  Convert to an array so the callbacks cannot impact what we're iterating\n    //  It works, but generates gc\n    const handlers = [ ...listeners ];\n\n    for (const ee of handlers)\n    {\n        ee.callback.apply(ee.context, args);\n\n        if (ee.once)\n        {\n            listeners.delete(ee);\n        }\n    }\n\n    if (listeners.size === 0)\n    {\n        emitter.events.delete(event);\n    }\n\n    return true;\n}\n", "import { IGameObject } from '../gameobjects/IGameObject';\n\n//  Returns all children of the parent, no matter what depth they go to, using an iterative search.\n//  Does NOT include the parent in the results.\n\nexport function DepthFirstSearch (parent: IGameObject): IGameObject[]\n{\n    const stack: IGameObject[] = [ parent ];\n    const output: IGameObject[] = [];\n\n    while (stack.length > 0)\n    {\n        const node = stack.shift();\n\n        output.push(node);\n\n        const numChildren = node.numChildren;\n\n        if (numChildren > 0)\n        {\n            for (let i = numChildren - 1; i >= 0; i--)\n            {\n                stack.unshift(node.children[i]);\n            }\n        }\n    }\n\n    //  Remove the parent from the results\n    output.shift();\n\n    return output;\n}\n", "import { GameObjectTree } from '../gameobjects/GameObjectTree';\nimport { IGameObject } from '../gameobjects/IGameObject';\n\nexport function GetChildIndex (parent: IGameObject, child: IGameObject): number\n{\n    return GameObjectTree.get(parent.id).indexOf(child.id);\n}\n", "import { ClearWorldAndParentID, GetWorldID, UpdateNumChildren } from '../components/hierarchy';\n\nimport { GameObjectCache } from '../gameobjects/GameObjectCache';\nimport { GameObjectTree } from '../gameobjects/GameObjectTree';\nimport { IGameObject } from '../gameobjects/IGameObject';\nimport { SetDirtyDisplayList } from '../components/dirty/SetDirtyDisplayList';\n\nexport function RemoveChildAt <T extends IGameObject> (parent: T, index: number): IGameObject | undefined\n{\n    const children = GameObjectTree.get(parent.id);\n\n    if (index >= 0 && index < children.length)\n    {\n        const removedID = children.splice(index, 1)[0];\n\n        if (removedID)\n        {\n            const worldID = GetWorldID(removedID);\n\n            SetDirtyDisplayList(worldID);\n\n            ClearWorldAndParentID(removedID);\n\n            //  Emit remove event?\n\n            UpdateNumChildren(parent.id);\n\n            return GameObjectCache.get(removedID);\n        }\n    }\n}\n", "import { GetChildIndex } from './GetChildIndex';\nimport { IGameObject } from '../gameobjects/IGameObject';\nimport { RemoveChildAt } from './RemoveChildAt';\n\nexport function RemoveChild <P extends IGameObject, C extends IGameObject> (parent: P, child: C): C\n{\n    if (child.hasParent())\n    {\n        RemoveChildAt(parent, GetChildIndex(parent, child));\n    }\n\n    return child;\n}\n", "import { AddedToWorldEvent, RemovedFromWorldEvent } from '../gameobjects/events';\n\nimport { Emit } from '../events/Emit';\nimport { GameObjectWorld } from '../GameObjectWorld';\nimport { IBaseWorld } from '../world/IBaseWorld';\nimport { IGameObject } from '../gameobjects/IGameObject';\nimport { addComponent } from 'bitecs';\n\nexport function SetWorld <W extends IBaseWorld, C extends IGameObject> (world: W, ...children: C[]): C[]\n{\n    children.forEach(child =>\n    {\n        // if (child.world)\n        // {\n        //     Emit(child.world, RemovedFromWorldEvent, child, child.world);\n        //     Emit(child, RemovedFromWorldEvent, child, child.world);\n        // }\n\n        addComponent(GameObjectWorld, world.tag, child.id);\n\n        // child.world = world;\n\n        // Emit(world, AddedToWorldEvent, child, world);\n        // Emit(child, AddedToWorldEvent, child, world);\n    });\n\n    return children;\n}\n", "import { DepthFirstSearch } from './DepthFirstSearch';\nimport { IGameObject } from '../gameobjects/IGameObject';\nimport { RemoveChild } from './RemoveChild';\nimport { SetWorld } from './SetWorld';\n\nexport function SetParent (parent: IGameObject, ...children: IGameObject[]): IGameObject[]\n{\n    children.forEach(child =>\n    {\n        if (child.parent)\n        {\n            RemoveChild(child.parent, child);\n        }\n\n        child.parent = parent;\n    });\n\n    const parentWorld = parent.world;\n\n    if (parentWorld)\n    {\n        //  Full list of all children, including sub-children\n        SetWorld(parentWorld, ...DepthFirstSearch(parent));\n    }\n\n    return children;\n}\n", "import { IGameObject } from '../gameobjects/IGameObject';\nimport { RemoveChildrenBetween } from './RemoveChildrenBetween';\nimport { SetParent } from './SetParent';\n\nexport function ReparentChildren (parent: IGameObject, newParent: IGameObject, beginIndex: number = 0, endIndex?: number): IGameObject[]\n{\n    const moved = RemoveChildrenBetween(parent, beginIndex, endIndex);\n\n    SetParent(newParent, ...moved);\n\n    moved.forEach(child =>\n    {\n        child.updateWorldTransform();\n    });\n\n    return moved;\n}\n", "import { AddHierarchyComponent, GetChildren, GetNumChildren, GetParentGameObject, HierarchyComponent } from '../components/hierarchy';\nimport { AddPermissionsComponent, PermissionsComponent, WillRender, WillUpdate, WillUpdateChildren } from '../components/permissions';\n\nimport { AddDirtyComponent } from '../components/dirty/AddDirtyComponent';\nimport { DestroyChildren } from '../display/DestroyChildren';\nimport { DestroyEvent } from './events/DestroyEvent';\nimport { Emit } from '../events/Emit';\nimport { GameObjectCache } from './GameObjectCache';\nimport { GameObjectTree } from './GameObjectTree';\nimport { GameObjectWorld } from '../GameObjectWorld';\nimport { ICanvasRenderer } from '../renderer/canvas/ICanvasRenderer';\nimport { IEventInstance } from '../events/IEventInstance';\nimport { IGameObject } from './IGameObject';\nimport { IRenderPass } from '../renderer/webgl1/renderpass/IRenderPass';\nimport { ReparentChildren } from '../display/ReparentChildren';\nimport { addEntity } from 'bitecs';\n\nexport class GameObject implements IGameObject\n{\n    readonly id: number = addEntity(GameObjectWorld);\n\n    //  User defined name. Never used internally.\n    name: string = '';\n\n    events: Map<string, Set<IEventInstance>>;\n\n    constructor ()\n    {\n        const id = this.id;\n\n        AddHierarchyComponent(id);\n        AddPermissionsComponent(id);\n        AddDirtyComponent(id);\n\n        GameObjectCache.set(id, this);\n        GameObjectTree.set(id, []);\n\n        this.events = new Map();\n    }\n\n    isRenderable (): boolean\n    {\n        return WillRender(this.id);\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    beforeUpdate (delta: number, time: number): void\n    {\n        //  Empty for parent classes to use.\n        //  Called before this GameObject and all of its children have been updated.\n    }\n\n    update (delta: number, time: number): void\n    {\n        this.beforeUpdate(delta, time);\n\n        if (WillUpdateChildren(this.id))\n        {\n            const children = GameObjectTree.get(this.id);\n\n            for (let i = 0; i < children.length; i++)\n            {\n                const childID = children[i];\n\n                if (WillUpdate(childID))\n                {\n                    GameObjectCache.get(childID).update(delta, time);\n                }\n            }\n        }\n\n        this.afterUpdate(delta, time);\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    afterUpdate (delta: number, time: number): void\n    {\n        //  Empty for parent classes to use.\n        //  Called after this GameObject and all of its children have been updated.\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    renderGL <T extends IRenderPass> (renderPass: T): void\n    {\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    renderCanvas <T extends ICanvasRenderer> (renderer: T): void\n    {\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    postRenderGL <T extends IRenderPass> (renderPass: T): void\n    {\n        //  Called after this GameObject and all of its children have been rendered.\n        //  If it doesn't have any children, this method is never called.\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    postRenderCanvas <T extends ICanvasRenderer> (renderer: T): void\n    {\n        //  Called after this GameObject and all of its children have been rendered.\n        //  If it doesn't have any children, this method is never called.\n    }\n\n    set visible (value: boolean)\n    {\n        PermissionsComponent.visible[this.id] = Number(value);\n    }\n\n    get visible (): boolean\n    {\n        return Boolean(PermissionsComponent.visible[this.id]);\n    }\n\n    set visibleChildren (value: boolean)\n    {\n        PermissionsComponent.visibleChildren[this.id] = Number(value);\n    }\n\n    get visibleChildren (): boolean\n    {\n        return Boolean(PermissionsComponent.visibleChildren[this.id]);\n    }\n\n    set depth (value: number)\n    {\n        HierarchyComponent.depth[this.id] = value;\n    }\n\n    get depth (): number\n    {\n        return HierarchyComponent.depth[this.id];\n    }\n\n    hasParent (): boolean\n    {\n        return (HierarchyComponent.parentID[this.id] > 0);\n    }\n\n    getParent (): IGameObject | undefined\n    {\n        return GetParentGameObject(this.id);\n    }\n\n    getChildren (): IGameObject[]\n    {\n        return GetChildren(this.id);\n    }\n\n    getNumChildren (): number\n    {\n        return GetNumChildren(this.id);\n    }\n\n    destroy <P extends IGameObject> (reparentChildren?: P): void\n    {\n        if (reparentChildren)\n        {\n            ReparentChildren(this, reparentChildren);\n        }\n        else\n        {\n            DestroyChildren(this);\n        }\n\n        Emit(this, DestroyEvent, this);\n\n        this.events.clear();\n\n        this.events = null;\n\n        //  TODO - Destroy process, remove from Cache, Tree, etc.\n    }\n}\n", "import { AddTransform2DComponent, Extent2DComponent, Transform2DComponent, UpdateExtent } from '../../components/transform/';\nimport { GetDefaultOriginX, GetDefaultOriginY } from '../../config/defaultorigin';\n\nimport { GameObject } from '../GameObject';\nimport { IContainer } from './IContainer';\nimport { IGameObject } from '../IGameObject';\nimport { Rectangle } from '../../geom/rectangle/Rectangle';\nimport { SetDirtyAlpha } from '../../components/dirty/';\nimport { Vec2 } from '../../math/vec2/Vec2';\n\nexport class Container extends GameObject implements IContainer\n{\n    protected _alpha: number = 1;\n\n    constructor (x: number = 0, y: number = 0)\n    {\n        super();\n\n        AddTransform2DComponent(this.id, x, y, GetDefaultOriginX(), GetDefaultOriginY());\n    }\n\n    /*\n    updateTransform (flag: number, value: number): void\n    {\n        if (this.transformData[flag] !== value)\n        {\n            this.transformData[flag] = value;\n\n            this.updateLocalTransform();\n            this.updateWorldTransform();\n        }\n    }\n\n    updateLocalTransform (): void\n    {\n        this.setDirty(DIRTY_CONST.TRANSFORM, DIRTY_CONST.BOUNDS);\n\n        UpdateLocalTransform(this.localTransform, this.transformData);\n    }\n\n    updateTransform (): void\n    {\n        this.setDirty(DIRTY_CONST.TRANSFORM, DIRTY_CONST.BOUNDS);\n\n        //  To take advantage of Changed batching we didn't ought to do this here, but on render\n        UpdateTransform2DSystem(GameObjectWorld);\n\n        const id = this.id;\n\n        this.localTransform.set(\n            Matrix2DComponent.a[id],\n            Matrix2DComponent.b[id],\n            Matrix2DComponent.c[id],\n            Matrix2DComponent.d[id],\n            Matrix2DComponent.tx[id],\n            Matrix2DComponent.ty[id]\n            );\n\n            this.updateWorldTransform();\n        }\n    */\n\n    updateWorldTransform (): void\n    {\n        /*\n        this.setDirty(DIRTY_CONST.TRANSFORM, DIRTY_CONST.BOUNDS);\n\n        const parentWorldTransform = (this.parent) ? this.parent.worldTransform : undefined;\n\n        UpdateWorldTransform(this.localTransform, this.worldTransform, this.passthru, parentWorldTransform);\n\n        if (this.numChildren)\n        {\n            //  Sweep all children - by this point our local and world transforms are correct\n            const children = this.children;\n\n            for (let i = 0; i < children.length; i++)\n            {\n                const child = children[i];\n\n                child.updateWorldTransform();\n            }\n        }\n        */\n    }\n\n    getBounds (): Rectangle\n    {\n        return this.bounds.get();\n    }\n\n    setSize (width: number, height: number = width): this\n    {\n        UpdateExtent(this.id, width, height);\n\n        return this;\n    }\n\n    setPosition (x: number, y: number): this\n    {\n        this.x = x;\n        this.y = y;\n\n        return this;\n    }\n\n    setSkew (x: number, y: number = x): this\n    {\n        this.skewX = x;\n        this.skewY = y;\n\n        return this;\n    }\n\n    setScale (x: number, y: number = x): this\n    {\n        this.scaleX = x;\n        this.scaleY = y;\n\n        return this;\n    }\n\n    setRotation (value: number): this\n    {\n        this.rotation = value;\n\n        return this;\n    }\n\n    setOrigin (x: number, y: number = x): this\n    {\n        const id = this.id;\n\n        Transform2DComponent.originX[id] = x;\n        Transform2DComponent.originY[id] = y;\n\n        UpdateExtent(id, this.width, this.height);\n\n        return this;\n    }\n\n    getSize (out: Vec2 = new Vec2()): Vec2\n    {\n        return out.set(Extent2DComponent.width[this.id], Extent2DComponent.height[this.id]);\n    }\n\n    getPosition (out: Vec2 = new Vec2()): Vec2\n    {\n        return out.set(this.x, this.y);\n    }\n\n    getOrigin (out: Vec2 = new Vec2()): Vec2\n    {\n        return out.set(this.originX, this.originY);\n    }\n\n    getSkew (out: Vec2 = new Vec2()): Vec2\n    {\n        return out.set(this.skewX, this.skewY);\n    }\n\n    getScale (out: Vec2 = new Vec2()): Vec2\n    {\n        return out.set(this.scaleX, this.scaleY);\n    }\n\n    getRotation (): number\n    {\n        return this.rotation;\n    }\n\n    set width (value: number)\n    {\n        UpdateExtent(this.id, value, this.height);\n    }\n\n    get width (): number\n    {\n        return Extent2DComponent.width[this.id];\n    }\n\n    set height (value: number)\n    {\n        UpdateExtent(this.id, this.width, value);\n    }\n\n    get height (): number\n    {\n        return Extent2DComponent.height[this.id];\n    }\n\n    set x (value: number)\n    {\n        Transform2DComponent.x[this.id] = value;\n    }\n\n    get x (): number\n    {\n        return Transform2DComponent.x[this.id];\n    }\n\n    set y (value: number)\n    {\n        Transform2DComponent.y[this.id] = value;\n    }\n\n    get y (): number\n    {\n        return Transform2DComponent.y[this.id];\n    }\n\n    set originX (value: number)\n    {\n        Transform2DComponent.originX[this.id] = value;\n\n        UpdateExtent(this.id, this.width, this.height);\n    }\n\n    get originX (): number\n    {\n        return Transform2DComponent.originX[this.id];\n    }\n\n    set originY (value: number)\n    {\n        Transform2DComponent.originY[this.id] = value;\n\n        UpdateExtent(this.id, this.width, this.height);\n    }\n\n    get originY (): number\n    {\n        return Transform2DComponent.originY[this.id];\n    }\n\n    set skewX (value: number)\n    {\n        Transform2DComponent.skewX[this.id] = value;\n    }\n\n    get skewX (): number\n    {\n        return Transform2DComponent.skewX[this.id];\n    }\n\n    set skewY (value: number)\n    {\n        Transform2DComponent.skewY[this.id] = value;\n    }\n\n    get skewY (): number\n    {\n        return Transform2DComponent.skewY[this.id];\n    }\n\n    set scaleX (value: number)\n    {\n        Transform2DComponent.scaleX[this.id] = value;\n    }\n\n    get scaleX (): number\n    {\n        return Transform2DComponent.scaleX[this.id];\n    }\n\n    set scaleY (value: number)\n    {\n        Transform2DComponent.scaleY[this.id] = value;\n    }\n\n    get scaleY (): number\n    {\n        return Transform2DComponent.scaleY[this.id];\n    }\n\n    set rotation (value: number)\n    {\n        Transform2DComponent.rotation[this.id] = value;\n    }\n\n    get rotation (): number\n    {\n        return Transform2DComponent.rotation[this.id];\n    }\n\n    get alpha (): number\n    {\n        return this._alpha;\n    }\n\n    set alpha (value: number)\n    {\n        this._alpha = value;\n\n        SetDirtyAlpha(this.id);\n\n        /*\n        if (value !== this._alpha)\n        {\n            this._alpha = value;\n\n            this.vertices.forEach(vertex =>\n            {\n                vertex.setAlpha(value);\n            });\n\n            this.setDirty(DIRTY_CONST.COLORS);\n        }\n        */\n    }\n\n    destroy (reparentChildren?: IGameObject): void\n    {\n        super.destroy(reparentChildren);\n\n        //  TODO - Clear components\n\n        // this.bounds.destroy();\n        // this.input.destroy();\n    }\n}\n", "import { Frame } from '../../../textures';\nimport { ICanvasRenderer } from '../ICanvasRenderer';\nimport { Matrix2D } from '../../../math/mat2d';\nimport { Rectangle } from '../../../geom/rectangle';\n\nexport function DrawImage (frame: Frame, alpha: number, worldTransform: Matrix2D, transformExtent: Rectangle, renderer: ICanvasRenderer): void\n{\n    if (!frame)\n    {\n        return;\n    }\n\n    const ctx = renderer.ctx;\n\n    const { a, b, c, d, tx, ty } = worldTransform;\n    const { x, y } = transformExtent;\n\n    ctx.save();\n\n    ctx.setTransform(a, b, c, d, tx, ty);\n\n    ctx.globalAlpha = alpha;\n\n    ctx.drawImage(frame.texture.image as HTMLImageElement, frame.x, frame.y, frame.width, frame.height, x, y, frame.width, frame.height);\n\n    ctx.restore();\n}\n", "import { Frame } from '../../textures/Frame';\nimport { ISprite } from './ISprite';\nimport { Texture } from '../../textures';\n\nexport function SetFrame <T extends ISprite> (texture: Texture, key?: string | number | Frame, ...children: T[]): T[]\n{\n    const frame = texture.getFrame(key);\n\n    const pivot = frame.pivot;\n\n    children.forEach(child =>\n    {\n        //  TODO - If frame is dirty, reset it anyway\n        if (!child || frame === child.frame)\n        {\n            return;\n        }\n\n        child.frame = frame;\n        child.hasTexture = true;\n\n        if (pivot)\n        {\n            child.setOrigin(pivot.x, pivot.y);\n        }\n\n        frame.copyToExtent(child);\n\n        //  This rarely changes, so we'll set it here, rather than every game step:\n        frame.copyToVertices(child.id);\n    });\n\n    return children;\n}\n", "import { TextureManager } from './TextureManager';\n\nlet instance: TextureManager;\n\nexport const TextureManagerInstance =\n{\n    get: (): TextureManager =>\n    {\n        return instance;\n    },\n\n    set: (manager: TextureManager | null): void =>\n    {\n        instance = manager;\n    }\n};\n", "import { Texture } from './Texture';\nimport { TextureManagerInstance } from './TextureManagerInstance';\n\nexport function GetTexture (key: string): Texture\n{\n    return TextureManagerInstance.get().get(key);\n}\n", "import { Frame } from '../../textures/Frame';\nimport { GetTexture } from '../../textures/GetTexture';\nimport { IFrame } from '../../textures/IFrame';\nimport { ISprite } from './ISprite';\nimport { ITexture } from '../../textures/ITexture';\nimport { SetFrame } from './SetFrame';\nimport { Texture } from '../../textures/Texture';\n\nexport function SetTexture <T extends ISprite> (key: string | ITexture | IFrame, frame: string | number | IFrame, ...children: T[]): T[]\n{\n    if (!key)\n    {\n        //  Remove texture from all children\n        children.forEach(child =>\n        {\n            child.texture = null;\n            child.frame = null;\n            child.hasTexture = false;\n        });\n    }\n    else\n    {\n        let texture: Texture;\n\n        if (key instanceof Frame)\n        {\n            frame = key;\n            texture = key.texture;\n        }\n        else if (key instanceof Texture)\n        {\n            texture = key;\n        }\n        else\n        {\n            texture = GetTexture(key as string);\n        }\n\n        if (!texture)\n        {\n            console.warn(`Invalid Texture key: ${key as string}`);\n        }\n        else\n        {\n            children.forEach(child =>\n            {\n                child.texture = texture;\n            });\n\n            SetFrame(texture, frame, ...children);\n        }\n    }\n\n    return children;\n}\n", "import { AddVertex } from '../../components/vertices/AddVertex';\nimport { BatchTexturedQuad } from '../../renderer/webgl1/draw/BatchTexturedQuad';\nimport { Container } from '../container/Container';\nimport { DrawImage } from '../../renderer/canvas/draw/DrawImage';\nimport { Frame } from '../../textures/Frame';\nimport { GameObjectWorld } from '../../GameObjectWorld';\nimport { GetQuadVertices } from '../../components/transform/GetQuadVertices';\nimport { ICanvasRenderer } from '../../renderer/canvas/ICanvasRenderer';\nimport { IFrame } from '../../textures/IFrame';\nimport { IGameObject } from '../IGameObject';\nimport { IRenderPass } from '../../renderer/webgl1/renderpass/IRenderPass';\nimport { ISprite } from './ISprite';\nimport { ITexture } from '../../textures/ITexture';\nimport { PackColors } from '../../renderer/webgl1/colors/PackColors';\nimport { PreRenderVertices } from '../../components/transform/PreRenderVertices';\nimport { QuadVertexComponent } from '../../components/vertices/QuadVertexComponent';\nimport { SetDirtyVertexColors } from '../../components/dirty';\nimport { SetFrame } from './SetFrame';\nimport { SetTexture } from './SetTexture';\nimport { Texture } from '../../textures/Texture';\nimport { WillRender } from '../../components/permissions';\nimport { addComponent } from 'bitecs';\n\nexport class Sprite extends Container implements ISprite\n{\n    texture: Texture;\n    frame: Frame;\n    hasTexture: boolean = false;\n\n    protected _tint: number = 0xffffff;\n\n    constructor (x: number, y: number, texture: string | Texture | Frame, frame?: string | number | Frame)\n    {\n        super(x, y);\n\n        const id = this.id;\n\n        addComponent(GameObjectWorld, QuadVertexComponent, id);\n\n        QuadVertexComponent.v1[id] = AddVertex();\n        QuadVertexComponent.v2[id] = AddVertex();\n        QuadVertexComponent.v3[id] = AddVertex();\n        QuadVertexComponent.v4[id] = AddVertex();\n\n        this.setTexture(texture, frame);\n    }\n\n    setTexture (key: string | ITexture | IFrame, frame?: string | number | IFrame): this\n    {\n        SetTexture(key, frame, this);\n\n        return this;\n    }\n\n    setFrame (key?: string | number | IFrame): this\n    {\n        SetFrame(this.texture, key, this);\n\n        return this;\n    }\n\n    isRenderable (): boolean\n    {\n        return (this.visible && this.hasTexture && WillRender(this.id) && this.alpha > 0);\n    }\n\n    renderGL <T extends IRenderPass> (renderPass: T): void\n    {\n        //  In World we need to run a system to pack all colors and\n        //  another to update all UVs that have changed\n\n        //  Also, move tint and alpha to component, so we can monitor them changing\n\n        // PreRenderVertices(this);\n        // PackColors(vertices);\n\n        // GetQuadVertices(this.id);\n\n        BatchTexturedQuad(this.texture, this.id, renderPass);\n    }\n\n    renderCanvas <T extends ICanvasRenderer> (renderer: T): void\n    {\n        PreRenderVertices(this);\n\n        DrawImage(this.frame, this.alpha, this.worldTransform, this.transformExtent, renderer);\n    }\n\n    get tint (): number\n    {\n        return this._tint;\n    }\n\n    set tint (value: number)\n    {\n        if (value !== this._tint)\n        {\n            this._tint = value;\n\n            // this.vertices.forEach(vertex =>\n            // {\n            //     vertex.setTint(value);\n            // });\n\n            SetDirtyVertexColors(this.id);\n        }\n    }\n\n    destroy (reparentChildren?: IGameObject): void\n    {\n        super.destroy(reparentChildren);\n\n        // this.vertices.length = 0;\n        this.texture = null;\n        this.frame = null;\n        this.hasTexture = false;\n    }\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Force a value within the boundaries by clamping it to the range `min`, `max`.\n *\n * @function Phaser.Math.Clamp\n * @since 3.0.0\n *\n * @param {number} value - The value to be clamped.\n * @param {number} min - The minimum bounds.\n * @param {number} max - The maximum bounds.\n *\n * @return {number} The clamped value.\n */\nexport function Clamp (value: number, min: number, max: number): number\n{\n    return Math.max(min, Math.min(max, value));\n}\n", "export function CreateCanvas (width: number, height: number): CanvasRenderingContext2D\n{\n    const canvas = document.createElement('canvas');\n\n    canvas.width = width;\n    canvas.height = height;\n\n    return canvas.getContext('2d');\n}\n", "import { GetParentID } from '../components/hierarchy/GetParentID';\nimport { IGameObject } from '../gameobjects/IGameObject';\n\nexport function IsValidParent <P extends IGameObject, C extends IGameObject> (parent: P, child: C): boolean\n{\n    //  It's not a valid parent if the ID matches the parent, or it's already the child's parent\n    return !(child.id === parent.id || parent.id === GetParentID(child.id));\n}\n", "import { GetWorldID, SetParentID, SetWorldAndParentID, UpdateNumChildren } from '../components/hierarchy';\n\nimport { GameObjectCache } from '../gameobjects';\nimport { GameObjectTree } from '../gameobjects/GameObjectTree';\nimport { IBaseWorld } from '../world/IBaseWorld';\nimport { IGameObject } from '../gameobjects/IGameObject';\nimport { IsValidParent } from './IsValidParent';\nimport { RemoveChild } from './RemoveChild';\nimport { SetDirtyDisplayList } from '../components/dirty';\nimport { SetWorld } from './SetWorld';\n\nexport function AddChild <P extends IGameObject, C extends IGameObject> (parent: P, child: C): C\n{\n    const childID = child.id;\n    const parentID = parent.id;\n    const worldID = GetWorldID(parentID);\n    const world = GameObjectCache.get(worldID) as IBaseWorld;\n\n    if (IsValidParent(parent, child))\n    {\n        RemoveChild(child.getParent(), child);\n\n        GameObjectTree.get(parentID).push(childID);\n\n        SetWorldAndParentID(childID, worldID, parentID);\n\n        SetParentID(childID, parentID);\n\n        SetWorld(world, child);\n\n        SetDirtyDisplayList(worldID);\n\n        //  Emit add event?\n\n        UpdateNumChildren(parentID);\n    }\n\n    return child;\n}\n", "import { IGameObject } from '../gameobjects/IGameObject';\nimport { RemoveChild } from './RemoveChild';\n\nexport function RemoveChildren (parent: IGameObject, ...children: IGameObject[]): IGameObject[]\n{\n    children.forEach(child =>\n    {\n        RemoveChild(parent, child);\n    });\n\n    return children;\n}\n", "export function In (v: number, overshoot: number = 1.70158): number\n{\n    return v * v * ((overshoot + 1) * v - overshoot);\n}\n", "export function InOut (v: number, overshoot: number = 1.70158): number\n{\n    const s = overshoot * 1.525;\n\n    if ((v *= 2) < 1)\n    {\n        return 0.5 * (v * v * ((s + 1) * v - s));\n    }\n    else\n    {\n        return 0.5 * ((v -= 2) * v * ((s + 1) * v + s) + 2);\n    }\n}\n", "export function Out (v: number, overshoot: number = 1.70158): number\n{\n    return --v * v * ((overshoot + 1) * v + overshoot) + 1;\n}\n", "export function In (v: number): number\n{\n    v = 1 - v;\n\n    if (v < 1 / 2.75)\n    {\n        return 1 - (7.5625 * v * v);\n    }\n    else if (v < 2 / 2.75)\n    {\n        return 1 - (7.5625 * (v -= 1.5 / 2.75) * v + 0.75);\n    }\n    else if (v < 2.5 / 2.75)\n    {\n        return 1 - (7.5625 * (v -= 2.25 / 2.75) * v + 0.9375);\n    }\n    else\n    {\n        return 1 - (7.5625 * (v -= 2.625 / 2.75) * v + 0.984375);\n    }\n}\n", "export function InOut (v: number): number\n{\n    let reverse = false;\n\n    if (v < 0.5)\n    {\n        v = 1 - (v * 2);\n        reverse = true;\n    }\n    else\n    {\n        v = (v * 2) - 1;\n    }\n\n    if (v < 1 / 2.75)\n    {\n        v = 7.5625 * v * v;\n    }\n    else if (v < 2 / 2.75)\n    {\n        v = 7.5625 * (v -= 1.5 / 2.75) * v + 0.75;\n    }\n    else if (v < 2.5 / 2.75)\n    {\n        v = 7.5625 * (v -= 2.25 / 2.75) * v + 0.9375;\n    }\n    else\n    {\n        v = 7.5625 * (v -= 2.625 / 2.75) * v + 0.984375;\n    }\n\n    if (reverse)\n    {\n        return (1 - v) * 0.5;\n    }\n    else\n    {\n        return v * 0.5 + 0.5;\n    }\n}\n", "export function Out (v: number): number\n{\n    if (v < 1 / 2.75)\n    {\n        return 7.5625 * v * v;\n    }\n    else if (v < 2 / 2.75)\n    {\n        return 7.5625 * (v -= 1.5 / 2.75) * v + 0.75;\n    }\n    else if (v < 2.5 / 2.75)\n    {\n        return 7.5625 * (v -= 2.25 / 2.75) * v + 0.9375;\n    }\n    else\n    {\n        return 7.5625 * (v -= 2.625 / 2.75) * v + 0.984375;\n    }\n}\n", "export function In (v: number): number\n{\n    return 1 - Math.sqrt(1 - v * v);\n}\n", "export function InOut (v: number): number\n{\n    if ((v *= 2) < 1)\n    {\n        return -0.5 * (Math.sqrt(1 - v * v) - 1);\n    }\n    else\n    {\n        return 0.5 * (Math.sqrt(1 - (v -= 2) * v) + 1);\n    }\n}\n", "export function Out (v: number): number\n{\n    return Math.sqrt(1 - (--v * v));\n}\n", "export function In (v: number): number\n{\n    return v * v * v;\n}\n", "export function InOut (v: number): number\n{\n    if ((v *= 2) < 1)\n    {\n        return 0.5 * v * v * v;\n    }\n    else\n    {\n        return 0.5 * ((v -= 2) * v * v + 2);\n    }\n}\n", "export function Out (v: number): number\n{\n    return --v * v * v + 1;\n}\n", "export function In (v: number, amplitude: number = 0.1, period: number = 0.1): number\n{\n    if (v === 0)\n    {\n        return 0;\n    }\n    else if (v === 1)\n    {\n        return 1;\n    }\n    else\n    {\n        let s = period / 4;\n\n        if (amplitude < 1)\n        {\n            amplitude = 1;\n        }\n        else\n        {\n            s = period * Math.asin(1 / amplitude) / (2 * Math.PI);\n        }\n\n        return -(amplitude * Math.pow(2, 10 * (v -= 1)) * Math.sin((v - s) * (2 * Math.PI) / period));\n    }\n}\n", "export function InOut (v: number, amplitude: number = 0.1, period: number = 0.1): number\n{\n    if (v === 0)\n    {\n        return 0;\n    }\n    else if (v === 1)\n    {\n        return 1;\n    }\n    else\n    {\n        let s = period / 4;\n\n        if (amplitude < 1)\n        {\n            amplitude = 1;\n        }\n        else\n        {\n            s = period * Math.asin(1 / amplitude) / (2 * Math.PI);\n        }\n\n        if ((v *= 2) < 1)\n        {\n            return -0.5 * (amplitude * Math.pow(2, 10 * (v -= 1)) * Math.sin((v - s) * (2 * Math.PI) / period));\n        }\n        else\n        {\n            return amplitude * Math.pow(2, -10 * (v -= 1)) * Math.sin((v - s) * (2 * Math.PI) / period) * 0.5 + 1;\n        }\n    }\n}\n", "export function Out (v: number, amplitude: number = 0.1, period: number = 0.1): number\n{\n    if (v === 0)\n    {\n        return 0;\n    }\n    else if (v === 1)\n    {\n        return 1;\n    }\n    else\n    {\n        let s = period / 4;\n\n        if (amplitude < 1)\n        {\n            amplitude = 1;\n        }\n        else\n        {\n            s = period * Math.asin(1 / amplitude) / (2 * Math.PI);\n        }\n\n        return (amplitude * Math.pow(2, -10 * v) * Math.sin((v - s) * (2 * Math.PI) / period) + 1);\n    }\n}\n", "export function In (v: number): number\n{\n    return Math.pow(2, 10 * (v - 1)) - 0.001;\n}\n", "export function InOut (v: number): number\n{\n    if (v == 0)\n    {\n        return 0;\n    }\n\n    if (v == 1)\n    {\n        return 1;\n    }\n\n    if ((v *= 2) < 1)\n    {\n        return 0.5 * Math.pow(2, 10 * (v - 1));\n    }\n    else\n    {\n        return 0.5 * (2 - Math.pow(2, -10 * (v - 1)));\n    }\n}\n", "export function Out (v: number): number\n{\n    return 1 - Math.pow(2, -10 * v);\n}\n", "export function In (v: number): number\n{\n    return v * v;\n}\n", "export function InOut (v: number): number\n{\n    if ((v *= 2) < 1)\n    {\n        return 0.5 * v * v;\n    }\n    else\n    {\n        return -0.5 * (--v * (v - 2) - 1);\n    }\n}\n", "export function Out (v: number): number\n{\n    return v * (2 - v);\n}\n", "export function In (v: number): number\n{\n    return v * v * v * v;\n}\n", "export function InOut (v: number): number\n{\n    if ((v *= 2) < 1)\n    {\n        return 0.5 * v * v * v * v;\n    }\n    else\n    {\n        return -0.5 * ((v -= 2) * v * v * v - 2);\n    }\n}\n", "export function Out (v: number): number\n{\n    return -(--v * v * v * v - 1);\n}\n", "export function In (v: number): number\n{\n    return v * v * v * v * v;\n}\n", "export function InOut (v: number): number\n{\n    if ((v *= 2) < 1)\n    {\n        return 0.5 * v * v * v * v * v;\n    }\n    else\n    {\n        return 0.5 * ((v -= 2) * v * v * v * v + 2);\n    }\n}\n", "export function Out (v: number): number\n{\n    return (v = v - 1) * v * v * v * v + 1;\n}\n", "export function In (v: number): number\n{\n    if (v === 0)\n    {\n        return 0;\n    }\n    else if (v === 1)\n    {\n        return 1;\n    }\n    else\n    {\n        return 1 - Math.cos(v * Math.PI / 2);\n    }\n}\n", "export function InOut (v: number): number\n{\n    if (v === 0)\n    {\n        return 0;\n    }\n    else if (v === 1)\n    {\n        return 1;\n    }\n    else\n    {\n        return 0.5 * (1 - Math.cos(Math.PI * v));\n    }\n}\n", "export function Out (v: number): number\n{\n    if (v === 0)\n    {\n        return 0;\n    }\n    else if (v === 1)\n    {\n        return 1;\n    }\n    else\n    {\n        return Math.sin(v * Math.PI / 2);\n    }\n}\n", "export function Linear (v: number): number\n{\n    return v;\n}\n", "export function Stepped (v: number, steps: number = 1): number\n{\n    if (v <= 0)\n    {\n        return 0;\n    }\n    else if (v >= 1)\n    {\n        return 1;\n    }\n    else\n    {\n        return (((steps * v) | 0) + 1) * (1 / steps);\n    }\n}\n", "import * as Back from './back';\nimport * as Bounce from './bounce';\nimport * as Circular from './circular';\nimport * as Cubic from './cubic';\nimport * as Elastic from './elastic';\nimport * as Expo from './expo';\nimport * as Quadratic from './quadratic';\nimport * as Quartic from './quartic';\nimport * as Quintic from './quintic';\nimport * as Sine from './sine';\n\nimport { Linear } from './Linear';\nimport { Stepped } from './Stepped';\n\nconst EaseMap: Map<string, Function> = new Map([\n    [ 'power0', Linear ],\n    [ 'power1', Quadratic.Out ],\n    [ 'power2', Cubic.Out ],\n    [ 'power3', Quartic.Out ],\n    [ 'power4', Quintic.Out ],\n    [ 'linear', Linear ],\n    [ 'quad', Quadratic.Out ],\n    [ 'cubic', Cubic.Out ],\n    [ 'quart', Quartic.Out ],\n    [ 'quint', Quintic.Out ],\n    [ 'sine', Sine.Out ],\n    [ 'expo', Expo.Out ],\n    [ 'circ', Circular.Out ],\n    [ 'elastic', Elastic.Out ],\n    [ 'back', Back.Out ],\n    [ 'bounce', Bounce.Out ],\n    [ 'stepped', Stepped ],\n    [ 'quad.in', Quadratic.In ],\n    [ 'cubic.in', Cubic.In ],\n    [ 'quart.in', Quartic.In ],\n    [ 'quint.in', Quintic.In ],\n    [ 'sine.in', Sine.In ],\n    [ 'expo.in', Expo.In ],\n    [ 'circ.in', Circular.In ],\n    [ 'elastic.in', Elastic.In ],\n    [ 'back.in', Back.In ],\n    [ 'bounce.in', Bounce.In ],\n    [ 'quad.out', Quadratic.Out ],\n    [ 'cubic.out', Cubic.Out ],\n    [ 'quart.out', Quartic.Out ],\n    [ 'quint.out', Quintic.Out ],\n    [ 'sine.out', Sine.Out ],\n    [ 'expo.out', Expo.Out ],\n    [ 'circ.out', Circular.Out ],\n    [ 'elastic.out', Elastic.Out ],\n    [ 'back.out', Back.Out ],\n    [ 'bounce.out', Bounce.Out ],\n    [ 'quad.inout', Quadratic.InOut ],\n    [ 'cubic.inout', Cubic.InOut ],\n    [ 'quart.inout', Quartic.InOut ],\n    [ 'quint.inout', Quintic.InOut ],\n    [ 'sine.inout', Sine.InOut ],\n    [ 'expo.inout', Expo.InOut ],\n    [ 'circ.inout', Circular.InOut ],\n    [ 'elastic.inout', Elastic.InOut ],\n    [ 'back.inout', Back.InOut ],\n    [ 'bounce.inout', Bounce.InOut ]\n]);\n\n//  Allows GetEase('Back'), GetEase('Expo.InOut'), GetEase('Export.easeOut') or lower-case\n\nexport function GetEase (name: string): Function\n{\n    name = name.toLowerCase();\n    name = name.replace('ease', '');\n\n    if (EaseMap.has(name))\n    {\n        return EaseMap.get(name);\n    }\n    else\n    {\n        return Linear;\n    }\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Calculate the fuzzy ceiling of the given value.\n *\n * @function Phaser.Math.Fuzzy.Ceil\n * @since 3.0.0\n *\n * @param {number} value - The value.\n * @param {number} [epsilon=0.0001] - The epsilon.\n *\n * @return {number} The fuzzy ceiling of the value.\n */\nexport function FuzzyCeil (value: number, epsilon: number = 0.0001): number\n{\n    return Math.ceil(value - epsilon);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Check whether the given values are fuzzily equal.\n *\n * Two numbers are fuzzily equal if their difference is less than `epsilon`.\n *\n * @function Phaser.Math.Fuzzy.Equal\n * @since 3.0.0\n *\n * @param {number} a - The first value.\n * @param {number} b - The second value.\n * @param {number} [epsilon=0.0001] - The epsilon.\n *\n * @return {boolean} `true` if the values are fuzzily equal, otherwise `false`.\n */\nexport function FuzzyEqual (a: number, b: number, epsilon: number = 0.0001): boolean\n{\n    return Math.abs(a - b) < epsilon;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Calculate the fuzzy floor of the given value.\n *\n * @function Phaser.Math.Fuzzy.Floor\n * @since 3.0.0\n *\n * @param {number} value - The value.\n * @param {number} [epsilon=0.0001] - The epsilon.\n *\n * @return {number} The floor of the value.\n */\nexport function FuzzyFloor (value: number, epsilon: number = 0.0001): number\n{\n    return Math.floor(value + epsilon);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Check whether `a` is fuzzily greater than `b`.\n *\n * `a` is fuzzily greater than `b` if it is more than `b - epsilon`.\n *\n * @function Phaser.Math.Fuzzy.GreaterThan\n * @since 3.0.0\n *\n * @param {number} a - The first value.\n * @param {number} b - The second value.\n * @param {number} [epsilon=0.0001] - The epsilon.\n *\n * @return {boolean} `true` if `a` is fuzzily greater than than `b`, otherwise `false`.\n */\nexport function FuzzyGreaterThan (a: number, b: number, epsilon: number = 0.0001): boolean\n{\n    return a > b - epsilon;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Check whether `a` is fuzzily less than `b`.\n *\n * `a` is fuzzily less than `b` if it is less than `b + epsilon`.\n *\n * @function Phaser.Math.Fuzzy.LessThan\n * @since 3.0.0\n *\n * @param {number} a - The first value.\n * @param {number} b - The second value.\n * @param {number} [epsilon=0.0001] - The epsilon.\n *\n * @return {boolean} `true` if `a` is fuzzily less than `b`, otherwise `false`.\n */\nexport function FuzzyLessThan (a: number, b: number, epsilon: number = 0.0001): boolean\n{\n    return a < b + epsilon;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { FuzzyCeil } from './FuzzyCeil';\nimport { FuzzyEqual } from './FuzzyEqual';\nimport { FuzzyFloor } from './FuzzyFloor';\nimport { FuzzyGreaterThan } from './FuzzyGreaterThan';\nimport { FuzzyLessThan } from './FuzzyLessThan';\n\n// TODO - The Epsilon values can move to a Config setter\n\nexport {\n    FuzzyCeil,\n    FuzzyEqual,\n    FuzzyFloor,\n    FuzzyGreaterThan,\n    FuzzyLessThan\n};\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Calculates the factorial of a given number for integer values greater than 0.\n *\n * @function Phaser.Math.Factorial\n * @since 3.0.0\n *\n * @param {number} value - A positive integer to calculate the factorial of.\n *\n * @return {number} The factorial of the given number.\n */\nexport function Factorial (value: number): number\n{\n    if (value === 0)\n    {\n        return 1;\n    }\n\n    let res = value;\n\n    while (--value)\n    {\n        res *= value;\n    }\n\n    return res;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { Factorial } from './Factorial';\n\n/**\n * Calculates the Bernstein basis from the three factorial coefficients.\n *\n * @function Phaser.Math.Bernstein\n * @since 3.0.0\n *\n * @param {number} n - The first value.\n * @param {number} i - The second value.\n *\n * @return {number} The Bernstein basis of Factorial(n) / Factorial(i) / Factorial(n - i)\n */\nexport function Bernstein (n: number, i: number): number\n{\n    return Factorial(n) / Factorial(i) / Factorial(n - i);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { Bernstein } from '../Bernstein';\n\n/**\n * A bezier interpolation method.\n *\n * @function Phaser.Math.Interpolation.Bezier\n * @since 3.0.0\n *\n * @param {number[]} v - The input array of values to interpolate between.\n * @param {number} k - The percentage of interpolation, between 0 and 1.\n *\n * @return {number} The interpolated value.\n */\nexport function BezierInterpolation (v: number[], k: number): number\n{\n    let b = 0;\n    const n = v.length - 1;\n\n    for (let i = 0; i <= n; i++)\n    {\n        b += Math.pow(1 - k, n - i) * Math.pow(k, i) * v[i] * Bernstein(n, i);\n    }\n\n    return b;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { CatmullRom } from '../CatmullRom';\n\n/**\n * A Catmull-Rom interpolation method.\n *\n * @function Phaser.Math.Interpolation.CatmullRom\n * @since 3.0.0\n *\n * @param {number[]} v - The input array of values to interpolate between.\n * @param {number} k - The percentage of interpolation, between 0 and 1.\n *\n * @return {number} The interpolated value.\n */\nexport function CatmullRomInterpolation (v: number[], k: number): number\n{\n    const m = v.length - 1;\n    let f = m * k;\n    let i = Math.floor(f);\n\n    if (v[0] === v[m])\n    {\n        if (k < 0)\n        {\n            i = Math.floor(f = m * (1 + k));\n        }\n\n        return CatmullRom(f - i, v[(i - 1 + m) % m], v[i], v[(i + 1) % m], v[(i + 2) % m]);\n    }\n    else\n    {\n        if (k < 0)\n        {\n            return v[0] - (CatmullRom(-f, v[0], v[0], v[1], v[1]) - v[0]);\n        }\n\n        if (k > 1)\n        {\n            return v[m] - (CatmullRom(f - m, v[m], v[m], v[m - 1], v[m - 1]) - v[m]);\n        }\n\n        return CatmullRom(f - i, v[i ? i - 1 : 0], v[i], v[m < i + 1 ? m : i + 1], v[m < i + 2 ? m : i + 2]);\n    }\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * @ignore\n */\nfunction P0 (t: number, p: number): number\n{\n    const k = 1 - t;\n\n    return k * k * k * p;\n}\n\n/**\n * @ignore\n */\nfunction P1 (t: number, p: number): number\n{\n    const k = 1 - t;\n\n    return 3 * k * k * t * p;\n}\n\n/**\n * @ignore\n */\nfunction P2 (t: number, p: number): number\n{\n    return 3 * (1 - t) * t * t * p;\n}\n\n/**\n * @ignore\n */\nfunction P3 (t: number, p: number): number\n{\n    return t * t * t * p;\n}\n\n/**\n * A cubic bezier interpolation method.\n *\n * https://medium.com/@adrian_cooney/bezier-interpolation-13b68563313a\n *\n * @function Phaser.Math.Interpolation.CubicBezier\n * @since 3.0.0\n *\n * @param {number} t - The percentage of interpolation, between 0 and 1.\n * @param {number} p0 - The start point.\n * @param {number} p1 - The first control point.\n * @param {number} p2 - The second control point.\n * @param {number} p3 - The end point.\n *\n * @return {number} The interpolated value.\n */\nexport function CubicBezierInterpolation (t: number, p0: number, p1: number, p2: number, p3: number): number\n{\n    return P0(t, p0) + P1(t, p1) + P2(t, p2) + P3(t, p3);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Calculates a linear (interpolation) value over t.\n *\n * @function Phaser.Math.Linear\n * @since 3.0.0\n *\n * @param {number} p0 - The first point.\n * @param {number} p1 - The second point.\n * @param {number} t - The percentage between p0 and p1 to return, represented as a number between 0 and 1.\n *\n * @return {number} The step t% of the way between p0 and p1.\n */\nexport function Linear (p0: number, p1: number, t: number): number\n{\n    return (p1 - p0) * t + p0;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { Linear } from '../Linear';\n\n/**\n * A linear interpolation method.\n *\n * @function Phaser.Math.Interpolation.Linear\n * @since 3.0.0\n * @see {@link https://en.wikipedia.org/wiki/Linear_interpolation}\n *\n * @param {number[]} v - The input array of values to interpolate between.\n * @param {!number} k - The percentage of interpolation, between 0 and 1.\n *\n * @return {!number} The interpolated value.\n */\nexport function LinearInterpolation (v: number[], k: number): number\n{\n    const m = v.length - 1;\n    const f = m * k;\n    const i = Math.floor(f);\n\n    if (k < 0)\n    {\n        return Linear(v[0], v[1], f);\n    }\n    else if (k > 1)\n    {\n        return Linear(v[m], v[m - 1], m - f);\n    }\n    else\n    {\n        return Linear(v[i], v[(i + 1 > m) ? m : i + 1], f - i);\n    }\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * @ignore\n */\nfunction P0 (t: number, p: number): number\n{\n    const k = 1 - t;\n\n    return k * k * p;\n}\n\n/**\n * @ignore\n */\nfunction P1 (t: number, p: number): number\n{\n    return 2 * (1 - t) * t * p;\n}\n\n/**\n * @ignore\n */\nfunction P2 (t: number, p: number): number\n{\n    return t * t * p;\n}\n\n// https://github.com/mrdoob/three.js/blob/master/src/extras/core/Interpolations.js\n\n/**\n * A quadratic bezier interpolation method.\n *\n * @function Phaser.Math.Interpolation.QuadraticBezier\n * @since 3.2.0\n *\n * @param {number} t - The percentage of interpolation, between 0 and 1.\n * @param {number} p0 - The start point.\n * @param {number} p1 - The control point.\n * @param {number} p2 - The end point.\n *\n * @return {number} The interpolated value.\n */\nexport function QuadraticBezierInterpolation (t: number, p0: number, p1: number, p2: number): number\n{\n    return P0(t, p0) + P1(t, p1) + P2(t, p2);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Calculate a smooth interpolation percentage of `x` between `min` and `max`.\n *\n * The function receives the number `x` as an argument and returns 0 if `x` is less than or equal to the left edge,\n * 1 if `x` is greater than or equal to the right edge, and smoothly interpolates, using a Hermite polynomial,\n * between 0 and 1 otherwise.\n *\n * @function Phaser.Math.SmoothStep\n * @since 3.0.0\n * @see {@link https://en.wikipedia.org/wiki/Smoothstep}\n *\n * @param {number} x - The input value.\n * @param {number} min - The minimum value, also known as the 'left edge', assumed smaller than the 'right edge'.\n * @param {number} max - The maximum value, also known as the 'right edge', assumed greater than the 'left edge'.\n *\n * @return {number} The percentage of interpolation, between 0 and 1.\n */\nexport function SmoothStep (x: number, min: number, max: number): number\n{\n    if (x <= min)\n    {\n        return 0;\n    }\n\n    if (x >= max)\n    {\n        return 1;\n    }\n\n    x = (x - min) / (max - min);\n\n    return x * x * (3 - 2 * x);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { SmoothStep } from '../SmoothStep';\n\n/**\n * A Smooth Step interpolation method.\n *\n * @function Phaser.Math.Interpolation.SmoothStep\n * @since 3.9.0\n * @see {@link https://en.wikipedia.org/wiki/Smoothstep}\n *\n * @param {number} t - The percentage of interpolation, between 0 and 1.\n * @param {number} min - The minimum value, also known as the 'left edge', assumed smaller than the 'right edge'.\n * @param {number} max - The maximum value, also known as the 'right edge', assumed greater than the 'left edge'.\n *\n * @return {number} The interpolated value.\n */\nexport function SmoothStepInterpolation (t: number, min: number, max: number): number\n{\n    return min + (max - min) * SmoothStep(t, 0, 1);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Calculate a smoother interpolation percentage of `x` between `min` and `max`.\n *\n * The function receives the number `x` as an argument and returns 0 if `x` is less than or equal to the left edge,\n * 1 if `x` is greater than or equal to the right edge, and smoothly interpolates, using a Hermite polynomial,\n * between 0 and 1 otherwise.\n *\n * Produces an even smoother interpolation than {@link Phaser.Math.SmoothStep}.\n *\n * @function Phaser.Math.SmootherStep\n * @since 3.0.0\n * @see {@link https://en.wikipedia.org/wiki/Smoothstep#Variations}\n *\n * @param {number} x - The input value.\n * @param {number} min - The minimum value, also known as the 'left edge', assumed smaller than the 'right edge'.\n * @param {number} max - The maximum value, also known as the 'right edge', assumed greater than the 'left edge'.\n *\n * @return {number} The percentage of interpolation, between 0 and 1.\n */\nexport function SmootherStep (x: number, min: number, max: number): number\n{\n    x = Math.max(0, Math.min(1, (x - min) / (max - min)));\n\n    return x * x * x * (x * (x * 6 - 15) + 10);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { SmootherStep } from '../SmootherStep';\n\n/**\n * A Smoother Step interpolation method.\n *\n * @function Phaser.Math.Interpolation.SmootherStep\n * @since 3.9.0\n * @see {@link https://en.wikipedia.org/wiki/Smoothstep#Variations}\n *\n * @param {number} t - The percentage of interpolation, between 0 and 1.\n * @param {number} min - The minimum value, also known as the 'left edge', assumed smaller than the 'right edge'.\n * @param {number} max - The maximum value, also known as the 'right edge', assumed greater than the 'left edge'.\n *\n * @return {number} The interpolated value.\n */\nexport function SmootherStepInterpolation (t: number, min: number, max: number): number\n{\n    return min + (max - min) * SmootherStep(t, 0, 1);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { BezierInterpolation } from './BezierInterpolation';\nimport { CatmullRomInterpolation } from './CatmullRomInterpolation';\nimport { CubicBezierInterpolation } from './CubicBezierInterpolation';\nimport { LinearInterpolation } from './LinearInterpolation';\nimport { QuadraticBezierInterpolation } from './QuadraticBezierInterpolation';\nimport { SmoothStepInterpolation } from './SmoothStepInterpolation';\nimport { SmootherStepInterpolation } from './SmootherStepInterpolation';\n\nexport {\n    BezierInterpolation,\n    CatmullRomInterpolation,\n    CubicBezierInterpolation,\n    LinearInterpolation,\n    QuadraticBezierInterpolation,\n    SmoothStepInterpolation,\n    SmootherStepInterpolation\n};\n", "import { Matrix2D } from './Matrix2D';\n\nexport function Mat2dAppend (mat1: Matrix2D, mat2: Matrix2D, out: Matrix2D = new Matrix2D()): Matrix2D\n{\n    const { a: a1, b: b1, c: c1, d: d1, tx: tx1, ty: ty1 } = mat1;\n    const { a: a2, b: b2, c: c2, d: d2, tx: tx2, ty: ty2 } = mat2;\n\n    return out.set(\n        (a2 * a1) + (b2 * c1),\n        (a2 * b1) + (b2 * d1),\n        (c2 * a1) + (d2 * c1),\n        (c2 * b1) + (d2 * d1),\n        (tx2 * a1) + (ty2 * c1) + tx1,\n        (tx2 * b1) + (ty2 * d1) + ty1\n    );\n}\n", "import { IMatrix2D } from './IMatrix2D';\n\n//  Compares the a and b matrix and returns if they are equal.\n\nexport function Mat2dEquals (a: IMatrix2D, b: IMatrix2D): boolean\n{\n    return (\n        a.a === b.a &&\n        a.b === b.b &&\n        a.c === b.c &&\n        a.d === b.d &&\n        a.tx === b.tx &&\n        a.ty === b.ty\n    );\n}\n", "import { IMatrix2D } from './IMatrix2D';\nimport { Vec2 } from '../vec2/Vec2';\n\nexport function Mat2dGlobalToLocal (mat: IMatrix2D, x: number, y: number, out: Vec2 = new Vec2()): Vec2\n{\n    const { a, b, c, d, tx, ty } = mat;\n\n    const id: number = 1 / ((a * d) + (c * -b));\n\n    return out.set(\n        (d * id * x) + (-c * id * y) + (((ty * c) - (tx * d)) * id),\n        (a * id * y) + (-b * id * x) + (((-ty * a) + (tx * b)) * id)\n    );\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Returns the nearest power of 2 to the given `value`.\n *\n * @function Phaser.Math.Pow2.GetNext\n * @since 3.0.0\n *\n * @param {number} value - The value.\n *\n * @return {number} The nearest power of 2 to `value`.\n */\nexport function GetPowerOfTwo (value: number): number\n{\n    const index = Math.log(value) / 0.6931471805599453;\n\n    return (1 << Math.ceil(index));\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Tests the value and returns `true` if it is a power of two.\n *\n * @function Phaser.Math.Pow2.IsValue\n * @since 3.0.0\n *\n * @param {number} value - The value to check if it's a power of two.\n *\n * @return {boolean} Returns `true` if `value` is a power of two, otherwise `false`.\n */\nexport function IsValuePowerOfTwo (value: number): boolean\n{\n    return (value > 0 && (value & (value - 1)) === 0);\n}\n", "import { Vec3 } from './Vec3';\n\nexport function Vec3Backward (): Vec3\n{\n    return new Vec3(0, 0, -1);\n}\n", "import { Vec3 } from './Vec3';\n\nexport function Vec3Down (): Vec3\n{\n    return new Vec3(0, -1, 0);\n}\n", "import { Vec3 } from './Vec3';\n\nexport function Vec3Forward (): Vec3\n{\n    return new Vec3(0, 0, 1);\n}\n", "import { Vec3 } from './Vec3';\n\nexport function Vec3Left (): Vec3\n{\n    return new Vec3(-1, 0, 0);\n}\n", "import { Vec3 } from './Vec3';\n\nexport function Vec3Right (): Vec3\n{\n    return new Vec3(1, 0, 0);\n}\n", "import { Vec3 } from './Vec3';\n\nexport function Vec3Up (): Vec3\n{\n    return new Vec3(0, 1, 0);\n}\n", "import { Vec3 } from './Vec3';\n\nexport function Vec3Zero (): Vec3\n{\n    return new Vec3(0, 0, 0);\n}\n", "import { Vec3Backward } from './Vec3Backward';\nimport { Vec3Down } from './Vec3Down';\nimport { Vec3Forward } from './Vec3Forward';\nimport { Vec3Left } from './Vec3Left';\nimport { Vec3Right } from './Vec3Right';\nimport { Vec3Up } from './Vec3Up';\nimport { Vec3Zero } from './Vec3Zero';\n\nexport const UP = Vec3Up();\nexport const DOWN = Vec3Down();\nexport const LEFT = Vec3Left();\nexport const RIGHT = Vec3Right();\nexport const FORWARD = Vec3Forward();\nexport const BACKWARD = Vec3Backward();\nexport const ZERO = Vec3Zero();\n", "import { IRectangle } from '../../geom/rectangle/IRectangle';\nimport { Mat4Multiply } from '../mat4/Mat4Multiply';\nimport { Matrix4 } from '../mat4/Matrix4';\nimport { Vec3 } from './Vec3';\nimport { Vec3TransformMat4 } from './Vec3TransformMat4';\n\nconst tempMatrix1 = new Matrix4();\nconst tempMatrix2 = new Matrix4();\n\nexport function Vec3Project (v: Vec3, world: Matrix4, transform: Matrix4, viewport: IRectangle, out: Vec3 = new Vec3()): Vec3\n{\n    const { x, y, width, height } = viewport;\n\n    tempMatrix1.set(\n        width / 2, 0, 0, 0,\n        0, -height / 2, 0, 0,\n        0, 0, 0.5, 0,\n        x + width / 2, height / 2 + y, 0.5, 1\n    );\n\n    Mat4Multiply(world, transform, tempMatrix2);\n    Mat4Multiply(tempMatrix2, tempMatrix1, tempMatrix2);\n\n    return Vec3TransformMat4(v, tempMatrix2, out);\n}\n", "import { Mat4Invert } from '../mat4/Mat4Invert';\nimport { Mat4Multiply } from '../mat4/Mat4Multiply';\nimport { Matrix4 } from '../mat4/Matrix4';\nimport { Vec3 } from './Vec3';\nimport { Vec3Scale } from './Vec3Scale';\nimport { Vec3TransformMat4 } from './Vec3TransformMat4';\n\nconst matrix = new Matrix4();\nconst screenSource = new Vec3();\n\nexport function Vec3Unproject (v: Vec3, viewportWidth: number, viewportHeight: number, world: Matrix4, view: Matrix4, projection: Matrix4, out: Vec3 = new Vec3()): Vec3\n{\n    Mat4Multiply(world, view, matrix);\n    Mat4Multiply(matrix, projection, matrix);\n    Mat4Invert(matrix, matrix);\n\n    const { x, y, z } = v;\n\n    screenSource.set(\n        x / viewportWidth * 2 - 1,\n        -(y / viewportHeight * 2 - 1),\n        2 * z - 1\n    );\n\n    Vec3TransformMat4(screenSource, matrix, out);\n\n    const data = matrix.data;\n\n    const num = screenSource.x * data[3] + screenSource.y * data[7] + screenSource.z * data[11] + data[15];\n\n    //  if within epsilon?\n    return Vec3Scale(out, 1 / num, out);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Snap a value to nearest grid slice, using ceil.\n *\n * Example: if you have an interval gap of `5` and a position of `12`... you will snap to `15`.\n * As will `14` snap to `15`... but `16` will snap to `20`.\n *\n * @function Phaser.Math.Snap.Ceil\n * @since 3.0.0\n *\n * @param {number} value - The value to snap.\n * @param {number} gap - The interval gap of the grid.\n * @param {number} [start=0] - Optional starting offset for gap.\n * @param {boolean} [divide=false] - If `true` it will divide the snapped value by the gap before returning.\n *\n * @return {number} The snapped value.\n */\nexport function SnapCeil (value: number, gap: number, start: number = 0, divide: boolean = false): number\n{\n    if (gap === 0)\n    {\n        return value;\n    }\n\n    value -= start;\n    value = gap * Math.ceil(value / gap);\n\n    return (divide) ? (start + value) / gap : start + value;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Snap a value to nearest grid slice, using floor.\n *\n * Example: if you have an interval gap of `5` and a position of `12`... you will snap to `10`.\n * As will `14` snap to `10`... but `16` will snap to `15`.\n *\n * @function Phaser.Math.Snap.Floor\n * @since 3.0.0\n *\n * @param {number} value - The value to snap.\n * @param {number} gap - The interval gap of the grid.\n * @param {number} [start=0] - Optional starting offset for gap.\n * @param {boolean} [divide=false] - If `true` it will divide the snapped value by the gap before returning.\n *\n * @return {number} The snapped value.\n */\nexport function SnapFloor (value: number, gap: number, start: number = 0, divide: boolean = false): number\n{\n    if (gap === 0)\n    {\n        return value;\n    }\n\n    value -= start;\n    value = gap * Math.floor(value / gap);\n\n    return (divide) ? (start + value) / gap : start + value;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Snap a value to nearest grid slice, using rounding.\n *\n * Example: if you have an interval gap of `5` and a position of `12`... you will snap to `10` whereas `14` will snap to `15`.\n *\n * @function Phaser.Math.Snap.To\n * @since 3.0.0\n *\n * @param {number} value - The value to snap.\n * @param {number} gap - The interval gap of the grid.\n * @param {number} [start=0] - Optional starting offset for gap.\n * @param {boolean} [divide=false] - If `true` it will divide the snapped value by the gap before returning.\n *\n * @return {number} The snapped value.\n */\nexport function SnapTo (value: number, gap: number, start: number = 0, divide: boolean = false): number\n{\n    if (gap === 0)\n    {\n        return value;\n    }\n\n    value -= start;\n    value = gap * Math.round(value / gap);\n\n    return (divide) ? (start + value) / gap : start + value;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { SnapCeil } from './SnapCeil';\nimport { SnapFloor } from './SnapFloor';\nimport { SnapTo } from './SnapTo';\n\nexport {\n    SnapCeil,\n    SnapFloor,\n    SnapTo\n};\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Calculate the mean average of the given values.\n *\n * @function Phaser.Math.Average\n * @since 3.0.0\n *\n * @param {number[]} values - The values to average.\n *\n * @return {number} The average value.\n */\nexport function Average (values: number[]): number\n{\n    let sum = 0;\n\n    for (let i = 0; i < values.length; i++)\n    {\n        sum += (+values[i]);\n    }\n\n    return sum / values.length;\n}\n", "export function Between (min: number, max: number): number\n{\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Ceils to some place comparative to a `base`, default is 10 for decimal place.\n *\n * The `place` is represented by the power applied to `base` to get that place.\n *\n * @function Phaser.Math.CeilTo\n * @since 3.0.0\n *\n * @param {number} value - The value to round.\n * @param {number} [place=0] - The place to round to.\n * @param {number} [base=10] - The base to round in. Default is 10 for decimal.\n *\n * @return {number} The rounded value.\n */\nexport function CeilTo (value: number, place: number = 0, base: number = 10): number\n{\n    const p = Math.pow(base, -place);\n\n    return Math.ceil(value * p) / p;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { MATH_CONST } from './const';\n\n/**\n * Convert the given angle from degrees, to the equivalent angle in radians.\n *\n * @function Phaser.Math.DegToRad\n * @since 3.0.0\n *\n * @param {number} degrees - The angle (in degrees) to convert to radians.\n *\n * @return {number} The given angle converted to radians.\n */\nexport function DegToRad (degrees: number): number\n{\n    return degrees * MATH_CONST.DEG_TO_RAD;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Calculates the positive difference of two given numbers.\n *\n * @function Phaser.Math.Difference\n * @since 3.0.0\n *\n * @param {number} a - The first number in the calculation.\n * @param {number} b - The second number in the calculation.\n *\n * @return {number} The positive difference of the two given numbers.\n */\nexport function Difference (a: number, b: number): number\n{\n    return Math.abs(a - b);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Floors to some place comparative to a `base`, default is 10 for decimal place.\n *\n * The `place` is represented by the power applied to `base` to get that place.\n *\n * @function Phaser.Math.FloorTo\n * @since 3.0.0\n *\n * @param {number} value - The value to round.\n * @param {number} [place=0] - The place to round to.\n * @param {number} [base=10] - The base to round in. Default is 10 for decimal.\n *\n * @return {number} The rounded value.\n */\nexport function FloorTo (value: number, place: number = 0, base: number = 10): number\n{\n    const p = Math.pow(base, -place);\n\n    return Math.floor(value * p) / p;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { Clamp } from './Clamp';\n\n/**\n * Return a value based on the range between `min` and `max` and the percentage given.\n *\n * @function Phaser.Math.FromPercent\n * @since 3.0.0\n *\n * @param {number} percent - A value between 0 and 1 representing the percentage.\n * @param {number} min - The minimum value.\n * @param {number} [max] - The maximum value.\n *\n * @return {number} The value that is `percent` percent between `min` and `max`.\n */\nexport function FromPercent (percent: number, min: number, max?: number): number\n{\n    percent = Clamp(percent, 0, 1);\n\n    return (max - min) * percent;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Calculate a per-ms speed from a distance and time (given in seconds).\n *\n * @function Phaser.Math.GetSpeed\n * @since 3.0.0\n *\n * @param {number} distance - The distance.\n * @param {number} time - The time, in seconds.\n *\n * @return {number} The speed, in distance per ms.\n */\nexport function GetSpeed (distance: number, time: number): number\n{\n    return (distance / time) / 1000;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Add an `amount` to a `value`, limiting the maximum result to `max`.\n *\n * @function Phaser.Math.MaxAdd\n * @since 3.0.0\n *\n * @param {number} value - The value to add to.\n * @param {number} amount - The amount to add.\n * @param {number} max - The maximum value to return.\n *\n * @return {number} The resulting value.\n */\nexport function MaxAdd (value: number, amount: number, max: number): number\n{\n    return Math.min(value + amount, max);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Subtract an `amount` from `value`, limiting the minimum result to `min`.\n *\n * @function Phaser.Math.MinSub\n * @since 3.0.0\n *\n * @param {number} value - The value to subtract from.\n * @param {number} amount - The amount to subtract.\n * @param {number} min - The minimum value to return.\n *\n * @return {number} The resulting value.\n */\nexport function MinSub (value: number, amount: number, min: number): number\n{\n    return Math.max(value - amount, min);\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Work out what percentage `value` is of the range between `min` and `max`.\n * If `max` isn't given then it will return the percentage of `value` to `min`.\n *\n * You can optionally specify an `upperMax` value, which is a mid-way point in the range that represents 100%, after which the % starts to go down to zero again.\n *\n * @function Phaser.Math.Percent\n * @since 3.0.0\n *\n * @param {number} value - The value to determine the percentage of.\n * @param {number} min - The minimum value.\n * @param {number} [max] - The maximum value.\n * @param {number} [upperMax] - The mid-way point in the range that represents 100%.\n *\n * @return {number} A value between 0 and 1 representing the percentage.\n */\nexport function Percent (value: number, min: number, max?: number, upperMax?: number): number\n{\n    if (max === undefined) { max = min + 1; }\n\n    let percentage = (value - min) / (max - min);\n\n    if (percentage > 1)\n    {\n        if (upperMax !== undefined)\n        {\n            percentage = ((upperMax - value)) / (upperMax - max);\n\n            if (percentage < 0)\n            {\n                percentage = 0;\n            }\n        }\n        else\n        {\n            percentage = 1;\n        }\n    }\n    else if (percentage < 0)\n    {\n        percentage = 0;\n    }\n\n    return percentage;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport { MATH_CONST } from './const';\n\n/**\n * Convert the given angle in radians, to the equivalent angle in degrees.\n *\n * @function Phaser.Math.RadToDeg\n * @since 3.0.0\n *\n * @param {number} radians - The angle in radians to convert ot degrees.\n *\n * @return {number} The given angle converted to degrees.\n */\nexport function RadToDeg (radians: number): number\n{\n    return radians * MATH_CONST.RAD_TO_DEG;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Round a value to the given precision.\n * \n * For example:\n * \n * ```javascript\n * RoundTo(123.456, 0) = 123\n * RoundTo(123.456, 1) = 120\n * RoundTo(123.456, 2) = 100\n * ```\n * \n * To round the decimal, i.e. to round to precision, pass in a negative `place`:\n * \n * ```javascript\n * RoundTo(123.456789, 0) = 123\n * RoundTo(123.456789, -1) = 123.5\n * RoundTo(123.456789, -2) = 123.46\n * RoundTo(123.456789, -3) = 123.457\n * ```\n *\n * @function Phaser.Math.RoundTo\n * @since 3.0.0\n *\n * @param {number} value - The value to round.\n * @param {number} [place=0] - The place to round to. Positive to round the units, negative to round the decimal.\n * @param {number} [base=10] - The base to round in. Default is 10 for decimal.\n *\n * @return {number} The rounded value.\n */\nexport function RoundTo (value: number, place: number = 0, base: number = 10): number\n{\n    const p = Math.pow(base, -place);\n\n    return Math.round(value * p) / p;\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * @typedef {object} Phaser.Types.Math.SinCosTable\n * @since 3.0.0\n *\n * @property {number[]} sin - The sine values.\n * @property {number[]} cos - The cosine values.\n * @property {number} length - The length.\n */\n\ntype SinCosTable = { sin: number[]; cos: number[]; length: number };\n\n/**\n * Generate a series of sine and cosine values.\n *\n * @function Phaser.Math.SinCosTableGenerator\n * @since 3.0.0\n *\n * @param {number} length - The number of values to generate.\n * @param {number} [sinAmp=1] - The sine value amplitude.\n * @param {number} [cosAmp=1] - The cosine value amplitude.\n * @param {number} [frequency=1] - The frequency of the values.\n *\n * @return {SinCosTable} The generated values.\n */\nexport function SinCosTableGenerator (length: number, sinAmp: number = 1, cosAmp: number = 1, frequency: number = 1): SinCosTable\n{\n    frequency *= Math.PI / length;\n\n    const cos = [];\n    const sin = [];\n\n    for (let c = 0; c < length; c++)\n    {\n        cosAmp -= sinAmp * frequency;\n        sinAmp += cosAmp * frequency;\n\n        cos[c] = cosAmp;\n        sin[c] = sinAmp;\n    }\n\n    return {\n        sin,\n        cos,\n        length\n    };\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Checks if the two values are within the given `tolerance` of each other.\n *\n * @function Phaser.Math.Within\n * @since 3.0.0\n *\n * @param {number} a - The first value to use in the calculation.\n * @param {number} b - The second value to use in the calculation.\n * @param {number} tolerance - The tolerance. Anything equal to or less than this value is considered as being within range.\n *\n * @return {boolean} Returns `true` if `a` is less than or equal to the tolerance of `b`.\n */\nexport function Within (a: number, b: number, tolerance: number): boolean\n{\n    return (Math.abs(a - b) <= tolerance);\n}\n", "import { GetElement } from './GetElement';\n\nexport function AddToDOM (element: HTMLElement, parent?: string | HTMLElement): HTMLElement\n{\n    const target: HTMLElement = GetElement(parent);\n\n    target.appendChild(element);\n\n    return element;\n}\n", "export function DOMContentLoaded (callback: () => void): void\n{\n    const readyState = document.readyState;\n\n    if (readyState === 'complete' || readyState === 'interactive')\n    {\n        callback();\n\n        return;\n    }\n\n    const check = (): void =>\n    {\n        document.removeEventListener('deviceready', check, true);\n        document.removeEventListener('DOMContentLoaded', check, true);\n        window.removeEventListener('load', check, true);\n\n        callback();\n    };\n\n    // TODO - Swap is IsCordova call\n\n    if (!document.body)\n    {\n        window.setTimeout(check, 20);\n    }\n    else if (window.hasOwnProperty('cordova'))\n    {\n        document.addEventListener('deviceready', check, true);\n    }\n    else\n    {\n        document.addEventListener('DOMContentLoaded', check, true);\n        window.addEventListener('load', check, true);\n    }\n}\n", "/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2020 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Takes the given data string and parses it as XML using the native DOMParser interface.\n * The parsed XML object is returned, or `null` if there was an error while parsing the data.\n *\n * @function Phaser.DOM.ParseXML\n * @since 3.0.0\n *\n * @param {string} data - The XML source stored in a string.\n *\n * @return {?XMLDocument} The parsed XML data, or `null` if the data could not be parsed.\n */\nexport function ParseXML (data: string): XMLDocument | null\n{\n    let xml: XMLDocument;\n\n    try\n    {\n        const parser = new DOMParser();\n\n        xml = parser.parseFromString(data, 'text/xml');\n\n        if (!xml || !xml.documentElement || xml.getElementsByTagName('parsererror').length)\n        {\n            return null;\n        }\n        else\n        {\n            return xml;\n        }\n    }\n    catch (error)\n    {\n        return null;\n    }\n}\n", "import { IEventInstance } from './IEventInstance';\n\nexport class EventEmitter\n{\n    events: Map<string, Set<IEventInstance>>;\n\n    constructor ()\n    {\n        this.events = new Map();\n    }\n}\n", "export class EventInstance\n{\n    callback: Function;\n    context: unknown;\n    once: boolean;\n\n    constructor (callback: Function, context: unknown, once: boolean = false)\n    {\n        this.callback = callback;\n        this.context = context;\n        this.once = once;\n    }\n}\n", "import { EventInstance } from './EventInstance';\nimport { IEventEmitter } from './IEventEmitter';\nimport { IEventInstance } from './IEventInstance';\n\nexport function On (emitter: IEventEmitter, event: string, callback: Function, context: unknown = emitter, once: boolean = false): IEventInstance\n{\n    if (typeof callback !== 'function')\n    {\n        throw new TypeError('Listener not a function');\n    }\n\n    const listener = new EventInstance(callback, context, once);\n    const listeners = emitter.events.get(event);\n\n    if (!listeners)\n    {\n        emitter.events.set(event, new Set([ listener ]));\n    }\n    else\n    {\n        listeners.add(listener);\n    }\n\n    return listener;\n}\n", "import { IEventEmitter } from './IEventEmitter';\nimport { IEventInstance } from './IEventInstance';\nimport { On } from './On';\n\nexport function Once (emitter: IEventEmitter, event: string, callback: Function, context: unknown = emitter): IEventInstance\n{\n    return On(emitter, event, callback, context, true);\n}\n", "import { CONFIG_DEFAULTS } from '../const';\nimport { ConfigStore } from '../ConfigStore';\n\nexport function GetBanner (): void\n{\n    const { title, version, url, color, background } = ConfigStore.get(CONFIG_DEFAULTS.BANNER);\n\n    if (title !== '')\n    {\n        const str = (version !== '') ? title + ' ' + version : title;\n\n        console.log(\n            `%c${str}%c ${url}`,\n            `padding: 4px 16px; color: ${color}; background: ${background}`,\n            ''\n        );\n    }\n}\n", "import { CONFIG_DEFAULTS } from '../const';\nimport { ConfigStore } from '../ConfigStore';\n\nexport function GetGlobalVar (): number\n{\n    return ConfigStore.get(CONFIG_DEFAULTS.GLOBAL_VAR);\n}\n", "import { CONFIG_DEFAULTS } from '../const';\nimport { ConfigStore } from '../ConfigStore';\n\nexport function GetParent (): string | HTMLElement | undefined\n{\n    return ConfigStore.get(CONFIG_DEFAULTS.PARENT);\n}\n", "import { Types, defineComponent } from 'bitecs';\n\nconst RenderStats = defineComponent({\n\n    //  The current Game Frame number\n    gameFrame: Types.ui32,\n\n    //  Total number of Scenes rendered\n    numScenes: Types.ui8,\n\n    //  Total number of Worlds rendered\n    numWorlds: Types.ui8,\n\n    //  Total number of Game Objects (across all worlds)\n    numGameObjects: Types.ui32,\n\n    //  Total number of Game Objects to be rendered (across all worlds)\n    numGameObjectsRendered: Types.ui32,\n\n    //  Total number of Game Objects with dirty local transforms\n    numDirtyLocalTransforms: Types.ui32,\n\n    //  Total number of Game Objects with dirty world transforms\n    numDirtyWorldTransforms: Types.ui32,\n\n    //  Total number of Game Objects with dirty vertices\n    numDirtyVertices: Types.ui32,\n\n    //  Total number of Worlds that had to recalculate their display lists\n    numDirtyWorldLists: Types.ui8,\n\n    //  How many Cameras were made dirty this frame across all Scenes?\n    numDirtyCameras: Types.ui32\n\n});\n\nexport const RenderStatsComponent = RenderStats;\n", "import { GameObjectWorld } from '../GameObjectWorld';\nimport { RenderStatsComponent } from './RenderStatsComponent';\nimport { addComponent } from 'bitecs';\n\nexport function AddRenderStatsComponent (id: number): void\n{\n    addComponent(GameObjectWorld, RenderStatsComponent, id);\n}\n", "import { IGameObject } from '../gameobjects/IGameObject';\n\nexport const GameObjectRenderList: Set<IGameObject> = new Set();\n", "import { ISceneConfig } from './ISceneConfig';\n\nexport function GetConfigValue<Property extends keyof ISceneConfig> (config: ISceneConfig, property: Property, defaultValue: ISceneConfig[Property]): ISceneConfig[Property]\n{\n    if (Object.prototype.hasOwnProperty.call(config, property))\n    {\n        return config[property];\n    }\n    else\n    {\n        return defaultValue;\n    }\n}\n", "import { SceneManager } from './SceneManager';\n\nlet instance: SceneManager;\n\nexport const SceneManagerInstance =\n{\n    get: (): SceneManager =>\n    {\n        return instance;\n    },\n\n    set: (manager: SceneManager | null): void =>\n    {\n        if (instance)\n        {\n            throw new Error('SceneManager should not be instantiated more than once');\n        }\n\n        instance = manager;\n    }\n};\n", "import { IRenderStats } from './IRenderStats';\nimport { RenderStatsComponent } from './RenderStatsComponent';\nimport { SceneManagerInstance } from './SceneManagerInstance';\n\nexport function GetRenderStatsAsObject (obj?: IRenderStats): IRenderStats\n{\n    const id = SceneManagerInstance.get().id;\n\n    if (!obj)\n    {\n        obj = { fps: 0, delta: 0, gameFrame: 0, numScenes: 0, numWorlds: 0, numGameObjects: 0, numGameObjectsRendered: 0, numDirtyLocalTransforms: 0, numDirtyWorldTransforms: 0, numDirtyVertices: 0, numDirtyWorldLists: 0, numDirtyCameras: 0 };\n    }\n\n    obj.gameFrame = RenderStatsComponent.gameFrame[id];\n    obj.numScenes = RenderStatsComponent.numScenes[id];\n    obj.numWorlds = RenderStatsComponent.numWorlds[id];\n    obj.numGameObjects = RenderStatsComponent.numGameObjects[id];\n    obj.numGameObjectsRendered = RenderStatsComponent.numGameObjectsRendered[id];\n    obj.numDirtyLocalTransforms = RenderStatsComponent.numDirtyLocalTransforms[id];\n    obj.numDirtyWorldTransforms = RenderStatsComponent.numDirtyWorldTransforms[id];\n    obj.numDirtyVertices = RenderStatsComponent.numDirtyVertices[id];\n    obj.numDirtyWorldLists = RenderStatsComponent.numDirtyWorldLists[id];\n    obj.numDirtyCameras = RenderStatsComponent.numDirtyCameras[id];\n\n    return obj;\n}\n", "import { GetConfigValue } from './GetConfigValue';\nimport { IScene } from './IScene';\nimport { ISceneConfig } from './ISceneConfig';\nimport { SceneManagerInstance } from './SceneManagerInstance';\nimport { WorldList } from '../world/WorldList';\n\nexport function Install (scene: IScene, config: string | ISceneConfig = {}): void\n{\n    const sceneManager = SceneManagerInstance.get();\n\n    const size = sceneManager.scenes.size;\n    const sceneIndex = sceneManager.sceneIndex;\n    const firstScene = (size === 0);\n\n    if (typeof config === 'string')\n    {\n        scene.key = config;\n    }\n    else if (config || (!config && firstScene))\n    {\n        scene.key = GetConfigValue(config, 'key', 'scene' + sceneIndex.toString());\n    }\n\n    if (sceneManager.scenes.has(scene.key))\n    {\n        console.warn('Scene key already in use: ' + scene.key);\n    }\n    else\n    {\n        sceneManager.scenes.set(scene.key, scene);\n\n        sceneManager.flush = true;\n\n        sceneManager.sceneIndex++;\n    }\n\n    WorldList.set(scene, []);\n}\n", "import { RenderStatsComponent } from './RenderStatsComponent';\n\nexport function ResetRenderStats (id: number, gameFrame: number, scenes: number, worlds: number, transforms: number): void\n{\n    //  TODO - Consider using an array instead so we can plot changes across frames\n    RenderStatsComponent.gameFrame[id] = gameFrame;\n    RenderStatsComponent.numScenes[id] = scenes;\n    RenderStatsComponent.numWorlds[id] = worlds;\n    RenderStatsComponent.numGameObjects[id] = 0;\n    RenderStatsComponent.numGameObjectsRendered[id] = 0;\n    RenderStatsComponent.numDirtyWorldLists[id] = 0;\n    RenderStatsComponent.numDirtyVertices[id] = 0;\n    RenderStatsComponent.numDirtyLocalTransforms[id] = transforms;\n    RenderStatsComponent.numDirtyWorldTransforms[id] = 0;\n    RenderStatsComponent.numDirtyCameras[id] = 0;\n}\n", "import { Game } from '../Game';\nimport { GameInstance } from '../GameInstance';\nimport { IEventEmitter } from '../events/IEventEmitter';\nimport { IEventInstance } from '../events/IEventInstance';\nimport { IScene } from './IScene';\nimport { ISceneConfig } from './ISceneConfig';\nimport { Install } from './Install';\n\nexport class Scene implements IScene, IEventEmitter\n{\n    key: string;\n    game: Game;\n    events: Map<string, Set<IEventInstance>>;\n\n    constructor (config?: string | ISceneConfig)\n    {\n        this.game = GameInstance.get();\n        this.events = new Map();\n\n        Install(this, config);\n    }\n}\n", "import { CONFIG_DEFAULTS } from '../const';\nimport { ConfigStore } from '../ConfigStore';\nimport { ISceneConstructor } from '../../scenes/ISceneConstructor';\n\nexport function GetScenes (): ISceneConstructor[]\n{\n    return ConfigStore.get(CONFIG_DEFAULTS.SCENES);\n}\n", "import { Changed, addEntity, defineQuery } from 'bitecs';\n\nimport { AddRenderStatsComponent } from './AddRenderStatsComponent';\nimport { Game } from '../Game';\nimport { GameInstance } from '../GameInstance';\nimport { GameObjectWorld } from '../GameObjectWorld';\nimport { GetScenes } from '../config/scenes';\nimport { IScene } from './IScene';\nimport { LocalMatrix2DComponent } from '../components/transform';\nimport { Once } from '../events';\nimport { RenderStatsComponent } from './RenderStatsComponent';\nimport { ResetRenderStats } from './ResetRenderStats';\nimport { SceneManagerInstance } from './SceneManagerInstance';\nimport { UpdateLocalTransform2DSystem } from '../components/transform/UpdateLocalTransform2DSystem';\nimport { UpdateVertexPositionSystem } from '../components/vertices/UpdateVertexPositionSystem';\nimport { WorldList } from '../world/WorldList';\n\nexport class SceneManager\n{\n    readonly id: number = addEntity(GameObjectWorld);\n\n    game: Game;\n\n    scenes: Map<string, IScene> = new Map();\n\n    //  Used by Install to assign default scene keys when not specified\n    sceneIndex: number = 0;\n\n    //  Force the renderer to fully redraw\n    flush: boolean;\n\n    changedMatrixQuery = defineQuery([ Changed(LocalMatrix2DComponent) ]);\n\n    constructor ()\n    {\n        this.game = GameInstance.get();\n\n        SceneManagerInstance.set(this);\n\n        AddRenderStatsComponent(this.id);\n\n        Once(this.game, 'boot', () => this.boot());\n    }\n\n    boot (): void\n    {\n        GetScenes().forEach(scene => new scene());\n    }\n\n    update (delta: number, time: number, gameFrame: number): void\n    {\n        let sceneTotal = 0;\n        let worldTotal = 0;\n\n        for (const scene of this.scenes.values())\n        {\n            const worlds = WorldList.get(scene);\n\n            for (const world of worlds)\n            {\n                world.beforeUpdate(delta, time);\n                world.update(delta, time);\n                world.afterUpdate(delta, time);\n\n                worldTotal++;\n            }\n\n            sceneTotal++;\n        }\n\n        //  Process all dirty 2D transforms and update the local matrix across all Worlds and Scenes\n        const localTransforms = UpdateLocalTransform2DSystem(GameObjectWorld);\n\n        ResetRenderStats(this.id, gameFrame, sceneTotal, worldTotal, localTransforms.length);\n    }\n\n    //  Run through all Scenes and Worlds within them, telling them to prepare to render\n    //  The renderer itself tells them to actually render\n    preRender (gameFrame: number): void\n    {\n        const dirtyTransforms = this.changedMatrixQuery(GameObjectWorld);\n\n        let dirtyWorld = false;\n\n        for (const scene of this.scenes.values())\n        {\n            const worlds = WorldList.get(scene);\n\n            for (const world of worlds)\n            {\n                if (world.preRender(gameFrame, dirtyTransforms))\n                {\n                    dirtyWorld = true;\n                }\n            }\n        }\n\n        //  Update all vertices across the whole game, ready for rendering\n        const verts = UpdateVertexPositionSystem(GameObjectWorld);\n\n        RenderStatsComponent.numDirtyVertices[this.id] = verts.length;\n\n        if (dirtyWorld)\n        {\n            this.flush = true;\n        }\n    }\n\n    updateWorldStats (numGameObjects: number, numRendered: number, numDisplayLists: number, numWorldTransforms: number): void\n    {\n        const id = this.id;\n\n        RenderStatsComponent.numGameObjects[id] += numGameObjects;\n        RenderStatsComponent.numGameObjectsRendered[id] += numRendered;\n        RenderStatsComponent.numDirtyWorldLists[id] += numDisplayLists;\n        RenderStatsComponent.numDirtyWorldTransforms[id] += numWorldTransforms;\n    }\n}\n", "import { CONFIG_DEFAULTS } from '../const';\nimport { ConfigStore } from '../ConfigStore';\nimport { IRendererConstructor } from '../../renderer/IRendererConstructor';\n\nexport function GetRenderer (): IRendererConstructor\n{\n    return ConfigStore.get(CONFIG_DEFAULTS.RENDERER);\n}\n", "import { SetBackgroundColor } from './backgroundcolor/SetBackgroundColor';\nimport { SetBanner } from './banner/SetBanner';\nimport { SetBatchSize } from './batchsize/SetBatchSize';\nimport { SetDefaultOrigin } from './defaultorigin/SetDefaultOrigin';\nimport { SetMaxTextures } from './maxtextures/SetMaxTextures';\nimport { SetSize } from './size/SetSize';\nimport { SetWebGLContext } from './webglcontext';\nimport { SetWorldSize } from './worldsize/SetWorldSize';\n\n//  Phaser 4 defaults\n\nexport function SetConfigDefaults (): void\n{\n    SetBackgroundColor(0);\n    SetBatchSize(4096);\n    SetBanner('Phaser', '4.0.0', 'https://phaser4.io');\n    SetMaxTextures(0);\n    SetDefaultOrigin(0.5, 0.5);\n    SetSize(800, 600, 1);\n    SetWebGLContext({\n        antialias: true,\n        desynchronized: true,\n        preserveDrawingBuffer: true\n    });\n    SetWorldSize(512);\n}\n", "import { CreateCanvas } from './CreateCanvas';\nimport { IGLTextureBindingConfig } from '../renderer/webgl1/textures/IGLTextureBindingConfig';\nimport { Texture } from './Texture';\nimport { TextureManagerInstance } from './TextureManagerInstance';\n\nexport class TextureManager\n{\n    textures: Map<string, Texture>;\n\n    constructor ()\n    {\n        this.textures = new Map();\n\n        this.createDefaultTextures();\n\n        TextureManagerInstance.set(this);\n    }\n\n    private createDefaultTextures (): void\n    {\n        this.add('__BLANK', new Texture(CreateCanvas(32, 32).canvas));\n\n        const missing = CreateCanvas(32, 32);\n\n        missing.strokeStyle = '#0f0';\n        missing.moveTo(0, 0);\n        missing.lineTo(32, 32);\n        missing.stroke();\n        missing.strokeRect(0.5, 0.5, 31, 31);\n\n        this.add('__MISSING', new Texture(missing.canvas));\n\n        const white = CreateCanvas(32, 32);\n\n        white.fillStyle = '#fff';\n        white.fillRect(0, 0, 32, 32);\n\n        this.add('__WHITE', new Texture(white.canvas));\n    }\n\n    get (key: string): Texture\n    {\n        const textures = this.textures;\n\n        if (textures.has(key))\n        {\n            return textures.get(key);\n        }\n        else\n        {\n            return textures.get('__MISSING');\n        }\n    }\n\n    has (key: string): boolean\n    {\n        return this.textures.has(key);\n    }\n\n    add (key: string, source: Texture | HTMLImageElement, glConfig?: IGLTextureBindingConfig): Texture\n    {\n        let texture: Texture;\n        const textures = this.textures;\n\n        if (!textures.has(key))\n        {\n            if (source instanceof Texture)\n            {\n                texture = source;\n            }\n            else\n            {\n                texture = new Texture(source, 0, 0, glConfig);\n            }\n\n            texture.key = key;\n\n            textures.set(key, texture);\n        }\n\n        return texture;\n    }\n}\n", "import { AddToDOM, DOMContentLoaded } from './dom';\nimport { Emit, EventEmitter } from './events';\n\nimport { GameInstance } from './GameInstance';\nimport { GameObjectWorld } from './GameObjectWorld';\nimport { GetBanner } from './config/banner';\nimport { GetGlobalVar } from './config/globalvar';\nimport { GetParent } from './config/parent';\nimport { GetRenderStatsAsObject } from './scenes';\nimport { GetRenderer } from './config/renderer';\nimport { IRenderStats } from './scenes/IRenderStats';\nimport { IRenderer } from './renderer/IRenderer';\nimport { SceneManager } from './scenes/SceneManager';\nimport { SetConfigDefaults } from './config/SetConfigDefaults';\nimport { TextureManager } from './textures/TextureManager';\nimport { addEntity } from 'bitecs';\n\nexport class Game extends EventEmitter\n{\n    readonly id: number = addEntity(GameObjectWorld);\n\n    readonly VERSION: string = '4.0.0-beta1';\n\n    //  TODO - Consider moving all of these to RenderStats Component\n    isBooted: boolean = false;\n    isPaused: boolean = false;\n\n    //  TODO - Allow update to run on different tick to render\n    //  TODO - Allow update and render to be called directly\n    willUpdate: boolean = true;\n    willRender: boolean = true;\n\n    lastTick: number = 0;\n    elapsed: number = 0;\n    delta: number = 0;\n    fps: number = 0;\n    frame: number = 0;\n\n    private frames: number = 0;\n    private prevFrame: number = 0;\n\n    renderStats: IRenderStats;\n\n    renderer: IRenderer;\n    textureManager: TextureManager;\n    sceneManager: SceneManager;\n\n    constructor (...settings: { (): void }[])\n    {\n        super();\n\n        GameInstance.set(this);\n\n        SetConfigDefaults();\n\n        DOMContentLoaded(() => this.boot(settings));\n    }\n\n    boot (settings: { (): void }[]): void\n    {\n        //  Activate the settings post DOM Content Loaded\n        settings.forEach(setting => setting());\n\n        const renderer = GetRenderer();\n\n        this.renderer = new renderer();\n        this.textureManager = new TextureManager();\n        this.sceneManager = new SceneManager();\n\n        //  Only add to the DOM if they either didn't set a Parent, or expressly set it to be non-null\n        //  Otherwise we'll let them add the canvas to the DOM themselves\n        const parent = GetParent();\n\n        if (parent)\n        {\n            AddToDOM(this.renderer.canvas, parent);\n        }\n\n        const globalVar = GetGlobalVar();\n\n        if (globalVar && window)\n        {\n            (window as unknown)[globalVar] = this;\n        }\n\n        this.isBooted = true;\n\n        GetBanner();\n\n        Emit(this, 'boot');\n\n        this.lastTick = performance.now();\n        this.prevFrame = performance.now();\n\n        this.renderStats = GetRenderStatsAsObject();\n\n        this.step(this.lastTick);\n    }\n\n    pause (): void\n    {\n        this.isPaused = true;\n    }\n\n    resume (): void\n    {\n        this.isPaused = false;\n\n        this.lastTick = performance.now();\n    }\n\n    step (time: number): void\n    {\n        const renderer = this.renderer;\n        const sceneManager = this.sceneManager;\n\n        if (!this.isPaused)\n        {\n            if (this.willUpdate)\n            {\n                sceneManager.update(this.delta, time, this.frame);\n            }\n\n            if (this.willRender)\n            {\n                sceneManager.preRender(this.frame);\n\n                renderer.render(sceneManager.flush, sceneManager.scenes);\n\n                sceneManager.flush = false;\n            }\n        }\n\n        //  Note that privacy.resistFingerprinting can round this value to 100ms or more!\n        const now = performance.now();\n\n        //  How long it took to process this frame\n        const delta = now - time;\n\n        this.frames++;\n\n        if (now >= this.prevFrame + 1000)\n        {\n            this.fps = (this.frames * 1000) / (now - this.prevFrame);\n            this.prevFrame = now;\n            this.frames = 0;\n        }\n\n        this.lastTick = now;\n        this.elapsed += delta;\n        this.delta = delta;\n\n        GetRenderStatsAsObject(this.renderStats);\n\n        this.renderStats.fps = this.fps;\n        this.renderStats.delta = delta;\n\n        Emit(this, 'step');\n\n        //  The frame always advances by 1 each step (even when paused)\n        this.frame++;\n\n        GameInstance.setFrame(this.frame);\n        GameInstance.setElapsed(this.elapsed);\n\n        requestAnimationFrame(now => this.step(now));\n    }\n\n    destroy (): void\n    {\n        //  TODO - Code destroy function\n    }\n}\n", "import { Loader } from './Loader';\n\nexport class File <TData = any, TConfig = any>\n{\n    key: string;\n    url: string;\n    responseType: XMLHttpRequestResponseType = 'text';\n    crossOrigin: string | undefined = undefined;\n\n    data: TData;\n\n    error: ErrorEvent | undefined;\n    config: TConfig;\n    skipCache: boolean = false;\n    hasLoaded: boolean = false;\n    loader: Loader;\n    load: () => Promise<File<TData>>;\n\n    constructor (key: string, url: string, config?: TConfig)\n    {\n        this.key = key;\n        this.url = url;\n        this.config = config;\n    }\n}\n", "import { Loader } from './Loader';\n\nexport function GetURL (key: string, url: string, extension: string, loader?: Loader): string\n{\n    if (!url)\n    {\n        url = key + extension;\n    }\n\n    if ((/^(?:blob:|data:|http:\\/\\/|https:\\/\\/|\\/\\/)/).exec(url))\n    {\n        return url;\n    }\n    else if (loader)\n    {\n        return loader.baseURL + loader.path + url;\n    }\n    else\n    {\n        return url;\n    }\n}\n", "import { File } from './File';\n\nexport function ImageTagLoader (file: File<string>): Promise<File<HTMLImageElement>>\n{\n    const fileCast = file as unknown as File<HTMLImageElement>;\n\n    fileCast.data = new Image();\n\n    if (fileCast.crossOrigin)\n    {\n        fileCast.data.crossOrigin = file.crossOrigin;\n    }\n\n    return new Promise((resolve, reject) =>\n    {\n        fileCast.data.onload = (): void =>\n        {\n            if (fileCast.data.onload)\n            {\n                fileCast.data.onload = null;\n                fileCast.data.onerror = null;\n                resolve(fileCast);\n            }\n        };\n\n        fileCast.data.onerror = (event): void =>\n        {\n            if (fileCast.data.onload)\n            {\n                fileCast.data.onload = null;\n                fileCast.data.onerror = null;\n                fileCast.error = event as ErrorEvent;\n                reject(fileCast);\n            }\n        };\n\n        fileCast.data.src = file.url;\n\n        // Image is immediately-available or cached\n\n        if (fileCast.data.complete && fileCast.data.width && fileCast.data.height)\n        {\n            fileCast.data.onload = null;\n            fileCast.data.onerror = null;\n            resolve(fileCast);\n        }\n    });\n}\n", "import { File } from '../File';\nimport { GetURL } from '../GetURL';\nimport { IGLTextureBindingConfig } from '../../renderer/webgl1/textures/IGLTextureBindingConfig';\nimport { ImageTagLoader } from '../ImageLoader';\nimport { TextureManagerInstance } from '../../textures/TextureManagerInstance';\n\nexport function ImageFile (key: string, url?: string, glConfig?: IGLTextureBindingConfig): File\n{\n    const file = new File(key, url);\n\n    file.load = (): Promise<File> =>\n    {\n        file.url = GetURL(file.key, file.url, '.png', file.loader);\n\n        if (file.loader)\n        {\n            file.crossOrigin = file.loader.crossOrigin;\n        }\n\n        return new Promise((resolve, reject) =>\n        {\n            const textureManager = TextureManagerInstance.get();\n\n            if (textureManager.has(file.key))\n            {\n                resolve(file);\n            }\n            else\n            {\n                ImageTagLoader(file).then(file =>\n                {\n                    textureManager.add(file.key, file.data, glConfig);\n\n                    resolve(file);\n\n                }).catch(file =>\n                {\n                    reject(file);\n                });\n            }\n        });\n    };\n\n    return file;\n}\n", "const caches = new Map();\n\nexport const Cache = {\n\n    get: (type: string): Map<string, unknown> =>\n    {\n        if (!caches.has(type))\n        {\n            caches.set(type, new Map());\n        }\n\n        return caches.get(type);\n    },\n\n    getEntry: (cache: string, entry: string): unknown =>\n    {\n        if (caches.has(cache))\n        {\n            return caches.get(cache).get(entry);\n        }\n    }\n\n};\n", "import { Emit, EventEmitter } from '../events';\n\nimport { File } from './File';\n\nexport class Loader extends EventEmitter\n{\n    baseURL: string = '';\n    path: string = '';\n    crossOrigin: string = 'anonymous';\n\n    //  -1 means load everything at once (only recommended on http/2 servers)\n    maxParallelDownloads: number = -1;\n\n    isLoading: boolean = false;\n    progress: number;\n\n    queue: Set<File>;\n    inflight: Set<File>;\n    completed: Set<File>;\n\n    onComplete: Function;\n    onError: Function;\n\n    constructor ()\n    {\n        super();\n\n        this.reset();\n    }\n\n    reset (): void\n    {\n        this.isLoading = false;\n\n        this.queue = new Set();\n        this.inflight = new Set();\n        this.completed = new Set();\n\n        this.progress = 0;\n    }\n\n    add (...file: File[]): this\n    {\n        file.forEach(entity =>\n        {\n            entity.loader = this;\n\n            this.queue.add(entity);\n        });\n\n        return this;\n    }\n\n    start (): Promise<Loader>\n    {\n        if (this.isLoading)\n        {\n            return null;\n        }\n\n        return new Promise((resolve, reject) =>\n        {\n            this.completed.clear();\n            this.progress = 0;\n\n            if (this.queue.size > 0)\n            {\n                this.isLoading = true;\n\n                this.onComplete = resolve;\n                this.onError = reject;\n\n                // console.log('Loader.start');\n\n                Emit(this, 'start');\n\n                this.nextFile();\n            }\n            else\n            {\n                this.progress = 1;\n\n                Emit(this, 'complete');\n\n                resolve(this);\n                // onComplete();\n            }\n        });\n\n        /*\n        if (this.isLoading)\n        {\n            return this;\n        }\n\n        this.completed.clear();\n        this.progress = 0;\n\n        if (this.queue.size > 0)\n        {\n            this.isLoading = true;\n\n            this.onComplete = onComplete;\n\n            // console.log('Loader.start');\n\n            Emit(this, 'start');\n\n            this.nextFile();\n        }\n        else\n        {\n            this.progress = 1;\n\n            Emit(this, 'complete');\n\n            onComplete();\n        }\n\n        return this;\n        */\n    }\n\n    nextFile (): void\n    {\n        let limit = this.queue.size;\n\n        if (this.maxParallelDownloads !== -1)\n        {\n            limit = Math.min(limit, this.maxParallelDownloads) - this.inflight.size;\n        }\n\n        // console.log('Loader.nextFile', limit);\n\n        if (limit)\n        {\n            // console.log('Batching', limit, 'files to download');\n\n            const iterator = this.queue.values();\n\n            while (limit > 0)\n            {\n                const file = iterator.next().value;\n\n                // console.log('Loader.nextFile', file.key, '=>', file.url);\n\n                this.inflight.add(file);\n\n                this.queue.delete(file);\n\n                file.load()\n                    .then(\n                        (file: File) => this.fileComplete(file)\n                    )\n                    .catch(\n                        (file: File) => this.fileError(file)\n                    );\n\n                limit--;\n            }\n        }\n        else if (this.inflight.size === 0)\n        {\n            // console.log('Loader inflight zero');\n\n            this.stop();\n\n            // window.setTimeout(() => this.stop(), 0);\n        }\n    }\n\n    stop (): void\n    {\n        if (!this.isLoading)\n        {\n            return;\n        }\n\n        this.isLoading = false;\n\n        Emit(this, 'complete', this.completed);\n\n        this.onComplete();\n\n        this.completed.clear();\n    }\n\n    private updateProgress (file: File): void\n    {\n        this.inflight.delete(file);\n        this.completed.add(file);\n\n        const totalCompleted = this.completed.size;\n        const totalQueued = this.queue.size + this.inflight.size;\n\n        if (totalCompleted > 0)\n        {\n            this.progress = totalCompleted / (totalCompleted + totalQueued);\n        }\n\n        Emit(this, 'progress', this.progress, totalCompleted, totalQueued);\n\n        this.nextFile();\n    }\n\n    private fileComplete (file: File): void\n    {\n        Emit(this, 'filecomplete', file);\n\n        this.updateProgress(file);\n    }\n\n    private fileError (file: File): void\n    {\n        Emit(this, 'fileerror', file);\n\n        this.updateProgress(file);\n    }\n\n    totalFilesToLoad (): number\n    {\n        return this.queue.size + this.inflight.size;\n    }\n\n    setBaseURL (url: string = ''): this\n    {\n        if (url !== '' && url.substr(-1) !== '/')\n        {\n            url = url.concat('/');\n        }\n\n        this.baseURL = url;\n\n        return this;\n    }\n\n    setPath (path: string = ''): this\n    {\n        if (path !== '' && path.substr(-1) !== '/')\n        {\n            path = path.concat('/');\n        }\n\n        this.path = path;\n\n        return this;\n    }\n\n    setCORS (crossOrigin: string): this\n    {\n        this.crossOrigin = crossOrigin;\n\n        return this;\n    }\n\n    setMaxParallelDownloads (max: number): this\n    {\n        this.maxParallelDownloads = max;\n\n        return this;\n    }\n}\n", "import { Emit, EventEmitter } from '../../events';\n\nimport { GameInstance } from '../../GameInstance';\nimport { IGameObject } from '../../gameobjects/IGameObject';\nimport { Mat2dAppend } from '../../math/mat2d/Mat2dAppend';\nimport { Mat2dGlobalToLocal } from '../../math/mat2d/Mat2dGlobalToLocal';\nimport { Vec2 } from '../../math/vec2/Vec2';\n\nexport class Mouse extends EventEmitter\n{\n    primaryDown: boolean = false;\n    auxDown: boolean = false;\n    secondaryDown: boolean = false;\n\n    blockContextMenu: boolean = true;\n\n    localPoint: Vec2;\n    hitPoint: Vec2;\n\n    private target: HTMLElement;\n    private resolution: number = 1;\n\n    private mousedownHandler: { (event: MouseEvent): void; (this: Window, ev: MouseEvent): void };\n    private mouseupHandler: { (event: MouseEvent): void; (this: Window, ev: MouseEvent): void };\n    private mousemoveHandler: { (event: MouseEvent): void; (this: Window, ev: MouseEvent): void };\n    private mousewheelHandler: { (event: MouseWheelEvent): void; (this: Window, ev: MouseWheelEvent): void };\n    private contextmenuHandler: { (event: MouseEvent): void; (this: Window, ev: MouseEvent): void };\n    private blurHandler: { (): void; (this: Window, ev: FocusEvent): void };\n\n    private transPoint: Vec2;\n\n    constructor (target?: HTMLElement)\n    {\n        super();\n\n        this.mousedownHandler = (event: MouseEvent): void => this.onMouseDown(event);\n        this.mouseupHandler = (event: MouseEvent): void => this.onMouseUp(event);\n        this.mousemoveHandler = (event: MouseEvent): void => this.onMouseMove(event);\n        this.mousewheelHandler = (event: MouseWheelEvent): void => this.onMouseWheel(event);\n        this.contextmenuHandler = (event: MouseEvent): void => this.onContextMenuEvent(event);\n        this.blurHandler = (): void => this.onBlur();\n\n        this.localPoint = new Vec2();\n        this.hitPoint = new Vec2();\n        this.transPoint = new Vec2();\n\n        if (!target)\n        {\n            target = GameInstance.get().renderer.canvas;\n        }\n\n        target.addEventListener('mousedown', this.mousedownHandler);\n        target.addEventListener('mouseup', this.mouseupHandler);\n        target.addEventListener('wheel', this.mousewheelHandler, { passive: false });\n        target.addEventListener('contextmenu', this.contextmenuHandler);\n\n        window.addEventListener('mouseup', this.mouseupHandler);\n        window.addEventListener('mousemove', this.mousemoveHandler);\n        window.addEventListener('blur', this.blurHandler);\n\n        this.target = target;\n    }\n\n    private onBlur (): void\n    {\n    }\n\n    private onMouseDown (event: MouseEvent): void\n    {\n        this.positionToPoint(event);\n\n        this.primaryDown = (event.button === 0);\n        this.auxDown = (event.button === 1);\n        this.secondaryDown = (event.button === 2);\n\n        Emit(this, 'pointerdown', this.localPoint.x, this.localPoint.y, event.button, event);\n    }\n\n    private onMouseUp (event: MouseEvent): void\n    {\n        this.positionToPoint(event);\n\n        this.primaryDown = !(event.button === 0);\n        this.auxDown = !(event.button === 1);\n        this.secondaryDown = !(event.button === 2);\n\n        Emit(this, 'pointerup', this.localPoint.x, this.localPoint.y, event.button, event);\n    }\n\n    private onMouseMove (event: MouseEvent): void\n    {\n        this.positionToPoint(event);\n\n        Emit(this, 'pointermove', this.localPoint.x, this.localPoint.y, event);\n    }\n\n    private onMouseWheel (event: MouseWheelEvent): void\n    {\n        Emit(this, 'wheel', event.deltaX, event.deltaY, event.deltaZ, event);\n    }\n\n    private onContextMenuEvent (event: MouseEvent): void\n    {\n        if (this.blockContextMenu)\n        {\n            event.preventDefault();\n        }\n\n        Emit(this, 'contextmenu', event);\n    }\n\n    positionToPoint (event: MouseEvent): Vec2\n    {\n        return this.localPoint.set(event.offsetX, event.offsetY);\n    }\n\n    getInteractiveChildren <T extends IGameObject> (parent: T, results: IGameObject[]): void\n    {\n        const children = parent.children;\n\n        for (let i = 0; i < children.length; i++)\n        {\n            const child = children[i];\n\n            if (!child.visible || !child.input.enabled)\n            {\n                continue;\n            }\n\n            results.push(child);\n\n            if (child.input.enabledChildren && child.numChildren)\n            {\n                this.getInteractiveChildren(child, results);\n            }\n        }\n    }\n\n    checkHitArea <T extends IGameObject> (entity: T, px: number, py: number): boolean\n    {\n        if (entity.input.hitArea)\n        {\n            if (entity.input.hitArea.contains(px, py))\n            {\n                return true;\n            }\n        }\n        else\n        {\n            return entity.transformExtent.contains(px, py);\n        }\n\n        return false;\n    }\n\n    hitTest <T extends IGameObject> (...entities: T[]): boolean\n    {\n        const localX = this.localPoint.x;\n        const localY = this.localPoint.y;\n        const point = this.transPoint;\n\n        for (let i: number = 0; i < entities.length; i++)\n        {\n            const entity = entities[i];\n\n            if (!entity.world)\n            {\n                //  Can't hit test an entity if it hasn't been added to a World yet\n                continue;\n            }\n\n            const mat = Mat2dAppend(entity.world.camera.worldTransform, entity.worldTransform);\n\n            Mat2dGlobalToLocal(mat, localX, localY, point);\n\n            if (this.checkHitArea(entity, point.x, point.y))\n            {\n                this.hitPoint.set(point.x, point.y);\n\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    hitTestChildren <T extends IGameObject> (parent: T, topOnly: boolean = true): IGameObject[]\n    {\n        const output: IGameObject[] = [];\n\n        if (!parent.visible)\n        {\n            return output;\n        }\n\n        //  Build a list of potential input candidates\n        const candidates: IGameObject[] = [];\n        const parentInput = parent.input;\n\n        if (parentInput && parentInput.enabled)\n        {\n            candidates.push(parent);\n        }\n\n        if (parentInput.enabledChildren && parent.numChildren)\n        {\n            this.getInteractiveChildren(parent, candidates);\n        }\n\n        for (let i: number = candidates.length - 1; i >= 0; i--)\n        {\n            const entity = candidates[i];\n\n            if (this.hitTest(entity))\n            {\n                output.push(entity);\n\n                if (topOnly)\n                {\n                    break;\n                }\n            }\n        }\n\n        return output;\n    }\n\n    shutdown (): void\n    {\n        const target = this.target;\n\n        target.removeEventListener('mousedown', this.mousedownHandler);\n        target.removeEventListener('mouseup', this.mouseupHandler);\n        target.removeEventListener('wheel', this.mousewheelHandler);\n        target.removeEventListener('contextmenu', this.contextmenuHandler);\n\n        window.removeEventListener('mouseup', this.mouseupHandler);\n        window.removeEventListener('mousemove', this.mousemoveHandler);\n        window.removeEventListener('blur', this.blurHandler);\n    }\n}\n", "import { IBaseWorld } from '../IBaseWorld';\n\nexport const WorldAfterUpdateEvent: string = 'afterupdate';\n\nexport type WorldAfterUpdateEventHandler = <T extends IBaseWorld> (delta: number, time: number, world: T) => void;\n", "import { IBaseWorld } from '../IBaseWorld';\n\nexport const WorldBeforeUpdateEvent: string = 'beforeupdate';\n\nexport type WorldBeforeUpdateEventHandler = <T extends IBaseWorld> (delta: number, time: number, world: T) => void;\n", "import { IBaseWorld } from '../IBaseWorld';\nimport { IRenderPass } from '../../renderer/webgl1/renderpass/IRenderPass';\n\nexport const WorldPostRenderEvent: string = 'worldpostrender';\n\nexport type WorldPostRenderEventHandler = (renderPass: IRenderPass, world: IBaseWorld) => void;\n", "import { IBaseWorld } from '../IBaseWorld';\nimport { IWorldRenderData } from '../IWorldRenderData';\n\nexport const WorldRenderEvent: string = 'worldrender';\n\nexport type WorldRenderEventHandler = (renderData: IWorldRenderData, world: IBaseWorld) => void;\n", "import { IBaseWorld } from '../IBaseWorld';\n\nexport const WorldShutdownEvent: string = 'worldshutdown';\n\nexport type WorldShutdownEventHandler = (world: IBaseWorld) => void;\n", "import { IBaseWorld } from '../IBaseWorld';\n\nexport const WorldUpdateEvent: string = 'update';\n\nexport type WorldUpdateEventHandler = <T extends IBaseWorld> (delta: number, time: number, world: T) => void;\n", "import { GameObjectWorld } from '../GameObjectWorld';\nimport { RenderDataComponent } from './RenderDataComponent';\nimport { addComponent } from 'bitecs';\n\nexport function AddRenderDataComponent (id: number): void\n{\n    addComponent(GameObjectWorld, RenderDataComponent, id);\n}\n", "import { GetWorldID } from '../components/hierarchy';\n\nexport function CheckDirtyTransforms (worldID: number, list: number[]): boolean\n{\n    for (let i = 0; i < list.length; i++)\n    {\n        if (GetWorldID(list[i]) === worldID)\n        {\n            return true;\n        }\n    }\n\n    return false;\n}\n", "import { CONFIG_DEFAULTS } from '../const';\nimport { ConfigStore } from '../ConfigStore';\n\nexport function GetWorldSize (): number\n{\n    return ConfigStore.get(CONFIG_DEFAULTS.WORLD_SIZE);\n}\n", "import { WillCacheChildren, WillRender, WillRenderChildren } from '../components/permissions';\n\nimport { GameObjectTree } from '../gameobjects';\nimport { GetNumChildren } from '../components/hierarchy';\nimport { IBaseWorld } from './IBaseWorld';\n\nexport function RebuildWorldList (world: IBaseWorld, parent: number): void\n{\n    if (WillRender(parent))\n    {\n        if (world.id !== parent)\n        {\n            world.addToRenderList(parent, 0);\n        }\n\n        const children = GameObjectTree.get(parent);\n\n        for (let i = 0; i < children.length; i++)\n        {\n            const nodeID = children[i];\n\n            if (WillRender(nodeID))\n            {\n                if (GetNumChildren(nodeID) > 0 && WillRenderChildren(nodeID))\n                {\n                    //  TODO\n                    // if (WillCacheChildren(nodeID))\n                    // {\n                    //     cachedLayers.push(entry);\n                    // }\n\n                    RebuildWorldList(world, nodeID);\n                }\n                else\n                {\n                    world.addToRenderList(nodeID, 0);\n                    world.addToRenderList(nodeID, 1);\n                }\n            }\n        }\n\n        if (world.id !== parent)\n        {\n            world.addToRenderList(parent, 1);\n        }\n    }\n}\n", "import { WillRender, WillRenderChildren } from '../components/permissions';\n\nimport { GameObjectTree } from '../gameobjects';\nimport { GetNumChildren } from '../components/hierarchy';\nimport { IBaseWorld } from './IBaseWorld';\nimport { UpdateWorldTransform } from '../components/transform';\nimport { WillTransformChildren } from '../components/permissions/WillTransformChildren';\n\nexport function RebuildWorldTransforms (world: IBaseWorld, parent: number, transformList: number[], forceUpdate: boolean): void\n{\n    if (WillRender(parent))\n    {\n        if (!forceUpdate && transformList.indexOf(parent) > -1)\n        {\n            forceUpdate = true;\n        }\n\n        if (forceUpdate)\n        {\n            UpdateWorldTransform(parent);\n        }\n\n        const children = GameObjectTree.get(parent);\n\n        for (let i = 0; i < children.length; i++)\n        {\n            const nodeID = children[i];\n\n            if (WillRender(nodeID))\n            {\n                if (GetNumChildren(nodeID) > 0)\n                {\n                    if (WillRenderChildren(nodeID) && WillTransformChildren(nodeID))\n                    {\n                        RebuildWorldTransforms(world, nodeID, transformList, forceUpdate);\n                    }\n                }\n                else if (forceUpdate || transformList.indexOf(nodeID) > -1)\n                {\n                    UpdateWorldTransform(nodeID);\n                }\n            }\n        }\n    }\n}\n", "export const SceneDestroyEvent: string = 'destroy';\n\nexport type SceneDestroyEventHandler = () => void;\n", "import * as WorldEvents from './events';\n\nimport { Begin, Flush } from '../renderer/webgl1/renderpass';\nimport { Changed, defineComponent, defineQuery } from 'bitecs';\nimport { ClearDirtyDisplayList, HasDirtyDisplayList } from '../components/dirty';\nimport { Emit, Once } from '../events';\nimport { GameObject, GameObjectCache } from '../gameobjects';\nimport { GetNumWorldTransforms, ResetWorldRenderData } from './ResetWorldRenderData';\n\nimport { AddRenderDataComponent } from './AddRenderDataComponent';\nimport { AddTransform2DComponent } from '../components/transform/AddTransform2DComponent';\nimport { CheckDirtyTransforms } from './CheckDirtyTransforms';\nimport { GameObjectWorld } from '../GameObjectWorld';\nimport { GetWorldSize } from '../config/worldsize';\nimport { IBaseCamera } from '../camera/IBaseCamera';\nimport { IBaseWorld } from './IBaseWorld';\nimport { IGameObject } from '../gameobjects/IGameObject';\nimport { IRenderPass } from '../renderer/webgl1/renderpass/IRenderPass';\nimport { IScene } from '../scenes/IScene';\nimport { Mat2dEquals } from '../math/mat2d/Mat2dEquals';\nimport { RebuildWorldList } from './RebuildWorldList';\nimport { RebuildWorldTransforms } from './RebuildWorldTransforms';\nimport { RemoveChildren } from '../display';\nimport { SceneDestroyEvent } from '../scenes/events';\nimport { SceneManager } from '../scenes/SceneManager';\nimport { SceneManagerInstance } from '../scenes/SceneManagerInstance';\nimport { SetWorldID } from '../components/hierarchy';\nimport { WillUpdate } from '../components/permissions';\nimport { WorldList } from './WorldList';\nimport { WorldMatrix2DComponent } from '../components/transform';\n\nexport class BaseWorld extends GameObject implements IBaseWorld\n{\n    tag = defineComponent();\n\n    scene: IScene;\n\n    sceneManager: SceneManager;\n\n    camera: IBaseCamera;\n\n    forceRefresh: boolean = false;\n\n    is3D: boolean = false;\n\n    runRender: boolean = false;\n\n    private renderList: Uint32Array;\n    private listLength: number;\n\n    private totalChildren: number;\n    private totalChildrenQuery;\n    private dirtyWorldQuery;\n\n    constructor (scene: IScene)\n    {\n        super();\n\n        this.scene = scene;\n        this.sceneManager = SceneManagerInstance.get();\n\n        this.totalChildren = 0;\n        this.totalChildrenQuery = defineQuery([ this.tag ]);\n        this.dirtyWorldQuery = defineQuery([ this.tag, Changed(WorldMatrix2DComponent) ]);\n\n        //  * 4 because each Game Object ID is added twice (render and post render) + each has the render type flag\n        this.renderList = new Uint32Array(GetWorldSize() * 4);\n        this.listLength = 0;\n\n        const id = this.id;\n\n        AddRenderDataComponent(id);\n        AddTransform2DComponent(id);\n\n        SetWorldID(id, id);\n\n        WorldList.get(scene).push(this);\n\n        Once(scene, SceneDestroyEvent, () => this.destroy());\n    }\n\n    beforeUpdate (delta: number, time: number): void\n    {\n        Emit(this, WorldEvents.WorldBeforeUpdateEvent, delta, time, this);\n    }\n\n    update (delta: number, time: number): void\n    {\n        if (!WillUpdate(this.id))\n        {\n            return;\n        }\n\n        Emit(this, WorldEvents.WorldUpdateEvent, delta, time, this);\n\n        super.update(delta, time);\n    }\n\n    afterUpdate (delta: number, time: number): void\n    {\n        Emit(this, WorldEvents.WorldAfterUpdateEvent, delta, time, this);\n    }\n\n    addToRenderList (id: number, renderType: number): void\n    {\n        let len = this.listLength;\n        const list = this.renderList;\n\n        list[len] = id;\n        list[len + 1] = renderType;\n\n        this.listLength += 2;\n\n        len += 2;\n\n        if (len === list.length)\n        {\n            const newList = new Uint32Array(len + (GetWorldSize() * 4));\n\n            newList.set(list, 0);\n\n            this.renderList = newList;\n        }\n    }\n\n    preRender (gameFrame: number, transformList: number[]): boolean\n    {\n        const sceneManager = this.sceneManager;\n\n        if (!this.isRenderable())\n        {\n            this.runRender = false;\n\n            sceneManager.updateWorldStats(this.totalChildren, 0, 0, 0);\n\n            return false;\n        }\n\n        //  Any modification of the display list makes this world dirty \u2705\n        //  Any modification of any transform for any member of this world, makes it dirty \u2705\n        //  Any modification of the visibility of a child makes it dirty\n\n        const id = this.id;\n\n        const dirtyDisplayList = HasDirtyDisplayList(id);\n\n        ResetWorldRenderData(id, gameFrame);\n\n        let isDirty = false;\n\n        if (dirtyDisplayList)\n        {\n            this.listLength = 0;\n\n            RebuildWorldList(this, id);\n\n            ClearDirtyDisplayList(id);\n\n            isDirty = true;\n\n            this.totalChildren = this.totalChildrenQuery(GameObjectWorld).length;\n        }\n\n        if (dirtyDisplayList || CheckDirtyTransforms(id, transformList))\n        {\n            RebuildWorldTransforms(this, id, transformList, false);\n\n            isDirty = true;\n        }\n\n        this.camera.dirtyRender = false;\n\n        this.runRender = (this.listLength > 0);\n\n        // const dirtyWorld = this.dirtyWorldQuery(GameObjectWorld).length;\n        // console.log('dirtyworld', dirtyWorld);\n        // sceneManager.updateWorldStats(this.totalChildren, this.listLength / 4, Number(dirtyDisplayList), dirtyWorld);\n\n        sceneManager.updateWorldStats(this.totalChildren, this.listLength / 4, Number(dirtyDisplayList), GetNumWorldTransforms());\n\n        return isDirty;\n    }\n\n    getTotalChildren (): number\n    {\n        if (HasDirtyDisplayList(this.id))\n        {\n            this.totalChildren = this.totalChildrenQuery(GameObjectWorld).length;\n        }\n\n        return this.totalChildren;\n    }\n\n    renderGL <T extends IRenderPass> (renderPass: T): void\n    {\n        Emit(this, WorldEvents.WorldRenderEvent, this);\n\n        const currentCamera = renderPass.current2DCamera;\n        const camera = this.camera;\n\n        if (!currentCamera || !Mat2dEquals(camera.worldTransform, currentCamera.worldTransform))\n        {\n            Flush(renderPass);\n        }\n\n        Begin(renderPass, camera);\n\n        const list = this.renderList;\n\n        for (let i = 0; i < this.listLength; i += 2)\n        {\n            const eid = list[i];\n            const type = list[i + 1];\n\n            const entry = GameObjectCache.get(eid);\n\n            if (type === 1)\n            {\n                entry.postRenderGL(renderPass);\n            }\n            else\n            {\n                entry.renderGL(renderPass);\n            }\n        }\n    }\n\n    postRenderGL <T extends IRenderPass> (renderPass: T): void\n    {\n        Emit(this, WorldEvents.WorldPostRenderEvent, renderPass, this);\n    }\n\n    shutdown (): void\n    {\n        //  Clear the display list and reset the camera, but leave\n        //  everything in place so we can return to this World again\n        //  at a later stage\n\n        RemoveChildren(this);\n\n        Emit(this, WorldEvents.WorldShutdownEvent, this);\n\n        ResetWorldRenderData(this.id, 0);\n\n        if (this.camera)\n        {\n            this.camera.reset();\n        }\n    }\n\n    destroy (reparentChildren?: IGameObject): void\n    {\n        super.destroy(reparentChildren);\n\n        this.shutdown();\n\n        if (this.camera)\n        {\n            this.camera.destroy();\n        }\n\n        this.camera = null;\n    }\n}\n", "import { IBaseCamera } from '../camera/IBaseCamera';\nimport { IBaseWorld } from './IBaseWorld';\nimport { IWorldRenderData } from './IWorldRenderData';\n\nexport function CreateWorldRenderData (world: IBaseWorld, camera: IBaseCamera): IWorldRenderData\n{\n    return {\n        world,\n        camera,\n        gameFrame: 0,\n        dirtyFrame: 0,\n        numRendered: 0,\n        numRenderable: 0\n    };\n}\n", "import { BaseWorld } from './BaseWorld';\nimport { CreateWorldRenderData } from './CreateWorldRenderData';\nimport { IScene } from '../scenes/IScene';\nimport { IStaticCamera } from '../camera/IStaticCamera';\nimport { IStaticWorld } from './IStaticWorld';\nimport { StaticCamera } from '../camera/StaticCamera';\n\n//  A Static World is designed specifically to have a bounds of a fixed size\n//  and a camera that doesn't move at all (no scrolling, rotation, etc)\n//  Because it has a fixed size, there is no camera culling enabled.\n//  Games that use this kind of world include Pacman, Bejeweled and 2048.\n\nexport class StaticWorld extends BaseWorld implements IStaticWorld\n{\n    camera: IStaticCamera;\n\n    constructor (scene: IScene)\n    {\n        super(scene);\n\n        this.camera = new StaticCamera();\n\n        this.renderData = CreateWorldRenderData(this, this.camera);\n    }\n}\n", "import { BackgroundColor, GlobalVar, Parent, Scenes, WebGL } from '../../../../phaser-genesis/src/config';\n\nimport { AddChild } from '../../../../phaser-genesis/src/display';\nimport { Between } from '../../../../phaser-genesis/src/math';\nimport { Game } from '../../../../phaser-genesis/src/Game';\nimport { ImageFile } from '../../../../phaser-genesis/src/loader/files/ImageFile';\nimport { Loader } from '../../../../phaser-genesis/src/loader';\nimport { Mouse } from '../../../../phaser-genesis/src/input/mouse/Mouse';\nimport { On } from '../../../../phaser-genesis/src/events';\nimport { Pane } from 'tweakpane';\nimport { Scene } from '../../../../phaser-genesis/src/scenes/Scene';\nimport { Sprite } from '../../../../phaser-genesis/src/gameobjects';\nimport { StaticWorld } from '../../../../phaser-genesis/src/world/StaticWorld';\n\nclass Demo extends Scene\n{\n    constructor ()\n    {\n        super();\n\n        const loader = new Loader();\n\n        loader.add(ImageFile('frog', 'assets/frog.png'));\n        loader.add(ImageFile('redfrog', 'assets/redfrog.png'));\n\n        loader.start().then(() => {\n\n            const world = new StaticWorld(this);\n\n            const frogs = [];\n\n\t\t\t/*\n\t\t\tfor (let i = 0; i < 10; i++)\n            {\n                const x = Between(0, 800);\n                const y = Between(0, 600);\n\n                AddChild(world, new Sprite(x, y, 'frog'));\n            }\n\n            for (let i = 0; i < 10; i++)\n            {\n                const x = Between(0, 800);\n                const y = Between(0, 600);\n\n                frogs.push(AddChild(world, new Sprite(x, y, 'redfrog')));\n            }\n\t\t\t*/\n\n            On(world, 'update', () => {\n\n                frogs.forEach(frog => {\n                    frog.rotation += 0.01;\n                });\n    \n            });\n\n            const mouse = new Mouse();\n\n            On(mouse, 'pointerdown', pointerX => {\n\n                const x = Between(0, 800);\n                const y = Between(0, 600);\n\n                if (pointerX < 400)\n                {\n                    for (let i = 0; i < 100; i++)\n                    {\n                        const x = Between(0, 800);\n                        const y = Between(0, 600);\n        \n                        AddChild(world, new Sprite(x, y, 'frog'));\n                    }\n                }\n                else\n                {\n                    for (let i = 0; i < 100; i++)\n                    {\n                        const x = Between(0, 800);\n                        const y = Between(0, 600);\n        \n                        frogs.push(AddChild(world, new Sprite(x, y, 'redfrog')));\n                    }\n                }\n\n            });\n\n        });\n    }\n}\n\nconst game = new Game(\n    WebGL(),\n    Parent('gameParent'),\n    GlobalVar('Phaser4'),\n    BackgroundColor(0x0a0a0a),\n    Scenes(Demo)\n);\n"],
  "mappings": "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",
  "names": []
}
